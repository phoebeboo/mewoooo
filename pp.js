// ==========================================
// X Social App - 独立JS整合文件
// 版本: 1.0
// 使用方式:
// 1. 在HTML中引入: <script src="x-social-app.js" defer></script>
// 2. 调用初始化: window.renderXSocialScreenProxy()

(function (window) {
 ('use strict');

  // 第一部分: CSS样式注入
  // ============================================
  function injectStyles() {
    const styleId = 'x-social-app-styles'; // 避免重复注入
    if (document.getElementById(styleId)) return;
    const style = document.createElement('style');
    style.id = styleId;
    style.textContent = `
 /* ========== X社交页面主题变量 ========== */
 /* 将CSS变量限定在X应用容器内,避免影响其他页面 */
 #x-social-screen {
 --x-bg-primary: #000; --x-bg-secondary: #1a1a1a; --x-bg-hover: rgba(255,255,255,0.03); --x-border-color: #2f3336; --x-text-primary: #fff; --x-text-secondary: #71767b; --x-text-tertiary: #8b98a5; --x-accent: #1d9bf0; --x-input-bg: #1a1a1a; --x-modal-overlay: rgba(91, 112, 131, 0.4); }
 /* 日间模式 */
 #x-social-screen.x-theme-light {
 --x-bg-primary: #fff; --x-bg-secondary: #f7f9f9; --x-bg-hover: rgba(0,0,0,0.03); --x-border-color: #eff3f4; --x-text-primary: #0f1419; --x-text-secondary: #536471; --x-text-tertiary: #5b7083; --x-accent: #1d9bf0; --x-input-bg: #f7f9f9; --x-modal-overlay: rgba(0, 0, 0, 0.4); }
 /* ========== X社交页面基础样式 ========== */
 /* 自定义滚动条样式 - X风格（细长短小亮蓝色） */
 .tab-content::-webkit-scrollbar,
 #x-comments-page::-webkit-scrollbar,
 .comments-container::-webkit-scrollbar,
 .settings-content::-webkit-scrollbar,
 .profile-content::-webkit-scrollbar,
 .tweets-container::-webkit-scrollbar,
 #detail-comments-container::-webkit-scrollbar,
 .modal-body::-webkit-scrollbar,
 #identity-characters-list::-webkit-scrollbar,
 #characters-list::-webkit-scrollbar,
 #x-presets-list::-webkit-scrollbar,
 .tweet-media-scrollable::-webkit-scrollbar {
 width: 3px; }
 .tab-content::-webkit-scrollbar-track,
 #x-comments-page::-webkit-scrollbar-track,
 .comments-container::-webkit-scrollbar-track,
 .settings-content::-webkit-scrollbar-track,
 .profile-content::-webkit-scrollbar-track,
 .tweets-container::-webkit-scrollbar-track,
 #detail-comments-container::-webkit-scrollbar-track,
 .modal-body::-webkit-scrollbar-track,
 #identity-characters-list::-webkit-scrollbar-track,
 #characters-list::-webkit-scrollbar-track,
 #x-presets-list::-webkit-scrollbar-track,
 .tweet-media-scrollable::-webkit-scrollbar-track {
 background: transparent; }
 .tab-content::-webkit-scrollbar-thumb,
 #x-comments-page::-webkit-scrollbar-thumb,
 .comments-container::-webkit-scrollbar-thumb,
 .settings-content::-webkit-scrollbar-thumb,
 .profile-content::-webkit-scrollbar-thumb,
 .tweets-container::-webkit-scrollbar-thumb,
 #detail-comments-container::-webkit-scrollbar-thumb,
 .modal-body::-webkit-scrollbar-thumb,
 #identity-characters-list::-webkit-scrollbar-thumb,
 #characters-list::-webkit-scrollbar-thumb,
 #x-presets-list::-webkit-scrollbar-thumb,
 .tweet-media-scrollable::-webkit-scrollbar-thumb {
 background-color: color-mix(in srgb, var(--x-accent) 50%, transparent); border-radius: 10px; min-height: 30px; max-height: 80px; }
 .tab-content::-webkit-scrollbar-thumb:hover,
 #x-comments-page::-webkit-scrollbar-thumb:hover,
 .comments-container::-webkit-scrollbar-thumb:hover,
 .settings-content::-webkit-scrollbar-thumb:hover,
 .profile-content::-webkit-scrollbar-thumb:hover,
 .tweets-container::-webkit-scrollbar-thumb:hover,
 #detail-comments-container::-webkit-scrollbar-thumb:hover,
 .modal-body::-webkit-scrollbar-thumb:hover,
 #identity-characters-list::-webkit-scrollbar-thumb:hover,
 #characters-list::-webkit-scrollbar-thumb:hover,
 #x-presets-list::-webkit-scrollbar-thumb:hover,
 .tweet-media-scrollable::-webkit-scrollbar-thumb:hover {
 background-color: color-mix(in srgb, var(--x-accent) , 0.8); }
 .tab-content::-webkit-scrollbar-thumb:active,
 #x-comments-page::-webkit-scrollbar-thumb:active,
 .comments-container::-webkit-scrollbar-thumb:active,
 .settings-content::-webkit-scrollbar-thumb:active,
 .profile-content::-webkit-scrollbar-thumb:active,
 .tweets-container::-webkit-scrollbar-thumb:active,
 #detail-comments-container::-webkit-scrollbar-thumb:active,
 .modal-body::-webkit-scrollbar-thumb:active,
 #identity-characters-list::-webkit-scrollbar-thumb:active,
 #characters-list::-webkit-scrollbar-thumb:active,
 #x-presets-list::-webkit-scrollbar-thumb:active,
 .tweet-media-scrollable::-webkit-scrollbar-thumb:active {
 background-color: var(--x-accent); }
 /* 修复X社交页面高度布局问题 */
 #x-social-screen {
 height: 100vh !important; overflow: hidden !important; background-color:var(--x-bg-primary) !important; color:var(--x-text-primary) !important; }
 #x-social-screen .x-pages-container {
 min-height: 0 !important; background-color:var(--x-bg-primary) !important; }
 #x-social-screen .x-page {
 min-height: 0 !important; background-color:var(--x-bg-primary) !important; }
 #x-social-screen .x-bottom-nav {
 flex-shrink: 0 !important; background-color:var(--x-bg-primary) !important; border-top: 1px solid var(--x-border-color) !important; }
 /* 所有页面容器使用主题背景色 */
 #x-home-page,
 #x-search-page,
 #x-notifications-page,
 #x-messages-page,
 #x-comments-page,
 #x-settings-page,
 #x-tweet-detail-page,
 #x-profile-page,
 #account-profile-page {
 background-color:var(--x-bg-primary) !important; }
 /* 顶部导航栏 - 限定在X应用内 */
 #x-social-screen .x-top-bar,
 #x-social-screen .comments-header,
 #x-social-screen .settings-header,
 #x-social-screen .profile-header,
 #x-social-screen .tweet-detail-header {
 background-color:var(--x-bg-primary) !important; border-bottom: 1px solid var(--x-border-color) !important; }
 /* 标签栏 - 限定在X应用内 */
 #x-social-screen .x-home-tabs,
 #x-social-screen .search-tabs,
 #x-social-screen .profile-tabs {
 background-color:var(--x-bg-primary) !important; border-bottom: 1px solid var(--x-border-color) !important; }
 /* 输入区域 - 限定在X应用内 */
 #x-social-screen .comment-input-area,
 #x-social-screen .detail-comment-input-area {
 background-color:var(--x-bg-primary) !important; border-top: 1px solid var(--x-border-color) !important; }
 /* 设置页面内容 - 限定在X应用内 */
 #x-social-screen .settings-content {
 background-color:var(--x-bg-primary) !important; }
 /* 搜索头部 - 限定在X应用内 */
 #x-social-screen .search-header {
 background-color:var(--x-bg-primary) !important; border-bottom: 1px solid var(--x-border-color) !important; }
 /* 搜索框 - 限定在X应用内 */
 #x-social-screen .search-box {
 background-color: var(--x-input-bg) !important; }
 /* 热搜视图 - 限定在X应用内 */
 #trending-view,
 #x-social-screen .trending-list {
 background-color:var(--x-bg-primary) !important; }
 /* 搜索结果内容 */
 #search-results-content {
 background-color:var(--x-bg-primary) !important; }
 /* 弹窗和模态框 - 限定在X应用内 */
 #x-social-screen .modal-content,
 #x-social-screen .compose-modal-content,
 #x-social-screen #edit-profile-modal .modal-content,
 #x-social-screen #compose-tweet-modal .compose-modal-content,
 #character-x-profile-modal > div > div,
 #relationship-modal > div > div,
 #category-manager-modal > div,
 #character-relationship-graph-modal > div > div,
 #edit-relationship-detail-modal > div > div,
 #npc-edit-modal > div > div {
 background-color:var(--x-bg-primary) !important; }
 /* 模态框头部 - 限定在X应用内 */
 #x-social-screen .modal-header,
 #x-social-screen .compose-header {
 background-color:var(--x-bg-primary) !important; border-bottom: 1px solid var(--x-border-color) !important; }
 /* 模态框主体内容区域 - 限定在X应用内 */
 #x-social-screen .modal-body,
 #x-social-screen .compose-body {
 background-color:var(--x-bg-primary) !important; }
 /* 表单元素 - 限定在X应用内 */
 #x-social-screen input[type="text"],
 #x-social-screen input[type="url"],
 #x-social-screen input[type="email"],
 #x-social-screen textarea,
 #x-social-screen select {
 background-color: var(--x-input-bg) !important; border-color: var(--x-border-color) !important; color:var(--x-text-primary) !important; }
 #x-social-screen input[type="text"]:focus,
 #x-social-screen input[type="url"]:focus,
 #x-social-screen input[type="email"]:focus,
 #x-social-screen textarea:focus,
 #x-social-screen select:focus {
 border-color: var(--x-accent) !important; }
 /* 引用推文 - 限定在X应用内 */
 #x-social-screen .quoted-tweet {
 border-color: var(--x-border-color) !important; background-color: var(--x-bg-hover) !important; }
 /* 回复连接线 - 限定在X应用内 */
 #x-social-screen .comment-item.has-replies::after,
 #x-social-screen .reply-item::before {
 background-color: var(--x-border-color) !important; border-color: var(--x-border-color) !important; }
 /* 卡片和容器 */
 #character-info-display,
 #character-relationships-list,
 #identity-characters-list,
 #characters-list,
 #npcs-list,
 #npc-bind-users {
 background-color: var(--x-input-bg) !important; border-color: var(--x-border-color) !important; }
 /* 内容容器 - 限定在X应用内 */
 #x-social-screen .tab-content,
 #x-social-screen .tweets-container,
 #x-social-screen .comments-container,
 #detail-comments-container,
 #tweet-detail-container,
 #x-profile-tweets-container,
 #account-tweets-container,
 #x-social-screen .profile-content {
 background-color:var(--x-bg-primary) !important; }
 /* 列表项悬停效果 - 限定在X应用内 */
 #x-social-screen .tweet-item:hover,
 #x-social-screen .comment-item:hover,
 #x-social-screen .trending-item:hover {
 background-color: var(--x-bg-hover) !important; }
 /* 账户资料页面 - 限定在X应用内 */
 #x-social-screen .user-info-section,
 #x-social-screen .edit-avatar-section,
 #x-social-screen .edit-form-section {
 background-color:var(--x-bg-primary) !important; }
 /* 设置区域的卡片 */
 #character-binding-area > div,
 #relationship-binding-area > div,
 #npc-binding-area > div {
 background-color: var(--x-input-bg) !important; border-color: var(--x-border-color) !important; }
 /* 热搜项目 - 限定在X应用内 */
 #x-social-screen .trending-item {
 background-color:var(--x-bg-primary) !important; }
 /* 推文详情页面 - 限定在X应用内 */
 #x-social-screen .tweet-detail-content {
 background-color:var(--x-bg-primary) !important; }
 /* 所有文本颜色 */
 #x-social-screen span,
 #x-social-screen div:not(.tweet-action):not(.comment-action) {
 color: inherit; }
 /* 标签文本 - 限定在X应用内 */
 #x-social-screen .x-tab {
 color:var(--x-text-secondary) !important; }
 #x-social-screen .x-tab.active {
 color:var(--x-text-primary) !important; }
 /* SVG图标颜色 - 非激活状态 */
 #x-social-screen .x-back-btn svg,
 #x-social-screen .x-settings svg,
 #x-social-screen .x-refresh-btn svg,
 #x-social-screen .settings-back-btn svg,
 #x-social-screen .comments-back-btn svg,
 #x-social-screen .profile-back-btn svg,
 #x-social-screen .tweet-detail-back-btn svg {
 fill: var(--x-text-primary) !important; }
 /* 次要SVG图标 */
 #x-social-screen .tweet-more {
 color:var(--x-text-secondary) !important; }
 /* 按钮文本颜色 */
 #x-social-screen button {
 color: inherit; }
 /* 占位符文本 */
 #x-social-screen ::placeholder {
 color:var(--x-text-secondary) !important; }
 /* 次要文本元素 */
 .tweet-time,
 .tweet-user-handle,
 .comment-time,
 .quoted-user-handle,
 .quoted-user-time {
 color:var(--x-text-secondary) !important; }
 /* 主要文本元素 */
 .tweet-user-name,
 .tweet-content,
 .comment-content,
 .quoted-user-name,
 .quoted-content {
 color:var(--x-text-primary) !important; }
 /* 热搜标题和类别 */
 .trending-title {
 color:var(--x-text-primary) !important; }
 .trending-category,
 .trending-count {
 color:var(--x-text-secondary) !important; }
 /* 关系预览区域 */
 #relationship-preview {
 background-color:var(--x-bg-secondary) !important; border-color: var(--x-border-color) !important; }
 /* 关系图编辑器 */
 #relationship-graph-canvas {
 background-color:var(--x-bg-primary) !important; }
 /* ========== 账户主页和详情页动态元素样式 ========== */
 /* 账户主页推文容器内的所有span（覆盖内联样式） */
 #account-tweets-container span[style*="color: #fff"],
 #account-tweets-container span[style*="color:#fff"],
 #account-tweets-container span[style*="color: rgb(255, 255, 255)"] {
 color:var(--x-text-primary) !important; }
 #account-tweets-container span[style*="color: #71767b"],
 #account-tweets-container span[style*="color:#71767b"] {
 color:var(--x-text-secondary) !important; }
 /* 账户主页推文容器内的div文本颜色 */
 #account-tweets-container div[style*="color: #fff"],
 #account-tweets-container div[style*="color:#fff"],
 #account-tweets-container div[style*="color: #e7e9ea"],
 #account-tweets-container div[style*="color:#e7e9ea"] {
 color:var(--x-text-primary) !important; }
 #account-tweets-container div[style*="color: #71767b"],
 #account-tweets-container div[style*="color:#71767b"] {
 color:var(--x-text-secondary) !important; }
 /* 账户主页推文容器内的边框 */
 #account-tweets-container > div[style*="border-bottom"] {
 border-bottom-color: var(--x-border-color) !important; }
 /* 账户主页推文容器内的背景卡片 */
 #account-tweets-container div[style*="background-color: #202327"],
 #account-tweets-container div[style*="background-color:#202327"] {
 background-color:var(--x-bg-secondary) !important; border-color: var(--x-border-color) !important; }
 /* 账户主页推文容器内的SVG图标 */
 #account-tweets-container svg[style*="fill: currentColor"] {
 fill: currentColor !important; }
 #account-tweets-container svg[style*="fill: #71767b"],
 #account-tweets-container svg[style*="fill:#71767b"] {
 fill: var(--x-text-secondary) !important; }
 /* 推文详情页评论容器内的所有文本 */
 #detail-comments-container span[style*="color: #fff"],
 #detail-comments-container span[style*="color:#fff"] {
 color:var(--x-text-primary) !important; }
 #detail-comments-container span[style*="color: #71767b"],
 #detail-comments-container span[style*="color:#71767b"] {
 color:var(--x-text-secondary) !important; }
 #detail-comments-container div[style*="color: #fff"],
 #detail-comments-container div[style*="color:#fff"] {
 color:var(--x-text-primary) !important; }
 #detail-comments-container div[style*="color: #71767b"],
 #detail-comments-container div[style*="color:#71767b"] {
 color:var(--x-text-secondary) !important; }
 /* 推文详情页评论容器内的边框和连接线 */
 #detail-comments-container div[style*="border-bottom"] {
 border-bottom-color: var(--x-border-color) !important; }
 #detail-comments-container div[style*="background-color: #2f3336"],
 #detail-comments-container div[style*="background-color:#2f3336"] {
 background-color: var(--x-border-color) !important; }
 /* 推文详情页评论容器内的卡片背景 */
 #detail-comments-container div[style*="background-color: #202327"],
 #detail-comments-container div[style*="background-color:#202327"],
 #detail-comments-container div[style*="background-color: #1a1a1a"],
 #detail-comments-container div[style*="background-color:#1a1a1a"] {
 background-color:var(--x-bg-secondary) !important; border-color: var(--x-border-color) !important; }
 /* 推文详情容器内的所有文本 */
 #tweet-detail-container span[style*="color: #fff"],
 #tweet-detail-container span[style*="color:#fff"] {
 color:var(--x-text-primary) !important; }
 #tweet-detail-container span[style*="color: #71767b"],
 #tweet-detail-container span[style*="color:#71767b"] {
 color:var(--x-text-secondary) !important; }
 #tweet-detail-container div[style*="color: #fff"],
 #tweet-detail-container div[style*="color:#fff"] {
 color:var(--x-text-primary) !important; }
 #tweet-detail-container div[style*="color: #71767b"],
 #tweet-detail-container div[style*="color:#71767b"] {
 color:var(--x-text-secondary) !important; }
 /* 推文详情容器内的边框 */
 #tweet-detail-container div[style*="border-bottom"],
 #tweet-detail-container div[style*="border-top"] {
 border-color: var(--x-border-color) !important; }
 /* 所有动态生成的互动按钮悬停效果 */
 #account-tweets-container div[style*="cursor: pointer"],
 #detail-comments-container div[style*="cursor: pointer"],
 #tweet-detail-container div[style*="cursor: pointer"] {
 color: inherit !important; }
 /* 蓝色高亮文本（@提及、链接等） */
 span[style*="color: var(--x-accent)"],
 span[style*="color:#1d9bf0"],
 div[style*="color: var(--x-accent)"],
 div[style*="color:#1d9bf0"] {
 color: var(--x-accent) !important; }
 /* 账户主页标签栏的"已置顶"文本 */
 #account-tweets-container span[style*="color: #71767b"][style*="font-size: 13px"][style*="font-weight: 700"] {
 color:var(--x-text-secondary) !important; }
 /* 账户主页的所有互动数字 */
 #account-tweets-container span[style*="font-size: 13px"]:not([style*="font-weight"]) {
 color:var(--x-text-secondary) !important; }
 /* ========== 角色X资料设置弹窗样式修复 ========== */
 /* 弹窗背景遮罩 */
 #character-x-profile-modal[style*="background-color: rgba(0,0,0,0.8)"],
 #relationship-modal[style*="background-color: rgba(0,0,0,0.8)"] {
 background-color: rgba(0,0,0,0.6) !important; }
 /* 弹窗主容器 */
 #character-x-profile-modal > div > div[style*="background-color:#000"],
 #relationship-modal > div > div[style*="background-color:#000"] {
 background-color:var(--x-bg-primary) !important; border-color: var(--x-border-color) !important; }
 /* 弹窗头部 */
 #character-x-profile-modal h2,
 #character-x-profile-modal h3,
 #relationship-modal h3 {
 color:var(--x-text-primary) !important; }
 /* 弹窗头部关闭按钮 */
 #character-x-profile-modal button[onclick*="close"] svg,
 #relationship-modal button[onclick*="close"] svg {
 fill: var(--x-text-secondary) !important; }
 /* 弹窗所有边框 */
 #character-x-profile-modal div[style*="border-bottom: 1px solid #333"],
 #character-x-profile-modal div[style*="border: 1px solid #333"],
 #relationship-modal div[style*="border-bottom: 1px solid #333"] {
 border-color: var(--x-border-color) !important; }
 /* 角色信息显示区域 */
 #character-info-display[style*="background-color: #0a0a0a"] {
 background-color:var(--x-bg-secondary) !important; }
 /* 弹窗内所有label文字 */
 #character-x-profile-modal label,
 #relationship-modal label {
 color:var(--x-text-primary) !important; }
 /* 弹窗内所有次要文字 */
 #character-x-profile-modal div[style*="color: #71767b"],
 #relationship-modal div[style*="color: #71767b"] {
 color:var(--x-text-secondary) !important; }
 /* 弹窗内所有输入框 */
 #character-x-profile-modal input[type="text"],
 #character-x-profile-modal input[type="url"],
 #character-x-profile-modal textarea,
 #character-x-profile-modal select,
 #relationship-modal input[type="text"],
 #relationship-modal textarea,
 #relationship-modal select {
 background-color: var(--x-input-bg) !important; border-color: var(--x-border-color) !important; color:var(--x-text-primary) !important; }
 /* 输入框焦点状态 */
 #character-x-profile-modal input:focus,
 #character-x-profile-modal textarea:focus,
 #character-x-profile-modal select:focus,
 #relationship-modal input:focus,
 #relationship-modal textarea:focus,
 #relationship-modal select:focus {
 border-color: var(--x-accent) !important; }
 /* 弹窗内的头像预览 */
 #character-x-avatar,
 #character-x-cover-preview {
 border-color: var(--x-border-color) !important; }
 /* 角色X资料弹窗头像填充 */
 #character-x-avatar {
 object-fit: cover !important; overflow: hidden !important; box-sizing: border-box !important; }
 /* 弹窗内的span文字 */
 #character-x-profile-modal span[style*="color: #fff"],
 #relationship-modal span[style*="color: #fff"] {
 color:var(--x-text-primary) !important; }
 #character-x-profile-modal span[style*="color: #71767b"],
 #relationship-modal span[style*="color: #71767b"] {
 color:var(--x-text-secondary) !important; }
 /* 提示框背景 */
 #character-x-profile-modal div[style*="background-color: color-mix(in srgb, var(--x-accent) , 0.1)"] {
 background-color: color-mix(in srgb, var(--x-accent) , 0.1) !important; border-color: var(--x-accent) !important; }
 /* 提示框内的文字 */
 #character-x-profile-modal div[style*="color: var(--x-accent)"] {
 color: var(--x-accent) !important; }
 /* 弹窗内的按钮 */
 #character-x-profile-modal button[type="button"][style*="background-color: transparent"],
 #relationship-modal button[type="button"][style*="background-color: transparent"] {
 border-color: var(--x-border-color) !important; color:var(--x-text-primary) !important; }
 /* ========== X设置页面样式修复 ========== */
 /* 设置页面头部 */
 .settings-header[style*="background-color:#000"] {
 background-color:var(--x-bg-primary) !important; border-bottom-color: var(--x-border-color) !important; }
 /* 设置页面标题和返回按钮 */
 .settings-header span[style*="color: #fff"] {
 color:var(--x-text-primary) !important; }
 .settings-back-btn svg[style*="fill: #fff"] {
 fill: var(--x-text-primary) !important; }
 /* 主题切换按钮图标 */
 #theme-icon-dark[style*="fill: #fff"] {
 fill: var(--x-text-primary) !important; }
 #theme-icon-light[style*="fill: #000"] {
 fill: var(--x-text-primary) !important; }
 /* 设置页面所有label */
 #x-settings-page label {
 color:var(--x-text-primary) !important; }
 /* 设置页面所有次要文字 */
 #x-settings-page p[style*="color: #71767b"],
 #x-settings-page div[style*="color: #71767b"] {
 color:var(--x-text-secondary) !important; }
 /* 设置页面所有输入框和文本域 */
 #x-settings-page textarea,
 #x-settings-page input[type="text"] {
 background-color: var(--x-input-bg) !important; border-color: var(--x-border-color) !important; color:var(--x-text-primary) !important; }
 /* 设置页面输入框焦点状态 */
 #x-settings-page textarea:focus,
 #x-settings-page input:focus {
 border-color: var(--x-accent) !important; }
 /* 设置页面所有容器背景 */
 #x-settings-page div[style*="background-color: #1a1a1a"] {
 background-color:var(--x-bg-secondary) !important; border-color: var(--x-border-color) !important; }
 /* 设置页面所有容器边框 */
 #x-settings-page div[style*="border: 1px solid #333"],
 #x-settings-page div[style*="border-bottom: 1px solid #333"],
 #x-settings-page div[style*="border-top: 1px solid #333"] {
 border-color: var(--x-border-color) !important; }
 /* 角色关系预览区域 */
 #relationship-preview[style*="background-color: #0a0a0a"] {
 background-color:var(--x-bg-secondary) !important; border-color: var(--x-border-color) !important; }
 /* 关系预览占位符文字 */
 #relationship-preview-placeholder {
 color:var(--x-text-secondary) !important; }
 /* 关系统计框 */
 #relationship-stats[style*="background-color: color-mix(in srgb, var(--x-accent) , 0.1)"] {
 background-color: color-mix(in srgb, var(--x-accent) , 0.1) !important; }
 #relationship-stats div[style*="color: var(--x-accent)"] {
 color: var(--x-accent) !important; }
 /* 切换开关背景 - 限定在X应用内 */
 #x-social-screen .toggle-switch[style*="background-color: #333"] {
 background-color: var(--x-border-color) !important; }
 /* 切换开关圆圈 - 限定在X应用内 */
 #x-social-screen .toggle-circle[style*="background-color:#fff"] {
 background-color:var(--x-text-primary) !important; }
 /* 设置页面标题文字 */
 #x-settings-page div[style*="color: #fff"] {
 color:var(--x-text-primary) !important; }
 /* 预设管理区域 - 限定在X应用内 */
 #x-social-screen .preset-management h3 {
 color:var(--x-text-primary) !important; }
 /* NPC列表和角色列表容器 */
 #npcs-list,
 #characters-list {
 background-color: transparent !important; }
 /* 底部导航栏图标颜色 - 限定在X应用内 */
 #x-social-screen .x-nav-item svg {
 fill: var(--x-text-secondary) !important; }
 #x-social-screen .x-nav-item.active svg {
 fill: var(--x-accent) !important; }
 /* 底部导航栏的高亮点 - 限定在X应用内 */
 #x-social-screen .x-nav-item .nav-highlight {
 background-color: var(--x-accent) !important; }
 /* 浮动按钮 - 限定在X应用内 */
 #x-social-screen .compose-btn {
 background-color: var(--x-accent) !important; }
 /* ========== 用户主页样式修复 ========== */
 /* 用户头像边框颜色和填充 - 更强制性地覆盖 */
 #x-profile-main-avatar {
 border: 5px solid var(--x-bg-primary) !important; object-fit: cover !important; background-color:var(--x-bg-primary) !important; box-sizing: border-box !important; overflow: hidden !important; }
 #edit-main-avatar {
 border: 4px solid var(--x-bg-primary) !important; object-fit: cover !important; background-color:var(--x-bg-primary) !important; box-sizing: border-box !important; overflow: hidden !important; }
 /* 用户头像在账户主页 */
 #account-avatar-image {
 border: 4px solid var(--x-bg-primary) !important; object-fit: cover !important; background-color:var(--x-bg-primary) !important; box-sizing: border-box !important; overflow: hidden !important; }
 /* 用户名和关注数据 */
 #x-profile-user-name,
 #x-profile-following-count,
 #x-profile-followers-count {
 color:var(--x-text-primary) !important; }
 /* 用户简介 */
 #x-profile-bio {
 color:var(--x-text-primary) !important; }
 /* 编辑资料按钮 */
 .user-info-section button {
 color:var(--x-text-primary) !important; border-color: var(--x-border-color) !important; }
 /* ========== 角色信息显示区域修复 ========== */
 /* 角色信息显示区域内的所有文字 */
 #character-info-display div[style*="color: #fff"] {
 color:var(--x-text-primary) !important; }
 #character-info-display div[style*="color: #71767b"] {
 color:var(--x-text-secondary) !important; }
 /* ========== 搜索结果用户卡片修复 ========== */
 /* 搜索结果中的用户卡片边框 */
 #search-results-content > div[style*="border-bottom: 1px solid #2f3336"] {
 border-bottom-color: var(--x-border-color) !important; }
 /* 搜索结果中的用户名 */
 #search-results-content span[style*="color: #fff"] {
 color:var(--x-text-primary) !important; }
 /* 搜索结果中的用户句柄 */
 #search-results-content div[style*="color: #71767b"] {
 color:var(--x-text-secondary) !important; }
 /* 搜索结果中的用户简介 */
 #search-results-content div[style*="color: #e7e9ea"] {
 color:var(--x-text-primary) !important; }
 /* ========== NPC编辑弹窗修复 ========== */
 /* NPC弹窗背景 */
 #npc-edit-modal > div[style*="background-color:#000"] {
 background-color:var(--x-bg-primary) !important; }
 /* NPC弹窗头部边框 */
 #npc-edit-modal div[style*="border-bottom: 1px solid #2f3336"] {
 border-bottom-color: var(--x-border-color) !important; }
 /* NPC弹窗标题 */
 #npc-modal-title {
 color:var(--x-text-primary) !important; }
 /* NPC弹窗关闭按钮图标 */
 #npc-edit-modal svg[style*="fill: #fff"] {
 fill: var(--x-text-primary) !important; }
 /* NPC弹窗所有label */
 #npc-edit-modal label {
 color:var(--x-text-secondary) !important; }
 /* NPC弹窗所有输入框和文本域 */
 #npc-edit-modal input,
 #npc-edit-modal textarea {
 background-color:var(--x-bg-secondary) !important; border-color: var(--x-border-color) !important; color:var(--x-text-primary) !important; }
 /* NPC弹窗输入框焦点状态 */
 #npc-edit-modal input:focus,
 #npc-edit-modal textarea:focus {
 border-color: var(--x-accent) !important; }
 /* NPC绑定用户列表容器 */
 #npc-bind-users {
 background-color:var(--x-bg-secondary) !important; border-color: var(--x-border-color) !important; }
 /* ========== NPC列表修复 ========== */
 /* NPC列表项背景和边框 */
 #npcs-list > div[style*="background-color: #0a0a0a"] {
 background-color:var(--x-bg-secondary) !important; border-color: var(--x-border-color) !important; }
 /* NPC列表中的主要文字 */
 #npcs-list div[style*="color: #fff"] {
 color:var(--x-text-primary) !important; }
 /* NPC列表中的次要文字 */
 #npcs-list div[style*="color: #71767b"] {
 color:var(--x-text-secondary) !important; }
 /* NPC列表项边框 */
 #npcs-list > div[style*="border: 1px solid #2f3336"] {
 border-color: var(--x-border-color) !important; }
 /* NPC列表空状态文字 */
 #npcs-list p[style*="color: #71767b"] {
 color:var(--x-text-secondary) !important; }
 /* ========== 角色关系册修复 ========== */
 /* 角色关系册管理区域容器 */
 #relationship-binding-area > div[style*="background-color: #1a1a1a"] {
 background-color:var(--x-bg-secondary) !important; border-color: var(--x-border-color) !important; }
 /* 角色关系册标题 */
 #relationship-binding-area div[style*="color: #fff"] {
 color:var(--x-text-primary) !important; }
 /* 角色关系册次要文字 */
 #relationship-binding-area div[style*="color: #71767b"] {
 color:var(--x-text-secondary) !important; }
 /* 角色关系列表项 */
 #relationship-links-list > div[style*="background-color: #1a1a1a"] {
 background-color:var(--x-bg-secondary) !important; border-color: var(--x-border-color) !important; }
 /* 角色关系列表中的文字 */
 #relationship-links-list span[style*="color: #fff"] {
 color:var(--x-text-primary) !important; }
 #relationship-links-list span[style*="color: #71767b"] {
 color:var(--x-text-secondary) !important; }
 #relationship-links-list div[style*="color: #71767b"] {
 color:var(--x-text-secondary) !important; }
 /* 角色关系列表项的边框 */
 #relationship-links-list div[style*="border-top: 1px solid #2f3336"] {
 border-top-color: var(--x-border-color) !important; }
 /* 角色关系列表空状态 */
 #relationship-links-list > div[style*="color: #71767b"] {
 color:var(--x-text-secondary) !important; }
 /* 角色关系详情弹窗背景 */
 #relationship-detail-modal > div > div[style*="background-color:#000"] {
 background-color:var(--x-bg-primary) !important; border-color: var(--x-border-color) !important; }
 /* 角色关系详情弹窗标题和label */
 #relationship-detail-modal h3,
 #relationship-detail-modal label {
 color:var(--x-text-primary) !important; }
 /* 角色关系详情弹窗次要文字 */
 #relationship-detail-modal div[style*="color: #71767b"] {
 color:var(--x-text-secondary) !important; }
 /* 角色关系详情弹窗输入框 */
 #relationship-detail-modal input,
 #relationship-detail-modal textarea,
 #relationship-detail-modal select {
 background-color: var(--x-input-bg) !important; border-color: var(--x-border-color) !important; color:var(--x-text-primary) !important; }
 /* 角色关系详情弹窗输入框焦点 */
 #relationship-detail-modal input:focus,
 #relationship-detail-modal textarea:focus,
 #relationship-detail-modal select:focus {
 border-color: var(--x-accent) !important; }
 /* 角色关系详情弹窗边框 */
 #relationship-detail-modal div[style*="border: 1px solid #333"],
 #relationship-detail-modal div[style*="border-bottom: 1px solid #333"] {
 border-color: var(--x-border-color) !important; }
 /* 角色关系详情弹窗关闭按钮 */
 #relationship-detail-modal button[onclick*="close"] svg {
 fill: var(--x-text-secondary) !important; }
 /* ========== 角色关系图编辑器弹窗修复 ========== */
 /* 角色关系图弹窗背景 */
 #character-relationship-graph-modal > div[style*="background-color:#000"] {
 background-color:var(--x-bg-primary) !important; border-color: var(--x-border-color) !important; }
 /* 角色关系图弹窗头部 */
 #character-relationship-graph-modal h2 {
 color:var(--x-text-primary) !important; }
 /* 角色关系图弹窗统计文字 */
 #character-relationship-graph-modal div[style*="color: #71767b"] {
 color:var(--x-text-secondary) !important; }
 /* 角色关系图弹窗关闭按钮图标 */
 #character-relationship-graph-modal svg[style*="fill: #fff"] {
 fill: var(--x-text-primary) !important; }
 /* 角色关系图工具栏 */
 #character-relationship-graph-modal div[style*="background-color: #0a0a0a"] {
 background-color:var(--x-bg-secondary) !important; }
 /* 角色关系图工具栏提示文字 */
 #character-relationship-graph-modal > div > div:nth-child(2) div[style*="color: #71767b"] {
 color:var(--x-text-secondary) !important; }
 /* 角色关系图画布区域背景 */
 #character-relationship-graph-modal div[style*="height: 500px"][style*="background-color:#000"] {
 background-color:var(--x-bg-primary) !important; }
 /* 角色关系图空状态图标 */
 #graph-empty-state svg {
 fill: var(--x-border-color) !important; }
 /* 角色关系图底部按钮区域 */
 #character-relationship-graph-modal > div > div:last-child[style*="background-color:#000"] {
 background-color:var(--x-bg-primary) !important; }
 /* 角色关系图底部取消按钮 */
 #character-relationship-graph-modal button[onclick*="closeCharacter"] {
 border-color: var(--x-border-color) !important; color:var(--x-text-primary) !important; }
 /* 关系列表区域标题 */
 #character-relationship-graph-modal div[style*="padding: 12px 20px"] div[style*="color: #fff"] {
 color:var(--x-text-primary) !important; }
 /* 角色关系图边框 */
 #character-relationship-graph-modal div[style*="border: 1px solid #333"],
 #character-relationship-graph-modal div[style*="border-bottom: 1px solid #333"] {
 border-color: var(--x-border-color) !important; }
 /* 角色关系图画布容器 */
 #character-relationship-graph-modal > div[style*="border: 1px solid #333"] {
 border-color: var(--x-border-color) !important; }
 /* 角色关系图空状态 */
 #graph-empty-state div[style*="color: #71767b"] {
 color:var(--x-text-secondary) !important; }
 /* 关系列表标题文字 */
 #relationship-links-list-container h3 {
 color:var(--x-text-primary) !important; }
 /* 关系列表空状态 */
 #relationship-links-list div[style*="color: #71767b"] {
 color:var(--x-text-secondary) !important; }
 /* 编辑关系详情弹窗背景遮罩 */
 #edit-relationship-detail-modal[style*="background-color: rgba(0, 0, 0"] {
 background-color: rgba(0, 0, 0, 0.85) !important; }
 /* 编辑关系详情弹窗主容器 */
 #edit-relationship-detail-modal > div > div[style*="background-color:#000"] {
 background-color:var(--x-bg-primary) !important; border-color: var(--x-border-color) !important; }
 /* 编辑关系详情弹窗标题 */
 #edit-relationship-detail-modal h3 {
 color:var(--x-text-primary) !important; }
 /* 编辑关系详情弹窗label */
 #edit-relationship-detail-modal label {
 color:var(--x-text-primary) !important; }
 /* 编辑关系详情弹窗次要文字 */
 #edit-relationship-detail-modal div[style*="color: #71767b"] {
 color:var(--x-text-secondary) !important; }
 /* 编辑关系详情弹窗角色信息区域 */
 #relationship-characters-info {
 background-color:var(--x-bg-secondary) !important; border-color: var(--x-border-color) !important; }
 /* 编辑关系详情弹窗角色名称 */
 #char-a-name,
 #char-b-name {
 color:var(--x-text-primary) !important; }
 /* 编辑关系详情弹窗箭头符号 */
 #relationship-characters-info div[style*="color: #71767b"] {
 color:var(--x-text-secondary) !important; }
 /* 编辑关系详情弹窗关闭按钮图标 */
 #edit-relationship-detail-modal svg[style*="fill: #fff"] {
 fill: var(--x-text-primary) !important; }
 /* 编辑关系详情弹窗输入框 */
 #edit-relationship-detail-modal input,
 #edit-relationship-detail-modal textarea {
 background-color: var(--x-input-bg) !important; border-color: var(--x-border-color) !important; color:var(--x-text-primary) !important; }
 /* 编辑关系详情弹窗输入框焦点 */
 #edit-relationship-detail-modal input:focus,
 #edit-relationship-detail-modal textarea:focus {
 border-color: var(--x-accent) !important; }
 /* 编辑关系详情弹窗边框 */
 #edit-relationship-detail-modal div[style*="border: 1px solid #333"],
 #edit-relationship-detail-modal div[style*="border-bottom: 1px solid #333"] {
 border-color: var(--x-border-color) !important; }
 /* 编辑关系详情弹窗关闭按钮 */
 #edit-relationship-detail-modal button[onclick*="close"] svg {
 fill: var(--x-text-secondary) !important; }
 /* 个人资料标签栏 - 激活状态 - 限定在X应用内 */
 #x-social-screen .profile-tab.active {
 color:var(--x-text-primary) !important; font-weight: 700 !important; }
 /* 个人资料标签栏 - 非激活状态 - 限定在X应用内 */
 #x-social-screen .profile-tab:not(.active) {
 color:var(--x-text-secondary) !important; }
 /* 个人资料页面的其他文本 */
 #x-profile-header-name {
 color:var(--x-text-primary) !important; }
 /* 用户主页顶部功能按钮图标 - 限定在X应用内 */
 #x-social-screen .profile-header svg {
 fill: var(--x-text-primary) !important; }
 /* 返回按钮 - 限定在X应用内 */
 #x-social-screen .profile-back-btn svg {
 fill: var(--x-text-primary) !important; }
 /* 提问箱和更多选项按钮的图标 */
 #x-profile-page .profile-header > div > div svg {
 fill: var(--x-text-primary) !important; }
 /* ========== 推文详情页样式修复 ========== */
 /* 详情页顶栏背景和边框 */
 .tweet-detail-header {
 background-color:var(--x-bg-primary) !important; border-bottom: 1px solid var(--x-border-color) !important; }
 /* 详情页顶栏标题和返回按钮 */
 .tweet-detail-header span {
 color:var(--x-text-primary) !important; }
 .tweet-detail-header svg,
 .tweet-detail-back-btn svg {
 fill: var(--x-text-primary) !important; }
 /* 详情页主要内容区域 */
 #x-tweet-detail-page {
 background-color:var(--x-bg-primary) !important; }
 #tweet-detail-container {
 background-color:var(--x-bg-primary) !important; }
 /* 详情页推文内容区域 */
 .tweet-detail-content {
 background-color:var(--x-bg-primary) !important; }
 /* 详情页推文用户名和内容 */
 #tweet-detail-container .tweet-user-name,
 #tweet-detail-container .tweet-content,
 #x-tweet-detail-page .tweet-user-name,
 #x-tweet-detail-page .tweet-content {
 color:var(--x-text-primary) !important; }
 /* 详情页评论区域背景 */
 #detail-comments-container {
 background-color:var(--x-bg-primary) !important; }
 /* 详情页评论内容 */
 #detail-comments-container .comment-content,
 #detail-comments-container .tweet-user-name,
 #x-tweet-detail-page .comment-user-name {
 color:var(--x-text-primary) !important; }
 /* 详情页时间和其他次要文本 */
 #tweet-detail-container .tweet-time,
 #tweet-detail-container .tweet-user-handle,
 #detail-comments-container .tweet-user-handle,
 #detail-comments-container .comment-time,
 #x-tweet-detail-page .tweet-time,
 #x-tweet-detail-page .tweet-user-handle {
 color:var(--x-text-secondary) !important; }
 /* 详情页评论输入区域 */
 .detail-comment-input-area {
 background-color:var(--x-bg-primary) !important; border-top: 1px solid var(--x-border-color) !important; }
 .detail-comment-input-area textarea {
 background-color: var(--x-input-bg) !important; color:var(--x-text-primary) !important; border-color: var(--x-border-color) !important; }
 /* 详情页按钮颜色 */
 #reroll-replies-btn svg,
 .refresh-btn svg,
 #x-tweet-detail-page .refresh-btn svg {
 fill: var(--x-text-primary) !important; }
 /* 详情页所有span元素 */
 #x-tweet-detail-page span,
 #tweet-detail-container span {
 color: inherit; }
 /* 确保所有可滚动容器都有正确的高度设置 */
 .comments-container,
 .settings-content,
 .profile-content,
 .tab-content {
 min-height: 0 !important; }
 /* 确保推文容器也有正确的滚动 */
 .tweets-container {
 overflow-y: auto; min-height: 0; }
 /* 用户评论删除功能样式 */
 .comment-user-info {
 display: flex !important; align-items: center !important; gap: 4px !important; }
 .comment-delete-btn:hover {
 background-color: rgba(239, 68, 68, 0.1) !important; }
 .comment-delete-btn svg {
 transition: fill 0.2s ease; }
 .comment-delete-btn:hover svg {
 fill: #dc2626 !important; }
 /* 用户人设设置按钮样式 */
 .persona-setting-btn {
 box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); }
 .persona-setting-btn:hover {
 box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); }
 .persona-setting-btn:active {
 transform: scale(0.95) !important; }
 /* 推文项目 */
 #x-social-screen .tweet-item {
 padding: 15px; border-bottom: 1px solid var(--x-border-color); display: flex; gap: 12px; background-color:var(--x-bg-primary); }
 /* 用户头像 */
 #x-social-screen .tweet-avatar {
 width: 40px; height: 40px; border-radius: 50%; flex-shrink: 0; }
 /* 推文主要内容区域 */
 #x-social-screen .tweet-main {
 flex: 1; min-width: 0; }
 /* 用户信息行 */
 #x-social-screen .tweet-user-info {
 display: flex; align-items: center; gap: 5px; margin-bottom: 5px; }
 #x-social-screen .tweet-user-name {
 font-weight: 700; color:var(--x-text-primary); font-size: 15px; }
 #x-social-screen .tweet-verified {
 width: 18px; height: 18px; fill: var(--x-accent); }
 #x-social-screen .tweet-user-handle {
 color:var(--x-text-secondary); font-size: 15px; }
 #x-social-screen .tweet-time {
 color:var(--x-text-secondary); font-size: 15px; }
 #x-social-screen .tweet-more {
 margin-left: auto; color: #71767b; cursor: pointer; padding: 5px; border-radius: 50%; }
 #x-social-screen .tweet-more:hover {
 background-color: color-mix(in srgb, var(--x-accent) , 0.1); color: var(--x-accent); }
 /* 推文内容 */
 #x-social-screen .tweet-content {
 color:var(--x-text-primary); font-size: 15px; line-height: 1.3; margin-bottom: 12px; word-wrap: break-word; }
 /* 话题标签和提及的高亮样式 */
 #x-social-screen .hashtag,
 #x-social-screen .mention {
 color: var(--x-accent); text-decoration: none; cursor: pointer; }
 #x-social-screen .hashtag:hover,
 #x-social-screen .mention:hover {
 text-decoration: underline; }
 /* 媒体内容 */
 #x-social-screen .tweet-media {
 margin-bottom: 12px; border-radius: 16px; overflow: hidden; position: relative; }
 #x-social-screen .tweet-image {
 width: 100%; max-height: 300px; object-fit: cover; display: block; }
 /* 敏感内容遮罩 */
 #x-social-screen .sensitive-overlay {
 position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0, 0, 0, 0.8); display: flex; flex-direction: column; justify-content: center; align-items: center; color: #fff; cursor: pointer; }
 #x-social-screen .sensitive-text {
 font-size: 15px; font-weight: 700; margin-bottom: 8px; }
 #x-social-screen .sensitive-description {
 font-size: 13px; color: #71767b; text-align: center; padding: 0 20px; }
 /* 互动按钮 - 限定在X应用内 */
 #x-social-screen .tweet-actions {
 display: flex; justify-content: space-between; max-width: 425px; margin-top: 5px; }
 #x-social-screen .tweet-action {
 display: flex; align-items: center; gap: 5px; padding: 8px; border-radius: 50%; cursor: pointer; color: #71767b; font-size: 13px; transition: all 0.2s; }
 #x-social-screen .tweet-action:hover {
 background-color: color-mix(in srgb, var(--x-accent) , 0.1); }
 #x-social-screen .tweet-action.comment:hover {
 color: var(--x-accent); }
 #x-social-screen .tweet-action.retweet:hover {
 color: #00ba7c; }
 #x-social-screen .tweet-action.like:hover,
 #x-social-screen .tweet-action.like.liked {
 color: #f91880; }
 #x-social-screen .tweet-action.bookmark:hover {
 color: var(--x-accent); }
 #x-social-screen .tweet-action.share:hover {
 color: var(--x-accent); }
 #x-social-screen .action-icon {
 width: 18px; height: 18px; }
 /* 点赞动画效果 */
 #x-social-screen .like-animation {
 animation: likeHeartbeat 0.6s ease-in-out; }
 @keyframes likeHeartbeat {
 0% {
 transform: scale(1); }
 25% {
 transform: scale(1.2); }
 50% {
 transform: scale(1.4); }
 75% {
 transform: scale(1.2); }
 100% {
 transform: scale(1); }
 }
 #x-social-screen .tweet-action.like.liked .like-icon {
 fill: #f91880; }
 #x-social-screen .tweet-action.like.liked .like-count {
 color: #f91880; }
 /* 评论样式 */
 #x-social-screen .comment-item {
 padding: 15px; border-bottom: 1px solid var(--x-border-color); display: flex; gap: 12px; position: relative; background-color:var(--x-bg-primary); }
 /* 主评论后有回复时的连接线 */
 #x-social-screen .comment-item.has-replies::after {
 content: ''; position: absolute; left: 35px; /* 头像中心位置 */
 bottom: -1px; width: 1px; height: 28px; background-color: #2f3336; }
 #x-social-screen .comment-main {
 flex: 1; min-width: 0; }
 #x-social-screen .comment-user-info {
 display: flex; align-items: center; gap: 5px; margin-bottom: 5px; }
 #x-social-screen .comment-content {
 color:var(--x-text-primary); font-size: 15px; line-height: 1.3; margin-bottom: 8px; word-wrap: break-word; }
 #x-social-screen .comment-actions {
 display: flex; justify-content: flex-start; gap: 60px; margin-top: 5px; }
 #x-social-screen .comment-action {
 display: flex; align-items: center; gap: 5px; padding: 8px; border-radius: 50%; cursor: pointer; color: #71767b; font-size: 13px; transition: all 0.2s; }
 /* 回复评论样式 */
 #x-social-screen .reply-item {
 margin-left: 50px; /* 精确对齐主评论的头像右侧 */
 padding-left: 0; padding-top: 8px; padding-bottom: 8px; border-left: none; position: relative; display: flex; align-items: flex-start; gap: 12px; }
 #x-social-screen .reply-item::before {
 content: ''; position: absolute; left: -30px; top: 16px; width: 14px; height: 14px; border-left: 1px solid #2f3336; border-bottom: 1px solid #2f3336; border-bottom-left-radius: 6px; }
 #x-social-screen .reply-to {
 color: var(--x-accent); margin-right: 5px; font-weight: 400; }
 /* 回复评论的头像稍小一些 */
 #x-social-screen .reply-item .tweet-avatar {
 width: 32px; height: 32px; }
 /* 引用推文样式 */
 #x-social-screen .quoted-tweet {
 border: 1px solid #2f3336; border-radius: 16px; margin: 12px 0; padding: 12px; background-color: rgba(0, 0, 0, 0.3); transition: background-color 0.2s ease; cursor: pointer; }
 #x-social-screen .quoted-tweet:hover {
 background-color: rgba(255, 255, 255, 0.03); }
 #x-social-screen .quoted-user-info {
 display: flex; align-items: center; gap: 5px; margin-bottom: 8px; }
 #x-social-screen .quoted-user-avatar {
 width: 20px; height: 20px; border-radius: 50%; flex-shrink: 0; }
 #x-social-screen .quoted-user-name {
 font-weight: 600; color: #fff; font-size: 13px; }
 #x-social-screen .quoted-user-handle {
 color: #71767b; font-size: 13px; }
 #x-social-screen .quoted-user-time {
 color: #71767b; font-size: 13px; }
 #x-social-screen .quoted-content {
 color: #fff; font-size: 14px; line-height: 1.3; word-wrap: break-word; }
 #x-social-screen .quote-indicator {
 color: #71767b; font-size: 13px; margin-bottom: 8px; display: flex; align-items: center; gap: 4px; }
 #x-social-screen .quote-indicator svg {
 width: 16px; height: 16px; fill: currentColor; }
 /* 搜索页面样式 */
 #x-social-screen .search-header {
 padding: 12px 16px; background: #000; border-bottom: 1px solid #2f3336; }
 #x-social-screen .search-box {
 display: flex; align-items: center; background: #202327; border-radius: 20px; padding: 10px 16px; gap: 12px; }
 #x-social-screen .search-box svg {
 width: 20px; height: 20px; fill: #71767b; flex-shrink: 0; }
 #x-social-screen .search-box input {
 flex: 1; background: transparent; border: none; outline: none; color: #fff; font-size: 15px; }
 #x-social-screen .search-box input::placeholder {
 color: #71767b; }
 #x-social-screen .search-tabs {
 display: flex; align-items: center; padding: 0 16px; border-bottom: 1px solid #2f3336; gap: 24px; overflow-x: auto; -webkit-overflow-scrolling: touch; scrollbar-width: none; }
 #x-social-screen .search-tabs::-webkit-scrollbar {
 display: none; }
 #x-social-screen .search-tab {
 padding: 16px 0; cursor: pointer; color: #71767b; font-weight: 500; font-size: 15px; white-space: nowrap; position: relative; transition: color 0.2s; }
 #x-social-screen .search-tab.active {
 color: #fff; font-weight: 700; }
 #x-social-screen .search-tab.active::after {
 content: ''; position: absolute; bottom: 0; left: 0; right: 0; height: 4px; background: var(--x-accent); border-radius: 2px 2px 0 0; }
 #x-social-screen .search-tab:hover {
 color: #fff; }
 #x-social-screen .add-category-btn {
 display: flex; align-items: center; justify-content: center; width: 32px; height: 32px; border-radius: 50%; cursor: pointer; transition: background 0.2s; }
 #x-social-screen .add-category-btn svg {
 width: 20px; height: 20px; fill: #71767b; }
 #x-social-screen .add-category-btn:hover {
 background: color-mix(in srgb, var(--x-accent) , 0.1); }
 #x-social-screen .add-category-btn:hover svg {
 fill: var(--x-accent); }
 #x-social-screen .trending-list {
 flex: 1; overflow-y: auto; }
 #x-social-screen .trending-item {
 padding: 12px 16px; cursor: pointer; transition: background 0.2s; position: relative; }
 #x-social-screen .trending-item:hover {
 background: rgba(255, 255, 255, 0.03); }
 #x-social-screen .trending-header {
 display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 2px; }
 #x-social-screen .trending-category {
 color: #71767b; font-size: 14px; font-weight: 800; line-height: 16px; }
 #x-social-screen .trending-more {
 padding: 4px; border-radius: 50%; cursor: pointer; transition: background 0.2s; }
 #x-social-screen .trending-more:hover {
 background: color-mix(in srgb, var(--x-accent) , 0.1); }
 #x-social-screen .trending-more svg {
 width: 18px; height: 18px; fill: #71767b; }
 #x-social-screen .trending-title {
 color: #fff; font-size: 15px; font-weight: 700; line-height: 20px; margin-bottom: 2px; }
 #x-social-screen .trending-count {
 color: #71767b; font-size: 13px; line-height: 16px; font-weight: 400; }
 #x-social-screen .refresh-trends-btn {
 position: fixed; right: 20px; bottom: 80px; width: 56px; height: 56px; background: var(--x-accent); border-radius: 50%; border: none; cursor: pointer; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.4); display: none; align-items: center; justify-content: center; transition: transform 0.2s, background 0.2s; z-index: 100; }
 #x-social-screen .refresh-trends-btn:hover {
 background: #1a8cd8; transform: scale(1.05); }
 #x-social-screen .refresh-trends-btn:active {
 transform: scale(0.95); }
 #x-social-screen .refresh-trends-btn svg {
 width: 24px; height: 24px; fill: #fff; }
 #x-social-screen .refresh-trends-btn.spinning svg {
 animation: spin 1s linear infinite; }
 @keyframes spin {
 from { transform: rotate(0deg); }
 to { transform: rotate(360deg); }
 }
 /* 脉冲动画 */
 @keyframes pulse {
 0% {
 opacity: 1; transform: scale(1); }
 50% {
 opacity: 0.6; transform: scale(1.2); }
 100% {
 opacity: 1; transform: scale(1); }
 }
 /* 钱包成功弹窗入场动画 */
 @keyframes walletSuccessIn {
 from {
 opacity: 0; transform: scale(0.7) translateY(30px); }
 to {
 opacity: 1; transform: scale(1) translateY(0); }
 }
 /* 钱包成功图标检查动画 */
 @keyframes walletSuccessCheck {
 0% {
 opacity: 0; transform: scale(0.3); }
 50% {
 opacity: 1; transform: scale(1.1); }
 100% {
 opacity: 1; transform: scale(1); }
 }
 /* 钱包激活按钮加载动画 */
 @keyframes walletActivating {
 0% {
 background-position: 0% 50%; }
 50% {
 background-position: 100% 50%; }
 100% {
 background-position: 0% 50%; }
 }
`;
    document.head.appendChild(style);
    console.log('✅ X Social App: 样式已注入');
  }

  // 第二部分: HTML结构生成
  // ============================================
  function createXSocialHTML() {
    // 检查是否已经存在
    if (document.getElementById('x-social-screen')) {
      console.log('⚠️ X Social Screen 已存在，跳过创建');
      return;
    }
    const container = document.createElement('div');
    container.id = 'x-social-screen';
    container.className = 'screen';
    container.style.cssText =
      'background-color:var(--x-bg-primary); color:var(--x-text-primary); display: flex; flex-direction: column; height: 100vh; overflow: hidden;'; // 这里使用字符串模板或DOM操作创建完整的HTML结构
    container.innerHTML = `

<div class="x-top-bar"
 style="display: flex; justify-content: space-between; align-items: center; padding: 55px 15px 15px 15px; border-bottom: 1px solid #333; position: relative;">

 <div style="display: flex; align-items: center; gap: 12px;">
<div class="x-back-btn" onclick="showScreen('home-screen')" style="cursor: pointer;">
<svg viewBox="0 0 24 24" aria-hidden="true" style="width: 20px; height: 20px; fill: #fff;">
<g>
<path d="M7.414 13l5.043 5.04-1.414 1.42L3.586 12l7.457-7.46 1.414 1.42L7.414 11H21v2H7.414z"></path>
</g>
</svg>
</div>

<!-- 添加直播按钮 -->
<div class="x-live-btn" onclick="switchXPage('live')" style="cursor: pointer;">
<svg viewBox="0 0 24 24" aria-hidden="true" style="width: 20px; height: 20px; fill: none; stroke: #fff; stroke-width: 1; stroke-linecap: round; stroke-linejoin: round;">
<path d="M10.5 20h-5.5a2 2 0 0 1 -2 -2v-9a2 2 0 0 1 2 -2h1a2 2 0 0 0 2 -2a1 1 0 0 1 1 -1h6a1 1 0 0 1 1 1a2 2 0 0 0 2 2h1a2 2 0 0 1 2 2v2.5" />
<path d="M14.569 11.45a3 3 0 1 0 -4.518 3.83" />
<path d="M17.8 20.817l-2.172 1.138a.392 .392 0 0 1 -.568 -.41l.415 -2.411l-1.757 -1.707a.389 .389 0 0 1 .217 -.665l2.428 -.352l1.086 -2.193a.392 .392 0 0 1 .702 0l1.086 2.193l2.428 .352a.39 .39 0 0 1 .217 .665l-1.757 1.707l.414 2.41a.39 .39 0 0 1 -.567 .411l-2.172 -1.138z" />
</svg>
</div>
</div>

 <div class="x-profile-pic"
 style="display: flex; justify-content: center; align-items: center; position: absolute; left: 50%; transform: translateX(-50%);">
 <img id="top-bar-avatar"
 src="https://i.postimg.cc/pXxk1JXk/IMG-6442.jpg"
 alt="Profile"
 onclick="switchXPage('profile')"
 style="width: 36px; height: 36px; border-radius: 50%; cursor: pointer; transition: opacity 0.2s;"
 onmouseover="this.style.opacity='0.8'"
 onmouseout="this.style.opacity='1'">
 </div>

 <div style="display: flex; align-items: center; gap: 15px;">

 <div class="x-refresh-btn" onclick="refreshXTweets()" style="cursor: pointer;">
 <svg viewBox="0 0 24 24" aria-hidden="true" style="width: 22px; height: 22px; fill: #fff;">
 <g>
 <path
 d="M19 8l-4 4h3c0 3.31-2.69 6-6 6-1.01 0-1.97-.25-2.8-.7l-1.46 1.46C8.97 19.54 10.43 20 12 20c4.42 0 8-3.58 8-8h3l-4-4zM6 12c0-3.31 2.69-6 6-6 1.01 0 1.97.25 2.8.7l1.46-1.46C15.03 4.46 13.57 4 12 4c-4.42 0-8 3.58-8 8H1l4 4 4-4H6z">
 </path>
 </g>
 </svg>
 </div>

 <div class="x-settings" onclick="switchXPage('settings')" style="cursor: pointer;">
 <svg viewBox="0 0 24 24" aria-hidden="true" style="width: 24px; height: 24px; fill: #fff;">
 <g>
 <path
 d="M10.54 1.75h2.92l1.57 2.36c.11.17.32.25.53.21l2.53-.59 2.17 2.17-.58 2.54c-.05.2.04.41.21.53l2.36 1.57v2.92l-2.36 1.57c-.17.12-.26.33-.21.53l.58 2.54-2.17 2.17-2.53-.59c-.21-.04-.42.04-.53.21l-1.57 2.36h-2.92l-1.58-2.36c-.11-.17-.32-.25-.52-.21l-2.54.59-2.17-2.17.58-2.54c.05-.2-.03-.41-.21-.53l-2.35-1.57v-2.92L4.1 8.97c.18-.12.26-.33.21-.53L3.73 5.9 5.9 3.73l2.54.59c.2.04.41-.04.52-.21l1.58-2.36zm1.07 2l-.98 1.47C10.05 6.08 9 6.5 7.99 6.27l-1.46-.34-.6.6.33 1.46c.24 1.01-.18 2.07-1.05 2.64l-1.46.98v.78l1.46.98c.87.57 1.29 1.63 1.05 2.64l-.33 1.46.6.6 1.46-.34c1.01-.23 2.06.19 2.64 1.05l.98 1.47h.78l.97-1.47c.58-.86 1.63-1.28 2.65-1.05l1.45.34.61-.6-.34-1.46c-.23-1.01.18-2.07 1.05-2.64l1.47-.98v-.78l-1.47-.98c-.87-.57-1.28-1.63-1.05-2.64l.34-1.46-.61-.6-1.45.34c-1.02.23-2.07-.19-2.65-1.05l-.97-1.47h-.78zM12 10.5c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5c.82 0 1.5-.67 1.5-1.5s-.68-1.5-1.5-1.5zM8.5 12c0-1.93 1.56-3.5 3.5-3.5 1.93 0 3.5 1.57 3.5 3.5s-1.57 3.5-3.5 3.5c-1.94 0-3.5-1.57-3.5-3.5z">
 </path>
 </g>
 </svg>
 </div>
 </div>
</div>

<div class="x-pages-container"
 style="flex: 1; display: flex; flex-direction: column; overflow: hidden; min-height: 0; position: relative;">

 <div id="x-home-page" class="x-page active"
 style="flex: 1; display: flex; flex-direction: column; overflow: hidden; min-height: 0;">

 <div class="x-home-tabs" style="display: flex; border-bottom: 1px solid #333;">

 <div class="x-tab active" onclick="switchHomeTab('for-you')"
 style="flex: 1; text-align: center; padding: 15px 0; font-weight: 600; cursor: pointer; position: relative;">
 <span data-i18n="homeForYou">为你推荐</span>
 <div class="tab-indicator"
 style="position: absolute; bottom: 0; left: 10%; width: 80%; height: 2px; background-color: var(--x-accent); border-radius: 2px;">
 </div>
 </div>

 <div class="x-tab" onclick="switchHomeTab('following')"
 style="flex: 1; text-align: center; padding: 15px 0; font-weight: 600; cursor: pointer; position: relative; color: #71767b;">
 <span data-i18n="homeFollowing">正在关注</span>
 <div class="tab-indicator"
 style="position: absolute; bottom: 0; left: 10%; width: 80%; height: 2px; background-color: var(--x-accent); border-radius: 2px; display: none;">
 </div>
 </div>
 </div>

 <div id="for-you-content" class="tab-content active"
 style="flex: 1; display: flex; flex-direction: column; overflow-y: auto; min-height: 0;">

 <div class="tweets-container" style="padding: 0;">

 </div>
 </div>

 <div id="following-content" class="tab-content"
 style="flex: 1; display: none; flex-direction: column; overflow-y: auto; min-height: 0;">

 <div class="tweets-container" style="padding: 0;">

 </div>
 </div>

 <div class="compose-btn" onclick="openComposeTweetModal()"
 style="position: fixed; bottom: 80px; right: 20px; width: 56px; height: 56px; background-color: var(--x-accent); border-radius: 50%; display: flex; justify-content: center; align-items: center; box-shadow: 0 2px 10px rgba(0,0,0,0.3); cursor: pointer;">
 <svg viewBox="0 0 24 24" aria-hidden="true" style="width: 24px; height: 24px; fill: #fff; stroke-width: 2;">
 <g>
 <path d="M12 4L12 20M4 12L20 12" stroke="white" stroke-linecap="round"></path>
 </g>
 </svg>
 </div>
 </div>

 <div id="character-x-profile-modal"
 style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.8); z-index: 30; backdrop-filter: blur(8px);">
 <div style="display: flex; justify-content: center; align-items: center; height: 100%; padding: 20px;">
 <div
 style="background-color:#000; border: 1px solid #333; border-radius: 16px; width: 100%; max-width: 600px; max-height: 90vh; overflow-y: auto;">

 <div
 style="display: flex; align-items: center; justify-content: space-between; padding: 20px 20px 16px 20px; border-bottom: 1px solid #333;">
 <h2 style="color: #fff; font-size: 20px; font-weight: 700; margin: 0;">设置X资料</h2>
 <button onclick="closeCharacterXProfileModal()"
 style="background: none; border: none; color: #71767b; cursor: pointer; padding: 8px;">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: currentColor;">
 <path
 d="M18.36 6.64c.39.39.39 1.02 0 1.41L13.41 12l4.95 4.95c.39.39.39 1.02 0 1.41-.39.39-1.02.39-1.41 0L12 13.41l-4.95 4.95c-.39.39-1.02.39-1.41 0-.39-.39-.39-1.02 0-1.41L10.59 12 5.64 7.05c-.39-.39-.39-1.02 0-1.41.39-.39 1.02-.39 1.41 0L12 10.59l4.95-4.95c.39-.39 1.02-.39 1.41 0z" />
 </svg>
 </button>
 </div>

 <div id="character-info-display"
 style="padding: 20px; border-bottom: 1px solid #333; background-color: #0a0a0a;">

 </div>

 <div style="padding: 20px;">
 <form id="character-x-profile-form">

 <div style="margin-bottom: 24px;">
 <label
 style="display: block; color: #fff; font-size: 15px; font-weight: 600; margin-bottom: 12px;">X头像</label>
 <div style="display: flex; align-items: center; gap: 16px; margin-bottom: 12px;">
 <img id="character-x-avatar" src="" alt="X头像"
 style="width: 80px; height: 80px; border-radius: 50%; border: 3px solid #333; object-fit: cover; overflow: hidden; box-sizing: border-box;">
 <div style="flex: 1;">
 <div style="color: #71767b; font-size: 13px; margin-bottom: 8px;">头像链接</div>
 <input type="url" id="character-x-avatar-url" placeholder="https://example.com/avatar.jpg"
 style="width: 100%; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 14px; outline: none;"
 oninput="updateCharacterXAvatar(this.value)" onfocus="this.style.borderColor='var(--x-accent)'"
 onblur="this.style.borderColor='#333'">
 </div>
 </div>
 <div style="color: #71767b; font-size: 12px;">
 请输入图片链接URL，支持JPG、PNG、GIF格式
 </div>
 </div>

 <div style="margin-bottom: 20px;">
 <label
 style="display: block; color: #fff; font-size: 15px; font-weight: 600; margin-bottom: 8px;">X用户名</label>
 <input type="text" id="character-x-name" placeholder="显示名称"
 style="width: 100%; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 15px; outline: none;"
 maxlength="50">
 </div>

 <div style="margin-bottom: 20px;">
 <label
 style="display: block; color: #fff; font-size: 15px; font-weight: 600; margin-bottom: 8px;">X句柄</label>
 <div style="position: relative;">
 <span
 style="position: absolute; left: 12px; top: 50%; transform: translateY(-50%); color: #71767b; font-size: 15px;">@</span>
 <input type="text" id="character-x-handle" placeholder="username"
 style="width: 100%; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px 12px 12px 30px; font-size: 15px; outline: none;"
 maxlength="15">
 </div>
 </div>

 <div style="margin-bottom: 20px;">
 <label style="display: flex; align-items: center; gap: 12px; cursor: pointer;">
 <input type="checkbox" id="character-x-verified"
 style="width: 18px; height: 18px; accent-color: var(--x-accent);">
 <span style="color: #fff; font-size: 15px; font-weight: 600;">认证用户</span>
 <svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: var(--x-accent);">
 <path
 d="M22.5 12.5c0-1.58-.875-2.95-2.148-3.6.154-.435.238-.905.238-1.4 0-2.21-1.71-3.998-3.818-3.998-.47 0-.92.084-1.336.25C14.818 2.415 13.51 1.5 12 1.5s-2.816.917-3.437 2.25c-.415-.165-.866-.25-1.336-.25-2.11 0-3.818 1.79-3.818 4 0 .494.083.964.237 1.4-1.272.65-2.147 2.018-2.147 3.6 0 1.495.782 2.798 1.942 3.486-.02.17-.032.34-.032.514 0 2.21 1.708 4 3.818 4 .47 0 .92-.086 1.335-.25.62 1.334 1.926 2.25 3.437 2.25 1.512 0 2.818-.916 3.437-2.25.415.163.865.248 1.336.248 2.11 0 3.818-1.79 3.818-4 0-.174-.012-.344-.033-.513 1.158-.687 1.943-1.99 1.943-3.484zm-6.616-3.334l-4.334 6.5c-.145.217-.382.334-.625.334-.143 0-.288-.04-.416-.126l-2.5-1.668c-.326-.217-.413-.656-.196-.982.217-.326.656-.414.982-.196l1.875 1.25 3.75-5.625c.22-.33.66-.418.99-.196.33.22.418.66.196.99z" />
 </svg>
 </label>
 </div>

 <div style="margin-bottom: 24px;">
 <label style="display: block; color: #fff; font-size: 15px; font-weight: 600; margin-bottom: 12px;">背景图（封面图）</label>
 <div style="margin-bottom: 12px;">
 <img id="character-x-cover-preview" src="https://i.postimg.cc/qRzMB6nQ/default-cover.jpg" alt="背景图预览"
 style="width: 100%; height: 120px; border-radius: 8px; object-fit: cover; border: 1px solid #333;">
 </div>
 <div style="color: #71767b; font-size: 13px; margin-bottom: 8px;">背景图链接</div>
 <input type="url" id="character-x-cover-url" placeholder="https://example.com/cover.jpg"
 style="width: 100%; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 14px; outline: none;"
 oninput="updateCharacterXCover(this.value)" onfocus="this.style.borderColor='var(--x-accent)'"
 onblur="this.style.borderColor='#333'">
 <div style="color: #71767b; font-size: 12px; margin-top: 4px;">
 请输入图片链接URL，支持JPG、PNG、GIF格式
 </div>
 </div>

 <div style="margin-bottom: 24px;">
 <label style="display: block; color: #fff; font-size: 15px; font-weight: 600; margin-bottom: 8px;">自定义标签1</label>
 <div style="display: flex; gap: 8px; margin-bottom: 8px;">
 <input type="text" id="character-tag1-icon" placeholder="✨" maxlength="2" style="width: 50px; background-color: #1a1a1a; border: 1px solid #333; border-radius: 4px; color: #fff; padding: 12px; font-size: 17px; outline: none; text-align: center; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'">
 <input type="text" id="character-custom-tag1" placeholder="例如：科技博主" maxlength="30" style="flex: 1; background-color: #1a1a1a; border: 1px solid #333; border-radius: 4px; color: #fff; padding: 12px; font-size: 15px; outline: none; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'">
 </div>
 <div style="display: flex; gap: 8px; align-items: center;">
 <label style="color: #71767b; font-size: 12px; min-width: 40px;">颜色:</label>
 <input type="color" id="character-tag1-color" value="#71767b" style="width: 40px; height: 32px; border: 1px solid #333; border-radius: 4px; background: transparent; cursor: pointer; outline: none; ">
 </div>
 </div>

 <div style="margin-bottom: 24px;">
 <label style="display: block; color: #fff; font-size: 15px; font-weight: 600; margin-bottom: 8px;">自定义标签2</label>
 <div style="display: flex; gap: 8px; margin-bottom: 8px;">
 <input type="text" id="character-tag2-icon" placeholder="📅" maxlength="2" style="width: 50px; background-color: #1a1a1a; border: 1px solid #333; border-radius: 4px; color: #fff; padding: 12px; font-size: 17px; outline: none; text-align: center; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'">
 <input type="text" id="character-custom-tag2" placeholder="例如：2024年加入" maxlength="30" style="flex: 1; background-color: #1a1a1a; border: 1px solid #333; border-radius: 4px; color: #fff; padding: 12px; font-size: 15px; outline: none; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'">
 </div>
 <div style="display: flex; gap: 8px; align-items: center;">
 <label style="color: #71767b; font-size: 12px; min-width: 40px;">颜色:</label>
 <input type="color" id="character-tag2-color" value="#71767b" style="width: 40px; height: 32px; border: 1px solid #333; border-radius: 4px; background: transparent; cursor: pointer; outline: none; ">
 </div>
 </div>

 <div style="margin-bottom: 20px;">
 <label style="display: block; color: #fff; font-size: 15px; font-weight: 600; margin-bottom: 8px;">正在关注数量</label>
 <input type="text" id="character-following-count" placeholder="156, 1.2K, 2.5M等" maxlength="20" style="width: 100%; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 15px; outline: none; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'">
 <div style="color: #71767b; font-size: 12px; margin-top: 4px;">可输入任意数字、字母、符号组合</div>
 </div>

 <div style="margin-bottom: 20px;">
 <label style="display: block; color: #fff; font-size: 15px; font-weight: 600; margin-bottom: 8px;">关注者数量</label>
 <input type="text" id="character-followers-count" placeholder="89, 1.5K, 3.2M等" maxlength="20" style="width: 100%; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 15px; outline: none; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'">
 <div style="color: #71767b; font-size: 12px; margin-top: 4px;">可输入任意数字、字母、符号组合</div>
 </div>

 <div style="margin-bottom: 20px;">
 <label
 style="display: block; color: #fff; font-size: 15px; font-weight: 600; margin-bottom: 8px;">X简介</label>
 <textarea id="character-x-bio" placeholder="介绍一下这个角色在X上的身份..."
 style="width: 100%; min-height: 80px; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 15px; resize: vertical; outline: none; font-family: inherit;"
 maxlength="160"></textarea>
 <div style="text-align: right; color: #71767b; font-size: 13px; margin-top: 4px;">
 <span id="character-bio-count">0</span>/160
 </div>
 </div>

 <div style="margin-bottom: 20px;">
 <label
 style="display: block; color: #fff; font-size: 15px; font-weight: 600; margin-bottom: 8px;">公众身份</label>
 <div style="color: #71767b; font-size: 13px; margin-bottom: 8px; line-height: 1.4;">
 描述角色在X平台的公众身份（如明星、网红、博主等）。这将影响其他用户对该角色的讨论几率，身份越知名可能引起更多关注和讨论。此信息完全公开。
 </div>

 <div
 style="background-color: color-mix(in srgb, var(--x-accent) , 0.1); border: 1px solid var(--x-accent); border-radius: 8px; padding: 12px; margin-bottom: 12px;">
 <div style="color: var(--x-accent); font-size: 13px; line-height: 1.4;">
 <strong>📌 重要提醒：</strong>角色将根据完整人设进行扮演，但<strong
 style="color: var(--x-accent);">X平台其他用户无法读取角色人设</strong>，仅能看到此公众身份信息。如需让其他用户了解的角色特点、背景故事等内容，请全部详细填写至公众身份中。
 </div>
 </div>
 <textarea id="character-public-identity"
 placeholder="例如：知名演员、歌手、网络红人、专业博主等... 可详细描述角色的公开背景、成就、特点等，无字数限制"
 style="width: 100%; min-height: 120px; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 15px; resize: vertical; outline: none; font-family: inherit;"></textarea>
 <div style="color: #71767b; font-size: 12px; margin-top: 4px;">
 💡 无字数限制，可详细描述角色的公开信息
 </div>
 </div>

 <div style="margin-bottom: 20px;">
 <label
 style="display: block; color: #fff; font-size: 15px; font-weight: 600; margin-bottom: 8px;">真名设置</label>
 <div style="color: #71767b; font-size: 13px; margin-bottom: 12px; line-height: 1.4;">
 选择是否公开角色的真实姓名。公开后，其他用户都能看到角色真名，情侣认证时也会显示双方真名。
 </div>

 <div style="margin-bottom: 12px;">
 <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
 <input type="checkbox" id="character-show-real-name" style="width: 16px; height: 16px; accent-color: var(--x-accent); " onchange="toggleCharacterRealNameInput()">
 <span style="color: #fff; font-size: 15px;">公开真实姓名</span>
 </label>
 </div>

 <div id="character-real-name-input-container" style="display: none;">
 <input type="text" id="character-real-name" placeholder="请输入角色的真实姓名"
 style="width: 100%; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 15px; outline: none;"
 maxlength="50">
 <div style="text-align: right; color: #71767b; font-size: 13px; margin-top: 4px;">
 <span id="character-real-name-count">0</span>/50
 </div>
 </div>
 </div>

 <div style="margin-bottom: 20px;">
 <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 12px;">
 <label style="color: #fff; font-size: 15px; font-weight: 600;">NPC关系绑定</label>
 <button type="button" onclick="openAddRelationshipModal()"
 style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 16px; padding: 6px 12px; font-size: 12px; cursor: pointer;">
 + 添加关系
 </button>
 </div>
 <div style="color: #71767b; font-size: 13px; margin-bottom: 12px;">
 绑定NPC角色作为朋友、亲人等，让角色能够识别和互动
 </div>

 <div id="character-relationships-list" style="max-height: 200px; overflow-y: auto;">

 </div>
 </div>

 <div style="margin-bottom: 20px; border-top: 1px solid #333; padding-top: 20px;">
 <label style="display: block; color: #fff; font-size: 15px; font-weight: 600; margin-bottom: 8px;">🤖 后台自动活动</label>
 <div style="color: #71767b; font-size: 13px; margin-bottom: 12px; line-height: 1.4;">
 启用后，当与该角色在X平台私信达到设定的无互动时间后，角色将主动在后台发送消息和推文
 </div>

 <div style="margin-bottom: 16px;">
 <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
 <input type="checkbox" id="character-auto-message-enabled" style="width: 16px; height: 16px; accent-color: var(--x-accent); " onchange="toggleAutoMessageSettings()">
 <span style="color: #fff; font-size: 15px;">启用后台自动发消息</span>
 </label>
 </div>

 <div id="auto-message-time-settings" style="display: none;">
 <label style="display: block; color: #fff; font-size: 14px; font-weight: 600; margin-bottom: 8px;">无互动触发时间</label>
 <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 8px;">
 <input type="number" id="character-auto-message-interval" placeholder="60" min="10" max="3600" style="width: 100px; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 8px 12px; font-size: 14px; outline: none; ">
 <span style="color:var(--x-text-primary); font-size: 14px;">秒</span>
 </div>
 <div style="color: #71767b; font-size: 12px; line-height: 1.4;">
 设置无互动多少秒后角色会主动发消息（建议60-300秒，最少10秒，最多3600秒）
 </div>
 </div>
 </div>

 <div style="display: flex; gap: 12px; margin-top: 32px;">
 <button type="button" onclick="closeCharacterXProfileModal()"
 style="flex: 1; background-color: transparent; color: #fff; border: 1px solid #536471; border-radius: 20px; padding: 12px 24px; font-size: 15px; font-weight: 700; cursor: pointer;">
 取消
 </button>
 <button type="submit"
 style="flex: 1; background-color: var(--x-accent); color: #fff; border: none; border-radius: 20px; padding: 12px 24px; font-size: 15px; font-weight: 700; cursor: pointer;">
 保存X资料
 </button>
 </div>
 </form>
 </div>
 </div>
 </div>
 </div>

 <div id="relationship-modal"
 style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.8); z-index: 40; backdrop-filter: blur(8px);">
 <div style="display: flex; justify-content: center; align-items: center; height: 100%; padding: 20px;">
 <div
 style="background-color:#000; border: 1px solid #333; border-radius: 16px; width: 100%; max-width: 500px;">

 <div
 style="display: flex; align-items: center; justify-content: space-between; padding: 20px 20px 16px 20px; border-bottom: 1px solid #333;">
 <h3 id="relationship-modal-title" style="color: #fff; font-size: 18px; font-weight: 700; margin: 0;">
 添加NPC关系</h3>
 <button onclick="closeRelationshipModal()"
 style="background: none; border: none; color: #71767b; cursor: pointer; padding: 8px;">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: currentColor;">
 <path
 d="M18.36 6.64c.39.39.39 1.02 0 1.41L13.41 12l4.95 4.95c.39.39.39 1.02 0 1.41-.39.39-1.02.39-1.41 0L12 13.41l-4.95 4.95c-.39.39-1.02.39-1.41 0-.39-.39-.39-1.02 0-1.41L10.59 12 5.64 7.05c-.39-.39-.39-1.02 0-1.41.39-.39 1.02-.39 1.41 0L12 10.59l4.95-4.95c.39-.39 1.02-.39 1.41 0z" />
 </svg>
 </button>
 </div>

 <div style="padding: 20px;">
 <form id="relationship-form">

 <div style="margin-bottom: 16px;">
 <label
 style="display: block; color: #fff; font-size: 14px; font-weight: 600; margin-bottom: 8px;">NPC名称</label>
 <input type="text" id="relationship-npc-name" placeholder="输入NPC的名称"
 style="width: 100%; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 14px; outline: none;"
 maxlength="30">
 </div>

 <div style="margin-bottom: 16px;">
 <label
 style="display: block; color: #fff; font-size: 14px; font-weight: 600; margin-bottom: 8px;">NPC句柄</label>
 <div style="position: relative;">
 <span
 style="position: absolute; left: 12px; top: 50%; transform: translateY(-50%); color: #71767b; font-size: 14px;">@</span>
 <input type="text" id="relationship-npc-handle" placeholder="npc_username"
 style="width: 100%; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px 12px 12px 30px; font-size: 14px; outline: none;"
 maxlength="15">
 </div>
 </div>

 <div style="margin-bottom: 16px;">
 <label
 style="display: block; color: #fff; font-size: 14px; font-weight: 600; margin-bottom: 8px;">关系类型</label>
 <select id="relationship-type"
 style="width: 100%; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 14px; outline: none;">
 <option value="朋友">朋友</option>
 <option value="亲人">亲人</option>
 <option value="恋人">恋人</option>
 <option value="同事">同事</option>
 <option value="同学">同学</option>
 <option value="邻居">邻居</option>
 <option value="其他">其他</option>
 </select>
 </div>

 <div style="margin-bottom: 20px;">
 <label
 style="display: block; color: #fff; font-size: 14px; font-weight: 600; margin-bottom: 8px;">关系描述</label>
 <textarea id="relationship-description" placeholder="详细描述两人的关系，如何认识的，相处模式等..."
 style="width: 100%; min-height: 80px; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 14px; resize: vertical; outline: none; font-family: inherit;"
 maxlength="200"></textarea>
 <div style="text-align: right; color: #71767b; font-size: 12px; margin-top: 4px;">
 <span id="relationship-desc-count">0</span>/200
 </div>
 </div>

 <div style="display: flex; gap: 12px;">
 <button type="button" onclick="closeRelationshipModal()"
 style="flex: 1; background-color: transparent; color: #fff; border: 1px solid #536471; border-radius: 20px; padding: 10px 20px; font-size: 14px; font-weight: 700; cursor: pointer;">
 取消
 </button>
 <button type="submit"
 style="flex: 1; background-color: var(--x-accent); color: #fff; border: none; border-radius: 20px; padding: 10px 20px; font-size: 14px; font-weight: 700; cursor: pointer;">
 保存关系
 </button>
 </div>
 </form>
 </div>
 </div>
 </div>
 </div>

 <div id="x-search-page" class="x-page"
 style="flex: 1; display: none; flex-direction: column; overflow: hidden; min-height: 0;">

 <div class="search-header">
 <button id="search-back-btn" onclick="backToTrending()" style="display: none; background: none; border: none; padding: 8px; cursor: pointer; margin-right: 8px; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(239,243,244,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: #fff;">
 <g><path d="M7.414 13l5.043 5.04-1.414 1.42L3.586 12l7.457-7.46 1.414 1.42L7.414 11H21v2H7.414z"></path></g>
 </svg>
 </button>
 <div class="search-box">
 <svg viewBox="0 0 24 24" aria-hidden="true">
 <g><path d="M10.25 3.75c-3.59 0-6.5 2.91-6.5 6.5s2.91 6.5 6.5 6.5c1.795 0 3.419-.726 4.596-1.904 1.178-1.177 1.904-2.801 1.904-4.596 0-3.59-2.91-6.5-6.5-6.5zm-8.5 6.5c0-4.694 3.806-8.5 8.5-8.5s8.5 3.806 8.5 8.5c0 1.986-.682 3.815-1.824 5.262l4.781 4.781-1.414 1.414-4.781-4.781c-1.447 1.142-3.276 1.824-5.262 1.824-4.694 0-8.5-3.806-8.5-8.5z"></path></g>
 </svg>
 <input type="text" placeholder="搜索 X" id="search-input"
 oninput="toggleSearchButton()"
 onkeydown="if(event.key==='Enter') performSearch()">
 <button id="search-submit-btn" onclick="performSearch()" style="display: none; background: none; border: none; padding: 8px; cursor: pointer; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(29,155,240,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-accent);">
 <g><path d="M2.504 21.866l.526-2.108C3.04 19.719 4 15.823 4 12s-.96-7.719-.97-7.757l-.527-2.109L22.236 12 2.504 21.866zM5.981 13c-.072 1.962-.34 3.833-.583 5.183L17.764 12 5.398 5.818c.242 1.349.51 3.221.583 5.183H10v2H5.981z"></path></g>
 </svg>
 </button>
 </div>
 </div>

 <div id="trending-view" style="display: flex; flex-direction: column; flex: 1; overflow: hidden;">

 <div class="search-tabs">
 <div class="search-tab active" onclick="switchSearchTab('recommended')">为你推荐</div>
 <div class="search-tab" onclick="switchSearchTab('trending')">当前趋势</div>
 <div class="add-category-btn" onclick="openAddCategoryModal()" title="添加自定义分类">
 <svg viewBox="0 0 24 24" aria-hidden="true">
 <g><path d="M19.5 12.75h-6.75V19.5h-1.5v-6.75H4.5v-1.5h6.75V4.5h1.5v6.75h6.75v1.5z"></path></g>
 </svg>
 </div>
 </div>

 <div class="trending-list" id="trending-list">

 </div>
 </div>

 <div id="search-results-view" style="display: none; flex-direction: column; flex: 1; overflow: hidden;">

 <div class="search-tabs">
 <div class="search-tab active" onclick="switchSearchResultTab('top')">热门</div>
 <div class="search-tab" onclick="switchSearchResultTab('latest')">最新</div>
 <div class="search-tab" onclick="switchSearchResultTab('users')">用户</div>
 </div>

 <div id="search-results-content" style="flex: 1; overflow-y: auto; background: #000; ">

 </div>
 </div>

 <button class="refresh-trends-btn" onclick="refreshTrends()" title="刷新热搜">
 <svg viewBox="0 0 24 24" aria-hidden="true">
 <g><path d="M4.5 3.88l4.432 4.14-1.364 1.46L5.5 7.55V16c0 1.1.896 2 2 2H13v2H7.5c-2.209 0-4-1.79-4-4V7.55L1.432 9.48.068 8.02 4.5 3.88zM16.5 6H11V4h5.5c2.209 0 4 1.79 4 4v8.45l2.068-1.93 1.364 1.46-4.432 4.14-4.432-4.14 1.364-1.46 2.068 1.93V8c0-1.1-.896-2-2-2z"></path></g>
 </svg>
 </button>
 </div>

 <div id="category-manager-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.8); z-index: 30; overflow-y: auto; backdrop-filter: blur(8px); " onclick="closeCategoryModal(event)">
 <div style="background-color:#000; margin: 40px auto; border-radius: 16px; max-width: 600px; width: calc(100% - 40px); border: 1px solid #333; " onclick="event.stopPropagation()">

 <div style="display: flex; align-items: center; justify-content: space-between; padding: 16px 20px; border-bottom: 1px solid #333; ">
 <h2 style="color: #fff; font-size: 20px; font-weight: 700; margin: 0;">管理热搜分类</h2>
 <div onclick="closeCategoryModal()" style="cursor: pointer; padding: 8px; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(239,243,244,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: #fff;">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </div>
 </div>

 <div style="padding: 20px; max-height: calc(100vh - 200px); overflow-y: auto;">

 <div style="background-color: color-mix(in srgb, var(--x-accent) , 0.1); border: 1px solid var(--x-accent); border-radius: 8px; padding: 12px; margin-bottom: 20px; ">
 <p style="color: var(--x-accent); font-size: 13px; line-height: 1.4; margin: 0;">
 💡 自定义分类将在刷新热搜时生成相应内容。可以添加任意分类（如"动漫"、"二次元"等），并描述该分类下的内容类型。
 </p>
 </div>

 <div style="margin-bottom: 20px;">
 <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 12px; ">
 <h3 style="color: #fff; font-size: 16px; font-weight: 600; margin: 0;">自定义分类</h3>
 <button onclick="addNewCategory()" style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 20px; padding: 6px 16px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='#1a8cd8'"
 onmouseout="this.style.backgroundColor='var(--x-accent)'">
 + 添加分类
 </button>
 </div>

 <div id="custom-categories-list" style="display: flex; flex-direction: column; gap: 12px;">

 </div>
 </div>

 <button onclick="saveCustomCategories()" style="width: 100%; background-color: var(--x-accent); color: #fff; border: none; border-radius: 25px; padding: 14px; font-size: 16px; font-weight: 700; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='#1a8cd8'"
 onmouseout="this.style.backgroundColor='var(--x-accent)'">
 保存设置
 </button>
 </div>
 </div>
 </div>

 <div id="x-notifications-page" class="x-page"
 style="flex: 1; display: none; flex-direction: column; overflow: hidden; min-height: 0;">

 <div class="notifications-tabs" style="display: flex; border-bottom: 1px solid var(--x-border-color); background-color:var(--x-bg-primary);">

 <div class="notification-tab active" onclick="switchNotificationTab('all')" style="flex: 1; text-align: center; padding: 15px 0; font-weight: 700; font-size: 15px; cursor: pointer; position: relative; color:var(--x-text-primary); transition: background-color 0.2s; ">
 <span data-i18n="notificationsTabAll">全部</span>
 <div class="tab-indicator" style="position: absolute; bottom: 0; left: 0; right: 0; height: 4px; background-color: var(--x-accent); border-radius: 2px; "></div>
 </div>

 <div class="notification-tab" onclick="switchNotificationTab('mentions')" style="flex: 1; text-align: center; padding: 15px 0; font-weight: 700; font-size: 15px; cursor: pointer; position: relative; color:var(--x-text-secondary); transition: background-color 0.2s; ">
 <span data-i18n="notificationsTabMentions">提及</span>
 <div class="tab-indicator" style="position: absolute; bottom: 0; left: 0; right: 0; height: 4px; background-color: var(--x-accent); border-radius: 2px; display: none; "></div>
 </div>
 </div>

 <div id="notifications-all-content" class="notification-content" style="flex: 1; overflow-y: auto; background-color:var(--x-bg-primary); ">

 <div id="notifications-all-list" class="notifications-list">

 </div>
 </div>

 <div id="notifications-mentions-content" class="notification-content" style="flex: 1; overflow-y: auto; background-color:var(--x-bg-primary); display: none; ">

 <div id="notifications-mentions-list" class="notifications-list">

 </div>
 </div>

 <div id="refresh-messages-btn" class="refresh-messages-btn" onclick="refreshStrangerMessages()" style="position: fixed; bottom: 80px; right: 16px; width: 56px; height: 56px; background-color: var(--x-accent); border-radius: 50%; display: flex; align-items: center; justify-content: center; cursor: pointer; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3); transition: all 0.2s; z-index: 100; " onmouseover="this.style.transform='scale(1.1)'"
 onmouseout="this.style.transform='scale(1)'">
 <svg viewBox="0 0 24 24" style="width: 24px; height: 24px; fill: #fff;">
 <g><path d="M8.8 7.2H5.6V3.9c0-.4-.3-.8-.8-.8s-.7.4-.7.8v3.3H.8c-.4 0-.8.3-.8.8s.3.8.8.8h3.3v3.3c0 .4.3.8.8.8s.8-.3.8-.8V8.7H9c.4 0 .8-.3.8-.8s-.5-.7-1-.7zm15-4.9v-.1h-.1c-.1 0-9.2 1.2-14.4 11.7-3.8 7.6-3.6 9.9-3.3 9.9.3.1 3.4-6.5 6.7-9.2 5.2-1.1 6.6-3.6 6.6-3.6s-1.5.2-2.1.2c-.8 0-1.4-.2-1.7-.3 1.3-1.2 2.4-1.5 3.5-1.7.9-.2 1.8-.4 3-1.2 2.2-1.6 1.9-5.5 1.8-5.7z"></path></g>
 </svg>
 </div>
 </div>

 <div id="x-messages-page" class="x-page"
 style="flex: 1; display: none; flex-direction: column; overflow: hidden; min-height: 0;">

 <div id="messages-list-container" class="messages-list-container" style="flex: 1; overflow-y: auto; background-color:var(--x-bg-primary); ">

 </div>

 <div id="compose-message-btn" class="compose-message-btn" onclick="openNewMessageModal()" style="position: fixed; bottom: 80px; right: 16px; width: 56px; height: 56px; background-color: var(--x-accent); border-radius: 50%; display: flex; align-items: center; justify-content: center; cursor: pointer; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3); transition: all 0.2s; z-index: 100; " onmouseover="this.style.transform='scale(1.1)'"
 onmouseout="this.style.transform='scale(1)'">
 <svg viewBox="0 0 24 24" style="width: 24px; height: 24px; fill: #fff;">
 <g><path d="M1.998 5.5c0-1.381 1.119-2.5 2.5-2.5h15c1.381 0 2.5 1.119 2.5 2.5v13c0 1.381-1.119 2.5-2.5 2.5h-15c-1.381 0-2.5-1.119-2.5-2.5v-13zm2.5-.5c-.276 0-.5.224-.5.5v2.764l8 3.638 8-3.636V5.5c0-.276-.224-.5-.5-.5h-15zm15.5 5.463l-8 3.636-8-3.638V18.5c0 .276.224.5.5.5h15c.276 0 .5-.224.5-.5v-8.037z"></path></g>
 </svg>
 </div>
 </div>

 <div id="x-message-detail-page" class="x-page"
 style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; display: none; flex-direction: column; overflow: hidden; z-index: 20; background-color:var(--x-bg-primary);">

 <div class="message-detail-header" style="display: flex; align-items: center; padding: 55px 16px 12px 16px; background-color:var(--x-bg-primary); ">

 <div onclick="closeMessageDetail()" style="cursor: pointer; margin-right: 20px; display: flex; align-items: center; justify-content: center; width: 34px; height: 34px; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-text-primary);">
 <g><path d="M7.414 13l5.043 5.04-1.414 1.42L3.586 12l7.457-7.46 1.414 1.42L7.414 11H21v2H7.414z"></path></g>
 </svg>
 </div>

 <div style="flex: 1; display: flex; align-items: center; gap: 12px; min-width: 0;">
 <img id="message-detail-top-avatar" src="https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg"
 alt="User"
 style="width: 32px; height: 32px; border-radius: 50%; cursor: pointer; transition: opacity 0.2s;"
 onmouseover="this.style.opacity='0.8'"
 onmouseout="this.style.opacity='1'"
 onclick="handleMessageDetailAvatarClick()">
 <span id="message-detail-top-name" style="font-size: 16px; font-weight: 700; color:var(--x-text-primary); overflow: hidden; text-overflow: ellipsis; white-space: nowrap; ">用户名</span>
 </div>

 <div style="display: flex; gap: 8px;">

 <div style="width: 34px; height: 34px; display: flex; align-items: center; justify-content: center; border-radius: 50%; cursor: pointer; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-text-primary);">
 <g><path d="M3 5.5C3 4.119 4.119 3 5.5 3h6C12.881 3 14 4.119 14 5.5v13c0 1.381-1.119 2.5-2.5 2.5h-6C4.119 21 3 19.881 3 18.5v-13zM5.5 5c-.276 0-.5.224-.5.5v13c0 .276.224.5.5.5h6c.276 0 .5-.224.5-.5v-13c0-.276-.224-.5-.5-.5h-6zM15.5 6l5.5-3v18l-5.5-3v-12z"></path></g>
 </svg>
 </div>

 <div style="width: 34px; height: 34px; display: flex; align-items: center; justify-content: center; border-radius: 50%; cursor: pointer; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-text-primary);">
 <g><path d="M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z"></path></g>
 </svg>
 </div>
 </div>
 </div>

 <div id="message-detail-scrollable" style="flex: 1; overflow-y: auto; background-color:var(--x-bg-primary); ">

 <div style="display: flex; flex-direction: column; align-items: center; padding: 20px 16px; background-color:var(--x-bg-primary); border-bottom: 1px solid var(--x-border-color); ">

 <img id="message-detail-avatar" src="https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg"
 alt="User"
 style="width: 64px; height: 64px; border-radius: 50%; margin-bottom: 12px;">

 <div style="display: flex; align-items: center; gap: 4px; margin-bottom: 4px;">
 <span id="message-detail-name" style="font-size: 20px; font-weight: 700; color:var(--x-text-primary); ">用户名</span>
 </div>

 <div id="message-detail-handle" style="font-size: 15px; color:var(--x-text-secondary); margin-bottom: 12px; ">@handle</div>

 <div id="message-detail-bio" style="font-size: 15px; color:var(--x-text-primary); text-align: center; line-height: 1.4; margin-bottom: 12px; display: none; "></div>

 <div id="message-detail-followers" style="font-size: 14px; color:var(--x-text-secondary); " data-i18n-template="messageFollowers">0 位关注者</div>
 </div>

 <div id="message-detail-content" class="message-detail-content" style="padding: 16px; background-color:var(--x-bg-primary); min-height: 300px; ">

 </div>
 </div>

 <div class="message-input-area" style="padding: 12px 16px; background-color:var(--x-bg-primary); ">

 <div style="display: flex; align-items: center; gap: 8px; background-color:var(--x-bg-secondary); border-radius: 20px; padding: 8px 12px; position: relative; ">

 <div style="position: relative;">

 <div id="message-add-btn" onclick="toggleMessageFunctionMenu()" style="cursor: pointer; padding: 4px; border-radius: 50%; transition: all 0.2s; display: flex; align-items: center; justify-content: center; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-accent); transition: transform 0.2s;">
 <g><path d="M12 4C11.4477 4 11 4.44772 11 5V11H5C4.44772 11 4 11.4477 4 12C4 12.5523 4.44772 13 5 13H11V19C11 19.5523 11.4477 20 12 20C12.5523 20 13 19.5523 13 19V13H19C19.5523 13 20 12.5523 20 12C20 11.4477 19.5523 11 19 11H13V5C13 4.44772 12.5523 4 12 4Z"></path></g>
 </svg>
 </div>

 <div id="message-function-menu" style="position: absolute; bottom: 100%; left: 0; margin-bottom: 8px; background-color:var(--x-bg-primary); border: 1px solid var(--x-border-color); border-radius: 12px; padding: 4px; display: none; flex-direction: row; gap: 4px; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 100; ">

 <div onclick="openImageTypeSelector(); toggleMessageFunctionMenu();" style="cursor: pointer; padding: 8px; border-radius: 8px; transition: background-color 0.2s; display: flex; align-items: center; justify-content: center; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-accent);">
 <g><path d="M3 5.5C3 4.119 4.119 3 5.5 3h13C19.881 3 21 4.119 21 5.5v13c0 1.381-1.119 2.5-2.5 2.5h-13C4.119 21 3 19.881 3 18.5v-13zM5.5 5c-.276 0-.5.224-.5.5v9.086l3-3 3 3 5-5 3 3V5.5c0-.276-.224-.5-.5-.5h-13zM19 15.414l-3-3-5 5-3-3-3 3V18.5c0 .276.224.5.5.5h13c.276 0 .5-.224.5-.5v-3.086zM9.75 7C8.784 7 8 7.784 8 8.75s.784 1.75 1.75 1.75 1.75-.784 1.75-1.75S10.716 7 9.75 7z"></path></g>
 </svg>
 </div>

 <div onclick="openStickerPicker(); toggleMessageFunctionMenu();" style="cursor: pointer; padding: 8px; border-radius: 8px; transition: background-color 0.2s; display: flex; align-items: center; justify-content: center; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-accent);">
 <g><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm3.5-9c.83 0 1.5-.67 1.5-1.5S16.33 8 15.5 8 14 8.67 14 9.5s.67 1.5 1.5 1.5zm-7 0c.83 0 1.5-.67 1.5-1.5S9.33 8 8.5 8 7 8.67 7 9.5 7.67 11 8.5 11zm3.5 6.5c2.33 0 4.31-1.46 5.11-3.5H6.89c.8 2.04 2.78 3.5 5.11 3.5z"></path></g>
 </svg>
 </div>

 <div onclick="regenerateAIResponse(); toggleMessageFunctionMenu();" style="cursor: pointer; padding: 8px; border-radius: 8px; transition: background-color 0.2s; display: flex; align-items: center; justify-content: center; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: none; stroke: var(--x-accent); stroke-width: 2; stroke-linecap: round; stroke-linejoin: round;">
 <path d="M20 11a8.1 8.1 0 0 0 -15.5 -2m-.5 -4v4h4" />
 <path d="M4 13a8.1 8.1 0 0 0 15.5 2m.5 4v-4h-4" />
 </svg>
 </div>

 <div onclick="openVoiceMessageDialog(); toggleMessageFunctionMenu();" style="cursor: pointer; padding: 8px; border-radius: 8px; transition: background-color 0.2s; display: flex; align-items: center; justify-content: center; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-accent);">
 <g><path d="M12 3c-1.66 0-3 1.34-3 3v6c0 1.66 1.34 3 3 3s3-1.34 3-3V6c0-1.66-1.34-3-3-3zm0 2c.55 0 1 .45 1 1v6c0 .55-.45 1-1 1s-1-.45-1-1V6c0-.55.45-1 1-1zm5 7c0 2.76-2.24 5-5 5s-5-2.24-5-5H5c0 3.53 2.61 6.43 6 6.92V21h2v-2.08c3.39-.49 6-3.39 6-6.92h-2z"></path></g>
 </svg>
 </div>

 <div onclick="openTransferDialog(); toggleMessageFunctionMenu();" style="cursor: pointer; padding: 8px; border-radius: 8px; transition: background-color 0.2s; display: flex; align-items: center; justify-content: center; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-accent);">
 <g><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM6.64 15.748L12 10.388l5.36 5.36c-.48.32-1.04.56-1.68.72L12 12.78l-3.68 3.69c-.64-.16-1.2-.4-1.68-.72zM12 4c4.41 0 8 3.59 8 8 0 1.85-.63 3.55-1.69 4.9L12 10.59 5.69 16.9C4.63 15.55 4 13.85 4 12c0-4.41 3.59-8 8-8z"></path></g>
 </svg>
 </div>

<div id="fangroup-announcement-btn" onclick="openFanGroupAnnouncementModal(); toggleMessageFunctionMenu();" style="cursor: pointer; padding: 8px; border-radius: 8px; transition: background-color 0.2s; display: none; align-items: center; justify-content: center; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
onmouseout="this.style.backgroundColor='transparent'">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: none; stroke: var(--x-accent); stroke-width: 2; stroke-linecap: round; stroke-linejoin: round;">
<path d="M3 3m0 2a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v14a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2z" />
<path d="M9 15h-2" />
<path d="M13 12h-6" />
<path d="M11 9h-4" />
 </svg>
 </div>

 <div id="fangroup-files-btn" onclick="openFanGroupFilesModal(); toggleMessageFunctionMenu();" style="cursor: pointer; padding: 8px; border-radius: 8px; transition: background-color 0.2s; display: none; align-items: center; justify-content: center; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
onmouseout="this.style.backgroundColor='transparent'">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: none; stroke: var(--x-accent); stroke-width: 2; stroke-linecap: round; stroke-linejoin: round;">
<path d="M5 4h4l3 3h7a2 2 0 0 1 2 2v8a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2v-11a2 2 0 0 1 2 -2" />
 </svg>
 </div>
 </div>
 </div>

 <textarea id="message-input" placeholder="开始写私信"
 data-i18n-placeholder="messageInputPlaceholder"
 style="flex: 1; min-height: 36px; max-height: 100px; background-color: transparent; border: none; color:var(--x-text-primary); font-size: 15px; resize: none; outline: none; font-family: inherit; padding: 4px 0; line-height: 1.4; "
 oninput="autoResizeMessageInput(this)"
 onkeydown="handleMessageInputKeydown(event)"></textarea>

 <button id="fangroup-auto-reaction-btn" onclick="triggerFanGroupAutoReaction()" style="display: none; background-color:var(--x-bg-secondary); color: var(--x-accent); border: 1px solid var(--x-accent); border-radius: 50%; width: 32px; height: 32px; cursor: pointer; transition: all 0.2s; padding: 0; align-items: center; justify-content: center; flex-shrink: 0; margin-right: 4px; "
 onmouseover="this.style.backgroundColor='var(--x-accent)'; this.style.color='#fff'; this.querySelector('svg').style.stroke='#fff'"
 onmouseout="this.style.backgroundColor='var(--x-bg-secondary)'; this.style.color='var(--x-accent)'; this.querySelector('svg').style.stroke='var(--x-accent)'">
 <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="var(--x-accent)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="transition: stroke 0.2s;">
 <path d="M3 12h4.5l1.5 -6l4 12l2 -9l1.5 3h4.5" />
 </svg>
 </button>

 <button id="message-send-btn" onclick="getAIResponse()" style="display: flex; background-color: var(--x-accent); color: #fff; border: none; border-radius: 50%; width: 32px; height: 32px; cursor: pointer; transition: opacity 0.2s; padding: 0; align-items: center; justify-content: center; flex-shrink: 0; ">
 <svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: #fff;">
 <g><path d="M2.504 21.866l.526-2.108C3.04 19.719 4 15.823 4 12s-.96-7.719-.97-7.757l-.527-2.109L22.236 12 2.504 21.866zM5.981 13c-.072 1.962-.34 3.833-.583 5.183L17.764 12 5.398 5.818c.242 1.349.51 3.221.583 5.183H10v2H5.981z"></path></g>
 </svg>
 </button>
 </div>

 <input type="file" id="message-image-input" accept="image/*" multiple style="display: none;" onchange="handleMessageImageUpload(event)">
 </div>

 

 <div id="sticker-manager-dialog" style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background-color: rgba(0, 0, 0, 0.5); display: none; align-items: center; justify-content: center; z-index: 32; " onclick="closeStickerManager()">
 <div style="background-color:var(--x-bg-primary); border-radius: 16px; max-width: 600px; width: 90%; max-height: 80vh; display: flex; flex-direction: column; box-shadow: 0 8px 32px rgba(0,0,0,0.4); " onclick="event.stopPropagation()">
 <div style="padding: 16px; border-bottom: 1px solid var(--x-border-color); display: flex; align-items: center; justify-content: space-between; ">
 <div style="font-size: 18px; font-weight: 700; color:var(--x-text-primary);">表情包管理</div>
 <div onclick="closeStickerManager()" style="cursor: pointer; padding: 4px; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-text-primary);">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </div>
 </div>
 <div id="sticker-manager-list" style="flex: 1; overflow-y: auto; padding: 16px; ">

 </div>
 <div style="padding: 16px; border-top: 1px solid var(--x-border-color); display: flex; gap: 8px; justify-content: flex-end; ">
 <button onclick="clearAllStickers()" style="background-color: rgba(239, 68, 68, 0.1); color: rgb(239, 68, 68); border: none; border-radius: 20px; padding: 8px 16px; font-size: 14px; font-weight: 600; cursor: pointer; ">清空全部</button>
 </div>
 </div>
 </div>

 <div id="voice-message-dialog" style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background-color: rgba(0, 0, 0, 0.5); display: none; align-items: center; justify-content: center; z-index: 31; " onclick="closeVoiceMessageDialog()">
 <div style="background-color:var(--x-bg-primary); border-radius: 16px; max-width: 500px; width: 90%; padding: 20px; box-shadow: 0 8px 32px rgba(0,0,0,0.4); " onclick="event.stopPropagation()">
 <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 16px;">
 <div style="font-size: 18px; font-weight: 700; color:var(--x-text-primary);">发送语音消息</div>
 <div onclick="closeVoiceMessageDialog()" style="cursor: pointer; padding: 4px; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-text-primary);">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </div>
 </div>
 <div style="font-size: 13px; color:var(--x-text-secondary); margin-bottom: 12px;">
 输入要转换为语音的文字内容
 </div>
 <div style="margin-bottom: 16px;">
 <textarea id="voice-message-text-input" placeholder="输入文字内容..." style="width: 100%; min-height: 100px; padding: 12px; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 8px; color:var(--x-text-primary); font-size: 14px; outline: none; resize: vertical; font-family: inherit; line-height: 1.5; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='var(--x-border-color)'"></textarea>
 </div>
 <div style="display: flex; gap: 8px; justify-content: flex-end;">
 <button onclick="closeVoiceMessageDialog()" style="background-color:var(--x-bg-secondary); color:var(--x-text-primary); border: none; border-radius: 20px; padding: 8px 16px; font-size: 14px; font-weight: 600; cursor: pointer; ">取消</button>
 <button onclick="sendVoiceMessage()" style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 20px; padding: 8px 16px; font-size: 14px; font-weight: 600; cursor: pointer; ">发送语音</button>
 </div>
 </div>
 </div>

 <div id="transfer-dialog" style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background-color: rgba(0, 0, 0, 0.5); display: none; align-items: center; justify-content: center; z-index: 31; overflow-y: auto; " onclick="closeTransferDialog()">
 <div style="background-color:var(--x-bg-primary); border-radius: 16px; max-width: 400px; width: 90%; max-height: 85vh; margin: 20px auto; box-shadow: 0 8px 32px rgba(0,0,0,0.4); display: flex; flex-direction: column; " onclick="event.stopPropagation()">

 <div style="display: flex; align-items: center; justify-content: space-between; padding: 20px 20px 16px; flex-shrink: 0;">
 <div style="font-size: 18px; font-weight: 700; color:var(--x-text-primary);">发起转账</div>
 <div onclick="closeTransferDialog()" style="cursor: pointer; padding: 4px; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-text-primary);">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </div>
 </div>

 <div style="flex: 1; overflow-y: auto; padding: 0 20px; min-height: 0;">

 <div style="margin-bottom: 20px; padding-bottom: 16px; border-bottom: 1px solid var(--x-border-color);">
 <div style="display: flex; gap: 8px;">
 <button id="transfer-type-normal-btn" onclick="switchTransferType('normal')" style="flex: 1; padding: 8px 16px; border: 1px solid var(--x-border-color); background-color: var(--x-accent); color: #fff; border-radius: 8px; font-size: 13px; font-weight: 600; cursor: pointer; transition: all 0.2s; display: flex; align-items: center; justify-content: center; gap: 6px; ">
 <svg viewBox="0 0 24 24" style="width: 14px; height: 14px; fill: currentColor;">
 <g><path d="M21 18v1c0 1.1-.9 2-2 2H5c-1.11 0-2-.9-2-2V5c0-1.1.89-2 2-2h14c1.1 0 2 .9 2 2v1h-9c-1.11 0-2 .9-2 2v8c0 1.1.89 2 2 2h9zm-9-2h10V8H12v8zm4-2.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"/></g>
 </svg>
 普通转账
 </button>
 <button id="transfer-type-business-btn" onclick="switchTransferType('business')" style="flex: 1; padding: 8px 16px; border: 1px solid var(--x-border-color); background-color: transparent; color:var(--x-text-primary); border-radius: 8px; font-size: 13px; font-weight: 600; cursor: pointer; transition: all 0.2s; display: flex; align-items: center; justify-content: center; gap: 6px; ">
 <svg viewBox="0 0 24 24" style="width: 14px; height: 14px; fill: currentColor;">
 <g><path d="M20 6h-3V4c0-1.1-.9-2-2-2H9c-1.1 0-2 .9-2 2v2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zM9 4h6v2H9V4zm11 16H4V8h16v12z"></path><path d="M12 10L14.5 14L17 10L14.5 12L12 10ZM10 10L7.5 12L10 14L7.5 14L10 10Z"></path></g>
 </svg>
 商业转账
 </button>
 </div>
 </div>

 <div style="margin-bottom: 16px;">
 <label style="display: block; font-size: 14px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 8px;">
 转账金额
 </label>
 <div style="position: relative;">
 <input type="number" id="transfer-amount-input" placeholder="0.00" min="0.01" step="0.01" style="width: 100%; padding: 12px 16px 12px 36px; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 8px; color:var(--x-text-primary); font-size: 16px; outline: none; font-family: inherit; " onfocus="this.style.borderColor='var(--x-accent)'"
 onblur="this.style.borderColor='var(--x-border-color)'">
 <div style="position: absolute; left: 16px; top: 50%; transform: translateY(-50%); color:var(--x-text-secondary); font-weight: 600; font-size: 16px; ">$</div>
 </div>
 </div>

 <div style="margin-bottom: 16px;">
 <label style="display: block; font-size: 14px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 8px;">
 转账备注（可选）
 </label>
 <textarea id="transfer-note-input" placeholder="添加转账说明..." maxlength="100" style="width: 100%; min-height: 60px; padding: 12px; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 8px; color:var(--x-text-primary); font-size: 14px; outline: none; resize: vertical; font-family: inherit; line-height: 1.5; " onfocus="this.style.borderColor='var(--x-accent)'"
 onblur="this.style.borderColor='var(--x-border-color)'"
 oninput="updateTransferNoteCounter()"></textarea>
 <div style="text-align: right; margin-top: 4px;">
 <span id="transfer-note-counter" style="font-size: 12px; color:var(--x-text-secondary);">0 / 100</span>
 </div>
 </div>

 <div id="business-transfer-section" style="display: none;">

 <div style="margin-bottom: 16px;">
 <label style="display: block; font-size: 14px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 8px;">
 定金比例
 </label>
 <select id="transfer-deposit-ratio" style="width: 100%; padding: 12px; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 8px; color:var(--x-text-primary); font-size: 14px; outline: none; font-family: inherit; " onfocus="this.style.borderColor='var(--x-accent)'"
 onblur="this.style.borderColor='var(--x-border-color)'">
 <option value="0">0% - 无定金（任务完成后全额支付）</option>
 <option value="20" selected>20% - 先付20%定金</option>
 <option value="30">30% - 先付30%定金</option>
 <option value="50">50% - 先付50%定金</option>
 </select>
 <div style="font-size: 12px; color:var(--x-text-secondary); margin-top: 4px;">
 定金会在对方接受转账时立即支付，余款在任务完成后支付
 </div>
 </div>

 <div style="margin-bottom: 16px;">
 <label style="display: block; font-size: 14px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 8px;">
 任务描述 <span style="color: #ef4444;">*</span>
 </label>
 <textarea id="transfer-task-description" placeholder="例如：发布一条关于XX产品的宣传推文，需包含产品链接..." maxlength="500" style="width: 100%; min-height: 100px; padding: 12px; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 8px; color:var(--x-text-primary); font-size: 14px; outline: none; resize: vertical; font-family: inherit; line-height: 1.5; " onfocus="this.style.borderColor='var(--x-accent)'"
 onblur="this.style.borderColor='var(--x-border-color)'"
 oninput="updateTaskDescriptionCounter()"></textarea>
 <div style="text-align: right; margin-top: 4px;">
 <span id="transfer-task-counter" style="font-size: 12px; color:var(--x-text-secondary);">0 / 500</span>
 </div>
 </div>

 <div style="margin-bottom: 16px;">
 <label style="display: block; font-size: 14px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 8px;">
 任务期限 <span style="color: #ef4444;">*</span>
 </label>
 <input type="number" id="transfer-task-deadline" placeholder="小时数" min="1" max="720" value="24" style="width: 100%; padding: 12px; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 8px; color:var(--x-text-primary); font-size: 14px; outline: none; font-family: inherit; " onfocus="this.style.borderColor='var(--x-accent)'"
 onblur="this.style.borderColor='var(--x-border-color)'">
 <div style="font-size: 12px; color:var(--x-text-secondary); margin-top: 4px;">
 从对方接受转账起计算，建议1-72小时（最长30天）
 </div>
 </div>

 <div style="background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 8px; padding: 12px; margin-bottom: 16px; ">
 <div style="display: flex; gap: 8px; align-items: flex-start;">
 <svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: var(--x-text-secondary); flex-shrink: 0; margin-top: 2px;">
 <g><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"></path></g>
 </svg>
 <div style="font-size: 12px; color:var(--x-text-primary); line-height: 1.5;">
 <strong>商业转账说明：</strong><br>
 • 对方接受后必须完成任务才能获得全款<br>
 • AI会自动检测任务完成情况<br>
 • 对方也可能拒绝或接受但不完成任务
 </div>
 </div>
 </div>
 </div>
 </div>

 <div style="padding: 16px 20px 20px; border-top: 1px solid var(--x-border-color); flex-shrink: 0;">
 <div style="display: flex; gap: 8px; justify-content: flex-end;">
 <button onclick="closeTransferDialog()" style="background-color:var(--x-bg-secondary); color:var(--x-text-primary); border: none; border-radius: 20px; padding: 10px 20px; font-size: 14px; font-weight: 600; cursor: pointer; ">取消</button>
 <button onclick="sendTransfer()" style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 20px; padding: 10px 20px; font-size: 14px; font-weight: 600; cursor: pointer; ">发送转账</button>
 </div>
 </div>
 </div>
 </div>

 <div id="transfer-details-modal" style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background-color: rgba(0, 0, 0, 0.5); display: none; align-items: center; justify-content: center; z-index: 32; " onclick="closeTransferDetails()">
 <div style="background-color:var(--x-bg-primary); border-radius: 16px; max-width: 360px; width: 90%; box-shadow: 0 8px 32px rgba(0,0,0,0.4); overflow: hidden; " onclick="event.stopPropagation()">

 <div id="transfer-details-content">

 </div>
 </div>
 </div>

 <div id="image-type-selector-dialog" style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background-color: rgba(0, 0, 0, 0.5); display: none; align-items: center; justify-content: center; z-index: 31; " onclick="closeImageTypeSelector()">
 <div style="background-color:var(--x-bg-primary); border-radius: 16px; max-width: 360px; width: 90%; padding: 20px; box-shadow: 0 8px 32px rgba(0,0,0,0.4); " onclick="event.stopPropagation()">
 <div style="font-size: 18px; font-weight: 700; color:var(--x-text-primary); margin-bottom: 16px;">选择图片类型</div>
 <div style="display: flex; flex-direction: column; gap: 12px;">

 <div onclick="selectImageType('real')" style="padding: 16px; border: 2px solid var(--x-border-color); border-radius: 12px; cursor: pointer; transition: all 0.2s; display: flex; align-items: center; gap: 12px; " onmouseover="this.style.borderColor='var(--x-accent)'; this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.borderColor='var(--x-border-color)'; this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 24px; height: 24px; fill: var(--x-accent); flex-shrink: 0;">
 <g><path d="M3 5.5C3 4.119 4.119 3 5.5 3h13C19.881 3 21 4.119 21 5.5v13c0 1.381-1.119 2.5-2.5 2.5h-13C4.119 21 3 19.881 3 18.5v-13zM5.5 5c-.276 0-.5.224-.5.5v9.086l3-3 3 3 5-5 3 3V5.5c0-.276-.224-.5-.5-.5h-13zM19 15.414l-3-3-5 5-3-3-3 3V18.5c0 .276.224.5.5.5h13c.276 0 .5-.224.5-.5v-3.086zM9.75 7C8.784 7 8 7.784 8 8.75s.784 1.75 1.75 1.75 1.75-.784 1.75-1.75S10.716 7 9.75 7z"></path></g>
 </svg>
 <div>
 <div style="font-size: 15px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 4px;">上传真实图片</div>
 <div style="font-size: 13px; color:var(--x-text-secondary);">从设备中选择图片文件</div>
 </div>
 </div>

 <div onclick="selectImageType('text')" style="padding: 16px; border: 2px solid var(--x-border-color); border-radius: 12px; cursor: pointer; transition: all 0.2s; display: flex; align-items: center; gap: 12px; " onmouseover="this.style.borderColor='var(--x-accent)'; this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.borderColor='var(--x-border-color)'; this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 24px; height: 24px; fill: var(--x-accent); flex-shrink: 0;">
 <g><path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"></path></g>
 </svg>
 <div>
 <div style="font-size: 15px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 4px;">发送文字图片</div>
 <div style="font-size: 13px; color:var(--x-text-secondary);">用文字描述图片内容</div>
 </div>
 </div>
 </div>
 <div style="margin-top: 16px; display: flex; justify-content: flex-end;">
 <button onclick="closeImageTypeSelector()" style="background-color:var(--x-bg-secondary); color:var(--x-text-primary); border: none; border-radius: 20px; padding: 8px 16px; font-size: 14px; font-weight: 600; cursor: pointer; ">取消</button>
 </div>
 </div>
 </div>

 <div id="text-image-dialog" style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background-color: rgba(0, 0, 0, 0.5); display: none; align-items: center; justify-content: center; z-index: 32; " onclick="closeTextImageDialog()">
 <div style="background-color:var(--x-bg-primary); border-radius: 16px; max-width: 500px; width: 90%; padding: 20px; box-shadow: 0 8px 32px rgba(0,0,0,0.4); " onclick="event.stopPropagation()">
 <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 16px;">
 <div style="font-size: 18px; font-weight: 700; color:var(--x-text-primary);">发送文字图片</div>
 <div onclick="closeTextImageDialog()" style="cursor: pointer; padding: 4px; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-text-primary);">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </div>
 </div>
 <div style="font-size: 13px; color:var(--x-text-secondary); margin-bottom: 12px;">
 用文字描述你想发送的图片内容（例如：一张美丽的日落照片）
 </div>
 <div style="margin-bottom: 16px;">
 <textarea id="text-image-description-input" placeholder="输入图片描述..." maxlength="500" style="width: 100%; min-height: 120px; padding: 12px; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 8px; color:var(--x-text-primary); font-size: 14px; outline: none; resize: vertical; font-family: inherit; line-height: 1.5; " onfocus="this.style.borderColor='var(--x-accent)'"
 onblur="this.style.borderColor='var(--x-border-color)'"
 oninput="updateTextImageCounter()"></textarea>
 <div style="text-align: right; margin-top: 4px;">
 <span id="text-image-counter" style="font-size: 12px; color:var(--x-text-secondary);">0 / 500</span>
 </div>
 </div>
 <div style="display: flex; gap: 8px; justify-content: flex-end;">
 <button onclick="closeTextImageDialog()" style="background-color:var(--x-bg-secondary); color:var(--x-text-primary); border: none; border-radius: 20px; padding: 8px 16px; font-size: 14px; font-weight: 600; cursor: pointer; ">取消</button>
 <button onclick="sendTextImage()" style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 20px; padding: 8px 16px; font-size: 14px; font-weight: 600; cursor: pointer; ">发送</button>
 </div>
 </div>
 </div>

 <div id="add-sticker-dialog" style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background-color: rgba(0, 0, 0, 0.5); display: none; align-items: center; justify-content: center; z-index: 31; " onclick="closeAddStickerDialog()">
 <div style="background-color:var(--x-bg-primary); border-radius: 16px; max-width: 500px; width: 90%; padding: 20px; box-shadow: 0 8px 32px rgba(0,0,0,0.4); " onclick="event.stopPropagation()">
 <div style="font-size: 18px; font-weight: 700; color:var(--x-text-primary); margin-bottom: 8px;">批量导入表情包</div>
 <div style="font-size: 13px; color:var(--x-text-secondary); margin-bottom: 16px;">
 每行一个表情包，格式：描述 链接<br>
 例如：开心 https://example.com/happy.gif
 </div>
 <div style="margin-bottom: 16px;">
 <textarea id="sticker-batch-input" placeholder="开心 https://example.com/happy.gif
难过 https://example.com/sad.gif
惊讶 https://example.com/wow.gif" style="width: 100%; min-height: 150px; padding: 12px; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 8px; color:var(--x-text-primary); font-size: 14px; outline: none; resize: vertical; font-family: inherit; line-height: 1.5; "></textarea>
 </div>
 <div style="display: flex; gap: 8px; justify-content: flex-end;">
 <button onclick="closeAddStickerDialog()" style="background-color:var(--x-bg-secondary); color:var(--x-text-primary); border: none; border-radius: 20px; padding: 8px 16px; font-size: 14px; font-weight: 600; cursor: pointer; ">取消</button>
 <button onclick="batchAddStickers()" style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 20px; padding: 8px 16px; font-size: 14px; font-weight: 600; cursor: pointer; ">批量导入</button>
 </div>
 </div>
</div>
</div>

<div id="fangroup-announcement-modal" style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background-color: rgba(0, 0, 0, 0.6); display: none; align-items: center; justify-content: center; z-index: 35; backdrop-filter: blur(8px); padding: 0 8px; box-sizing: border-box; " onclick="closeFanGroupAnnouncementModal()">
<div style="background-color:var(--x-bg-primary); border-radius: 20px; width: 100%; max-width: 600px; max-height: 85vh; display: flex; flex-direction: column; box-shadow: 0 20px 60px rgba(0,0,0,0.3); overflow: hidden; " onclick="event.stopPropagation()">

<div style="padding: 24px 24px 16px; border-bottom: 1px solid var(--x-border-color); flex-shrink: 0;">
<div style="display: flex; align-items: center; justify-content: space-between;">
<div style="display: flex; align-items: center; gap: 12px;">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" style="width: 28px; height: 28px; fill: none; stroke: var(--x-accent); stroke-width: 2; stroke-linecap: round; stroke-linejoin: round;">
<path d="M3 3m0 2a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v14a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2z" />
<path d="M9 15h-2" />
<path d="M13 12h-6" />
<path d="M11 9h-4" />
</svg>
<h3 style="margin: 0; color:var(--x-text-primary); font-size: 24px; font-weight: 700;">群公告</h3>
</div>
<button onclick="closeFanGroupAnnouncementModal()" style="background: transparent; border: none; color:var(--x-text-secondary); cursor: pointer; padding: 8px; border-radius: 50%; transition: background-color 0.2s; display: flex; align-items: center; justify-content: center; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
onmouseout="this.style.backgroundColor='transparent'">
<svg viewBox="0 0 24 24" style="width: 24px; height: 24px; fill: currentColor;">
<g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
</svg>
</button>
</div>
</div>

<div id="fangroup-announcements-container" style="flex: 1; overflow-y: auto; overflow-x: hidden; padding: 24px 16px; display: grid; grid-template-columns: repeat(auto-fit, minmax(min(100%, 280px), 1fr)); gap: 24px 16px; align-content: flex-start; justify-items: center; min-height: 200px; background: radial-gradient(circle at 20% 30%, rgba(29, 155, 240, 0.03) 0%, transparent 50%), radial-gradient(circle at 80% 70%, rgba(249, 24, 128, 0.02) 0%, transparent 50%), var(--x-bg-secondary); ">

<div style="width: 100%; text-align: center; color:var(--x-text-secondary); font-size: 14px; padding: 40px 20px; grid-column: 1 / -1;">
📌 暂无公告，点击下方按钮创建第一条公告
</div>
</div>

<div style="padding: 16px 24px; border-top: 1px solid var(--x-border-color); flex-shrink: 0; display: flex; gap: 12px;">
<button onclick="openCreateAnnouncementDialog()" style="flex: 1; background-color: var(--x-accent); color: #fff; border: none; border-radius: 24px; padding: 14px 24px; font-size: 15px; font-weight: 700; cursor: pointer; transition: all 0.2s; box-shadow: 0 2px 8px rgba(29, 155, 240, 0.3); " onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 4px 12px rgba(29, 155, 240, 0.4)'"
onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 2px 8px rgba(29, 155, 240, 0.3)'">
+ 新建公告
</button>
</div>
</div>
</div>

<div id="create-announcement-dialog" style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background-color: rgba(0, 0, 0, 0.7); display: none; align-items: center; justify-content: center; z-index: 36; backdrop-filter: blur(4px); " onclick="closeCreateAnnouncementDialog()">
<div style="background-color:var(--x-bg-primary); border-radius: 16px; width: 90%; max-width: 500px; box-shadow: 0 12px 40px rgba(0,0,0,0.4); overflow: hidden; " onclick="event.stopPropagation()">
<div style="padding: 20px 24px; border-bottom: 1px solid var(--x-border-color);">
<h3 style="margin: 0; color:var(--x-text-primary); font-size: 20px; font-weight: 700;">新建公告</h3>
</div>
<div style="padding: 24px;">
<label style="display: block; font-size: 14px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 8px;">
公告内容 <span style="color: #ef4444;">*</span>
</label>
<textarea id="announcement-content-input" placeholder="输入公告内容..." maxlength="500" style="width: 100%; min-height: 150px; padding: 12px; background-color:var(--x-bg-secondary); border: 2px solid var(--x-border-color); border-radius: 12px; color:var(--x-text-primary); font-size: 14px; outline: none; resize: vertical; font-family: inherit; line-height: 1.6; transition: border-color 0.2s; " onfocus="this.style.borderColor='var(--x-accent)'"
onblur="this.style.borderColor='var(--x-border-color)'"
oninput="updateAnnouncementCounter()"></textarea>
<div style="text-align: right; margin-top: 6px;">
<span id="announcement-counter" style="font-size: 12px; color:var(--x-text-secondary);">0 / 500</span>
</div>

<div style="margin-top: 20px; padding: 16px; background-color:var(--x-bg-secondary); border-radius: 12px; border: 1px solid var(--x-border-color);">
<label style="display: flex; align-items: center; gap: 12px; cursor: pointer;">
<input type="checkbox" id="mention-all-checkbox" style="width: 18px; height: 18px; cursor: pointer; accent-color: var(--x-accent);">
<div style="flex: 1;">
<div style="color:var(--x-text-primary); font-size: 14px; font-weight: 600; margin-bottom: 4px;">
@全体成员
</div>
<div style="color:var(--x-text-secondary); font-size: 12px; line-height: 1.4;">
勾选后将通知所有成员并触发AI反应
</div>
</div>
</label>
</div>
</div>
<div style="padding: 16px 24px; border-top: 1px solid var(--x-border-color); display: flex; gap: 12px; justify-content: flex-end;">
<button onclick="closeCreateAnnouncementDialog()" style="background-color:var(--x-bg-secondary); color:var(--x-text-primary); border: none; border-radius: 20px; padding: 10px 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
onmouseout="this.style.backgroundColor='var(--x-bg-secondary)'">
取消
</button>
<button onclick="saveFanGroupAnnouncement()" style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 20px; padding: 10px 24px; font-size: 14px; font-weight: 700; cursor: pointer; transition: opacity 0.2s; " onmouseover="this.style.opacity='0.9'"
onmouseout="this.style.opacity='1'">
发布公告
</button>
 </div>
 </div>
 </div>

 <div id="x-comments-page" class="x-page"
 style="flex: 1; display: none; flex-direction: column; overflow: hidden; min-height: 0;">
 </div>

 <div id="x-settings-page" class="x-page"
 style="flex: 1; display: none; flex-direction: column; overflow: hidden; min-height: 0;">

 <div class="settings-header"
 style="display: flex; align-items: center; justify-content: space-between; padding: 10px 15px; border-bottom: 1px solid #333; background-color:#000;">
 <div style="display: flex; align-items: center;">
 <div class="settings-back-btn" onclick="switchXPage('home')" style="cursor: pointer; margin-right: 15px;">
 <svg viewBox="0 0 24 24" aria-hidden="true" style="width: 20px; height: 20px; fill: #fff;">
 <g>
 <path d="M7.414 13l5.043 5.04-1.414 1.42L3.586 12l7.457-7.46 1.414 1.42L7.414 11H21v2H7.414z"></path>
 </g>
 </svg>
 </div>
 <span style="font-size: 20px; font-weight: 700; color: #fff;">设置</span>
 </div>
 <div style="display: flex; align-items: center; gap: 8px;">

 <div id="help-toggle-btn" onclick="openHelpPage()"
 style="cursor: pointer; padding: 8px; border-radius: 50%; transition: background-color 0.2s; display: flex; align-items: center; justify-content: center;"
 onmouseover="this.style.backgroundColor='rgba(255,255,255,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'"
 title="答疑">
 <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="var(--x-accent)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
 <path d="M15.02 19.52c-2.341 .736 -5 .606 -7.32 -.52l-4.7 1l1.3 -3.9c-2.324 -3.437 -1.426 -7.872 2.1 -10.374c3.526 -2.501 8.59 -2.296 11.845 .48c1.649 1.407 2.575 3.253 2.742 5.152" />
 <path d="M19 22v.01" />
 <path d="M19 19a2.003 2.003 0 0 0 .914 -3.782a1.98 1.98 0 0 0 -2.414 .483" />
 </svg>
 </div>

 <div id="accent-color-toggle-btn" onclick="openAccentColorPicker()"
 style="cursor: pointer; padding: 8px; border-radius: 50%; transition: background-color 0.2s; display: flex; align-items: center; justify-content: center;"
 onmouseover="this.style.backgroundColor='rgba(255,255,255,0.1)'"
 onmouseout="this.style.backgroundColor='transparent''"
 title="更改主题色">
 <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="var(--x-accent)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
 <path d="M12 21a9 9 0 0 1 0 -18c4.97 0 9 3.582 9 8c0 1.06 -.474 2.078 -1.318 2.828c-.844 .75 -1.989 1.172 -3.182 1.172h-2.5a2 2 0 0 0 -1 3.75a1.3 1.3 0 0 1 -1 2.25" />
 <path d="M8.5 10.5m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0" />
 <path d="M12.5 7.5m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0" />
 <path d="M16.5 10.5m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0" />
 </svg>
 </div>

 <div id="language-toggle-btn" onclick="toggleXLanguage()"
 style="cursor: pointer; padding: 8px 12px; border-radius: 20px; transition: background-color 0.2s; display: flex; align-items: center; justify-content: center; gap: 4px; background-color: rgba(255,255,255,0.05);"
 onmouseover="this.style.backgroundColor='rgba(255,255,255,0.15)'"
 onmouseout="this.style.backgroundColor='rgba(255,255,255,0.05)'"
 title="切换语言">
 <span id="language-text" style="font-size: 13px; font-weight: 600; color:var(--x-text-primary);">中文</span>
 </div>

 <div id="theme-toggle-btn" onclick="toggleXTheme()"
 style="cursor: pointer; padding: 8px; border-radius: 50%; transition: background-color 0.2s; display: flex; align-items: center; justify-content: center;"
 onmouseover="this.style.backgroundColor='rgba(255,255,255,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'"
 title="切换主题">

 <svg id="theme-icon-dark" viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: #fff; display: block;">
 <g><path d="M20.742 13.045a8.088 8.088 0 0 1-2.077.271c-2.135 0-4.14-.83-5.646-2.336a8.025 8.025 0 0 1-2.064-7.723A1 1 0 0 0 9.73 2.034a10.014 10.014 0 0 0-4.489 2.582c-3.898 3.898-3.898 10.243 0 14.143a9.937 9.937 0 0 0 7.072 2.93 9.93 9.93 0 0 0 7.07-2.929 10.007 10.007 0 0 0 2.583-4.491 1.001 1.001 0 0 0-1.224-1.224zm-2.772 4.301a7.947 7.947 0 0 1-5.656 2.343 7.953 7.953 0 0 1-5.658-2.344c-3.118-3.119-3.118-8.195 0-11.314a7.923 7.923 0 0 1 2.06-1.483 10.027 10.027 0 0 0 2.89 7.848 9.972 9.972 0 0 0 7.848 2.891 8.036 8.036 0 0 1-1.484 2.059z"></path></g>
 </svg>

 <svg id="theme-icon-light" viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: #000; display: none;">
 <g><path d="M12 2.5a1 1 0 0 1 1 1V5a1 1 0 1 1-2 0V3.5a1 1 0 0 1 1-1zm0 15a4.5 4.5 0 1 0 0-9 4.5 4.5 0 0 0 0 9zm0 2a6.5 6.5 0 1 1 0-13 6.5 6.5 0 0 1 0 13zM12 18a1 1 0 0 1 1 1v1.5a1 1 0 1 1-2 0V19a1 1 0 0 1 1-1zm9.5-6a1 1 0 0 1-1 1H19a1 1 0 1 1 0-2h1.5a1 1 0 0 1 1 1zM5 12a1 1 0 0 1-1 1H2.5a1 1 0 1 1 0-2H4a1 1 0 0 1 1 1zm12.864-6.864a1 1 0 0 1 0 1.414l-1.06 1.06a1 1 0 1 1-1.415-1.414l1.061-1.06a1 1 0 0 1 1.414 0zm-11.728 0a1 1 0 0 1 1.414 0l1.061 1.06A1 1 0 1 1 7.197 7.61l-1.06-1.06a1 1 0 0 1 0-1.415zM18.925 17.804a1 1 0 0 1 0 1.414l-1.061 1.061a1 1 0 0 1-1.414-1.414l1.06-1.061a1 1 0 0 1 1.415 0zm-13.85 0a1 1 0 0 1 1.414 0l1.061 1.061a1 1 0 0 1-1.414 1.414l-1.061-1.06a1 1 0 0 1 0-1.415z"></path></g>
 </svg>
 </div>
 </div>
 </div>

 <div class="settings-content"
 style="flex: 1; padding: 15px; width: 100%; box-sizing: border-box; overflow-y: auto; min-height: 0;">

 <div class="settings-section" style="margin-bottom: 30px;">
 <label style="display: block; color: #fff; font-size: 17px; font-weight: 600; margin-bottom: 10px;" data-i18n="settingsPrompt">
 提示词
 </label>
 <textarea id="x-system-prompt" placeholder="输入系统提示词..." data-i18n="settingsPromptPlaceholder"
 style="width: 100%; min-height: 120px; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 15px; resize: vertical; outline: none; font-family: inherit; line-height: 1.4;"
 onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'"></textarea>
 </div>

 <div class="settings-section" style="margin-bottom: 30px;">
 <label style="display: block; color: #fff; font-size: 17px; font-weight: 600; margin-bottom: 10px;" data-i18n="settingsWorldView">
 世界观设定
 </label>
 <textarea id="x-world-setting" placeholder="描述角色所在的世界观、背景设定..." data-i18n="settingsWorldViewPlaceholder"
 style="width: 100%; min-height: 100px; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 15px; resize: vertical; outline: none; font-family: inherit; line-height: 1.4;"
 onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'"></textarea>
 </div>

 <div class="settings-section" style="margin-bottom: 30px;">
 <label style="color: #fff; font-size: 17px; font-weight: 600; display: block; margin-bottom: 10px;" data-i18n="settingsWorldBooks">
 世界书管理
 </label>
 <p style="color: #71767b; font-size: 14px; margin: 0 0 15px 0; line-height: 1.4;" data-i18n="settingsWorldBooksDesc">
 世界书可以为AI提供额外的知识库，支持绑定到不同场景和角色
 </p>
 <button onclick="openWorldBooksManageModal()" style="width: 100%; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 12px; padding: 16px; color:var(--x-text-primary); font-size: 15px; font-weight: 600; cursor: pointer; transition: all 0.2s; display: flex; align-items: center; justify-content: center; gap: 8px; " onmouseover="this.style.borderColor='var(--x-accent)'" onmouseout="this.style.borderColor='var(--x-border-color)'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-accent);">
 <g><path d="M3 5.5C3 4.119 4.119 3 5.5 3h13C19.881 3 21 4.119 21 5.5v13c0 1.381-1.119 2.5-2.5 2.5h-13C4.119 21 3 19.881 3 18.5v-13zM5.5 5c-.276 0-.5.224-.5.5v13c0 .276.224.5.5.5h13c.276 0 .5-.224.5-.5v-13c0-.276-.224-.5-.5-.5h-13zM16 10H13V7h-2v3H8v2h3v3h2v-3h3v-2z"></path></g>
 </svg>
 <span data-i18n="settingsWorldBooksButton">打开世界书管理面板</span>
 </button>
 </div>

 <div class="settings-section" style="margin-bottom: 30px;">
 <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 10px;">
 <label style="color: #fff; font-size: 17px; font-weight: 600;" data-i18n="settingsAutoTweetDetection">
 智能发推检测
 </label>
 <div class="x-toggle" onclick="toggleChatHistoryDetection()" style="cursor: pointer;">
 <div id="chat-history-detection-toggle" class="toggle-switch"
 style="width: 50px; height: 30px; background-color: #333; border-radius: 15px; position: relative; transition: all 0.3s ease;">
 <div class="toggle-circle"
 style="width: 26px; height: 26px; background-color:#fff; border-radius: 50%; position: absolute; top: 2px; left: 2px; transition: all 0.3s ease;">
 </div>
 </div>
 </div>
 </div>
 <p style="color: #71767b; font-size: 14px; margin: 0 0 15px 0; line-height: 1.4;">
 <span data-i18n="settingsAutoTweetDetectionDesc">开启后，每隔5分钟自动检测已绑定角色的聊天记忆，生成New Tweet通知</span><br>
 <span style="color: var(--x-accent); font-size: 13px;" data-i18n="settingsAutoTweetDetectionNote">仅对设置了"角色身份识别"和"专属用户人设"的角色生效</span>
 </p>
 <div id="chat-history-detection-status" style="padding: 12px; border-radius: 8px; background-color: #1a1a1a; border: 1px solid #333; color: #71767b; font-size: 14px; display: none; ">
 <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 8px;">
 <div id="detection-status-indicator" style="width: 8px; height: 8px; border-radius: 50%; background-color: #10b981; animation: pulse 2s infinite; "></div>
 <span style="color: var(--x-accent); font-weight: 600;" data-i18n="settingsDetectionRunning">检测服务运行中</span>
 </div>
 <div style="font-size: 13px;">
 <span data-i18n="settingsNextDetectionTime">下次检测时间</span>: <span id="next-detection-time">--</span>
 </div>
 </div>
 </div>

 <div class="settings-section" style="margin-bottom: 30px;">
 <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 10px;">
 <label style="color: #fff; font-size: 17px; font-weight: 600;" data-i18n="settingsAutoRefreshFeed">
 智能刷新主页
 </label>
 <div class="x-toggle" onclick="toggleAutoRefreshFeed()" style="cursor: pointer;">
 <div id="auto-refresh-feed-toggle" class="toggle-switch"
 style="width: 50px; height: 30px; background-color: #333; border-radius: 15px; position: relative; transition: all 0.3s ease;">
 <div class="toggle-circle"
 style="width: 26px; height: 26px; background-color:#fff; border-radius: 50%; position: absolute; top: 2px; left: 2px; transition: all 0.3s ease;">
 </div>
 </div>
 </div>
 </div>
 <p style="color: #71767b; font-size: 14px; margin: 0 0 15px 0; line-height: 1.4;">
 <span data-i18n="settingsAutoRefreshFeedDesc">开启后，每隔10分钟自动刷新主页推文</span>
 </p>
 <div id="auto-refresh-feed-status" style="padding: 12px; border-radius: 8px; background-color: #1a1a1a; border: 1px solid #333; color: #71767b; font-size: 14px; display: none; ">
 <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 8px;">
 <div id="refresh-status-indicator" style="width: 8px; height: 8px; border-radius: 50%; background-color: #10b981; animation: pulse 2s infinite; "></div>
 <span style="color: var(--x-accent); font-weight: 600;" data-i18n="settingsRefreshRunning">刷新服务运行中</span>
 </div>
 <div style="font-size: 13px;">
 <span data-i18n="settingsNextRefreshTime">下次刷新时间</span>: <span id="next-refresh-time">--</span>
 </div>
 </div>
 </div>

 <div class="settings-section" style="margin-bottom: 40px;">
 <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 10px;">
 <label style="color: #fff; font-size: 17px; font-weight: 600;" data-i18n="settingsCharacterBinding">
 绑定角色
 </label>
 <div class="x-toggle" onclick="toggleCharacterBinding()" style="cursor: pointer;">
 <div id="x-character-toggle" class="toggle-switch"
 style="width: 50px; height: 30px; background-color: #333; border-radius: 15px; position: relative; transition: all 0.3s ease;">
 <div class="toggle-circle"
 style="width: 26px; height: 26px; background-color:#fff; border-radius: 50%; position: absolute; top: 2px; left: 2px; transition: all 0.3s ease;">
 </div>
 </div>
 </div>
 </div>
 <p style="color: #71767b; font-size: 14px; margin: 0 0 15px 0; line-height: 1.4;" data-i18n="settingsCharacterBindingDesc">
 开启后，绑定的角色可以在X上发布推文
 </p>

 <div id="character-binding-area" style="display: none;">
 <div style="background-color: #1a1a1a; border: 1px solid #333; border-radius: 12px; padding: 16px;">
 <div style="color: #fff; font-size: 15px; font-weight: 600; margin-bottom: 12px;" data-i18n="settingsSelectCharacter">选择要绑定的角色</div>
 <div id="characters-list" style="max-height: 300px; overflow-y: auto;">

 </div>
 </div>
 </div>
 </div>

 <div class="settings-section" style="margin-bottom: 40px;">
 <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 10px;">
 <label style="color: #fff; font-size: 17px; font-weight: 600;" data-i18n="settingsRelationship">
 角色关系册
 </label>
 <div class="x-toggle" onclick="toggleCharacterRelationship()" style="cursor: pointer;">
 <div id="x-relationship-toggle" class="toggle-switch"
 style="width: 50px; height: 30px; background-color: #333; border-radius: 15px; position: relative; transition: all 0.3s ease;">
 <div class="toggle-circle"
 style="width: 26px; height: 26px; background-color:#fff; border-radius: 50%; position: absolute; top: 2px; left: 2px; transition: all 0.3s ease;">
 </div>
 </div>
 </div>
 </div>
 <p style="color: #71767b; font-size: 14px; margin: 0 0 15px 0; line-height: 1.4;" data-i18n="settingsRelationshipDesc">
 开启后，可以为已绑定的角色建立关系网络，设置角色之间的双向关系
 </p>

 <div id="relationship-binding-area" style="display: none;">
 <div style="background-color: #1a1a1a; border: 1px solid #333; border-radius: 12px; padding: 16px;">
 <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 12px;">
 <div style="color: #fff; font-size: 15px; font-weight: 600;" data-i18n="settingsRelationshipGraph">角色关系图</div>
 <button onclick="openCharacterRelationshipGraph()" style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 20px; padding: 6px 16px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='#1a8cd8'" onmouseout="this.style.backgroundColor='var(--x-accent)'" data-i18n="settingsEditGraph">
 编辑关系图
 </button>
 </div>

 <div id="relationship-preview" style="background-color: #0a0a0a; border: 1px solid #2f3336; border-radius: 8px; padding: 20px; min-height: 150px; display: flex; align-items: center; justify-content: center; position: relative; ">
 <canvas id="relationship-preview-canvas" width="400" height="150" style="width: 100%; height: 100%;"></canvas>
 <div id="relationship-preview-placeholder" style="color: #71767b; font-size: 14px; text-align: center; ">
 <span data-i18n="relationshipNoData">暂无关系数据</span><br>
 <span style="font-size: 12px;" data-i18n="relationshipNoDataHint">点击上方按钮开始创建角色关系</span>
 </div>
 </div>

 <div id="relationship-stats" style="margin-top: 12px; padding: 12px; background-color: color-mix(in srgb, var(--x-accent) , 0.1); border-radius: 8px; display: none; ">
 <div style="color: var(--x-accent); font-size: 13px; display: flex; justify-content: space-around;">
 <div style="text-align: center;">
 <div style="font-weight: 700; font-size: 18px;" id="relationship-character-count">0</div>
 <div style="opacity: 0.8;" data-i18n="relationshipCharacterCount">角色数</div>
 </div>
 <div style="text-align: center;">
 <div style="font-weight: 700; font-size: 18px;" id="relationship-link-count">0</div>
 <div style="opacity: 0.8;" data-i18n="relationshipLinkCount">关系数</div>
 </div>
 </div>
 </div>
 </div>
 </div>
 </div>

 <div class="settings-section" style="margin-bottom: 40px;">
 <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 10px;">
 <label style="color: #fff; font-size: 17px; font-weight: 600;" data-i18n="settingsNPCBinding">
 绑定NPC
 </label>
 <div class="x-toggle" onclick="toggleNPCBinding()" style="cursor: pointer;">
 <div id="x-npc-toggle" class="toggle-switch"
 style="width: 50px; height: 30px; background-color: #333; border-radius: 15px; position: relative; transition: all 0.3s ease;">
 <div class="toggle-circle"
 style="width: 26px; height: 26px; background-color:#fff; border-radius: 50%; position: absolute; top: 2px; left: 2px; transition: all 0.3s ease;">
 </div>
 </div>
 </div>
 </div>
 <p style="color: #71767b; font-size: 14px; margin: 0 0 15px 0; line-height: 1.4;" data-i18n="settingsNPCBindingDesc">
 开启后，可以创建和管理自定义NPC，设置其人设、发帖习惯和绑定用户
 </p>

 <div id="npc-binding-area" style="display: none;">
 <div style="background-color: #1a1a1a; border: 1px solid #333; border-radius: 12px; padding: 16px;">
 <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 12px;">
 <div style="color: #fff; font-size: 15px; font-weight: 600;" data-i18n="settingsNPCList">NPC列表</div>
 <button onclick="openCreateNPCModal()" style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 20px; padding: 6px 16px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='#1a8cd8'" onmouseout="this.style.backgroundColor='var(--x-accent)'" data-i18n="settingsCreateNPC">
 + 创建NPC
 </button>
 </div>
 <div id="npcs-list" style="max-height: 300px; overflow-y: auto;">

 </div>
 </div>
 </div>
 </div>

 <div class="settings-buttons" style="display: flex; flex-direction: column; gap: 12px;">

 <button onclick="saveXSettings()"
 style="width: 100%; background-color: var(--x-accent); color: #fff; border: none; border-radius: 25px; padding: 12px 24px; font-size: 16px; font-weight: 700; cursor: pointer; transition: all 0.2s;"
 onmouseover="this.style.backgroundColor='#1a8cd8'" onmouseout="this.style.backgroundColor='var(--x-accent)'" data-i18n="settingsSave">
 保存设置
 </button>

 <button onclick="saveXPreset()"
 style="width: 100%; background-color: var(--x-accent); color: #fff; border: none; border-radius: 25px; padding: 12px 24px; font-size: 16px; font-weight: 700; cursor: pointer; transition: all 0.2s;"
 onmouseover="this.style.backgroundColor='#1a8cd8'" onmouseout="this.style.backgroundColor='var(--x-accent)'" data-i18n="settingsSavePreset">
 保存为预设
 </button>

 <div style="display: flex; gap: 12px;">
 <button onclick="importXData()"
 style="flex: 1; background-color: var(--x-accent); color: #fff; border: none; border-radius: 25px; padding: 12px 20px; font-size: 15px; font-weight: 600; cursor: pointer; transition: all 0.2s;"
 onmouseover="this.style.backgroundColor='#1a8cd8'" onmouseout="this.style.backgroundColor='var(--x-accent)'" data-i18n="settingsImport">
 导入数据
 </button>
 <button onclick="exportXData()"
 style="flex: 1; background-color: var(--x-accent); color: #fff; border: none; border-radius: 25px; padding: 12px 20px; font-size: 15px; font-weight: 600; cursor: pointer; transition: all 0.2s;"
 onmouseover="this.style.backgroundColor='#1a8cd8'" onmouseout="this.style.backgroundColor='var(--x-accent)'" data-i18n="settingsExport">
 导出数据
 </button>
 </div>
 </div>

 <div class="preset-management" style="margin-top: 40px; padding-top: 30px; border-top: 1px solid #333;">
 <h3 style="color: #fff; font-size: 18px; font-weight: 700; margin-bottom: 15px;" data-i18n="settingsPresetManagement">预设管理</h3>
 <div id="x-presets-list" style="display: flex; flex-direction: column;">

 </div>
 </div>
 </div>
 </div>

 <div id="x-tweet-detail-page" class="x-page"
 style="flex: 1; display: none; flex-direction: column; overflow: hidden;">

 <div class="tweet-detail-header"
 style="display: flex; align-items: center; justify-content: space-between; padding: 10px 15px; border-bottom: 1px solid #333; background-color: rgba(0,0,0,0.8); backdrop-filter: blur(12px); position: sticky; top: 0; z-index: 5;">
 <div style="display: flex; align-items: center;">
 <div class="tweet-detail-back-btn" onclick="goBackFromTweetDetail()"
 style="cursor: pointer; margin-right: 15px;">
 <svg viewBox="0 0 24 24" aria-hidden="true" style="width: 20px; height: 20px; fill: #fff;">
 <g>
 <path d="M7.414 13l5.043 5.04-1.414 1.42L3.586 12l7.457-7.46 1.414 1.42L7.414 11H21v2H7.414z"></path>
 </g>
 </svg>
 </div>
 <span style="font-size: 20px; font-weight: 700; color: #fff;" data-i18n="tweetDetailTitle">帖子</span>
 </div>

 <div id="reroll-replies-btn"
 onclick="rerollAIReplies()"
 onmousedown="handleTweetRerollButtonMouseDown()"
 onmouseup="handleTweetRerollButtonMouseUp()"
 onmouseleave="handleTweetRerollButtonMouseUp()"
 ontouchstart="handleTweetRerollButtonMouseDown()"
 ontouchend="handleTweetRerollButtonMouseUp()"
 ontouchcancel="handleTweetRerollButtonMouseUp()"
 style="display: flex; align-items: center; justify-content: center; width: 32px; height: 32px; background-color: transparent; border: none; border-radius: 50%; cursor: pointer; transition: all 0.2s; user-select: none; -webkit-user-select: none; "
 onmouseover="this.style.backgroundColor='rgba(255,255,255,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'"
 title="重新生成回复">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-text-primary);">
 <g>
 <path
 d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
 </g>
 </svg>
 </div>
 </div>

 <div class="tweet-detail-content" style="flex: 1; overflow-y: auto;">
 <div id="tweet-detail-container" style="padding: 0;">

 </div>

 <div style="border-top: 1px solid var(--x-border-color);">

 <div id="detail-comments-container" style="padding: 0; padding-bottom: 70px;">

 </div>
 </div>

 <div class="detail-comment-input-area"
 style="border-top: 1px solid var(--x-border-color); padding: 10px 15px; background-color:var(--x-bg-primary); position: fixed; bottom: 0; left: 0; right: 0; z-index: 10;">
 <div style="display: flex; align-items: flex-start; gap: 12px; max-width: 100%;">

 <img id="detail-comment-user-avatar" src="https://i.postimg.cc/pXxk1JXk/IMG-6442.jpg" alt="Your avatar"
 style="width: 32px; height: 32px; border-radius: 50%; flex-shrink: 0;">

 <div style="flex: 1;">
 <textarea id="detail-comment-input" placeholder="发布你的回复" data-i18n="tweetDetailReplyPlaceholder"
 style="width: 100%; min-height: 18px; max-height: 100px; background: transparent; border: none; color: #fff; font-size: 15px; resize: none; outline: none; font-family: inherit; line-height: 1.3;"
 onkeydown="handleDetailCommentInput(event)" oninput="autoResizeDetail(this)"></textarea>

 <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 8px;">

 <div style="display: flex; gap: 12px;">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: var(--x-accent); cursor: pointer;" onclick="triggerDetailCommentImageUpload()">
 <g>
 <path
 d="M3 5.5C3 4.119 4.119 3 5.5 3h13C19.881 3 21 4.119 21 5.5v13c0 1.381-1.119 2.5-2.5 2.5h-13C4.119 21 3 19.881 3 18.5v-13zM5.5 5c-.276 0-.5.224-.5.5v9.086l3-3 3 3 5-5 3 3V5.5c0-.276-.224-.5-.5-.5h-13zM19 15.414l-3-3-5 5-3-3-3 3V18.5c0 .276.224.5.5.5h13c.276 0 .5-.224.5-.5v-3.086zM9.75 7C8.784 7 8 7.784 8 8.75s.784 1.75 1.75 1.75 1.75-.784 1.75-1.75S10.716 7 9.75 7z">
 </path>
 </g>
 </svg>
                 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: var(--x-accent); cursor: pointer; opacity: 0.5;">
                    <g>
                        <path
                            d="M3 5.5C3 4.119 4.12 3 5.5 3h13C19.88 3 21 4.119 21 5.5v13c0 1.381-1.12 2.5-2.5 2.5h-13C4.12 21 3 19.881 3 18.5v-13zM5.5 5c-.28 0-.5.224-.5.5v13c0 .276.22.5.5.5h13c.28 0 .5-.224.5-.5v-13c0-.276-.22-.5-.5-.5h-13zM18 10.711V9.25h-3.74v5.5h1.44v-1.719h1.7V11.57h-1.7v-.859H18zM11.79 9.25h1.44v5.5h-1.44v-5.5zm-3.07 1.375c.34 0 .77.172 1.02.43l1.03-.86c-.51-.601-1.28-.945-2.05-.945C7.19 9.25 6 10.453 6 12s1.19 2.75 2.72 2.75c.77 0 1.54-.344 2.05-.945l-1.03-.86c-.25.258-.68.43-1.02.43-.76 0-1.29-.546-1.29-1.375S8.03 10.625 8.79 10.625z">
                        </path>
                    </g>
                </svg>
                <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: var(--x-accent); cursor: pointer;" onclick="openCommentStickers()">
                    <g>
                        <path
                            d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm3.5-9c.83 0 1.5-.67 1.5-1.5S16.33 8 15.5 8 14 8.67 14 9.5s.67 1.5 1.5 1.5zm-7 0c.83 0 1.5-.67 1.5-1.5S9.33 8 8.5 8 7 8.67 7 9.5 7.67 11 8.5 11zm3.5 6.5c2.33 0 4.31-1.46 5.11-3.5H6.89c.8 2.04 2.78 3.5 5.11 3.5z">
                        </path>
                    </g>
                </svg>
 </div>

 <button id="detail-reply-btn" onclick="submitDetailComment()"
 style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 18px; padding: 6px 16px; font-size: 14px; font-weight: 700; cursor: pointer; opacity: 0.5;"
 disabled data-i18n="tweetDetailReply">
 回复
 </button>
 </div>

 <div id="detail-comment-image-preview" style="display: none; margin-top: 10px; position: relative;">
 <img id="detail-comment-image-preview-img" src="" style="max-width: 180px; max-height: 180px; border-radius: 12px; display: block;">
 <button onclick="removeDetailCommentImage()"
 style="position: absolute; top: 4px; right: 4px; background: rgba(0,0,0,0.75); border: none; border-radius: 50%; width: 26px; height: 26px; color: #fff; cursor: pointer; display: flex; align-items: center; justify-content: center;">
 <svg viewBox="0 0 24 24" style="width: 14px; height: 14px; fill: #fff;">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </button>
 </div>

 <input type="file" id="detail-comment-image-input" accept="image/*" style="display: none;" onchange="handleDetailCommentImageUpload(event)">
 </div>
 </div>
 </div>
 </div>
 </div>

 <div id="x-profile-page" class="x-page" style="flex: 1; display: none; flex-direction: column; overflow-y: auto; padding: 0; margin: 0;">

 <div class="profile-header"
 style="display: flex; align-items: center; padding: 10px 15px; background-color: rgba(0,0,0,0.8); backdrop-filter: blur(12px); position: relative; z-index: 5; margin: 0;">
 <div class="profile-back-btn" onclick="switchXPage('home')" style="cursor: pointer; margin-right: 15px;">
 <svg viewBox="0 0 24 24" aria-hidden="true" style="width: 20px; height: 20px; fill: #fff;">
 <g>
 <path d="M7.414 13l5.043 5.04-1.414 1.42L3.586 12l7.457-7.46 1.414 1.42L7.414 11H21v2H7.414z"></path>
 </g>
 </svg>
 </div>
 <div style="flex: 1;">
 <div id="x-profile-header-name" style="font-size: 20px; font-weight: 700; color: #fff;">我</div>
 <div id="x-profile-header-count" style="font-size: 13px; color: #71767b;">0 帖子</div>
 </div>
 <div style="display: flex; gap: 15px;">

 <div onclick="switchXPage('askbox')" style="cursor: pointer; padding: 8px; border-radius: 50%; transition: background-color 0.2s;"
 onmouseover="this.style.backgroundColor='rgba(255,255,255,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'"
 title="提问箱">
 <svg viewBox="0 0 24 24" aria-hidden="true" style="width: 20px; height: 20px; fill: #fff;">
 <g>
 <path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/>
 </g>
 </svg>
 </div>

 <div id="profile-menu-btn" onclick="toggleProfileMenu()"
 style="cursor: pointer; padding: 8px; border-radius: 50%; transition: background-color 0.2s; position: relative;"
 onmouseover="this.style.backgroundColor='rgba(255,255,255,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" aria-hidden="true" style="width: 20px; height: 20px; fill: #fff;">
 <g>
 <path
 d="M3 12c0-1.1.9-2 2-2s2 .9 2 2-.9 2-2 2-2-.9-2-2zm9 2c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm7 0c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z">
 </path>
 </g>
 </svg>

 <div id="profile-dropdown-menu" style="display: none; position: absolute; top: 100%; right: 0; background-color: #1a1a1a; border: 1px solid #333; border-radius: 12px; box-shadow: 0 8px 32px rgba(0,0,0,0.3); min-width: 200px; z-index: 50; margin-top: 8px; overflow: hidden; ">
 <div onclick="openAccountManager()" style="padding: 12px 16px; color: #fff; font-size: 15px; cursor: pointer; transition: background-color 0.2s; display: flex; align-items: center; gap: 12px; " onmouseover="this.style.backgroundColor='rgba(255,255,255,0.03)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: currentColor;">
 <g>
 <path
 d="M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2ZM21 9V7L19 6.5C18.5 4.4 16.6 2.5 14.5 2L14 0H10L9.5 2C7.4 2.5 5.5 4.4 5 6.5L3 7V9L5 9.5C5.5 11.6 7.4 13.5 9.5 14L10 16H14L14.5 14C16.6 13.5 18.5 11.6 19 9.5L21 9ZM12 8C13.66 8 15 9.34 15 11C15 12.66 13.66 14 12 14C10.34 14 9 12.66 9 11C9 9.34 10.34 8 12 8ZM19 17H5V19H19V17ZM12 20C10.9 20 10 20.9 10 22H14C14 20.9 13.1 20 12 20Z">
 </path>
 </g>
 </svg>
 <span data-i18n="profileAccountManager">账号管理</span>
 </div>
 <div onclick="openAccountWallet()" style="padding: 12px 16px; color: #fff; font-size: 15px; cursor: pointer; transition: background-color 0.2s; display: flex; align-items: center; gap: 12px; " onmouseover="this.style.backgroundColor='rgba(255,255,255,0.03)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: currentColor;">
 <g>
 <path d="M21 18v1c0 1.1-.9 2-2 2H5c-1.11 0-2-.9-2-2V5c0-1.1.89-2 2-2h14c1.1 0 2 .9 2 2v1h-9c-1.11 0-2 .9-2 2v8c0 1.1.89 2 2 2h9zm-9-2h10V8H12v8zm4-2.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"/>
 </g>
 </svg>
 <span data-i18n="profileAccountWallet">账户钱包</span>
 </div>
 </div>
 </div>
 </div>
 </div>

 <div class="cover-section" style="position: relative; height: 140px; background-color: #333; margin: 0; padding: 0; margin-top: -1px;">
 <img id="x-profile-cover-image" src="https://i.postimg.cc/qRzMB6nQ/default-cover.jpg"
 style="width: 100%; height: 100%; object-fit: cover; display: block; margin: 0; padding: 0; vertical-align: top;" alt="封面图">
 </div>

 <div class="user-info-section" style="padding: 8px 16px 0; position: relative;">

 <div style="position: relative; margin-bottom: 8px;">
 <img id="x-profile-main-avatar" src="https://i.postimg.cc/pXxk1JXk/IMG-6442.jpg"
 style="width: 88px; height: 88px; border-radius: 50%; border: 5px solid #000; position: absolute; top: -44px; left: 0; object-fit: cover; overflow: hidden; box-sizing: border-box;"
 alt="用户头像">
 </div>

 <div style="display: flex; justify-content: flex-end; margin: 8px 0;">
 <button onclick="editProfile()"
 style="background-color: transparent; color: #fff; border: 1px solid #536471; border-radius: 20px; padding: 6px 16px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.2s;"
 onmouseover="this.style.backgroundColor='rgba(255,255,255,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'" data-i18n="profileEditProfile">
 编辑个人资料
 </button>
 </div>

 <div style="margin-top: 8px; margin-bottom: 0px; padding-left: 8px;">
 <div style="display: flex; align-items: center; gap: 2px; margin-bottom: 4px;">
 <span id="x-profile-user-name" style="font-size: 20px; font-weight: 700; color: #fff;">我</span>
 <svg id="x-profile-verified-badge" viewBox="0 0 24 24"
 style="width: 20px; height: 20px; fill: var(--x-accent); display: none;">
 <g>
 <path
 d="M22.25 12c0-1.43-.88-2.67-2.19-3.34.46-1.39.2-2.9-.81-3.91s-2.52-1.27-3.91-.81c-.66-1.31-1.91-2.19-3.34-2.19s-2.67.88-3.33 2.19c-1.4-.46-2.91-.2-3.92.81s-1.26 2.52-.8 3.91c-1.31.67-2.2 1.91-2.2 3.34s.89 2.67 2.2 3.34c-.46 1.39-.21 2.9.8 3.91s2.52 1.27 3.91.81c.67 1.31 1.91 2.19 3.34 2.19s2.68-.88 3.34-2.19c1.39.46 2.9.2 3.91-.81s1.27-2.52.81-3.91c1.31-.67 2.19-1.91 2.19-3.34zm-11.71 4.2L6.8 12.46l1.41-1.42 2.26 2.26 4.8-5.23 1.47 1.36-6.2 6.77z">
 </path>
 </g>
 </svg>
 </div>
 <div id="x-profile-user-handle" style="font-size: 15px; color: #71767b; margin-bottom: 8px;">@me</div>
 </div>

 <div id="x-profile-bio" style="font-size: 15px; color: #fff; line-height: 1.3; margin-bottom: 8px; padding-left: 8px;">
 欢迎来到我的X主页！
 </div>

 <div class="profile-tags"
 style="display: flex; align-items: center; gap: 10px; margin-bottom: 8px; flex-wrap: wrap; padding-left: 8px;">
 <div style="display: flex; align-items: center; gap: 4px;">
 <span id="x-profile-tag1-icon" style="font-size: 14px;">✨</span>
 <span id="x-profile-tag1" style="color: #71767b; font-size: 14px;">科技爱好者</span>
 </div>
 <div style="display: flex; align-items: center; gap: 4px;">
 <span id="x-profile-tag2-icon" style="font-size: 14px;">📅</span>
 <span id="x-profile-tag2" style="color: #71767b; font-size: 14px;">2024年加入</span>
 </div>
 </div>

 <div style="display: flex; gap: 16px; margin-bottom: 8px; padding-left: 8px;">
 <div style="cursor: pointer;" onmouseover="this.querySelector('span').style.textDecoration='underline'"
 onmouseout="this.querySelector('span').style.textDecoration='none'">
 <span id="x-profile-following-count" style="color: #fff; font-weight: 700; font-size: 14px;">156</span>
 <span style="color: #71767b; margin-left: 2px; font-size: 14px; font-weight: 400;" data-i18n="profileFollowing">正在关注</span>
 </div>
 <div style="cursor: pointer;" onmouseover="this.querySelector('span').style.textDecoration='underline'"
 onmouseout="this.querySelector('span').style.textDecoration='none'">
 <span id="x-profile-followers-count" style="color: #fff; font-weight: 700; font-size: 14px;">89</span>
 <span style="color: #71767b; margin-left: 2px; font-size: 14px; font-weight: 400;" data-i18n="profileFollowers">关注者</span>
 </div>
 </div>
 </div>

 <div class="profile-tabs" style="display: flex; border-bottom: 1px solid #2f3336;">
 <div class="profile-tab active" onclick="switchProfileTab('posts')"
 style="flex: 1; text-align: center; padding: 14px 0; font-weight: 600; font-size: 15px; cursor: pointer; position: relative; color: #fff;">
 <span data-i18n="profilePosts">帖子</span>
 <div class="tab-indicator"
 style="position: absolute; bottom: 0; left: 25%; width: 50%; height: 3px; background-color: var(--x-accent); border-radius: 2px;">
 </div>
 </div>
 <div class="profile-tab" onclick="switchProfileTab('likes')"
 style="flex: 1; text-align: center; padding: 14px 0; font-weight: 500; font-size: 15px; cursor: pointer; position: relative; color: #71767b;">
 <span data-i18n="profileLikes">喜欢</span>
 <div class="tab-indicator"
 style="position: absolute; bottom: 0; left: 25%; width: 50%; height: 3px; background-color: var(--x-accent); border-radius: 2px; display: none;">
 </div>
 </div>
 <div class="profile-tab" onclick="switchProfileTab('highlights')"
 style="flex: 1; text-align: center; padding: 14px 0; font-weight: 500; font-size: 15px; cursor: pointer; position: relative; color: #71767b;">
 <span data-i18n="profileHighlights">亮点</span>
 <div class="tab-indicator"
 style="position: absolute; bottom: 0; left: 25%; width: 50%; height: 3px; background-color: var(--x-accent); border-radius: 2px; display: none;">
 </div>
 </div>
 <div class="profile-tab" onclick="switchProfileTab('articles')"
 style="flex: 1; text-align: center; padding: 14px 0; font-weight: 500; font-size: 15px; cursor: pointer; position: relative; color: #71767b;">
 <span data-i18n="profileArticles">文章</span>
 <div class="tab-indicator"
 style="position: absolute; bottom: 0; left: 25%; width: 50%; height: 3px; background-color: var(--x-accent); border-radius: 2px; display: none;">
 </div>
 </div>
 <div class="profile-tab" onclick="switchProfileTab('media')"
 style="flex: 1; text-align: center; padding: 14px 0; font-weight: 500; font-size: 15px; cursor: pointer; position: relative; color: #71767b;">
 <span data-i18n="profileMedia">媒体</span>
 <div class="tab-indicator"
 style="position: absolute; bottom: 0; left: 25%; width: 50%; height: 3px; background-color: var(--x-accent); border-radius: 2px; display: none;">
 </div>
 </div>
 </div>

 <div class="profile-content" style="flex: 1;">

 <div id="profile-posts-content" class="profile-tab-content" style="display: block;">
 <div id="x-profile-tweets-container" style="padding: 0;">

 </div>
 </div>

 <div id="profile-likes-content" class="profile-tab-content" style="display: none;">
 <div style="padding: 60px 32px; text-align: center;">
 <div style="color: #71767b; font-size: 31px; font-weight: 800; margin-bottom: 8px;" data-i18n="profileNoLikes">还没有喜欢的推文</div>
 <div style="color: #71767b; font-size: 15px;" data-i18n="profileNoLikesDesc">当你喜欢一条推文时，它会显示在这里。</div>
 </div>
 </div>
 <div id="profile-highlights-content" class="profile-tab-content" style="display: none;">
 <div style="padding: 60px 32px; text-align: center;">
 <div style="color: #71767b; font-size: 31px; font-weight: 800; margin-bottom: 8px;" data-i18n="profileNoHighlights">还没有亮点</div>
 <div style="color: #71767b; font-size: 15px;" data-i18n="profileNoHighlightsDesc">点赞最多的推文会显示在这里。</div>
 </div>
 </div>
 <div id="profile-articles-content" class="profile-tab-content" style="display: none;">
 <div style="padding: 60px 32px; text-align: center;">
 <div style="color: #71767b; font-size: 31px; font-weight: 800; margin-bottom: 8px;" data-i18n="profileNoArticles">还没有文章</div>
 <div style="color: #71767b; font-size: 15px;" data-i18n="profileNoArticlesDesc">发布的文章会显示在这里。</div>
 </div>
 </div>
 <div id="profile-media-content" class="profile-tab-content" style="display: none;">
 <div style="padding: 60px 32px; text-align: center;">
 <div style="color: #71767b; font-size: 31px; font-weight: 800; margin-bottom: 8px;" data-i18n="profileNoMedia">还没有媒体</div>
 <div style="color: #71767b; font-size: 15px;" data-i18n="profileNoMediaDesc">包含照片和视频的推文会显示在这里。</div>
 </div>
 </div>
 </div>
 </div>
</div>

<div id="edit-profile-modal" class="profile-modal" onclick="closeEditProfileModal(event)" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(91, 112, 131, 0.4); z-index: 20; overflow-y: auto;
">
 <div class="modal-content" onclick="event.stopPropagation()" style="background-color:#000; margin: 40px auto; border-radius: 16px; max-width: 600px; width: calc(100% - 40px); max-height: calc(100vh - 80px); position: relative; overflow: hidden; ">

 <div class="modal-header" style="display: flex; align-items: center; justify-content: space-between; padding: 12px 16px; border-bottom: 1px solid #2f3336; position: sticky; top: 0; background-color:#000; z-index: 25; ">
 <div style="display: flex; align-items: center; gap: 24px;">

 <div class="modal-close-btn" onclick="closeEditProfileModal()" style="cursor: pointer; padding: 8px; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(239,243,244,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: #fff;">
 <g>
 <path
 d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z">
 </path>
 </g>
 </svg>
 </div>

 <h2 style="color: #fff; font-size: 20px; font-weight: 700; margin: 0; ">编辑个人资料</h2>
 </div>

 <button id="save-profile-btn" onclick="saveProfileChanges()" style="background-color:#fff; color: #000; border: none; border-radius: 20px; padding: 6px 16px; font-size: 15px; font-weight: 700; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='#d7dbdc'" onmouseout="this.style.backgroundColor='#fff'">
 保存
 </button>
 </div>

 <div class="modal-body" style="padding: 0; overflow-y: auto; max-height: calc(100vh - 140px); ">

 <div class="edit-cover-section" style="position: relative; height: 200px; background-color: #333; overflow: hidden; ">
 <img id="edit-cover-image" src="https://i.postimg.cc/qRzMB6nQ/default-cover.jpg"
 style="width: 100%; height: 100%; object-fit: cover;" alt="封面图">

 <div class="cover-edit-overlay" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-color: rgba(0, 0, 0, 0.4); display: flex; justify-content: center; align-items: center; gap: 12px; ">

 <div class="cover-edit-btn" onclick="editCoverImage()" style="background-color: rgba(0, 0, 0, 0.75); border-radius: 50%; padding: 12px; cursor: pointer; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(0,0,0,0.85)'"
 onmouseout="this.style.backgroundColor='rgba(0,0,0,0.75)'">
 <svg viewBox="0 0 24 24" style="width: 22px; height: 22px; fill: #fff;">
 <g>
 <path
 d="M3 5.5C3 4.119 4.119 3 5.5 3h13C19.881 3 21 4.119 21 5.5v13c0 1.381-1.119 2.5-2.5 2.5h-13C4.119 21 3 19.881 3 18.5v-13zM5.5 5c-.276 0-.5.224-.5.5v9.086l3-3 3 3 5-5 3 3V5.5c0-.276-.224-.5-.5-.5h-13zM19 15.414l-3-3-5 5-3-3-3 3V18.5c0 .276.224.5.5.5h13c.276 0 .5-.224.5-.5v-3.086zM9.75 7C8.784 7 8 7.784 8 8.75s.784 1.75 1.75 1.75 1.75-.784 1.75-1.75S10.716 7 9.75 7z">
 </path>
 </g>
 </svg>
 </div>

 <div class="cover-remove-btn" onclick="removeCoverImage()" style="background-color: rgba(0, 0, 0, 0.75); border-radius: 50%; padding: 12px; cursor: pointer; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(0,0,0,0.85)'"
 onmouseout="this.style.backgroundColor='rgba(0,0,0,0.75)'">
 <svg viewBox="0 0 24 24" style="width: 22px; height: 22px; fill: #fff;">
 <g>
 <path
 d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z">
 </path>
 </g>
 </svg>
 </div>
 </div>
 </div>

 <div class="edit-avatar-section" style="padding: 12px 16px; position: relative; margin-top: -67px; z-index: 3; ">
 <div style="position: relative; width: 134px;">
 <img id="edit-main-avatar" src="https://i.postimg.cc/pXxk1JXk/IMG-6442.jpg"
 style="width: 134px; height: 134px; border-radius: 50%; border: 4px solid #000; object-fit: cover; overflow: hidden; box-sizing: border-box;" alt="用户头像">

 <div class="avatar-edit-btn" onclick="editAvatarImage()" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: rgba(0, 0, 0, 0.75); border-radius: 50%; padding: 12px; cursor: pointer; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(0,0,0,0.85)'"
 onmouseout="this.style.backgroundColor='rgba(0,0,0,0.75)'">
 <svg viewBox="0 0 24 24" style="width: 22px; height: 22px; fill: #fff;">
 <g>
 <path
 d="M3 5.5C3 4.119 4.119 3 5.5 3h13C19.881 3 21 4.119 21 5.5v13c0 1.381-1.119 2.5-2.5 2.5h-13C4.119 21 3 19.881 3 18.5v-13zM5.5 5c-.276 0-.5.224-.5.5v9.086l3-3 3 3 5-5 3 3V5.5c0-.276-.224-.5-.5-.5h-13zM19 15.414l-3-3-5 5-3-3-3 3V18.5c0 .276.224.5.5.5h13c.276 0 .5-.224.5-.5v-3.086zM9.75 7C8.784 7 8 7.784 8 8.75s.784 1.75 1.75 1.75 1.75-.784 1.75-1.75S10.716 7 9.75 7z">
 </path>
 </g>
 </svg>
 </div>
 </div>
 </div>

 <div class="edit-form-section" style="padding: 24px 16px;">

 <div class="form-group" style="margin-bottom: 20px;">
 <label style="display: block; color: #8b98a5; font-size: 13px; font-weight: 400; margin-bottom: 2px; ">名称</label>
 <input type="text" id="edit-user-name" placeholder="名称" style="width: 100%; background-color: transparent; border: 1px solid #333; border-radius: 4px; color: #fff; padding: 12px; font-size: 17px; outline: none; transition: border-color 0.2s; box-sizing: border-box; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'" maxlength="50"
 oninput="updateCharacterCounts()">
 <div style="color: #8b98a5; font-size: 13px; margin-top: 4px;">0 / 50</div>
 </div>

 <div class="form-group" style="margin-bottom: 20px;">
 <label style="display: block; color: #8b98a5; font-size: 13px; font-weight: 400; margin-bottom: 2px; ">用户名</label>
 <input type="text" id="edit-user-handle" placeholder="用户名" style="width: 100%; background-color: transparent; border: 1px solid #333; border-radius: 4px; color: #fff; padding: 12px; font-size: 17px; outline: none; transition: border-color 0.2s; box-sizing: border-box; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'" maxlength="15"
 oninput="updateCharacterCounts()">
 <div style="color: #8b98a5; font-size: 13px; margin-top: 4px;">0 / 15</div>
 </div>

 <div class="form-group" style="margin-bottom: 20px;">
 <label style="display: block; color: #8b98a5; font-size: 13px; font-weight: 400; margin-bottom: 2px; ">自我介绍</label>
 <textarea id="edit-user-bio" placeholder="自我介绍" style="width: 100%; background-color: transparent; border: 1px solid #333; border-radius: 4px; color: #fff; padding: 12px; font-size: 17px; outline: none; transition: border-color 0.2s; box-sizing: border-box; resize: vertical; min-height: 80px; max-height: 150px; font-family: inherit; line-height: 1.3; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'" maxlength="160"
 oninput="updateCharacterCounts()"></textarea>
 <div style="color: #8b98a5; font-size: 13px; margin-top: 4px;">0 / 160</div>
 </div>

 <div class="form-group" style="margin-bottom: 25px;">
 <label style="display: block; color: #8b98a5; font-size: 13px; font-weight: 400; margin-bottom: 8px; ">自定义标签1</label>

 <div style="display: flex; gap: 8px; margin-bottom: 8px;">

 <input type="text" id="edit-tag1-icon" placeholder="✨" maxlength="2" style="width: 50px; background-color: transparent; border: 1px solid #333; border-radius: 4px; color: #fff; padding: 12px; font-size: 17px; outline: none; transition: border-color 0.2s; box-sizing: border-box; text-align: center; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'">

 <input type="text" id="edit-custom-tag1" placeholder="例如：科技爱好者" style="flex: 1; background-color: transparent; border: 1px solid #333; border-radius: 4px; color: #fff; padding: 12px; font-size: 17px; outline: none; transition: border-color 0.2s; box-sizing: border-box; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'" maxlength="30"
 oninput="updateCharacterCounts()">
 </div>

 <div style="display: flex; gap: 8px; align-items: center; margin-bottom: 4px;">
 <label style="color: #8b98a5; font-size: 12px; min-width: 40px;">颜色:</label>
 <input type="color" id="edit-tag1-color" value="#71767b" style="width: 40px; height: 32px; border: 1px solid #333; border-radius: 4px; background: transparent; cursor: pointer; outline: none; " onchange="updateTag1ColorFromPicker()">
 <input type="text" id="edit-tag1-color-text" placeholder="#71767b" maxlength="7" style="flex: 1; background-color: transparent; border: 1px solid #333; border-radius: 4px; color: #fff; padding: 8px 12px; font-size: 14px; outline: none; font-family: monospace; transition: border-color 0.2s; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'"
 oninput="updateTag1ColorFromText()" onchange="updateTag1ColorFromText()">
 </div>
 <div style="color: #8b98a5; font-size: 13px;">0 / 30</div>
 </div>

 <div class="form-group" style="margin-bottom: 25px;">
 <label style="display: block; color: #8b98a5; font-size: 13px; font-weight: 400; margin-bottom: 8px; ">自定义标签2</label>

 <div style="display: flex; gap: 8px; margin-bottom: 8px;">

 <input type="text" id="edit-tag2-icon" placeholder="📅" maxlength="2" style="width: 50px; background-color: transparent; border: 1px solid #333; border-radius: 4px; color: #fff; padding: 12px; font-size: 17px; outline: none; transition: border-color 0.2s; box-sizing: border-box; text-align: center; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'">

 <input type="text" id="edit-custom-tag2" placeholder="例如：2024年加入" style="flex: 1; background-color: transparent; border: 1px solid #333; border-radius: 4px; color: #fff; padding: 12px; font-size: 17px; outline: none; transition: border-color 0.2s; box-sizing: border-box; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'" maxlength="30"
 oninput="updateCharacterCounts()">
 </div>

 <div style="display: flex; gap: 8px; align-items: center; margin-bottom: 4px;">
 <label style="color: #8b98a5; font-size: 12px; min-width: 40px;">颜色:</label>
 <input type="color" id="edit-tag2-color" value="#71767b" style="width: 40px; height: 32px; border: 1px solid #333; border-radius: 4px; background: transparent; cursor: pointer; outline: none; " onchange="updateTag2ColorFromPicker()">
 <input type="text" id="edit-tag2-color-text" placeholder="#71767b" maxlength="7" style="flex: 1; background-color: transparent; border: 1px solid #333; border-radius: 4px; color: #fff; padding: 8px 12px; font-size: 14px; outline: none; font-family: monospace; transition: border-color 0.2s; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'"
 oninput="updateTag2ColorFromText()" onchange="updateTag2ColorFromText()">
 </div>
 <div style="color: #8b98a5; font-size: 13px;">0 / 30</div>
 </div>

 <div class="form-group" style="margin-bottom: 20px;">
 <label style="display: block; color: #8b98a5; font-size: 13px; font-weight: 400; margin-bottom: 2px; ">正在关注数量</label>
 <input type="text" id="edit-following-count" placeholder="156, 1.2K, 2.5M等" maxlength="20" style="width: 100%; background-color: transparent; border: 1px solid #333; border-radius: 4px; color: #fff; padding: 12px; font-size: 17px; outline: none; transition: border-color 0.2s; box-sizing: border-box; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'">
 <div style="color: #8b98a5; font-size: 13px; margin-top: 4px;">可输入任意数字、字母、符号组合</div>
 </div>

 <div class="form-group" style="margin-bottom: 20px;">
 <label style="display: block; color: #8b98a5; font-size: 13px; font-weight: 400; margin-bottom: 2px; ">关注者数量</label>
 <input type="text" id="edit-followers-count" placeholder="89, 1.5K, 3.2M等" maxlength="20" style="width: 100%; background-color: transparent; border: 1px solid #333; border-radius: 4px; color: #fff; padding: 12px; font-size: 17px; outline: none; transition: border-color 0.2s; box-sizing: border-box; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'">
 <div style="color: #8b98a5; font-size: 13px; margin-top: 4px;">可输入任意数字、字母、符号组合</div>
 </div>

 <div class="form-group" style="margin-bottom: 25px;">
 <label style="display: block; color: #8b98a5; font-size: 13px; font-weight: 400; margin-bottom: 8px; ">认证类型</label>
 <div style="color: #71767b; font-size: 12px; margin-bottom: 12px; line-height: 1.4;">
 选择您的认证类型，不同认证类型会显示不同的图标和含义。
 </div>

 <div style="margin-bottom: 12px;">
 <select id="edit-verification-type" style="width: 100%; background-color:#000; border: 1px solid #333; border-radius: 4px; color: #fff; padding: 12px; font-size: 17px; outline: none; transition: border-color 0.2s; box-sizing: border-box; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'"
 onchange="updateVerificationTypeUI()">
 <option value="none" style="background-color:#000; color: #fff;">无认证</option>
 <option value="verified" style="background-color:#000; color: #fff;">已认证 - 蓝色勾标</option>
 <option value="couple" style="background-color:#000; color: #fff;">情侣认证 - 白色心形</option>
 <option value="married" style="background-color:#000; color: #fff;">已婚认证 - 白色圆环</option>
 <option value="vip" style="background-color:#000; color: #fff;">VIP认证 - 白色菱形</option>
 </select>
 </div>

 <div id="couple-binding-section" style="display: none;">
 <label style="display: block; color: #8b98a5; font-size: 13px; font-weight: 400; margin-bottom: 8px; ">情侣对象角色</label>
 <div style="color: #71767b; font-size: 12px; margin-bottom: 8px; line-height: 1.4;">
 选择与您是情侣关系的角色。绑定后，其他推特观众都会知道你们的情侣关系。
 </div>
 <select id="edit-couple-character" style="width: 100%; background-color:#000; border: 1px solid #333; border-radius: 4px; color: #fff; padding: 12px; font-size: 17px; outline: none; transition: border-color 0.2s; box-sizing: border-box; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'">
 <option value="" style="background-color:#000; color: #fff;">未选择角色</option>

 </select>
 </div>
 </div>

 <div class="form-group" style="margin-bottom: 25px;">
 <label style="display: block; color: #8b98a5; font-size: 13px; font-weight: 400; margin-bottom: 8px; ">公众身份</label>
 <div style="color: #71767b; font-size: 12px; margin-bottom: 8px; line-height: 1.4;">
 描述您在X平台的公众身份（如明星、网红、博主等）。这将影响其他用户对您的讨论几率，身份越知名可能引起更多关注和讨论。此信息完全公开。
 </div>

 <div
 style="background-color: color-mix(in srgb, var(--x-accent) , 0.1); border: 1px solid var(--x-accent); border-radius: 6px; padding: 12px; margin-bottom: 12px;">
 <div style="color: var(--x-accent); font-size: 12px; line-height: 1.4;">
 <strong>📌 重要提醒：</strong>您将以完整身份进行互动，但<strong
 style="color: var(--x-accent);">X平台其他用户无法读取您的个人设定</strong>，仅能看到此公众身份信息。如需让其他用户了解的个人特点、背景经历等内容，请全部详细填写至公众身份中。
 </div>
 </div>
 <textarea id="edit-public-identity" placeholder="例如：知名科技博主、演员、歌手、网络红人等... 可详细描述您的公开背景、成就、特点等，无字数限制" style="width: 100%; background-color: transparent; border: 1px solid #333; border-radius: 4px; color: #fff; padding: 12px; font-size: 17px; outline: none; transition: border-color 0.2s; box-sizing: border-box; resize: vertical; min-height: 120px; max-height: 200px; font-family: inherit; line-height: 1.3; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'"></textarea>
 <div style="color: #8b98a5; font-size: 12px; margin-top: 4px;">💡 无字数限制，可详细描述您的公开信息</div>
 </div>

 <div class="form-group" style="margin-bottom: 25px;">
 <label style="display: block; color: #8b98a5; font-size: 13px; font-weight: 400; margin-bottom: 8px; ">真名设置</label>
 <div style="color: #71767b; font-size: 12px; margin-bottom: 12px; line-height: 1.4;">
 选择是否公开您的真实姓名。公开后，其他用户和角色都能看到您的真名，情侣认证时也会显示双方真名。
 </div>

 <div style="margin-bottom: 12px;">
 <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
 <input type="checkbox" id="edit-show-real-name" style="width: 16px; height: 16px; accent-color: var(--x-accent); " onchange="toggleRealNameInput()">
 <span style="color: #fff; font-size: 15px;">公开真实姓名</span>
 </label>
 </div>

 <div id="real-name-input-container" style="display: none;">
 <input type="text" id="edit-real-name" placeholder="请输入您的真实姓名" style="width: 100%; background-color: transparent; border: 1px solid #333; border-radius: 4px; color: #fff; padding: 12px; font-size: 17px; outline: none; transition: border-color 0.2s; box-sizing: border-box; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'" maxlength="50"
 oninput="updateCharacterCounts()">
 <div style="color: #8b98a5; font-size: 13px; margin-top: 4px;">0 / 50</div>
 </div>
 </div>

 <div class="form-group" style="margin-bottom: 20px;">
 <label style="display: block; color: #8b98a5; font-size: 13px; font-weight: 400; margin-bottom: 8px; ">角色身份识别</label>
 <div style="color: #71767b; font-size: 12px; margin-bottom: 12px; line-height: 1.4;">
 选择哪些角色知道您的真实身份。被选中的角色会认识您，在互动时会表现得像朋友一样。
 <br><br>
 <strong style="color: var(--x-accent);">功能说明：</strong><br>
 • 知道您身份的角色会在评论区与您自然互动<br>
 • 您发帖时，这些角色可能会来留言<br>
 • 只有已绑定X资料的角色才能被选择<br>
 • <strong style="color: var(--x-accent);">点击右侧按钮</strong>可设置专属的用户人设<br>
 • 🔵 蓝色<strong>+</strong>按钮：未设置 | 🟢 绿色<strong>✏️</strong>按钮：已设置
 </div>

 <div id="identity-characters-list" style="background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; padding: 12px; max-height: 200px; overflow-y: auto; ">

 </div>
 </div>
 </div>
 </div>
 </div>
</div>

<div id="compose-tweet-modal" class="compose-modal" onclick="closeComposeTweetModal(event)" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(91, 112, 131, 0.4); z-index: 20; overflow-y: auto;
">
 <div class="compose-modal-content" onclick="event.stopPropagation()" style="background-color:#000; margin: 40px auto; border-radius: 16px; max-width: 600px; width: calc(100% - 40px); max-height: calc(100vh - 80px); position: relative; overflow: hidden; ">

 <div class="compose-header" style="display: flex; align-items: center; justify-content: space-between; padding: 12px 16px; border-bottom: 1px solid #2f3336; position: sticky; top: 0; background-color:#000; z-index: 25; ">
 <div style="display: flex; align-items: center; gap: 24px;">

 <div class="compose-close-btn" onclick="closeComposeTweetModal()" style="cursor: pointer; padding: 8px; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(239,243,244,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: #fff;">
 <g>
 <path
 d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z">
 </path>
 </g>
 </svg>
 </div>
 </div>

 <button id="compose-tweet-btn" onclick="publishTweet()" disabled style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 20px; padding: 8px 20px; font-size: 15px; font-weight: 700; cursor: pointer; opacity: 0.5; transition: all 0.2s; ">
 发帖
 </button>
 </div>

 <div class="compose-body" style="padding: 16px; overflow-y: auto; max-height: calc(100vh - 200px); ">

 <div style="display: flex; gap: 12px; margin-bottom: 20px;">

 <img id="compose-user-avatar" src="https://i.postimg.cc/pXxk1JXk/IMG-6442.jpg" alt="用户头像"
 style="width: 48px; height: 48px; border-radius: 50%; flex-shrink: 0;">

 <div style="flex: 1; min-width: 0;">

 <textarea id="compose-text-input" placeholder="有什么新鲜事？" style="width: 100%; min-height: 120px; max-height: 300px; background: transparent; border: none; color: #fff; font-size: 20px; resize: none; outline: none; font-family: inherit; line-height: 1.3; box-sizing: border-box; " oninput="handleComposeInput()" onkeyup="processHashtagsAndMentions()"></textarea>

 <div id="quote-content-preview"
 style="display: none; margin-top: 16px; border: 1px solid #2f3336; border-radius: 16px; padding: 12px; background-color: rgba(0,0,0,0.3);">
 <div
 style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 8px;">
 <div style="display: flex; align-items: center; gap: 4px;">
 <svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: #71767b;">
 <g>
 <path
 d="M4.5 3.88l4.432 4.14-1.364 1.46L5.5 7.55V16c0 1.1.896 2 2 2H13v2H7.5c-2.209 0-4-1.791-4-4V7.55L1.432 9.48.068 8.02 4.5 3.88zM16.5 6H11V4h5.5c2.209 0 4 1.791 4 4v8.45l2.068-1.93 1.364 1.46-4.432 4.14-4.432-4.14 1.364-1.46 2.068 1.93V8c0-1.1-.896-2-2-2z">
 </path>
 </g>
 </svg>
 <span id="quote-type-text" style="color: #71767b; font-size: 13px;">引用推文</span>
 </div>
 <div onclick="removeQuoteContent()"
 style="cursor: pointer; padding: 4px; border-radius: 50%; transition: background-color 0.2s;"
 onmouseover="this.style.backgroundColor='rgba(239,243,244,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: #71767b;">
 <g>
 <path
 d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z">
 </path>
 </g>
 </svg>
 </div>
 </div>
 <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 8px;">
 <img id="quote-user-avatar" style="width: 20px; height: 20px; border-radius: 50%;" alt="用户头像">
 <span id="quote-user-name" style="font-weight: 600; color: #fff; font-size: 13px;"></span>
 <svg id="quote-user-verified" viewBox="0 0 24 24"
 style="width: 14px; height: 14px; fill: var(--x-accent); display: none;">
 <g>
 <path
 d="M22.25 12c0-1.43-.88-2.67-2.19-3.34.46-1.39.2-2.9-.81-3.91s-2.52-1.27-3.91-.81c-.66-1.31-1.91-2.19-3.34-2.19s-2.67.88-3.33 2.19c-1.4-.46-2.91-.2-3.92.81s-1.26 2.52-.8 3.91c-1.31.67-2.2 1.91-2.2 3.34s.89 2.67 2.2 3.34c-.46 1.39-.21 2.9.8 3.91s2.52 1.27 3.91.81c.67 1.31 1.91 2.19 3.34 2.19s2.68-.88 3.34-2.19c1.39.46 2.9.2 3.91-.81s1.27-2.52.81-3.91c1.31-.67 2.19-1.91 2.19-3.34zm-11.71 4.2L6.8 12.46l1.41-1.42 2.26 2.26 4.8-5.23 1.47 1.36-6.2 6.77z">
 </path>
 </g>
 </svg>
 <span id="quote-user-handle" style="color: #71767b; font-size: 13px;"></span>
 <span id="quote-user-time" style="color: #71767b; font-size: 13px;"></span>
 </div>
 <div id="quote-content-text"
 style="color: #fff; font-size: 14px; line-height: 1.3; word-wrap: break-word;"></div>

 <div id="quote-image-container" style="display: none;"></div>
 </div>

 <div style="display: flex; justify-content: flex-end; margin-top: 8px;">
 <div id="compose-char-count" style="color: #71767b; font-size: 13px; ">0 / 280</div>
 </div>

 <div id="business-task-selection" style="display: none; margin-top: 16px; margin-bottom: 16px;">
 <div style="background-color: #1a1a1a; border: 2px solid #f59e0b; border-radius: 12px; padding: 16px;">
 <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 12px;">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: #f59e0b;">
 <g><path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" /></g>
 </svg>
 <div style="color: #f59e0b; font-size: 15px; font-weight: 700;">选择商业任务</div>
 </div>
 <div id="business-tasks-list" style="display: flex; flex-direction: column; gap: 8px;">

 </div>
 </div>
 </div>

 <div style="margin-top: 16px;">

 <div id="compose-image-section" style="display: none; margin-bottom: 16px;">
 <div style="background-color: #1a1a1a; border: 1px solid #333; border-radius: 12px; padding: 16px;">
 <div style="color: #fff; font-size: 15px; font-weight: 600; margin-bottom: 12px;">添加图片</div>

 <div style="display: flex; gap: 12px; margin-bottom: 16px;">
 <button onclick="selectImageMethod('description')" id="img-desc-btn" style="flex: 1; background-color: #333; color: #fff; border: 1px solid #536471; border-radius: 8px; padding: 8px 12px; font-size: 13px; cursor: pointer; transition: all 0.2s; ">文字描述</button>
 <button onclick="selectImageMethod('upload')" id="img-upload-btn" style="flex: 1; background-color: #333; color: #fff; border: 1px solid #536471; border-radius: 8px; padding: 8px 12px; font-size: 13px; cursor: pointer; transition: all 0.2s; ">本地上传</button>
 </div>

 <div id="image-description-input" style="display: none;">
 <textarea placeholder="描述图片内容..." style="width: 100%; min-height: 80px; background-color:#000; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 15px; resize: vertical; outline: none; font-family: inherit; box-sizing: border-box; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'"></textarea>
 </div>

 <div id="image-upload-area" style="display: none;">
 <div style="border: 2px dashed #333; border-radius: 8px; padding: 20px; text-align: center; cursor: pointer; transition: all 0.2s; " onclick="triggerImageUpload()" onmouseover="this.style.borderColor='var(--x-accent)'"
 onmouseout="this.style.borderColor='#333'">
 <svg viewBox="0 0 24 24" style="width: 32px; height: 32px; fill: #71767b; margin-bottom: 8px;">
 <g>
 <path
 d="M3 5.5C3 4.119 4.119 3 5.5 3h13C19.881 3 21 4.119 21 5.5v13c0 1.381-1.119 2.5-2.5 2.5h-13C4.119 21 3 19.881 3 18.5v-13zM5.5 5c-.276 0-.5.224-.5.5v9.086l3-3 3 3 5-5 3 3V5.5c0-.276-.224-.5-.5-.5h-13zM19 15.414l-3-3-5 5-3-3-3 3V18.5c0 .276.224.5.5.5h13c.276 0 .5-.224.5-.5v-3.086zM9.75 7C8.784 7 8 7.784 8 8.75s.784 1.75 1.75 1.75 1.75-.784 1.75-1.75S10.716 7 9.75 7z">
 </path>
 </g>
 </svg>
 <div style="color: #71767b; font-size: 15px;">点击选择图片文件</div>
 <div style="color: #71767b; font-size: 13px; margin-top: 4px;">支持 JPG、PNG、GIF，最多4张，每张最大 5MB</div>
 </div>
 <input type="file" id="image-file-input" accept="image/*" multiple style="display: none;"
 onchange="handleImageUpload(event)">
 <div id="uploaded-image-preview" style="display: none; margin-top: 12px;">
 <div id="preview-images-container" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); gap: 8px;"></div>
 </div>
 </div>

 <div style="display: flex; gap: 8px; margin-top: 12px;">
 <button onclick="saveImageData()" style="flex: 1; background-color: var(--x-accent); color: #fff; border: none; border-radius: 8px; padding: 8px; font-size: 13px; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='#1a8cd8'"
 onmouseout="this.style.backgroundColor='var(--x-accent)'">
 保存图片
 </button>
 <button onclick="removeImage()" style="flex: 1; background-color: transparent; color: #f4212e; border: 1px solid #f4212e; border-radius: 8px; padding: 8px; font-size: 13px; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='rgba(244,33,46,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'">
 移除图片
 </button>
 </div>
 </div>
 </div>

 <div id="compose-location-section" style="display: none; margin-bottom: 16px;">
 <div style="background-color: #1a1a1a; border: 1px solid #333; border-radius: 12px; padding: 16px;">
 <div style="color: #fff; font-size: 15px; font-weight: 600; margin-bottom: 12px;">添加位置</div>
 <input type="text" id="location-input" placeholder="输入位置信息..." style="width: 100%; background-color:#000; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 15px; outline: none; box-sizing: border-box; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'">
 <div style="display: flex; gap: 8px; margin-top: 12px;">
 <button onclick="saveLocationData()" style="flex: 1; background-color: var(--x-accent); color: #fff; border: none; border-radius: 8px; padding: 8px; font-size: 13px; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='#1a8cd8'"
 onmouseout="this.style.backgroundColor='var(--x-accent)'">
 保存位置
 </button>
 <button onclick="removeLocation()" style="flex: 1; background-color: transparent; color: #f4212e; border: 1px solid #f4212e; border-radius: 8px; padding: 8px; font-size: 13px; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='rgba(244,33,46,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'">
 移除位置
 </button>
 </div>
 </div>
 </div>

 <div id="compose-link-section" style="display: none; margin-bottom: 16px;">
 <div style="background-color: #1a1a1a; border: 1px solid #333; border-radius: 12px; padding: 16px;">
 <div style="color: #fff; font-size: 15px; font-weight: 600; margin-bottom: 12px;">附带链接</div>

 <input type="text" id="link-title-input" placeholder="链接标题..." style="width: 100%; background-color:#000; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 15px; outline: none; box-sizing: border-box; margin-bottom: 12px; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'">

 <input type="text" id="link-url-input" placeholder="example.com" style="width: 100%; background-color:#000; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 15px; outline: none; box-sizing: border-box; margin-bottom: 12px; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'">

 <textarea id="link-description-input" placeholder="简述链接内容..." style="width: 100%; min-height: 60px; background-color:#000; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 15px; resize: vertical; outline: none; font-family: inherit; box-sizing: border-box; margin-bottom: 12px; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'"></textarea>

 <div style="margin-bottom: 12px;">
 <label
 style="display: block; color: #8b98a5; font-size: 13px; margin-bottom: 8px;">链接首图（可选）</label>
 <div style="border: 2px dashed #333; border-radius: 8px; padding: 16px; text-align: center; cursor: pointer; transition: all 0.2s; " onclick="triggerLinkImageUpload()" onmouseover="this.style.borderColor='var(--x-accent)'"
 onmouseout="this.style.borderColor='#333'">
 <svg viewBox="0 0 24 24" style="width: 24px; height: 24px; fill: #71767b; margin-bottom: 4px;">
 <g>
 <path
 d="M3 5.5C3 4.119 4.119 3 5.5 3h13C19.881 3 21 4.119 21 5.5v13c0 1.381-1.119 2.5-2.5 2.5h-13C4.119 21 3 19.881 3 18.5v-13zM5.5 5c-.276 0-.5.224-.5.5v9.086l3-3 3 3 5-5 3 3V5.5c0-.276-.224-.5-.5-.5h-13zM19 15.414l-3-3-5 5-3-3-3 3V18.5c0 .276.224.5.5.5h13c.276 0 .5-.224.5-.5v-3.086zM9.75 7C8.784 7 8 7.784 8 8.75s.784 1.75 1.75 1.75 1.75-.784 1.75-1.75S10.716 7 9.75 7z">
 </path>
 </g>
 </svg>
 <div style="color: #71767b; font-size: 13px;">点击上传链接首图</div>
 </div>
 <input type="file" id="link-image-input" accept="image/*" style="display: none;"
 onchange="handleLinkImageUpload(event)">
 <div id="link-image-preview" style="display: none; margin-top: 8px;">
 <img id="link-preview-image"
 style="width: 100%; max-height: 120px; object-fit: cover; border-radius: 8px;" alt="链接首图预览">
 </div>
 </div>
 <div style="display: flex; gap: 8px;">
 <button onclick="saveLinkData()" style="flex: 1; background-color: var(--x-accent); color: #fff; border: none; border-radius: 8px; padding: 8px; font-size: 13px; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='#1a8cd8'"
 onmouseout="this.style.backgroundColor='var(--x-accent)'">
 保存链接
 </button>
 <button onclick="removeLink()" style="flex: 1; background-color: transparent; color: #f4212e; border: 1px solid #f4212e; border-radius: 8px; padding: 8px; font-size: 13px; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='rgba(244,33,46,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'">
 移除链接
 </button>
 </div>
 </div>
 </div>

 <div
 style="display: flex; align-items: center; justify-content: space-between; border-top: 1px solid #2f3336; padding-top: 16px;">

 <div style="display: flex; gap: 16px;">

 <div id="image-btn" onclick="toggleImageSection()" style="padding: 8px; border-radius: 50%; cursor: pointer; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(29,155,240,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-accent);">
 <g>
 <path
 d="M3 5.5C3 4.119 4.119 3 5.5 3h13C19.881 3 21 4.119 21 5.5v13c0 1.381-1.119 2.5-2.5 2.5h-13C4.119 21 3 19.881 3 18.5v-13zM5.5 5c-.276 0-.5.224-.5.5v9.086l3-3 3 3 5-5 3 3V5.5c0-.276-.224-.5-.5-.5h-13zM19 15.414l-3-3-5 5-3-3-3 3V18.5c0 .276.224.5.5.5h13c.276 0 .5-.224.5-.5v-3.086zM9.75 7C8.784 7 8 7.784 8 8.75s.784 1.75 1.75 1.75 1.75-.784 1.75-1.75S10.716 7 9.75 7z">
 </path>
 </g>
 </svg>
 </div>

 <div id="location-btn" onclick="toggleLocationSection()" style="padding: 8px; border-radius: 50%; cursor: pointer; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(29,155,240,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-accent);">
 <g>
 <path
 d="M12 7c-1.93 0-3.5 1.57-3.5 3.5S10.07 14 12 14s3.5-1.57 3.5-3.5S13.93 7 12 7zm0 5c-.827 0-1.5-.673-1.5-1.5S11.173 9 12 9s1.5.673 1.5 1.5S12.827 12 12 12zm0-10c-4.687 0-8.5 3.813-8.5 8.5 0 5.967 7.621 11.116 7.945 11.332l.555.37.555-.37C12.879 21.616 20.5 16.467 20.5 10.5 20.5 5.813 16.687 2 12 2zm0 17.77c-1.665-1.241-6.5-5.196-6.5-9.27C5.5 6.916 8.416 4 12 4s6.5 2.916 6.5 6.5c0 4.073-4.835 8.028-6.5 9.27z">
 </path>
 </g>
 </svg>
 </div>

 <div id="attach-btn" onclick="toggleLinkSection()" style="padding: 8px; border-radius: 50%; cursor: pointer; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(29,155,240,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-accent);">
 <g>
 <path
 d="M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z">
 </path>
 </g>
 </svg>
 </div>
 </div>

 <div id="privacy-setting-btn" onclick="togglePrivacySettings()" style="display: flex; align-items: center; gap: 8px; padding: 8px 12px; border-radius: 20px; cursor: pointer; border: 1px solid #536471; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(255,255,255,0.03)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg id="privacy-icon" viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: var(--x-accent);">
 <g>
 <path id="privacy-icon-path"
 d="M12 1.75C6.34 1.75 1.75 6.34 1.75 12S6.34 22.25 12 22.25 22.25 17.66 22.25 12 17.66 1.75 12 1.75zm-.81 14.68l-4.1-3.27 1.25-1.57 2.47 1.98 3.97-5.47 1.62 1.18-5.21 7.15z">
 </path>
 </g>
 </svg>
 <span id="privacy-text" style="color: var(--x-accent); font-size: 13px; font-weight: 600;">所有人可以回复</span>
 </div>
 </div>
 </div>
 </div>
 </div>
 </div>
 </div>
</div>

<div id="character-relationship-graph-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.85); z-index: 25; overflow-y: auto; backdrop-filter: blur(8px);
" onclick="closeCharacterRelationshipGraph(event)">
 <div style="background-color:#000; margin: 20px auto; border-radius: 16px; max-width: min(900px, calc(100vw - 20px)); width: calc(100% - 40px); max-height: calc(100vh - 40px); position: relative; overflow: hidden; border: 1px solid #333; " onclick="event.stopPropagation()">

 <div style="display: flex; align-items: center; justify-content: space-between; padding: 16px 20px; border-bottom: 1px solid #333; background-color:#000; ">
 <div style="display: flex; align-items: center; gap: 12px;">
 <h2 style="color: #fff; font-size: 20px; font-weight: 700; margin: 0;">角色关系图编辑器</h2>
 <div style="color: #71767b; font-size: 13px; display: flex; align-items: center; gap: 8px;">
 <span id="graph-character-count">0 角色</span>
 <span>·</span>
 <span id="graph-link-count">0 关系</span>
 </div>
 </div>
 <div onclick="closeCharacterRelationshipGraph()" style="cursor: pointer; padding: 8px; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(239,243,244,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: #fff;">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </div>
 </div>

 <div style="display: flex; align-items: center; gap: 12px; padding: 12px 20px; border-bottom: 1px solid #333; background-color: #0a0a0a; ">
 <button onclick="addRelationshipLink()" style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 20px; padding: 8px 16px; font-size: 13px; font-weight: 600; cursor: pointer; transition: all 0.2s; display: flex; align-items: center; gap: 6px; " onmouseover="this.style.backgroundColor='#1a8cd8'"
 onmouseout="this.style.backgroundColor='var(--x-accent)'">
 <svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: currentColor;">
 <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
 </svg>
 添加关系
 </button>
 <button onclick="clearAllRelationships()" style="background-color: transparent; color: #f4212e; border: 1px solid #f4212e; border-radius: 20px; padding: 8px 16px; font-size: 13px; font-weight: 600; cursor: pointer; transition: all 0.2s; display: flex; align-items: center; gap: 6px; " onmouseover="this.style.backgroundColor='rgba(244,33,46,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: currentColor;">
 <path d="M5 20a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V8h2V6h-4V4a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v2H3v2h2zM9 4h6v2H9zM8 8h9v12H7V8z"/>
 </svg>
 清空所有
 </button>
 <div style="margin-left: auto; color: #71767b; font-size: 12px;">
 点击角色头像连线，点击连线编辑关系
 </div>
 </div>

 <div style="height: min(500px, 60vh); background-color:#000; position: relative; overflow: hidden; ">
 <canvas id="relationship-graph-canvas" style="width: 100%; height: 100%; display: block; cursor: grab; "></canvas>

 <div id="graph-empty-state" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center; color: #71767b; pointer-events: none; ">
 <svg viewBox="0 0 24 24" style="width: 64px; height: 64px; fill: #2f3336; margin-bottom: 12px;">
 <path d="M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5z"/>
 </svg>
 <div style="font-size: 15px; margin-bottom: 4px;">暂无角色关系</div>
 <div style="font-size: 13px; opacity: 0.7;">请先绑定角色，然后点击"添加关系"</div>
 </div>
 </div>

 <div style="max-height: 200px; overflow-y: auto; background-color: #0a0a0a; border-top: 1px solid #333; ">
 <div style="padding: 12px 20px; border-bottom: 1px solid #333;">
 <div style="color: #fff; font-size: 15px; font-weight: 600;">关系列表</div>
 </div>
 <div id="relationship-links-list" style="padding: 12px 20px;">

 </div>
 </div>

 <div style="display: flex; gap: 12px; padding: 16px 20px; border-top: 1px solid #333; background-color:#000; ">
 <button onclick="closeCharacterRelationshipGraph()" style="flex: 1; background-color: transparent; color: #fff; border: 1px solid #536471; border-radius: 20px; padding: 12px; font-size: 15px; font-weight: 700; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='rgba(255,255,255,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'">
 取消
 </button>
 <button onclick="saveRelationshipGraph()" style="flex: 1; background-color: var(--x-accent); color: #fff; border: none; border-radius: 20px; padding: 12px; font-size: 15px; font-weight: 700; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='#1a8cd8'"
 onmouseout="this.style.backgroundColor='var(--x-accent)'">
 保存关系图
 </button>
 </div>
 </div>
</div>

<div id="edit-relationship-detail-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.8); z-index: 30; backdrop-filter: blur(4px);
" onclick="closeEditRelationshipDetail(event)">
 <div style="background-color:#000; margin: 60px auto; border-radius: 16px; max-width: min(500px, calc(100vw - 20px)); width: calc(100% - 40px); border: 1px solid #333; " onclick="event.stopPropagation()">

 <div style="display: flex; align-items: center; justify-content: space-between; padding: 16px 20px; border-bottom: 1px solid #333; ">
 <h3 style="color: #fff; font-size: 18px; font-weight: 700; margin: 0;">编辑关系</h3>
 <div onclick="closeEditRelationshipDetail()" style="cursor: pointer; padding: 8px; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(239,243,244,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: #fff;">
 <path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"/>
 </svg>
 </div>
 </div>

 <div style="padding: 20px;">

 <div id="relationship-characters-info" style="display: flex; align-items: center; justify-content: space-between; padding: 12px; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; margin-bottom: 20px; ">
 <div style="flex: 1; text-align: center;">
 <div id="char-a-name" style="color: #fff; font-size: 14px; font-weight: 600;"></div>
 </div>
 <div style="color: #71767b; font-size: 20px; margin: 0 12px;">⇆</div>
 <div style="flex: 1; text-align: center;">
 <div id="char-b-name" style="color: #fff; font-size: 14px; font-weight: 600;"></div>
 </div>
 </div>

 <div style="margin-bottom: 20px;">
 <label style="display: block; color: #fff; font-size: 14px; font-weight: 600; margin-bottom: 8px;">
 <span id="char-a-to-b-label"></span>
 </label>
 <input type="text" id="relationship-a-to-b" placeholder="例如：好朋友、同事、哥哥等" style="width: 100%; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 14px; outline: none; box-sizing: border-box; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'">
 </div>

 <div style="margin-bottom: 20px;">
 <label style="display: block; color: #fff; font-size: 14px; font-weight: 600; margin-bottom: 8px;">
 <span id="char-b-to-a-label"></span>
 </label>
 <input type="text" id="relationship-b-to-a" placeholder="例如：好朋友、同事、妹妹等" style="width: 100%; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 14px; outline: none; box-sizing: border-box; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'">
 </div>

 <div style="margin-bottom: 24px;">
 <label style="display: block; color: #fff; font-size: 14px; font-weight: 600; margin-bottom: 8px;">
 关系情节 (可选)
 </label>
 <textarea id="relationship-story" placeholder="补充背景故事、相识经历等..." style="width: 100%; min-height: 80px; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 14px; outline: none; box-sizing: border-box; resize: vertical; font-family: inherit; line-height: 1.4; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'"></textarea>
 <div style="color: #71767b; font-size: 12px; margin-top: 4px;">
 例如：如何相识、共同经历、特殊事件等
 </div>
 </div>

 <div style="display: flex; gap: 12px;">
 <button onclick="deleteRelationshipLink()" style="flex: 1; background-color: transparent; color: #f4212e; border: 1px solid #f4212e; border-radius: 20px; padding: 10px; font-size: 14px; font-weight: 700; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='rgba(244,33,46,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'">
 删除关系
 </button>
 <button onclick="saveRelationshipDetail()" style="flex: 1; background-color: var(--x-accent); color: #fff; border: none; border-radius: 20px; padding: 10px; font-size: 14px; font-weight: 700; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='#1a8cd8'"
 onmouseout="this.style.backgroundColor='var(--x-accent)'">
 保存
 </button>
 </div>
 </div>
 </div>
</div>

<div id="npc-edit-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(91, 112, 131, 0.4); z-index: 20; overflow-y: auto;
" onclick="closeNPCEditModal(event)">
 <div style="background-color:#000; margin: 40px auto; border-radius: 16px; max-width: 600px; width: calc(100% - 40px); max-height: calc(100vh - 80px); position: relative; overflow: hidden; " onclick="event.stopPropagation()">

 <div style="display: flex; align-items: center; justify-content: space-between; padding: 16px; border-bottom: 1px solid #2f3336; ">
 <div style="display: flex; align-items: center; gap: 24px;">
 <div onclick="closeNPCEditModal()" style="cursor: pointer; padding: 8px; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(239,243,244,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: #fff;">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </div>
 <h2 style="color: #fff; font-size: 20px; font-weight: 700; margin: 0;" id="npc-modal-title">编辑NPC</h2>
 </div>
 </div>

 <div style="padding: 20px; overflow-y: auto; max-height: calc(100vh - 200px);">

 <div style="margin-bottom: 20px;">
 <label style="display: block; color: #8b98a5; font-size: 13px; margin-bottom: 8px;">NPC姓名</label>
 <input type="text" id="npc-name" placeholder="输入NPC姓名" style="width: 100%; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 15px; outline: none; box-sizing: border-box; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'" maxlength="50">
 </div>

 <div style="margin-bottom: 20px;">
 <label style="display: block; color: #8b98a5; font-size: 13px; margin-bottom: 8px;">NPC句柄</label>
 <input type="text" id="npc-handle" placeholder="@句柄" style="width: 100%; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 15px; outline: none; box-sizing: border-box; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'" maxlength="30">
 </div>

 <div style="margin-bottom: 20px;">
 <label style="display: block; color: #8b98a5; font-size: 13px; margin-bottom: 8px;">NPC头像URL</label>
 <input type="text" id="npc-avatar" placeholder="输入头像URL" style="width: 100%; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 15px; outline: none; box-sizing: border-box; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'">
 </div>

 <div style="margin-bottom: 20px;">
 <label style="display: block; color: #8b98a5; font-size: 13px; margin-bottom: 8px;">NPC人设</label>
 <textarea id="npc-personality" placeholder="描述NPC的性格、背景、行为特征..." style="width: 100%; min-height: 120px; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 15px; resize: vertical; outline: none; box-sizing: border-box; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'"></textarea>
 </div>

 <div style="margin-bottom: 20px;">
 <label style="display: block; color: #8b98a5; font-size: 13px; margin-bottom: 8px;">发帖习惯</label>
 <textarea id="npc-posting-habits" placeholder="描述NPC的发帖风格、频率、内容偏好..." style="width: 100%; min-height: 100px; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 15px; resize: vertical; outline: none; box-sizing: border-box; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'"></textarea>
 </div>

 <div style="margin-bottom: 20px;">
 <label style="display: block; color: #8b98a5; font-size: 13px; margin-bottom: 8px;">主页内容设置</label>
 <textarea id="npc-homepage" placeholder="描述NPC主页的展示内容、简介等..." style="width: 100%; min-height: 80px; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; color: #fff; padding: 12px; font-size: 15px; resize: vertical; outline: none; box-sizing: border-box; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='#333'"></textarea>
 </div>

 <div style="margin-bottom: 20px;">
 <label style="display: block; color: #8b98a5; font-size: 13px; margin-bottom: 8px;">绑定用户（可多选）</label>
 <div id="npc-bind-users" style="background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; padding: 12px; max-height: 200px; overflow-y: auto; ">

 </div>
 </div>

 <button onclick="saveNPC()" style="width: 100%; background-color: var(--x-accent); color: #fff; border: none; border-radius: 25px; padding: 14px; font-size: 16px; font-weight: 700; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='#1a8cd8'" onmouseout="this.style.backgroundColor='var(--x-accent)'">
 保存NPC
 </button>
 </div>
 </div>
</div>

<div id="x-askbox-page" class="x-page" style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; display: none; flex-direction: column; overflow: hidden; z-index: 15;">

 <div id="askbox-background" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-image: url('https://i.postimg.cc/7LqVqxt4/mmexport1759588659314.jpg'); background-size: cover; background-position: center; z-index: 0; "></div>

 <div style="position: relative; z-index: 1; width: 100%; height: 100%; display: flex; flex-direction: column; overflow-y: auto; padding-top: 20px;">

 <div style="display: flex; justify-content: space-between; align-items: center; padding: 20px 16px 12px 16px;">

 <div onclick="switchXPage('profile')" style="cursor: pointer; padding: 8px; border-radius: 50%; background-color: rgba(255,255,255,0.2); backdrop-filter: blur(10px); transition: all 0.2s;"
 onmouseover="this.style.backgroundColor='rgba(255,255,255,0.3)'"
 onmouseout="this.style.backgroundColor='rgba(255,255,255,0.2)'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: #fff;">
 <path d="M7.414 13l5.043 5.04-1.414 1.42L3.586 12l7.457-7.46 1.414 1.42L7.414 11H21v2H7.414z"/>
 </svg>
 </div>

 <div onclick="openAskboxSettings()" style="cursor: pointer; padding: 8px; border-radius: 50%; background-color: rgba(255,255,255,0.2); backdrop-filter: blur(10px); transition: all 0.2s;"
 onmouseover="this.style.backgroundColor='rgba(255,255,255,0.3)'"
 onmouseout="this.style.backgroundColor='rgba(255,255,255,0.2)'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: #fff;">
 <path d="M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58c.18-.14.23-.41.12-.61l-1.92-3.32c-.12-.22-.37-.29-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54c-.04-.24-.24-.41-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.57-1.62.94l-2.39-.96c-.22-.08-.47 0-.59.22L2.74 8.87c-.12.21-.08.47.12.61l2.03 1.58c-.05.3-.09.63-.09.94s.02.64.07.94l-2.03 1.58c-.18.14-.23.41-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61l-2.01-1.58zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6z"/>
 </svg>
 </div>
 </div>

 <div style="display: flex; flex-direction: column; align-items: center; padding: 20px 16px;">

 <div onclick="changeAskboxAvatar()" style="cursor: pointer; margin-bottom: 12px; position: relative; transition: transform 0.2s;"
 onmouseover="this.style.transform='scale(1.05)'"
 onmouseout="this.style.transform='scale(1)'">
 <img id="askbox-avatar" src="https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg"
 style="width: 80px; height: 80px; border-radius: 50%; border: 3px solid rgba(255,255,255,0.8); box-shadow: 0 4px 12px rgba(0,0,0,0.15);">
 </div>

 <div style="display: flex; align-items: center; gap: 8px; background-color: rgba(255,255,255,0.15); backdrop-filter: blur(10px); padding: 6px 12px; border-radius: 20px;">
 <span id="askbox-nickname"
 contenteditable="true"
 style="color: #fff; font-size: 14px; font-weight: 500; outline: none; cursor: text; min-width: 20px;"
 onblur="saveAskboxNickname()"
 onkeydown="if(event.key==='Enter'){event.preventDefault();this.blur();}">= =</span>
 </div>
 </div>

 <div style="margin: 0 20px 24px 20px; background-color: rgba(255,255,255,0.9); backdrop-filter: blur(10px); border-radius: 16px; padding: 32px 24px; box-shadow: 0 4px 16px rgba(0,0,0,0.1); transition: all 0.2s; min-height: 120px; display: flex; align-items: center; justify-content: center; ">
 <div id="askbox-prompt"
 contenteditable="true"
 style="color: #333; font-size: 16px; line-height: 1.6; text-align: center; word-break: break-word; outline: none; cursor: text; width: 100%; "
 onblur="saveAskboxPrompt()"
 onkeydown="if(event.key==='Enter'&&!event.shiftKey){event.preventDefault();this.blur();}">请向我匿名提问!waiting...</div>
 </div>

 <div onclick="getNewQuestion()" style="margin: 0 20px 32px 20px; background-color: rgba(255,255,255,0.85); backdrop-filter: blur(10px); border-radius: 24px; padding: 14px 24px; text-align: center; cursor: pointer; transition: all 0.2s; box-shadow: 0 2px 8px rgba(0,0,0,0.1); " onmouseover="this.style.backgroundColor='rgba(255,255,255,0.95)'; this.style.transform='translateY(-1px)'"
 onmouseout="this.style.backgroundColor='rgba(255,255,255,0.85)'; this.style.transform='translateY(0)'">
 <span style="color: #333; font-size: 15px; font-weight: 600;">获取新的提问</span>
 </div>

 <div style="padding: 0 20px 20px 20px;">
 <div id="answered-questions-title" style="color: rgba(255,255,255,0.8); font-size: 15px; font-weight: 500; margin-bottom: 16px; text-align: center; display: none; ">最新提问如下</div>
 <div id="answered-questions-list">

 </div>
 </div>
 </div>
</div>

<!-- 直播页面 -->
<div id="x-live-page" class="x-page" style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; display: none; flex-direction: column; overflow: hidden; z-index: 21; background-color:#0f0f0f;">

<!-- 顶部导航栏 -->
<div style="display: flex; justify-content: space-between; align-items: center; padding: 55px 16px 12px 16px; position: sticky; top: 0; background-color:#0f0f0f; z-index: 10;">
  <div style="display: flex; align-items: center; gap: 16px;">
    <div onclick="switchXPage('home')" style="cursor: pointer;">
      <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: #fff;">
        <path d="M7.414 13l5.043 5.04-1.414 1.42L3.586 12l7.457-7.46 1.414 1.42L7.414 11H21v2H7.414z"/>
      </svg>
    </div>
    
    <div style="color: #fff; font-size: 20px; font-weight: 700;" data-i18n="liveTitle">直播</div>
  </div>
  
  <div style="display: flex; align-items: center; gap: 16px;">
    <div style="cursor: pointer;">
      <svg viewBox="0 0 24 24" style="width: 22px; height: 22px; fill: #fff;">
        <path d="M10.25 3.75c-3.59 0-6.5 2.91-6.5 6.5s2.91 6.5 6.5 6.5c1.795 0 3.419-.726 4.596-1.904 1.178-1.177 1.904-2.801 1.904-4.596 0-3.59-2.91-6.5-6.5-6.5zm-8.5 6.5c0-4.694 3.806-8.5 8.5-8.5s8.5 3.806 8.5 8.5c0 1.986-.682 3.815-1.824 5.262l4.781 4.781-1.414 1.414-4.781-4.781c-1.447 1.142-3.276 1.824-5.262 1.824-4.694 0-8.5-3.806-8.5-8.5z"></path>
      </svg>
    </div>
    <div style="width: 32px; height: 32px; border-radius: 50%; overflow: hidden;">
      <img id="live-page-user-avatar" src="https://i.postimg.cc/pXxk1JXk/IMG-6442.jpg" style="width: 100%; height: 100%; object-fit: cover;">
    </div>
  </div>
</div>

<!-- 用户频道栏 -->
<div style="overflow-x: auto; padding: 8px 16px; display: flex; gap: 16px; background-color:#0f0f0f;">
  <div style="display: flex; flex-direction: column; align-items: center; gap: 6px; min-width: 64px;">
    <div style="width: 56px; height: 56px; border-radius: 50%; overflow: hidden; position: relative;">
      <img src="https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg" style="width: 100%; height: 100%; object-fit: cover;">
      <div style="position: absolute; top: 0; right: 0; width: 18px; height: 18px; background-color: var(--x-accent); border-radius: 50%; display: flex; justify-content: center; align-items: center; border: 2px solid #0f0f0f;">
        <span style="color: white; font-size: 10px; font-weight: bold;">+</span>
      </div>
    </div>
    <span style="color: #fff; font-size: 12px; white-space: nowrap; text-overflow: ellipsis; overflow: hidden; max-width: 60px;">直播达人</span>
  </div>
</div>

<!-- 分类标签栏 -->
<div style="overflow-x: auto; white-space: nowrap; padding: 4px 16px; background-color:#0f0f0f;">
  <div id="live-categories-container" style="display: inline-flex; gap: 8px; padding-bottom: 4px;">
    <div class="live-tab live-tab-active" onclick="switchLiveTab('audio')" 
      style="padding: 8px 12px; background-color: rgba(255,255,255,0.1); border-radius: 16px; font-size: 14px; font-weight: 500; cursor: pointer; color: #fff;">
      <span data-i18n="liveAudioTab">语音直播</span>
    </div>
    <div class="live-tab" onclick="switchLiveTab('video')" 
      style="padding: 8px 12px; background-color: rgba(255,255,255,0.1); border-radius: 16px; font-size: 14px; font-weight: 500; cursor: pointer; color: #71767b;">
      <span data-i18n="liveVideoTab">视频直播</span>
    </div>
    <!-- 自定义分类将动态插入到这里 -->
    <div class="live-add-category-btn" onclick="openLiveCategoryModal()" 
      style="padding: 8px 10px; background-color: rgba(255,255,255,0.1); border-radius: 16px; font-size: 14px; font-weight: 500; cursor: pointer; color: #71767b; display: flex; align-items: center; min-width: 36px; justify-content: center;"
      onmouseover="this.style.backgroundColor='rgba(255,255,255,0.2)'"
      onmouseout="this.style.backgroundColor='rgba(255,255,255,0.1)'">
      <svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: currentColor;">
        <path d="M19.5 12.75h-6.75V19.5h-1.5v-6.75H4.5v-1.5h6.75V4.5h1.5v6.75h6.75v1.5z"></path>
      </svg>
    </div>
  </div>
</div>

<!-- 直播列表内容区域 -->
<div style="flex: 1; overflow-y: auto; padding: 0; background-color:#0f0f0f; position: relative;">
  <!-- 语音直播内容 -->
  <div id="live-audio-content" class="live-tab-content" style="display: block; padding: 16px 16px 80px 16px;">
    <div id="live-audio-list" style="display: flex; flex-direction: column; gap: 16px;">
      <!-- 动态生成的语音直播卡片将插入到这里 -->
    </div>
  </div>
  
  <!-- 视频直播内容 -->
  <div id="live-video-content" class="live-tab-content" style="display: none; padding: 16px 16px 80px 16px;">
    <div id="live-video-list" style="display: flex; flex-direction: column; gap: 16px;">
      <!-- 动态生成的视频直播卡片将插入到这里 -->
    </div>
  </div>
  
  <!-- 直播收纳按钮区域 -->
  <div id="live-action-container" style="position: fixed; bottom: 20px; left: 50%; transform: translateX(-50%); z-index: 15; display: flex; align-items: center; justify-content: center; pointer-events: none;">
        <!-- 刷新直播按钮 (左侧) -->
    <div id="live-refresh-btn" class="live-action-btn" onclick="refreshLiveStreams()" 
      style="position: absolute; right: 80px; top: 4px; width: 48px; height: 48px; border-radius: 50%; background-color: var(--x-accent); display: flex; justify-content: center; align-items: center; cursor: pointer; transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94); transform: scale(0); opacity: 0; box-shadow: 0 4px 12px rgba(0,0,0,0.3); pointer-events: auto;"
      onmouseover="handleLiveSubBtnMouseOver(this)"
      onmouseout="handleLiveSubBtnMouseOut(this)"
      ontouchstart="handleLiveSubBtnTouchStart(this)"
      ontouchend="handleLiveSubBtnTouchEnd(this)">
      <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: none; stroke: #fff; stroke-width: 1.5; stroke-linecap: round; stroke-linejoin: round;">
        <path d="M10.09 4.01l.496 -.495a2 2 0 0 1 2.828 0l7.071 7.07a2 2 0 0 1 0 2.83l-7.07 7.07a2 2 0 0 1 -2.83 0l-7.07 -7.07a2 2 0 0 1 0 -2.83l3.535 -3.535h-3.988" />
        <path d="M7.05 11.038v-3.988" />
      </svg>
    </div>
    
    <!-- 主收纳按钮 (中央) -->
    <div id="live-main-btn" class="live-action-btn" onclick="toggleLiveActionButtons()" 
      style="width: 56px; height: 56px; border-radius: 50%; background-color: var(--x-accent); display: flex; justify-content: center; align-items: center; cursor: pointer; transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94); box-shadow: 0 6px 20px rgba(0,0,0,0.4); position: relative; z-index: 16; pointer-events: auto;"
      onmouseover="handleLiveMainBtnMouseOver()"
      onmouseout="handleLiveMainBtnMouseOut()"
      ontouchstart="handleLiveMainBtnTouchStart()"
      ontouchend="handleLiveMainBtnTouchEnd()">
      <svg id="live-main-icon" viewBox="0 0 24 24" style="width: 24px; height: 24px; fill: none; stroke: #fff; stroke-width: 1.5; stroke-linecap: round; stroke-linejoin: round; transition: transform 0.3s ease;">
        <path d="M17.891 10.132a1.2 1.2 0 0 0 -.309 -2.228l-13.582 -3.904l3.904 13.563a1.2 1.2 0 0 0 2.228 .308" />
        <path d="M17.8 20.817l-2.172 1.138a.392 .392 0 0 1 -.568 -.41l.415 -2.411l-1.757 -1.707a.389 .389 0 0 1 .217 -.665l2.428 -.352l1.086 -2.193a.392 .392 0 0 1 .702 0l1.086 2.193l2.428 .352a.39 .39 0 0 1 .217 .665l-1.757 1.707l.414 2.41a.39 .39 0 0 1 -.567 .411l-2.172 -1.138z" />
      </svg>
    </div>
    
    <!-- 开启直播按钮 (右侧) -->
    <div id="live-start-btn" class="live-action-btn" onclick="startLiveStream()" 
      style="position: absolute; left: 80px; top: 4px; width: 48px; height: 48px; border-radius: 50%; background-color: var(--x-accent); display: flex; justify-content: center; align-items: center; cursor: pointer; transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94); transform: scale(0); opacity: 0; box-shadow: 0 4px 12px rgba(0,0,0,0.3); pointer-events: auto;"
      onmouseover="handleLiveSubBtnMouseOver(this)"
      onmouseout="handleLiveSubBtnMouseOut(this)"
      ontouchstart="handleLiveSubBtnTouchStart(this)"
      ontouchend="handleLiveSubBtnTouchEnd(this)">
      <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: none; stroke: #fff; stroke-width: 1.5; stroke-linecap: round; stroke-linejoin: round;">
        <path d="M7 4v16l13 -8z" />
      </svg>
    </div>
  </div>
</div>

</div>

<!-- 直播分类管理模态框 -->
<div id="live-category-manager-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.8); z-index: 30; overflow-y: auto; backdrop-filter: blur(8px);" onclick="closeLiveCategoryModal(event)">
  <div style="background-color:#0f0f0f; margin: 40px auto; border-radius: 16px; max-width: 600px; width: calc(100% - 40px); border: 1px solid #333;" onclick="event.stopPropagation()">
    
    <div style="display: flex; align-items: center; justify-content: space-between; padding: 16px 20px; border-bottom: 1px solid #333;">
      <h2 style="color: #fff; font-size: 20px; font-weight: 700; margin: 0;">管理直播分类</h2>
      <div onclick="closeLiveCategoryModal()" style="cursor: pointer; padding: 8px; border-radius: 50%; transition: background-color 0.2s;" 
        onmouseover="this.style.backgroundColor='rgba(255,255,255,0.1)'"
        onmouseout="this.style.backgroundColor='transparent'">
        <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: #fff;">
          <path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path>
        </svg>
      </div>
    </div>
    
    <div style="padding: 20px; max-height: calc(100vh - 200px); overflow-y: auto;">
      
      <div style="background-color: rgba(29,155,240,0.1); border: 1px solid var(--x-accent); border-radius: 8px; padding: 12px; margin-bottom: 20px;">
        <p style="color: var(--x-accent); font-size: 13px; line-height: 1.4; margin: 0;">
          💡 自定义直播分类将显示在标签栏中。可以添加任意分类（如"游戏"、"音乐"、"教育"等），并描述该分类下的内容类型。
        </p>
      </div>
      
      <div style="margin-bottom: 20px;">
        <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 12px;">
          <h3 style="color: #fff; font-size: 16px; font-weight: 600; margin: 0;">自定义分类</h3>
          <button onclick="addNewLiveCategory()" 
            style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 20px; padding: 6px 16px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.2s;" 
            onmouseover="this.style.opacity='0.9'"
            onmouseout="this.style.opacity='1'">
            + 添加分类
          </button>
        </div>
        
        <div id="live-custom-categories-list" style="display: flex; flex-direction: column; gap: 12px;">
          <!-- 动态生成的分类列表 -->
        </div>
      </div>
      
      <button onclick="saveLiveCustomCategories()" 
        style="width: 100%; background-color: var(--x-accent); color: #fff; border: none; border-radius: 25px; padding: 14px; font-size: 16px; font-weight: 700; cursor: pointer; transition: all 0.2s;" 
        onmouseover="this.style.opacity='0.9'"
        onmouseout="this.style.opacity='1'">
        保存设置
      </button>
    </div>
  </div>
</div>

<div id="x-article-page" class="x-page" style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; display: none; flex-direction: column; overflow: hidden; z-index: 21; background-color:var(--x-bg-primary);">
 <style>
 @import url("https://fontsapi.zeoseven.com/256/main/result.css"); @import url("data:text/css,%40font-face%7Bfont-family%3A%22ZSFT-685%22%3Bsrc%3Aurl(%22https%3A%2F%2Ffontsapi.zeoseven.com%2F685%2Fmain.woff2%22)%20format(%22woff2%22)%2Curl(%22https%3A%2F%2Ffontsapi-storage.zeoseven.com%2F685%2Fmain.woff2%22)%20format(%22woff2%22)%3Bfont-style%3Anormal%3Bfont-weight%3A400%3Bfont-display%3Aswap%3B%7D"); .article-title {
 font-family: "Huiwen-mincho", serif; }
 .article-title-en {
 font-family: "ZSFT-685", serif; }
 .article-content {
 line-height: 1.8; word-break: break-word; }
 .article-content strong {
 font-weight: 600; color: var(--x-accent); word-break: break-word; }
 .article-content em {
 font-style: italic; border-bottom: 2px solid var(--x-accent); padding-bottom: 2px; word-break: break-word; }
 @media (max-width: 600px) {
 .article-title {
 font-size: 22px !important; }
 .article-content {
 font-size: 14px !important; }
 }
 </style>

 <div style="position: relative; width: 100%; height: 100%; display: flex; flex-direction: column; overflow-y: auto;">

 <div style="display: flex; justify-content: space-between; align-items: center; padding: 40px 16px 12px 16px; position: sticky; top: 0; background-color:var(--x-bg-primary); z-index: 10; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">

 <div onclick="closeArticlePage()" style="cursor: pointer; padding: 8px; border-radius: 50%; background-color:var(--x-bg-secondary); transition: all 0.2s;"
 onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='var(--x-bg-secondary)'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-text-primary);">
 <path d="M7.414 13l5.043 5.04-1.414 1.42L3.586 12l7.457-7.46 1.414 1.42L7.414 11H21v2H7.414z"/>
 </svg>
 </div>

 <div onclick="shareArticle()" style="cursor: pointer; padding: 8px; border-radius: 50%; background-color:var(--x-bg-secondary); transition: all 0.2s;"
 onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='var(--x-bg-secondary)'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-text-primary);">
 <g><path d="M17.53 7.47l-5-5c-.293-.293-.768-.293-1.06 0l-5 5c-.294.293-.294.768 0 1.06s.767.294 1.06 0l3.72-3.72V15c0 .414.336.75.75.75s.75-.336.75-.75V4.81l3.72 3.72c.146.147.338.22.53.22s.384-.072.53-.22c.293-.293.293-.767 0-1.06z"></path><path d="M19.708 21.944H4.292C3.028 21.944 2 20.916 2 19.652V14c0-.414.336-.75.75-.75s.75.336.75.75v5.652c0 .437.355.792.792.792h15.416c.437 0 .792-.355.792-.792V14c0-.414.336-.75.75-.75s.75.336.75.75v5.652c0 1.264-1.028 2.292-2.292 2.292z"></path></g>
 </svg>
 </div>
 </div>

 <div id="article-cover" style="width: 100%; height: 35vh; min-height: 250px; max-height: 400px; background-size: cover; background-position: center; background-repeat: no-repeat; margin-bottom: 20px; "></div>

 <div style="padding: 0 16px 40px 16px; max-width: 800px; margin: 0 auto; width: 100%; box-sizing: border-box;">

 <h1 id="article-title" class="article-title" style="font-size: 24px; font-weight: 700; color:var(--x-text-primary); margin-bottom: 16px; line-height: 1.3; word-wrap: break-word; "></h1>

 <div style="display: flex; align-items: center; gap: 8px; padding-bottom: 12px; margin-bottom: 20px; border-bottom: 1px solid var(--x-border-color); flex-wrap: wrap; ">
 <span id="article-author" style="color:var(--x-text-secondary); font-size: 13px; "></span>
 <span style="color:var(--x-text-secondary);">·</span>
 <span id="article-source" style="color:var(--x-text-secondary); font-size: 13px; word-break: break-all; "></span>
 </div>

 <div id="article-body" class="article-content" style="color:var(--x-text-primary); font-size: 15px; white-space: pre-wrap; word-wrap: break-word; overflow-wrap: break-word; "></div>
 </div>
 </div>
</div>

<div id="account-profile-page" class="x-page" style="display: none; flex-direction: column; height: 100%; overflow: hidden;">

 <div style="display: flex; align-items: center; justify-content: space-between; padding: 10px 15px; border-bottom: 1px solid var(--x-border-color); background-color:var(--x-bg-primary); backdrop-filter: blur(12px); position: sticky; top: 0; z-index: 10;">
 <div style="display: flex; align-items: center;">
 <div onclick="closeAccountProfile()" style="cursor: pointer; padding: 8px; margin-right: 30px; border-radius: 50%; transition: background-color 0.2s;" onmouseover="this.style.backgroundColor='rgba(239,243,244,0.1)'" onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-text-primary);">
 <g><path d="M7.414 13l5.043 5.04-1.414 1.42L3.586 12l7.457-7.46 1.414 1.42L7.414 11H21v2H7.414z"></path></g>
 </svg>
 </div>
 <div>
 <div id="account-profile-nav-name" style="color:var(--x-text-primary); font-size: 20px; font-weight: 700; line-height: 1.2;"></div>
 <div id="account-profile-nav-count" style="color:var(--x-text-secondary); font-size: 13px; margin-top: 2px;">0 个帖子</div>
 </div>
 </div>

 <div style="display: flex; align-items: center; gap: 8px;">

 <div onclick="openAccountAskbox()" style="cursor: pointer; padding: 8px; border-radius: 50%; transition: background-color 0.2s;" onmouseover="this.style.backgroundColor='rgba(239,243,244,0.1)'" onmouseout="this.style.backgroundColor='transparent'" title="提问箱">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-text-primary);">
 <path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/>
 </svg>
 </div>

 <div onclick="refreshAccountProfile()" onmousedown="handleRefreshButtonMouseDown()" onmouseup="handleRefreshButtonMouseUp()" ontouchstart="handleRefreshButtonMouseDown()" ontouchend="handleRefreshButtonMouseUp()" style="cursor: pointer; padding: 8px; border-radius: 50%; transition: background-color 0.2s;" onmouseover="this.style.backgroundColor='rgba(239,243,244,0.1)'" onmouseout="this.style.backgroundColor='transparent'" title="刷新账户主页">
 <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="var(--x-text-primary)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
 <path d="M9 4.55a8 8 0 0 1 6 14.9m0 -4.45v5h5" />
 <path d="M5.63 7.16l0 .01" />
 <path d="M4.06 11l0 .01" />
 <path d="M4.63 15.1l0 .01" />
 <path d="M7.16 18.37l0 .01" />
 <path d="M11 19.94l0 .01" />
 </svg>
 </div>
 </div>
 </div>

 <div style="flex: 1; overflow-y: auto;">

 <div id="account-cover-image" style="width: 100%; height: 140px; background-color:var(--x-bg-secondary); background-size: cover; background-position: center; position: relative;"></div>

 <div style="padding: 8px 16px 0 16px;">

 <div style="display: flex; justify-content: space-between; align-items: flex-start; position: relative; margin-bottom: 12px;">

 <img id="account-avatar-image" src="" alt="账户头像" style="width: 68px; height: 68px; border-radius: 50%; border: 4px solid var(--x-bg-primary); background-color:var(--x-bg-primary); position: absolute; top: -34px; left: 0; object-fit: cover; overflow: hidden; box-sizing: border-box;">

 <div style="display: flex; gap: 8px; margin-left: auto; margin-top: 8px;">

 <button onclick="sendMessageToAccount()" style="width: 36px; height: 36px; border-radius: 50%; border: 1px solid var(--x-border-color); background: transparent; display: flex; align-items: center; justify-content: center; cursor: pointer; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(239,243,244,0.1)'" onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: var(--x-text-primary);">
 <g><path d="M1.998 5.5c0-1.381 1.119-2.5 2.5-2.5h15c1.381 0 2.5 1.119 2.5 2.5v13c0 1.381-1.119 2.5-2.5 2.5h-15c-1.381 0-2.5-1.119-2.5-2.5v-13zm2.5-.5c-.276 0-.5.224-.5.5v2.764l8 3.638 8-3.636V5.5c0-.276-.224-.5-.5-.5h-15zm15.5 5.463l-8 3.636-8-3.638V18.5c0 .276.224.5.5.5h15c.276 0 .5-.224.5-.5v-8.037z"></path></g>
 </svg>
 </button>

 <button id="account-notify-btn" onclick="toggleAccountNotifications()" style="width: 36px; height: 36px; border-radius: 50%; border: 1px solid var(--x-border-color); background: transparent; display: none; align-items: center; justify-content: center; cursor: pointer; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(239,243,244,0.1)'" onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: var(--x-text-primary);">
 <g><path d="M19.993 9.042C19.48 5.017 16.054 2 11.996 2s-7.49 3.021-7.999 7.051L2.866 18H7.1c.463 2.282 2.481 4 4.9 4s4.437-1.718 4.9-4h4.236l-1.143-8.958zM12 20c-1.306 0-2.417-.835-2.829-2h5.658c-.412 1.165-1.523 2-2.829 2zm-6.866-4l.847-6.698C6.364 6.272 8.941 4 11.996 4s5.627 2.268 6.013 5.295L18.864 16H5.134z"></path></g>
 </svg>
 </button>

 <button id="account-follow-btn" onclick="toggleAccountFollow()" style="min-width: 110px; height: 36px; border-radius: 18px; border: none; background: var(--x-text-primary); color: var(--x-bg-primary); font-size: 15px; font-weight: 700; cursor: pointer; transition: all 0.2s; padding: 0 16px; " onmouseover="if(this.textContent.includes('关注')||this.textContent.includes('Follow')){this.style.opacity='0.9';}" onmouseout="this.style.opacity='1';">
 关注
 </button>
 </div>
 </div>

 <div style="margin-bottom: 4px; margin-top: 8px; padding-left: 8px;">
 <div style="display: flex; align-items: center; gap: 4px;">
 <span id="account-display-name" style="color:var(--x-text-primary); font-size: 20px; font-weight: 800; line-height: 1.2;"></span>
 <div id="account-verified-badge" style="display: none;"></div>
 </div>
 </div>

 <div style="margin-bottom: 8px; padding-left: 8px;">
 <span id="account-handle-text" style="color:var(--x-text-secondary); font-size: 15px;"></span>
 </div>

 <div id="account-bio-text" style="color:var(--x-text-primary); font-size: 15px; line-height: 20px; margin-bottom: 8px; padding-left: 8px; display: none;"></div>

 <div id="account-tags-container" style="display: flex; flex-wrap: wrap; gap: 12px; margin-bottom: 12px; padding-left: 8px;"></div>

 <div style="display: flex; gap: 20px; margin-bottom: 16px; padding-left: 8px;">
 <div style="cursor: pointer;" onmouseover="this.querySelector('span').style.textDecoration='underline'" onmouseout="this.querySelector('span').style.textDecoration='none'">
 <span id="account-following-count" style="color:var(--x-text-primary); font-weight: 700; font-size: 14px;">0</span>
 <span style="color:var(--x-text-secondary); margin-left: 4px; font-size: 14px;" data-i18n="accountFollowingLabel">正在关注</span>
 </div>
 <div style="cursor: pointer;" onmouseover="this.querySelector('span').style.textDecoration='underline'" onmouseout="this.querySelector('span').style.textDecoration='none'">
 <span id="account-followers-count" style="color:var(--x-text-primary); font-weight: 700; font-size: 14px;">0</span>
 <span style="color:var(--x-text-secondary); margin-left: 4px; font-size: 14px;" data-i18n="accountFollowersLabel">关注者</span>
 </div>
 </div>

 <div id="account-follows-you" style="display: none; color:var(--x-text-secondary); font-size: 13px; margin-bottom: 16px; padding-left: 8px;" data-i18n="accountFollowsYou">
 关注你
 </div>
 </div>

 <div style="display: flex; border-bottom: 1px solid var(--x-border-color);">
 <div class="account-tab active" onclick="switchAccountTab('posts')" style="flex: 1; text-align: center; padding: 16px 0; font-size: 15px; font-weight: 700; color:var(--x-text-primary); cursor: pointer; position: relative; border-bottom: 4px solid var(--x-accent);">
 <span data-i18n="accountPostsTab">帖子</span>
 </div>
 <div class="account-tab" onclick="switchAccountTab('replies')" style="flex: 1; text-align: center; padding: 16px 0; font-size: 15px; font-weight: 500; color:var(--x-text-secondary); cursor: pointer; position: relative; border-bottom: 4px solid transparent;">
 <span data-i18n="accountRepliesTab">回复</span>
 </div>
 <div class="account-tab" onclick="switchAccountTab('likes')" style="flex: 1; text-align: center; padding: 16px 0; font-size: 15px; font-weight: 500; color:var(--x-text-secondary); cursor: pointer; position: relative; border-bottom: 4px solid transparent;">
 <span data-i18n="accountLikesTab">喜欢</span>
 </div>
 </div>

 <div id="account-tweets-container">

 </div>
 </div>
</div>

<div id="account-askbox-page" class="x-page" style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; display: none; flex-direction: column; overflow: hidden; z-index: 15;">

 <div id="account-askbox-background" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-image: url('https://i.postimg.cc/tJvBC00j/mmexport1759642131681.jpg'); background-size: cover; background-position: center; z-index: 0; "></div>

 <div style="position: relative; z-index: 1; width: 100%; height: 100%; display: flex; flex-direction: column; overflow-y: auto; padding-top: 20px;">

 <div style="display: flex; justify-content: space-between; align-items: center; padding: 20px 16px 12px 16px;">

 <div onclick="closeAccountAskbox()" style="cursor: pointer; padding: 8px; border-radius: 50%; background-color: rgba(255,255,255,0.2); backdrop-filter: blur(10px); transition: all 0.2s;"
 onmouseover="this.style.backgroundColor='rgba(255,255,255,0.3)'"
 onmouseout="this.style.backgroundColor='rgba(255,255,255,0.2)'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: #fff;">
 <path d="M7.414 13l5.043 5.04-1.414 1.42L3.586 12l7.457-7.46 1.414 1.42L7.414 11H21v2H7.414z"/>
 </svg>
 </div>

 <div onclick="openAccountAskboxSettings()" style="cursor: pointer; padding: 8px; border-radius: 50%; background-color: rgba(255,255,255,0.2); backdrop-filter: blur(10px); transition: all 0.2s;"
 onmouseover="this.style.backgroundColor='rgba(255,255,255,0.3)'"
 onmouseout="this.style.backgroundColor='rgba(255,255,255,0.2)'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: #fff;">
 <path d="M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58c.18-.14.23-.41.12-.61l-1.92-3.32c-.12-.22-.37-.29-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54c-.04-.24-.24-.41-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.57-1.62.94l-2.39-.96c-.22-.08-.47 0-.59.22l-1.92 3.32c-.12.22.07.47.12.61l2.03 1.58c-.05.3-.09.63-.09.94s.02.64.07.94l-2.03 1.58c-.18.14-.23.41-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61l-2.01-1.58zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6z"/>
 </svg>
 </div>
 </div>

 <div style="display: flex; flex-direction: column; align-items: center; padding: 20px 16px;">

 <div onclick="changeAccountAskboxAvatar()" style="cursor: pointer; margin-bottom: 12px; position: relative; transition: transform 0.2s;"
 onmouseover="this.style.transform='scale(1.05)'"
 onmouseout="this.style.transform='scale(1)'">
 <img id="account-askbox-avatar" src="https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg"
 style="width: 80px; height: 80px; border-radius: 50%; border: 3px solid rgba(255,255,255,0.8); box-shadow: 0 4px 12px rgba(0,0,0,0.15);">
 </div>

 <div style="display: flex; align-items: center; gap: 8px; background-color: rgba(255,255,255,0.15); backdrop-filter: blur(10px); padding: 6px 12px; border-radius: 20px;">
 <span id="account-askbox-nickname"
 contenteditable="true"
 style="color: #fff; font-size: 14px; font-weight: 500; outline: none; cursor: text; min-width: 20px;"
 onblur="saveAccountAskboxNickname()"
 onkeydown="if(event.key==='Enter'){event.preventDefault();this.blur();}">⩌⌯⩌</span>
 </div>
 </div>

 <div style="margin: 0 20px 24px 20px; background-color: rgba(255,255,255,0.9); backdrop-filter: blur(10px); border-radius: 16px; padding: 32px 24px; box-shadow: 0 4px 16px rgba(0,0,0,0.1); transition: all 0.2s; min-height: 120px; display: flex; align-items: center; justify-content: center; ">
 <div id="account-askbox-prompt"
 contenteditable="true"
 style="color: #333; font-size: 16px; line-height: 1.6; text-align: center; word-break: break-word; outline: none; cursor: text; width: 100%; "
 onblur="saveAccountAskboxPrompt()"
 onkeydown="if(event.key==='Enter'&&!event.shiftKey){event.preventDefault();this.blur();}">在这里输入你的匿名提问，或点击下方按钮生成随机提问...</div>
 </div>

 <div onclick="getNewAccountQuestion()" style="margin: 0 20px 32px 20px; background-color: rgba(255,255,255,0.85); backdrop-filter: blur(10px); border-radius: 24px; padding: 14px 24px; text-align: center; cursor: pointer; transition: all 0.2s; box-shadow: 0 2px 8px rgba(0,0,0,0.1); " onmouseover="this.style.backgroundColor='rgba(255,255,255,0.95)'; this.style.transform='translateY(-1px)'"
 onmouseout="this.style.backgroundColor='rgba(255,255,255,0.85)'; this.style.transform='translateY(0)'">
 <span style="color: #333; font-size: 15px; font-weight: 600;">获取回答 / 生成随机提问</span>
 </div>

 <div style="padding: 0 20px 20px 20px;">
 <div id="account-answered-questions-title" style="color: rgba(255,255,255,0.8); font-size: 15px; font-weight: 500; margin-bottom: 16px; text-align: center; display: none; ">最新提问如下</div>
 <div id="account-answered-questions-list">

 </div>
 </div>
 </div>
</div>
</div>

<div id="sticker-picker-modal" style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background-color: rgba(0, 0, 0, 0.5); display: none; align-items: center; justify-content: center; z-index: 40; " onclick="closeStickerPicker()">
<div style="background-color:var(--x-bg-primary); border-radius: 16px; max-width: 500px; width: 95%; max-height: 75vh; display: flex; flex-direction: column; box-shadow: 0 8px 32px rgba(0,0,0,0.4); " onclick="event.stopPropagation()">

<div style="padding: 16px; border-bottom: 1px solid var(--x-border-color); display: flex; align-items: center; justify-content: space-between; ">
<div style="font-size: 18px; font-weight: 700; color:var(--x-text-primary);">选择表情包</div>
<div onclick="closeStickerPicker()" style="cursor: pointer; padding: 4px; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
onmouseout="this.style.backgroundColor='transparent'">
<svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-text-primary);">
<g><path d="M10.59 12L4.54 5.96l1.06-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
</svg>
</div>
</div>

<div style="padding: 12px 16px 0 16px; display: flex; gap: 8px; border-bottom: 1px solid var(--x-border-color); ">
<div id="sticker-tab-frequent" onclick="switchStickerTab('frequent')" style="padding: 8px 16px; cursor: pointer; border-bottom: 2px solid var(--x-accent); color:var(--x-text-primary); font-size: 14px; font-weight: 600; transition: all 0.2s; ">常用</div>
<div id="sticker-tab-all" onclick="switchStickerTab('all')" style="padding: 8px 16px; cursor: pointer; border-bottom: 2px solid transparent; color:var(--x-text-secondary); font-size: 14px; font-weight: 600; transition: all 0.2s; ">全部</div>
</div>

<div id="sticker-list" style="flex: 1; overflow-y: auto; overflow-x: hidden; padding: 16px; display: grid; grid-template-columns: repeat(auto-fill, minmax(80px, 1fr)); gap: 12px; align-content: start; align-items: start; ">

</div>

<div style="padding: 16px; border-top: 1px solid var(--x-border-color); display: flex; justify-content: space-between; gap: 8px; ">
<button onclick="openAddStickerDialog()" style="background-color:var(--x-bg-secondary); color:var(--x-text-primary); border: none; border-radius: 20px; padding: 8px 16px; font-size: 14px; font-weight: 600; cursor: pointer; transition: background-color 0.2s; flex: 1; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
onmouseout="this.style.backgroundColor='var(--x-bg-secondary)'">
+ 导入表情包
</button>
<button onclick="openStickerManager()" style="background-color:var(--x-bg-secondary); color:var(--x-text-primary); border: none; border-radius: 20px; padding: 8px 16px; font-size: 14px; font-weight: 600; cursor: pointer; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
onmouseout="this.style.backgroundColor='var(--x-bg-secondary)'">
管理
</button>
</div>
</div>
</div>

<div class="x-bottom-nav"
style="display: flex; justify-content: space-around; padding: 10px 0; border-top: 1px solid #333; background-color:#000;">

<div class="x-nav-item active" onclick="switchXPage('home')"
style="display: flex; justify-content: center; align-items: center; position: relative; padding: 5px 15px; cursor: pointer;">
<svg viewBox="0 0 24 24" aria-hidden="true" style="width: 26px; height: 26px; fill: var(--x-accent);">
<g>
<path
d="M12 1.696L.622 8.807l1.06 1.696L3 9.679V19.5C3 20.881 4.119 22 5.5 22h13c1.381 0 2.5-1.119 2.5-2.5V9.679l1.318.824 1.06-1.696L12 1.696zM12 16.5c-1.933 0-3.5-1.567-3.5-3.5s1.567-3.5 3.5-3.5 3.5 1.567 3.5 3.5-1.567 3.5-3.5 3.5z">
</path>
</g>
</svg>

<div id="home-notification-dot" style="position: absolute; top: 2px; right: 8px; width: 8px; height: 8px; background-color: var(--x-accent); border-radius: 50%; border: 2px solid var(--x-bg-primary); display: none; "></div>

<div class="nav-highlight"
style="position: absolute; width: 5px; height: 5px; background-color: var(--x-accent); border-radius: 50%; bottom: -8px;">
</div>
</div>

 <div class="x-nav-item" onclick="switchXPage('search')"
 style="display: flex; justify-content: center; align-items: center; position: relative; padding: 5px 15px; cursor: pointer;">
 <svg viewBox="0 0 24 24" aria-hidden="true" style="width: 26px; height: 26px; fill: #fff;">
 <g>
 <path
 d="M10.25 3.75c-3.59 0-6.5 2.91-6.5 6.5s2.91 6.5 6.5 6.5c1.795 0 3.419-.726 4.596-1.904 1.178-1.177 1.904-2.801 1.904-4.596 0-3.59-2.91-6.5-6.5-6.5zm-8.5 6.5c0-4.694 3.806-8.5 8.5-8.5s8.5 3.806 8.5 8.5c0 1.986-.682 3.815-1.824 5.262l4.781 4.781-1.414 1.414-4.781-4.781c-1.447 1.142-3.276 1.824-5.262 1.824-4.694 0-8.5-3.806-8.5-8.5z">
 </path>
 </g>
 </svg>
 <div class="nav-highlight"
 style="position: absolute; width: 5px; height: 5px; background-color: var(--x-accent); border-radius: 50%; bottom: -8px; display: none;">
 </div>
 </div>

 <div class="x-nav-item" onclick="switchXPage('notifications')"
 style="display: flex; justify-content: center; align-items: center; position: relative; padding: 5px 15px; cursor: pointer;">
 <svg viewBox="0 0 24 24" aria-hidden="true" style="width: 26px; height: 26px; fill: #fff;">
 <g>
 <path
 d="M19.993 9.042C19.48 5.017 16.054 2 11.996 2s-7.49 3.021-7.999 7.051L2.866 18H7.1c.463 2.282 2.481 4 4.9 4s4.437-1.718 4.9-4h4.236l-1.143-8.958zM12 20c-1.306 0-2.417-.835-2.829-2h5.658c-.412 1.165-1.523 2-2.829 2zm-6.866-4l.847-6.698C6.364 6.272 8.941 4 11.996 4s5.627 2.268 6.013 5.295L18.864 16H5.134z">
 </path>
 </g>
 </svg>

 <div id="notifications-notification-dot" style="position: absolute; top: 2px; right: 8px; width: 8px; height: 8px; background-color: var(--x-accent); border-radius: 50%; border: 2px solid var(--x-bg-primary); display: none; "></div>
 <div class="nav-highlight"
 style="position: absolute; width: 5px; height: 5px; background-color: var(--x-accent); border-radius: 50%; bottom: -8px; display: none;">
 </div>
 </div>

 <div class="x-nav-item" onclick="switchXPage('messages')"
 style="display: flex; justify-content: center; align-items: center; position: relative; padding: 5px 15px; cursor: pointer;">
 <svg viewBox="0 0 24 24" aria-hidden="true" style="width: 26px; height: 26px; fill: #fff;">
 <g>
 <path
 d="M1.998 5.5c0-1.381 1.119-2.5 2.5-2.5h15c1.381 0 2.5 1.119 2.5 2.5v13c0 1.381-1.119 2.5-2.5 2.5h-15c-1.381 0-2.5-1.119-2.5-2.5v-13zm2.5-.5c-.276 0-.5.224-.5.5v2.764l8 3.638 8-3.636V5.5c0-.276-.224-.5-.5-.5h-15zm15.5 5.463l-8 3.636-8-3.638V18.5c0 .276.224.5.5.5h15c.276 0 .5-.224.5-.5v-8.037z">
 </path>
 </g>
 </svg>

 <div id="messages-notification-dot" style="position: absolute; top: 2px; right: 8px; width: 8px; height: 8px; background-color: var(--x-accent); border-radius: 50%; border: 2px solid var(--x-bg-primary); display: none; "></div>
 <div class="nav-highlight"
 style="position: absolute; width: 5px; height: 5px; background-color: var(--x-accent); border-radius: 50%; bottom: -8px; display: none;">
 </div>
 </div>
</div>

`; // 将创建的HTML添加到body
    document.body.appendChild(container);
    console.log('✅ X Social App: HTML结构已创建');
  }

  // 第三部分: 核心JavaScript功能
  // ============================================
  // === 工具函数集合 (从31766行开始) ===
  // X社交专用数据库配置函数
  function getXDB() {
    const db = new Dexie('XSocialDB');
    // 版本1：初始表结构
    db.version(1).stores({
      xTweetsData: '&id',
      xSettings: '&id',
      xPresets: '++id, name, createdAt',
      xUserProfile: '&id',
      xUserTweets: '&id',
      xCharacterProfiles: '&characterId',
      xActiveAccount: '&id',
      xAccountList: '&accountId, name, createdAt',
      xNPCs: '&id',
      xAskbox: '&id',
    });
    // 版本2：添加账户主页和账户提问箱表
    db.version(2).stores({
      xTweetsData: '&id',
      xSettings: '&id',
      xPresets: '++id, name, createdAt',
      xUserProfile: '&id',
      xUserTweets: '&id',
      xCharacterProfiles: '&characterId',
      xActiveAccount: '&id',
      xAccountList: '&accountId, name, createdAt',
      xNPCs: '&id',
      xAskbox: '&id',
      xAccountProfiles: '&handle, name, updatedAt',
      xAccountAskbox: '&id',
    });
    // 版本3：添加角色关系册表
    db.version(3).stores({
      xTweetsData: '&id',
      xSettings: '&id',
      xPresets: '++id, name, createdAt',
      xUserProfile: '&id',
      xUserTweets: '&id',
      xCharacterProfiles: '&characterId',
      xActiveAccount: '&id',
      xAccountList: '&accountId, name, createdAt',
      xNPCs: '&id',
      xAskbox: '&id',
      xAccountProfiles: '&handle, name, updatedAt',
      xAccountAskbox: '&id',
      xCharacterRelationships: '&id, accountId, lastUpdated',
    });
    // 版本4：确保所有表都存在
    db.version(4).stores({
      xTweetsData: '&id',
      xSettings: '&id',
      xPresets: '++id, name, createdAt',
      xUserProfile: '&id',
      xUserTweets: '&id',
      xCharacterProfiles: '&characterId',
      xActiveAccount: '&id',
      xAccountList: '&accountId, name, createdAt',
      xNPCs: '&id',
      xAskbox: '&id',
      xAccountProfiles: '&handle, name, updatedAt',
      xAccountAskbox: '&id',
      xCharacterRelationships: '&id, accountId, lastUpdated',
    });
    // 版本5：添加书签表（多账户隔离）
    db.version(5).stores({
      xTweetsData: '&id',
      xSettings: '&id',
      xPresets: '++id, name, createdAt',
      xUserProfile: '&id',
      xUserTweets: '&id',
      xCharacterProfiles: '&characterId',
      xActiveAccount: '&id',
      xAccountList: '&accountId, name, createdAt',
      xNPCs: '&id',
      xAskbox: '&id',
      xAccountProfiles: '&handle, name, updatedAt',
      xAccountAskbox: '&id',
      xCharacterRelationships: '&id, accountId, lastUpdated',
      xBookmarks: '&id, accountId, tweetId, bookmarkedAt',
    });
    // 版本6：添加喜欢表（多账户隔离）
    db.version(6).stores({
      xTweetsData: '&id',
      xSettings: '&id',
      xPresets: '++id, name, createdAt',
      xUserProfile: '&id',
      xUserTweets: '&id',
      xCharacterProfiles: '&characterId',
      xActiveAccount: '&id',
      xAccountList: '&accountId, name, createdAt',
      xNPCs: '&id',
      xAskbox: '&id',
      xAccountProfiles: '&handle, name, updatedAt',
      xAccountAskbox: '&id',
      xCharacterRelationships: '&id, accountId, lastUpdated',
      xBookmarks: '&id, accountId, tweetId, bookmarkedAt',
      xLikes: '&id, accountId, tweetId, likedAt',
    });
    return db;
  }
  // 原有全局数据库配置函数 - 用于访问API配置和角色信息
  function getDB() {
    return window.db; // 通过window访问
  }
  // 常用DOM操作工具函数
  const DOMUtils = {
    hide: selector => document.querySelectorAll(selector).forEach(el => (el.style.display = 'none')),
    show: (selector, display = 'block') =>
      document.querySelectorAll(selector).forEach(el => (el.style.display = display)),
    removeClass: (selector, className) =>
      document.querySelectorAll(selector).forEach(el => el.classList.remove(className)),
    addClass: (selector, className) => document.querySelectorAll(selector).forEach(el => el.classList.add(className)),
    setStyle: (selector, property, value) =>
      document.querySelectorAll(selector).forEach(el => (el.style[property] = value)),
  };
  // 句柄处理工具函数
  const HandleUtils = {
    // 清理并标准化句柄（移除@符号，转小写）
    clean: handle => {
      if (!handle) return '';
      return handle.replace('@', '').toLowerCase();
    },
    // 确保句柄以@开头
    ensureAt: handle => {
      if (!handle) return '';
      return handle.startsWith('@') ? handle : `@${handle}`;
    },
    // 比较两个句柄是否相同（忽略大小写和@符号）
    equals: (handle1, handle2) => {
      if (!handle1 || !handle2) return false;
      return HandleUtils.clean(handle1) === HandleUtils.clean(handle2);
    },
  }; // 字符串构建工具函数 - 简化重复的拼接逻辑
  const StringBuilders = {
    // 构建角色信息字符串
    buildCharacterInfo(char, xProfile, userXProfileInfo) {
      let info = `\n角色名：${char.name}`;
      info += `\n本名：${char.originalName}`;
      info += `\n人设：${char.settings.aiPersona || '无特定人设'}`; // 情侣认证关系
      if (userXProfileInfo.verificationType === 'couple' && userXProfileInfo.coupleCharacterId === char.id) {
        info += `\n【特殊关系】：该角色是用户的情侣认证对象，所有X平台观众都知道这层关系`;
      }
      // X平台身份信息
      info += `\n【X平台身份（必须严格使用）】：`;
      info += `\n- X用户名：${xProfile.xName}`;
      info += `\n- X句柄：@${xProfile.xHandle}`;
      info += `\n- X头像：${xProfile.xAvatar}`;
      info += `\n- 认证状态：${xProfile.xVerified ? '是' : '否'}`;
      if (xProfile.xBio) info += `\n- X简介：${xProfile.xBio}`;
      if (xProfile.publicIdentity) info += `\n- 公众身份：${xProfile.publicIdentity}`;
      if (xProfile.showRealName && xProfile.realName) {
        info += `\n- 真实姓名：${xProfile.realName}（已公开）`;
      }
      return info;
    },
    // 构建用户身份识别信息
    buildUserIdentityInfo(char, xProfile, userXProfileInfo) {
      const knowsUserIdentity = userXProfileInfo.knownIdentityCharacters.includes(char.id);
      let info = `\n【用户身份识别】：${knowsUserIdentity ? '知道用户身份' : '不知道用户身份'}`;
      if (knowsUserIdentity) {
        info += `\n- 该角色可以识别用户账号 ${userXProfileInfo.handle}（${userXProfileInfo.name}）`;
        info += `\n- 可以根据角色特定的用户人设与用户自然互动，回复时表现出认识`;
        const characterUserPersona = xProfile && xProfile.userPersona ? xProfile.userPersona : '';
        if (characterUserPersona.trim()) {
          info += `\n- 该角色了解的用户信息：${characterUserPersona.substring(0, 150)}${
            characterUserPersona.length > 150 ? '...' : ''
          }`;
        } else {
          info += `\n- 该角色尚未设置用户人设信息，按基础认识模式互动`;
        }
      } else {
        info += `\n- 该角色完全不知道用户的真实身份，按照陌生人模式回复`;
      }
      return info;
    },
    // 构建NPC关系信息
    buildNPCRelationships(xProfile) {
      if (!xProfile.relationships || xProfile.relationships.length === 0) return '';
      let info = `\n【已绑定NPC关系】：`;
      xProfile.relationships.forEach(rel => {
        info += `\n- ${rel.npcName} (${rel.npcHandle}): ${rel.relationshipType}`;
        if (rel.description) info += ` | ${rel.description}`;
      });
      info += `\n注意：当该角色参与回复时，其绑定的NPC也可能出现在回复中，要体现相应的关系特点。`;
      return info;
    },
    // 构建记忆信息
    buildMemoryInfo(char) {
      let info = '';
      if (char.history && char.history.length > 0) {
        const recentHistory = char.history.slice(-10);
        info += '\n最近聊天记忆：';
        recentHistory.forEach(msg => {
          if (msg.role === 'assistant' && msg.content) {
            info += `\n- ${char.name}: ${msg.content.substring(0, 100)}...`;
          }
        });
      }
      if (char.longTermMemory && char.longTermMemory.length > 0) {
        info += '\n长期记忆：';
        char.longTermMemory.forEach(mem => {
          info += `\n- ${mem.content}`;
        });
      }
      return info;
    },
    // 构建完整角色信息（需要从数据库获取数据）
    // scenario: 'tweet' | 'reaction' | 'reply'
    // 🎯 优化版：使用统一资料获取系统
    async buildCompleteCharacterInfo(boundCharacters, userXProfileInfo, scenario = 'reply') {
      if (!boundCharacters || boundCharacters.length === 0) return '';
      const mainDB = getDB();
      const xDB = getXDB(); // 获取所有角色的X资料（用于提取句柄）
      const allXProfiles = await xDB.xCharacterProfiles.toArray();
      const characterHandles = [];
      for (const charId of boundCharacters) {
        const xProfile = allXProfiles.find(p => p.characterId === charId);
        if (xProfile && xProfile.xHandle) {
          characterHandles.push(xProfile.xHandle);
        }
      }
      if (characterHandles.length === 0) return ''; // 🎯 使用统一资料获取系统批量获取角色资料（传递用户信息以正确读取私信等数据）
      const profiles = await this.getBatchProfiles(characterHandles, { userProfileInfo: userXProfileInfo });
      if (profiles.length === 0) return ''; // 根据场景选择合适的描述
      let scenarioTitle = '';
      if (scenario === 'tweet') {
        scenarioTitle = '\n\n【绑定角色信息】以下绑定角色可以作为推文发布者，根据其设定和兴趣发布推文：\n';
      } else if (scenario === 'reaction') {
        scenarioTitle =
          '\n\n【绑定角色信息】以下绑定角色可以对推文进行互动（评论、点赞等），根据角色设定和话题相关性决定是否互动：\n';
      } else {
        scenarioTitle = '\n\n【绑定角色信息】以下绑定角色可以参与回复，根据角色设定和话题相关性决定是否回复：\n';
      }
      let charactersInfo = scenarioTitle; // 遍历每个角色资料，格式化输出
      for (const profile of profiles) {
        if (profile.type !== 'character') continue;
        charactersInfo += this.formatProfileForPrompt(profile, {
          includeType: false, // 不显示类型标识（已经在scenarioTitle中说明）
          includeTweets: true,
          includeRelationships: true,
        });
        // 用户身份识别信息已经在formatProfileForPrompt中包含，无需重复添加
        charactersInfo += '\n';
      }
      // 根据场景添加不同的要求说明
      if (scenario === 'tweet') {
        charactersInfo += `
【角色发推要求】：
- 角色发推内容要符合其人设、兴趣和性格特点
- 知道用户身份的角色：可以在推文中自然地@用户或提及用户相关话题
- 不知道用户身份的角色：发布独立推文，不涉及用户
- 推文内容应该多样化：日常生活、兴趣爱好、工作学习、情感分享等
【NPC关系互动】：
- 有绑定NPC关系的角色，其NPC可能在其推文下评论互动
- NPC用户名、句柄与关系设定保持一致，头像统一使用默认头像，认证状态为"否"
- 同一NPC保持身份和性格一致性`;
      } else if (scenario === 'reaction') {
        charactersInfo += `
【角色互动要求】：
- 角色互动（评论/点赞）要符合其人设和兴趣，与推文内容相关
- 知道用户身份的角色：在用户发布的推文下可以表现出认识，自然互动
- 不知道用户身份的角色：按照陌生人模式互动，不知道发布者身份
- 互动应该自然真实，就像普通用户一样
【NPC关系互动】：
- 有绑定NPC关系的角色，其NPC可在评论中出现，体现关系特点
- NPC用户名、句柄与关系设定保持一致，头像统一使用默认头像，认证状态为"否"
- 同一NPC保持身份和性格一致性`;
      } else {
        charactersInfo += `
【角色回复要求】：
- 角色回复要自然真实，就像普通用户回复一样
- 知道用户身份的角色：回复时可表现出认识，体现对用户的了解
- 不知道用户身份的角色：按照陌生人模式回复，不知道用户账号信息
【NPC关系互动】：
- 有绑定NPC关系的角色，其NPC可在回复中出现，体现关系特点
- NPC用户名、句柄与关系设定保持一致，头像统一使用默认头像，认证状态为"否"
- 同一NPC保持身份和性格一致性，不认识的NPC间不互相@或提及`;
      }
      return charactersInfo;
    },
    // 构建基础系统提示词（通用版本）- 只包含提示词+世界书
    buildBaseSystemPrompt({ userPrompt, worldSetting }) {
      let systemPrompt = ''; // 1. 用户自定义提示词
      if (userPrompt.trim()) systemPrompt += userPrompt.trim() + '\n\n'; // 2. 世界观设定
      systemPrompt += '【世界观设定约束】：';
      if (worldSetting.trim()) {
        systemPrompt += `
${worldSetting.trim()}
上述世界观设定是最高优先级的约束条件，必须严格遵守。`;
      } else {
        systemPrompt += `
无特殊世界观限制，但内容需健康正面，符合社交平台规范。`;
      }
      return systemPrompt;
    },
    // 构建用户X个人资料信息
    buildUserXProfileInfo(userProfileData) {
      return {
        name: userProfileData.name,
        handle: userProfileData.handle,
        avatar: userProfileData.avatar,
        bio: userProfileData.bio,
        verified: userProfileData.verified,
        verificationType: userProfileData.verificationType || 'none',
        coupleCharacterId: userProfileData.coupleCharacterId || '',
        coupleCharacterName: userProfileData.coupleCharacterName || '',
        publicIdentity: userProfileData.publicIdentity || '',
        showRealName: userProfileData.showRealName || false,
        realName: userProfileData.realName || '',
        knownIdentityCharacters: userProfileData.knownIdentityCharacters || [],
      };
    },
    // 构建通用约束条件
    buildUniversalConstraints(userXProfileInfo) {
      const verificationDesc = this.getUserVerificationTypeDescription(userXProfileInfo);
      return `
🚫🚫🚫 【核心禁令 - 最高优先级】 🚫🚫🚫
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
**绝对禁止以用户身份生成任何内容！**
用户身份标识（禁止使用）：
- 用户名：${userXProfileInfo.name}
- 用户句柄：${userXProfileInfo.handle}
- 🚨 警告：用户是独立的个体，不要与任何绑定角色混淆！
- 🚨 警告：不要将绑定角色误认为用户！
- 用户信息：仅供理解上下文，严禁在生成内容中使用
**你只能生成以下身份的内容**：
✅ 绑定角色（使用提供的xName、xHandle、xAvatar等）
✅ 虚构的普通X平台用户（自创用户名和句柄）
❌ 绝对不能生成用户本人发表的任何推文/评论/回复
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
【用户X平台公开身份】（所有观众都知道的公开信息）：
- 用户名：${userXProfileInfo.name}（这是用户，不是角色！）
- 用户句柄：${userXProfileInfo.handle}（这是用户的唯一标识！）
- 认证状态：${userXProfileInfo.verified ? '已认证' : '未认证'}
- 认证类型：${verificationDesc}
${
  userXProfileInfo.verificationType === 'couple' && userXProfileInfo.coupleCharacterName
    ? `- 情侣关系：与${userXProfileInfo.coupleCharacterName}为公开情侣（观众可知）`
    : ''
}
${userXProfileInfo.publicIdentity ? `- 公众身份：${userXProfileInfo.publicIdentity}` : ''}
${userXProfileInfo.bio ? `- 个人简介：${userXProfileInfo.bio}` : ''}
【身份识别关键点】：
🚨 用户 vs 角色的区别：
- 用户（${userXProfileInfo.name} / ${userXProfileInfo.handle}）：真实操作者，你绝对不能模拟其发言
- 绑定角色：已设定的虚拟角色，有各自的X平台身份（xName、xHandle），你可以生成他们的内容
- 🚨 特别注意：即使某个角色与用户有关系（如情侣），也不要将该角色当成用户本人！
【权限分级 - 路人评论者的认知范围】：
🔓 路人可见（X平台公开信息）：
- 用户/角色的X姓名、X句柄、认证状态
- X简介、公众身份、公开的情侣关系
- X平台上发布的推文内容
🔒 路人禁知（私密信息）：
- 真实姓名、真实职业、真实身份
- 角色人设描述、性格细节、AI人格设定
- 聊天记忆、私人对话、用户专属人设
- 只有亲密关系才知道的信息（除非是已绑定的关系NPC）
⚠️ 路人评论规则：
- 路人只能基于🔓公开信息进行评论
- 禁止在评论中提及🔒私密信息
- 禁止使用只有亲密关系才知道的称呼（如"老师"、"同学"等，除非是公开身份）`;
    },
    // 获取认证类型描述
    getUserVerificationTypeDescription(userXProfileInfo) {
      switch (userXProfileInfo.verificationType) {
        case 'verified':
          return '蓝色勾标认证';
        case 'couple':
          return '情侣认证';
        case 'married':
          return '已婚认证';
        case 'vip':
          return 'VIP认证';
        default:
          return '无认证';
      }
    },
    // 构建场景分支提示词
    buildScenarioPrompt({ isOwnPost, commentType, pageType, parentComment, targetCommentEl }) {
      let scenarioPrompt = '\n\n【场景识别】：';
      if (isOwnPost && commentType === 'main_comment') {
        scenarioPrompt += `用户在自己发布的推文下方发表了评论。
【任务】：生成其他用户对她评论的反应回复，或新的话题相关评论。`;
      } else if (isOwnPost && commentType === 'reply_comment') {
        scenarioPrompt += `用户在自己发布的推文的评论区楼中楼发表了回复。
【任务】：生成其他用户对这条楼中楼回复的反应，或话题相关的新回复。`;
      } else if (!isOwnPost && commentType === 'main_comment') {
        scenarioPrompt += `用户在别人发布的推文下方发表了评论。
【任务】：生成其他用户（包括原推作者）对此评论的互动回复。`;
      } else if (!isOwnPost && commentType === 'reply_comment') {
        scenarioPrompt += `用户在别人发布的推文的评论区楼中楼发表了回复。
【任务】：生成其他用户对此楼中楼回复的反应，可能包括被回复者本人。`;
      }
      // 添加通用生成要求
      scenarioPrompt += `
【生成要求】：
1. 社交真实性：模拟真实的X平台用户互动，语言自然流畅
2. 情绪共鸣：根据原推内容和用户评论，生成有情感共鸣的回应
3. 多样化互动：可以是赞同、反对、补充、提问、调侃等多种类型
4. 身份一致：每个角色回复都要符合其设定的身份和性格特点
5. 避免重复：多个回复之间保持内容和表达方式的差异性
【格式要求】：
- 每条回复独立成段，以"【回复X】"开头标记
- 严格按照角色的X平台身份信息生成，不得擅自修改用户名、句柄等
- 回复长度适中，符合社交媒体特点（一般20-200字）
- 可以适当使用emoji表情，但不要过度`;
      return scenarioPrompt;
    },
    // ========== 统一资料获取工具 ==========
    // 通过句柄获取任何类型的完整资料（角色/账户/陌生人）
    // options: { userProfileInfo, messageId } - 传入用户资料以检查身份识别，messageId用于读取陌生人自定义设置
    async getUnifiedProfile(handle, options = {}) {
      try {
        const cleanHandle = HandleUtils.clean(handle);
        if (!cleanHandle) return null;
        console.log(`🔍 [统一资料] 查询句柄: ${cleanHandle}`); // 0. 🆕 检查是否是用户自己
        // 用户句柄可能存储在多个字段中，按优先级尝试
        let userXHandle =
          window.userProfileData?.xHandle || window.userProfileData?.handle || window.userProfileData?.username;
        const cleanUserHandle = HandleUtils.clean(userXHandle);
        console.log(
          `🔍 [统一资料] 用户句柄对比: 查询="${cleanHandle}" vs 用户="${cleanUserHandle}" (来源: xHandle=${window.userProfileData?.xHandle}, handle=${window.userProfileData?.handle}, username=${window.userProfileData?.username})`,
        ); // 不区分大小写比较句柄
        if (HandleUtils.equals(handle, userXHandle)) {
          // 用户资料字段映射（兼容不同的字段名）
          const userName = window.userProfileData.name || window.userProfileData.xName || '用户';
          const userHandle = window.userProfileData.handle || window.userProfileData.xHandle || `@${userXHandle}`;
          const userAvatar =
            window.userProfileData.avatar ||
            window.userProfileData.xAvatar ||
            'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg';
          const userVerified = window.userProfileData.verified || window.userProfileData.xVerified || false;
          const userBio = window.userProfileData.bio || window.userProfileData.xBio || '';
          const userCover = window.userProfileData.cover || window.userProfileData.xCover || '';
          console.log(`✅ [统一资料] 找到用户自己: ${userName} (${userHandle})`); // 返回用户的X资料
          const userProfile = {
            type: 'user',
            name: userName,
            handle: userHandle,
            avatar: userAvatar,
            verified: userVerified,
            publicIdentity: window.userProfileData.publicIdentity || '',
            bio: userBio,
            xProfile: {
              xName: userName,
              xHandle: userHandle,
              xAvatar: userAvatar,
              xVerified: userVerified,
              xBio: userBio,
              xCover: userCover,
            },
            // 用户没有"认识用户"这个概念
            knowsUserIdentity: false,
            xMessageHistory: [],
            recentTweets: [],
          };
          return userProfile;
        }
        // 1. 尝试作为角色查询
        const characterProfile = await this._getCharacterProfileByHandle(cleanHandle, options.userProfileInfo);
        if (characterProfile) {
          console.log(`✅ [统一资料] 找到角色: ${characterProfile.name}`);
          return characterProfile;
        }
        // 2. 尝试作为绑定NPC查询
        const npcProfile = await this._getNPCProfileByHandle(cleanHandle);
        if (npcProfile) {
          console.log(`✅ [统一资料] 找到绑定NPC: ${npcProfile.name}`);
          return npcProfile;
        }
        // 3. 尝试作为关系NPC查询
        const relationshipNpcProfile = await this._getRelationshipNPCProfileByHandle(cleanHandle);
        if (relationshipNpcProfile) {
          console.log(`✅ [统一资料] 找到关系NPC: ${relationshipNpcProfile.name}`);
          return relationshipNpcProfile;
        }
        // 4. 尝试作为账户查询
        const accountProfile = await this._getAccountProfileByHandle(cleanHandle);
        if (accountProfile) {
          console.log(`✅ [统一资料] 找到账户: ${accountProfile.name}`);
          return accountProfile;
        }
        // 5. 作为陌生人返回（传入messageId以读取自定义设置）
        console.log(`ℹ️ [统一资料] 未找到匹配，创建陌生人模板`);
        return await this._createStrangerProfile(handle, options.messageId);
      } catch (error) {
        console.error('[统一资料] 查询失败:', error);
        return null;
      }
    },
    // 内部方法：通过句柄获取角色资料
    // userProfileInfo: 用户资料信息，用于检查该角色是否识别用户身份
    async _getCharacterProfileByHandle(cleanHandle, userProfileInfo = null) {
      try {
        const xDB = getXDB();
        const mainDB = getDB(); // 从 xCharacterProfiles 查找
        const allXProfiles = await xDB.xCharacterProfiles.toArray();
        const xProfile = allXProfiles.find(p => HandleUtils.equals(p.xHandle, cleanHandle));
        if (!xProfile) return null; // 获取角色详细信息
        const allChats = await mainDB.chats.toArray();
        const character = allChats.find(c => c.id === xProfile.characterId);
        if (!character) return null; // 获取角色的推文
        const accountProfile = await xDB.xAccountProfiles.get(cleanHandle);
        const tweets = accountProfile?.tweets || []; // 🔧 检查该角色是否识别用户身份
        let knowsUserIdentity = false;
        if (userProfileInfo && userProfileInfo.knownIdentityCharacters) {
          knowsUserIdentity = userProfileInfo.knownIdentityCharacters.includes(character.id);
        }
        console.log(
          `👤 [身份识别] 角色 ${xProfile.xName} ${knowsUserIdentity ? '✅ 知道' : '❌ 不知道'}用户身份${
            knowsUserIdentity && xProfile.userPersona ? ' (有专属人设)' : knowsUserIdentity ? ' (无专属人设)' : ''
          }`,
        ); // 🆕 读取X平台私信记忆
        let xMessageHistory = [];
        try {
          const currentAccount = window.currentAccountId || 'main'; // 尝试在多个账户下查找（当前账户优先，然后是main账户）
          const accountsToTry = [currentAccount];
          if (currentAccount !== 'main') {
            accountsToTry.push('main');
          }
          let messageConversation = null; // 尝试查找角色的私信对话
          for (const accountId of accountsToTry) {
            const messageConversationId = `messageConversation_${accountId}_msg_${character.id}`;
            const data = await xDB.xAccountProfiles.get(messageConversationId);
            if (data && data.data && data.data.messages) {
              messageConversation = data;
              break;
            }
          }
          if (messageConversation && messageConversation.data && messageConversation.data.messages) {
            // 提取最近的私信对话（最多30条）
            const messages = messageConversation.data.messages.slice(-50);
            xMessageHistory = messages.map(msg => ({
              type: msg.type,
              content: msg.content || '',
              isOwn: msg.isOwn || false,
              time: msg.time || '',
              timestamp: msg.timestamp || '',
            }));
            console.log(`✅ [私信数据] 角色 ${xProfile.xName}: ${xMessageHistory.length} 条记忆`);
          }
        } catch (error) {
          console.error(`❌ [私信数据] 角色 ${xProfile.xName} 读取失败:`, error);
        }
        return {
          type: 'character',
          // 基础信息
          name: xProfile.xName,
          handle: xProfile.xHandle,
          avatar: xProfile.xAvatar,
          bio: xProfile.xBio || '',
          verified: xProfile.xVerified || false,
          publicIdentity: xProfile.publicIdentity || '',
          // 角色特有数据
          characterData: {
            id: character.id,
            originalName: character.originalName,
            aiPersona: character.settings?.aiPersona || '',
            history: character.history || [],
            longTermMemory: character.longTermMemory || [],
            userPersona: xProfile.userPersona || '',
            xMessageHistory: xMessageHistory, // 🆕 X平台私信记忆
          },
          // 🔧 用户身份识别信息
          knowsUserIdentity: knowsUserIdentity,
          // 推文数据
          tweets: tweets,
          // 关系数据
          relationships: xProfile.relationships || [],
          // 原始对象（保留用于兼容性）
          xProfile: xProfile,
          character: character,
          characterId: character.id,
          // 元信息
          _source: 'character',
          _characterId: character.id,
          _loadedAt: Date.now(),
        };
      } catch (error) {
        console.error('[统一资料] 角色查询失败:', error);
        return null;
      }
    },
    // 内部方法：通过句柄获取账户资料
    async _getAccountProfileByHandle(cleanHandle) {
      try {
        const xDB = getXDB();
        const accountProfile = await xDB.xAccountProfiles.get(cleanHandle);
        if (!accountProfile) return null;
        const accountInfo = accountProfile.accountInfo || accountProfile; // 🆕 读取X平台私信记忆
        const xMessageHistory = await this._loadXMessageHistory(accountInfo.handle);
        return {
          type: 'account',
          // 基础信息
          name: accountInfo.name,
          handle: accountInfo.handle,
          avatar: accountInfo.avatar,
          bio: accountInfo.bio || '',
          verified: accountInfo.verified || false,
          publicIdentity: accountInfo.publicIdentity || '',
          // 账户信息（用于 queryAccountData）
          accountInfo: {
            name: accountInfo.name,
            handle: accountInfo.handle,
            avatar: accountInfo.avatar,
            bio: accountInfo.bio || '',
            verified: accountInfo.verified || false,
            verificationType: accountInfo.verificationType || 'none',
            cover:
              accountInfo.cover || accountProfile.cover || 'https://i.postimg.cc/tT8Rfsf1/mmexport1759603246385.jpg',
            publicIdentity: accountInfo.publicIdentity || '',
            customTag1: accountInfo.customTag1 || accountProfile.customTag1 || null,
            customTag2: accountInfo.customTag2 || accountProfile.customTag2 || null,
            followersCount: accountInfo.followersCount || '0',
            followingCount: accountInfo.followingCount || '0',
          },
          // 账户特有数据
          accountData: {
            accountType: accountProfile.accountType || 'unknown',
            personality: accountProfile.personality || '',
            postingHabits: accountProfile.postingHabits || '',
            sourceContext: accountProfile.sourceContext || null,
            followersCount: accountInfo.followersCount || '0',
            followingCount: accountInfo.followingCount || '0',
            xMessageHistory: xMessageHistory, // 🆕 X平台私信记忆
          },
          // 推文数据
          tweets: accountProfile.tweets || [],
          // 关系数据（NPC账户可能有）
          relationships: accountProfile.relationships || [],
          // 元信息
          _source: 'account',
          _accountHandle: cleanHandle,
          _loadedAt: Date.now(),
        };
      } catch (error) {
        console.error('[统一资料] 账户查询失败:', error);
        return null;
      }
    },
    // 🆕 内部辅助方法：通过句柄读取X平台私信记忆
    async _loadXMessageHistory(handle) {
      try {
        const xDB = getXDB();
        const currentAccount = window.currentAccountId || 'main';
        const cleanHandle = HandleUtils.clean(handle); // 尝试在多个账户下查找（当前账户优先，然后是main账户）
        const accountsToTry = [currentAccount];
        if (currentAccount !== 'main') {
          accountsToTry.push('main');
        }
        let messagesListData = null;
        let messagesListAccount = null; // 1. 首先尝试从私信列表中查找
        for (const accountId of accountsToTry) {
          const messagesListId = `messagesList_${accountId}`;
          const data = await xDB.xAccountProfiles.get(messagesListId);
          if (data && data.data && data.data.length > 0) {
            messagesListData = data;
            messagesListAccount = accountId;
            break;
          }
        }
        if (!messagesListData) {
          return [];
        }
        // 2. 在私信列表中查找对应句柄的对话
        const conversation = messagesListData.data.find(msg => HandleUtils.equals(msg.userHandle, handle));
        let conversationId, conversationData;
        if (!conversation) {
          // 3. 如果私信列表中没有，尝试备用查找（直接通过ID格式查找对话数据）
          const possibleIds = [
            `msg_account_${cleanHandle}`,
            `msg_npc_${cleanHandle}`,
            `msg_relationship_${cleanHandle}`,
            cleanHandle,
          ];
          for (const accountId of accountsToTry) {
            for (const possibleId of possibleIds) {
              const testConversationId = `messageConversation_${accountId}_${possibleId}`;
              const testData = await xDB.xAccountProfiles.get(testConversationId);
              if (testData && testData.data && testData.data.messages) {
                conversationId = testConversationId;
                conversationData = testData;
                break;
              }
            }
            if (conversationData) break;
          }
          if (!conversationData) {
            return [];
          }
        } else {
          // 4. 找到对话ID，读取对话详细消息
          conversationId = `messageConversation_${messagesListAccount}_${conversation.id}`;
          conversationData = await xDB.xAccountProfiles.get(conversationId);
        }
        if (!conversationData || !conversationData.data || !conversationData.data.messages) {
          return [];
        }
        // 5. 提取最近50条私信
        const messages = conversationData.data.messages.slice(-50);
        const history = messages.map(msg => ({
          type: msg.type,
          content: msg.content || '',
          isOwn: msg.isOwn || false,
          time: msg.time || '',
          timestamp: msg.timestamp || '',
          // 保留其他字段供特殊消息类型使用
          amount: msg.amount,
          note: msg.note,
          imageDescription: msg.imageDescription,
          voiceText: msg.voiceText,
          title: msg.title,
          url: msg.url,
          tweet: msg.tweet,
          profile: msg.profile,
        }));
        console.log(`✅ [私信数据] ${handle}: ${history.length} 条记忆`);
        return history;
      } catch (error) {
        console.error(`❌ [私信数据] ${handle}: 读取失败`, error);
        return [];
      }
    },
    // 内部方法：通过句柄获取绑定NPC资料
    async _getNPCProfileByHandle(cleanHandle) {
      try {
        const xDB = getXDB();
        const npcDataId = 'xNPCs_global';
        const npcData = await xDB.xNPCs.get(npcDataId);
        const allNPCs = npcData?.npcs || [];
        for (const npc of allNPCs) {
          if (HandleUtils.equals(npc.handle, cleanHandle)) {
            // 🆕 读取X平台私信记忆
            const xMessageHistory = await this._loadXMessageHistory(npc.handle);
            return {
              type: 'npc',
              // 基础信息
              name: npc.name,
              handle: npc.handle,
              avatar: npc.avatar,
              bio: '',
              verified: false,
              publicIdentity: '',
              // NPC特有数据
              npcData: {
                personality: npc.personality || '',
                postingHabits: npc.postingHabits || '',
                homepage: npc.homepage || '',
                xMessageHistory: xMessageHistory, // 🆕 X平台私信记忆
              },
              // 原始对象（保留用于兼容性）
              npc: npc,
              // 推文数据
              tweets: [],
              // 关系数据
              relationships: [],
              // 元信息
              _source: 'npc',
              _loadedAt: Date.now(),
            };
          }
        }
        return null;
      } catch (error) {
        console.error('[统一资料] 绑定NPC查询失败:', error);
        return null;
      }
    },
    // 内部方法：通过句柄获取关系NPC资料
    async _getRelationshipNPCProfileByHandle(cleanHandle) {
      try {
        const xDB = getXDB();
        const mainDB = getDB(); // 获取所有角色的X资料
        const allXProfiles = await xDB.xCharacterProfiles.toArray();
        const allChats = await mainDB.chats.toArray(); // 遍历所有角色的关系列表
        for (const xProfile of allXProfiles) {
          if (!xProfile.relationships || xProfile.relationships.length === 0) continue;
          for (const relationship of xProfile.relationships) {
            if (HandleUtils.equals(relationship.npcHandle, cleanHandle)) {
              // 找到对应的角色数据
              const ownerCharacter = allChats.find(chat => chat.id === xProfile.characterId);
              if (ownerCharacter) {
                // 🆕 读取X平台私信记忆
                const xMessageHistory = await this._loadXMessageHistory(relationship.npcHandle);
                return {
                  type: 'relationshipNpc',
                  // 基础信息
                  name: relationship.npcName,
                  handle: relationship.npcHandle,
                  avatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
                  bio: '',
                  verified: false,
                  publicIdentity: '',
                  // 关系NPC特有数据
                  relationshipData: {
                    relationshipType: relationship.relationshipType,
                    description: relationship.description || '',
                    ownerCharacterId: ownerCharacter.id,
                    ownerCharacterName: ownerCharacter.name,
                    xMessageHistory: xMessageHistory, // 🆕 X平台私信记忆
                  },
                  // 原始对象（保留用于兼容性）
                  relationship: relationship,
                  ownerCharacter: ownerCharacter,
                  ownerXProfile: xProfile,
                  // 推文数据
                  tweets: [],
                  // 关系数据
                  relationships: [],
                  // 元信息
                  _source: 'relationshipNpc',
                  _ownerId: ownerCharacter.id,
                  _loadedAt: Date.now(),
                };
              }
            }
          }
        }
        return null;
      } catch (error) {
        console.error('[统一资料] 关系NPC查询失败:', error);
        return null;
      }
    },
    // 内部方法：创建陌生人模板（支持读取自定义设置）
    async _createStrangerProfile(handle, messageId = null) {
      const cleanHandle = HandleUtils.clean(handle); // 默认头像
      let customAvatar = 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg'; // 尝试读取陌生人的自定义设置
      if (messageId) {
        try {
          const xDB = getXDB();
          const currentAccount = window.currentAccountId || 'main';
          const strangerSettingsId = `strangerSettings_${currentAccount}_${messageId}`;
          const strangerSettings = await xDB.xAccountProfiles.get(strangerSettingsId);
          if (strangerSettings && strangerSettings.customAvatar) {
            customAvatar = strangerSettings.customAvatar;
            console.log(`✅ [陌生人资料] 读取到自定义头像: ${customAvatar}`);
          }
        } catch (error) {
          console.error('[陌生人资料] 读取自定义设置失败:', error);
        }
      }
      // 🆕 读取X平台私信记忆
      const xMessageHistory = await this._loadXMessageHistory(`@${cleanHandle}`);
      return {
        type: 'stranger',
        // 基础信息
        name: cleanHandle,
        handle: `@${cleanHandle}`,
        avatar: customAvatar,
        bio: '',
        verified: false,
        publicIdentity: '',
        // 空数据（但包含私信记忆）
        characterData: null,
        accountData: {
          xMessageHistory: xMessageHistory, // 🆕 X平台私信记忆
        },
        tweets: [],
        relationships: [],
        // 元信息
        _source: 'stranger',
        _messageId: messageId,
        _loadedAt: Date.now(),
      };
    },
    // 🆕 内部辅助方法：格式化单条私信消息的内容
    _formatMessageContent(msg) {
      if (msg.type === 'text') {
        return msg.content || '';
      } else if (msg.type === 'image') {
        return msg.isOwn ? '[用户发送了图片]' : `[图片: ${msg.imageDescription || '图片'}]`;
      } else if (msg.type === 'voice') {
        return `[语音: ${msg.voiceText || '语音消息'}]`;
      } else if (msg.type === 'sticker') {
        return '[表情包]';
      } else if (msg.type === 'transfer') {
        const amount = msg.amount ? `$${msg.amount}` : '';
        const note = msg.note ? ` (${msg.note})` : '';
        return `[转账${amount}${note}]`;
      } else if (msg.type === 'link') {
        return `[分享链接: ${msg.title || '链接'}]`;
      } else if (msg.type === 'quoteTweet') {
        return `[转发推文: ${msg.tweet?.content || ''}]`;
      } else if (msg.type === 'quoteProfile') {
        return `[分享主页: ${msg.profile?.name || ''}]`;
      } else {
        return `[${msg.type}消息]`;
      }
    },
    // 🆕 内部辅助方法：格式化X平台私信记忆为提示词文本
    _formatXMessageHistory(xMessageHistory, profileName, profileType = 'character') {
      if (!xMessageHistory || xMessageHistory.length === 0) {
        return { text: '', tokenCount: 0, messageCount: 0 };
      }
      const startLength = 0;
      let promptText = `
【X平台私信记忆】（该${
        profileType === 'character'
          ? '角色'
          : profileType === 'account'
          ? '账户'
          : profileType === 'npc'
          ? 'NPC'
          : profileType === 'relationshipNpc'
          ? '关系NPC'
          : '陌生人'
      }与用户在X平台私信中的对话记录${profileType === 'character' ? '' : '，仅供参考'}）：
`;
      const recentXMessages = xMessageHistory.slice(-50);
      let xMemCount = 0;
      for (const msg of recentXMessages) {
        const sender = msg.isOwn ? '用户' : profileName;
        const content = this._formatMessageContent(msg);
        if (content) {
          const displayContent = content.length > 80 ? `${content.substring(0, 80)}...` : content;
          promptText += `${sender}: ${displayContent}\n`;
          xMemCount++;
        }
        if (xMemCount >= 50) break;
      }
      // 根据不同类型添加不同的说明
      if (profileType === 'character') {
        promptText += `
⚠️ 重要说明：
- 这些是在X平台私信功能中的真实对话记录
- 无论角色是否"认识用户身份"（其他场景的身份），这些X平台对话都是客观存在的
- 根据当前场景（推文/评论/私信）自然使用，不要在公开推文中直接提及私信内容
`;
      } else {
        promptText += `⚠️ 以上是X平台私信对话记录，仅供理解该${
          profileType === 'account'
            ? '账户'
            : profileType === 'npc'
            ? 'NPC'
            : profileType === 'relationshipNpc'
            ? '关系NPC'
            : '陌生人'
        }与用户的关系和沟通风格
⚠️ 根据当前场景（推文/评论）自然使用，不要在公开推文中直接提及私信内容
`;
      }
      const tokenCount = TokenUtils.estimateTokens(promptText);
      console.log(`📊 [私信] ${profileType} ${profileName}: ${xMemCount}条, ~${tokenCount} tokens`);
      return { text: promptText, tokenCount, messageCount: xMemCount };
    },
    // 格式化资料为提示词文本
    formatProfileForPrompt(profile, options = {}) {
      if (!profile) return '';
      const { includeType = true, includeTweets = true, includeRelationships = true } = options;
      let promptText = ''; // 类型标识
      if (includeType) {
        const typeLabels = {
          character: '【角色资料】',
          account: '【账户资料】',
          stranger: '【陌生人资料】',
        };
        promptText += `${typeLabels[profile.type] || '【资料】'}\n`;
      }
      // 🔧 空值保护：确保基本字段存在
      if (!profile.name || !profile.handle) {
        console.warn('⚠️ [格式化资料] profile 缺少必需字段 name 或 handle:', {
          type: profile.type,
          name: profile.name,
          handle: profile.handle,
        });
        return '';
      }
      // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      // 📱 X平台公开信息（所有X用户都能看到）
      // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      promptText += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📱 X平台公开信息（路人可见）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
X姓名：${profile.name}
X句柄：${profile.handle}
认证状态：${profile.verified ? '已认证' : '未认证'}
${profile.bio ? `X简介：${profile.bio}` : ''}
${profile.publicIdentity ? `公开身份：${profile.publicIdentity}` : ''}
🚨 重要：以上信息是X平台上的公开资料，所有X用户（包括路人、陌生人）都能看到。
路人评论时只能基于这些公开信息，不能提及下方的私密信息！
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`; // 角色特有信息
      if (profile.type === 'character' && profile.characterData) {
        const cd = profile.characterData; // 🔧 确保角色关键数据存在
        const originalName = cd.originalName || profile.name || '未知';
        const aiPersona = cd.aiPersona || '无特定人设';
        promptText += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🔒 角色私密资料（仅供AI理解角色，路人不知道）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
真实姓名：${originalName}
人设描述：${aiPersona}
⚠️ 隐私规则：
- 真实姓名"${originalName}"是私密信息，路人评论中禁止提及！
- 路人只能称呼X姓名"${profile.name}"或使用句柄"${profile.handle}"
- 只有该角色本人或关系NPC（已绑定的私人关系）才知道真实姓名
- 人设描述仅供AI理解角色性格，路人不知道这些细节
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`; // 🔧 用户身份识别信息
        if (profile.knowsUserIdentity !== undefined) {
          promptText += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
👤 用户身份识别
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
该角色${profile.knowsUserIdentity ? '知道' : '不知道'}用户的真实身份
`;
          if (profile.knowsUserIdentity) {
            promptText += `✅ 该角色可以识别用户，回复时应该表现出认识
`;
            if (cd.userPersona && cd.userPersona.trim()) {
              promptText += `
【角色了解的用户信息】（专属用户人设）：
${cd.userPersona}
⚠️ 该角色应该根据这些信息与用户互动
`;
            } else {
              promptText += `⚠️ 该角色尚未设置专属用户人设，按基础认识模式互动
`;
            }
          } else {
            promptText += `❌ 该角色完全不知道用户的真实身份，必须按照陌生人模式回复
⚠️ 不要让角色猜测、暗示或表现出任何对用户的认识
`;
          }
          promptText += `━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
        }
        // 🆕 X平台私信记忆（无论角色是否认识用户身份，只要有私信记录就显示）
        if (cd.xMessageHistory && cd.xMessageHistory.length > 0) {
          const xMessageResult = this._formatXMessageHistory(cd.xMessageHistory, profile.name, 'character');
          promptText += xMessageResult.text;
        }
        // 记忆信息（只有知道用户身份且有专属人设时才显示）
        if (
          profile.knowsUserIdentity &&
          cd.userPersona &&
          cd.userPersona.trim() &&
          cd.history &&
          cd.history.length > 0
        ) {
          promptText += `
【其他聊天记忆】（与用户在其他场景的对话，仅供参考）：
`;
          const recentHistory = cd.history.slice(-10);
          let memCount = 0;
          for (const msg of recentHistory) {
            // 🔧 空值保护：确保 msg.content 存在
            if (msg.role === 'user' && msg.content) {
              const content = String(msg.content); // 确保是字符串
              promptText += `用户: ${content.substring(0, 100)}${content.length > 100 ? '...' : ''}\n`;
              memCount++;
            } else if (msg.role === 'assistant' && msg.content) {
              const content = String(msg.content); // 确保是字符串
              promptText += `${profile.name}: ${content.substring(0, 100)}${content.length > 100 ? '...' : ''}\n`;
              memCount++;
            }
            if (memCount >= 10) break;
          }
          promptText += `⚠️ 以上记忆仅供理解角色与用户关系，根据当前场景自然使用
`;
        }
        // 长期记忆
        if (cd.longTermMemory && cd.longTermMemory.length > 0) {
          promptText += `
【长期记忆】（仅供AI参考，路人不知道）：
`;
          cd.longTermMemory.forEach((mem, idx) => {
            promptText += `${idx + 1}. ${mem.content}\n`;
          });
        }
      }
      // 账户特有信息
      if (profile.type === 'account' && profile.accountData) {
        const ad = profile.accountData;
        promptText += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🔒 账户资料（仅供AI理解，路人不知道）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
账户类型：${ad.accountType}
${ad.personality ? `人设描述：${ad.personality}` : ''}
${ad.postingHabits ? `发帖习惯：${ad.postingHabits}` : ''}
${ad.followersCount ? `关注者：${ad.followersCount}` : ''}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`; // 🆕 X平台私信记忆（如果有）
        if (ad.xMessageHistory && ad.xMessageHistory.length > 0) {
          const xMessageResult = this._formatXMessageHistory(ad.xMessageHistory, profile.name, 'account');
          promptText += xMessageResult.text;
        }
      }
      // 绑定NPC特有信息
      if (profile.type === 'npc' && profile.npcData) {
        const nd = profile.npcData;
        promptText += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🔒 NPC资料（仅供AI理解角色，路人不知道）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
${nd.personality ? `人设描述：${nd.personality}` : ''}
${nd.postingHabits ? `发帖习惯：${nd.postingHabits}` : ''}
${nd.homepage ? `主页链接：${nd.homepage}` : ''}
⚠️ 该NPC是全局绑定的虚拟角色，按照人设描述进行互动
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`; // 🆕 X平台私信记忆（如果有）
        if (nd.xMessageHistory && nd.xMessageHistory.length > 0) {
          const xMessageResult = this._formatXMessageHistory(nd.xMessageHistory, profile.name, 'npc');
          promptText += xMessageResult.text;
        }
      }
      // 关系NPC特有信息
      if (profile.type === 'relationshipNpc' && profile.relationshipData) {
        const rd = profile.relationshipData;
        promptText += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🔒 关系NPC资料（仅供AI理解角色，路人不知道）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
关系类型：${rd.relationshipType}
${rd.description ? `关系描述：${rd.description}` : ''}
所属角色：${rd.ownerCharacterName}（该NPC是 ${rd.ownerCharacterName} 的专属关系角色）
⚠️ 该NPC与角色 ${rd.ownerCharacterName} 有绑定关系，互动时应体现这种关系
⚠️ 该NPC只与其所属角色有特殊关系，与其他角色/用户按照普通关系互动
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`; // 🆕 X平台私信记忆（如果有）
        if (rd.xMessageHistory && rd.xMessageHistory.length > 0) {
          const xMessageResult = this._formatXMessageHistory(rd.xMessageHistory, profile.name, 'relationshipNpc');
          promptText += xMessageResult.text;
        }
      }
      // 陌生人特有提示
      if (profile.type === 'stranger') {
        promptText += `
⚠️ 该用户是陌生人（未在系统中绑定），回复应该自然真实，符合普通X平台用户的特点
⚠️ 如果没有特殊设定，按照一般性格进行回复
`; // 🆕 X平台私信记忆（如果有）
        if (
          profile.accountData &&
          profile.accountData.xMessageHistory &&
          profile.accountData.xMessageHistory.length > 0
        ) {
          const xMessageResult = this._formatXMessageHistory(
            profile.accountData.xMessageHistory,
            profile.name,
            'stranger',
          );
          promptText += xMessageResult.text;
        }
      }
      // 推文信息
      if (includeTweets && profile.tweets && profile.tweets.length > 0) {
        promptText += `\n【最近推文】（参考发帖风格）：\n`;
        const recentTweets = profile.tweets.slice(0, 3);
        recentTweets.forEach((tweet, idx) => {
          promptText += `${idx + 1}. "${tweet.content}"\n`;
          promptText += ` 互动：${tweet.stats?.likes || 0}喜欢，${tweet.stats?.comments || 0}评论\n`;
        });
      }
      // 关系信息
      if (includeRelationships && profile.relationships && profile.relationships.length > 0) {
        promptText += `\n【已绑定关系】：\n`;
        profile.relationships.forEach(rel => {
          promptText += `- ${rel.npcName} (${rel.npcHandle}): ${rel.relationshipType}`;
          if (rel.description) promptText += ` | ${rel.description}`;
          promptText += '\n';
        });
      }
      return promptText;
    },
    // 批量获取多个资料
    async getBatchProfiles(handles, options = {}) {
      if (!Array.isArray(handles) || handles.length === 0) return [];
      const profiles = await Promise.all(handles.map(handle => this.getUnifiedProfile(handle, options)));
      return profiles.filter(p => p !== null);
    },
    // ========== 用户身份冒用筛选工具 ==========
    // 删除所有冒充用户身份的内容
    filterUserImpersonation(data, userHandle, userName) {
      console.log('🚫 [身份筛选] 开始检查用户身份冒用...');
      if (!userHandle || !userName) {
        console.warn('⚠️ [身份筛选] 缺少用户信息，跳过筛选');
        return data;
      }
      const cleanUserHandle = HandleUtils.clean(userHandle);
      const cleanUserName = userName.toLowerCase();
      let removedCount = 0; // 检查用户对象是否冒用了用户身份
      const isUserImpersonation = user => {
        if (!user || !user.handle) return false;
        // 句柄完全匹配
        if (HandleUtils.equals(user.handle, userHandle)) {
          console.warn(`🚫 [身份筛选] 检测到句柄冒用: ${user.handle}`);
          return true;
        }
        // 姓名完全匹配
        const cleanName = (user.name || '').toLowerCase();
        if (cleanName === cleanUserName) {
          console.warn(`🚫 [身份筛选] 检测到姓名冒用: ${user.name}`);
          return true;
        }
        return false;
      }; // 筛选推文数组
      const filterTweets = tweets => {
        if (!Array.isArray(tweets)) return tweets;
        return tweets.filter(tweet => {
          // 检查推文作者是否冒用（这是真正的冒用：假扮用户发推文）
          if (isUserImpersonation(tweet.user)) {
            console.warn(`🗑️ [身份筛选] 删除冒用推文: "${tweet.content?.substring(0, 50)}..."`);
            removedCount++;
            return false;
          }
          // 筛选评论（删除假扮用户的评论）
          if (tweet.comments && Array.isArray(tweet.comments)) {
            tweet.comments = filterComments(tweet.comments);
          }
          // ⚠️ 不删除引用推文中的用户内容
          // 引用用户的推文是合法的，只有假扮用户才是冒用
          // 如果 quotedTweet.user 是用户，这是正常的转发引用，不是冒用
          return true;
        });
      }; // 筛选评论数组（递归）
      const filterComments = comments => {
        if (!Array.isArray(comments)) return comments;
        return comments.filter(comment => {
          // 检查评论作者
          if (isUserImpersonation(comment.user)) {
            console.warn(`🗑️ [身份筛选] 删除冒用评论: "${comment.content?.substring(0, 50)}..."`);
            removedCount++;
            return false;
          }
          // 递归筛选回复
          if (comment.replies && Array.isArray(comment.replies)) {
            comment.replies = filterComments(comment.replies);
          }
          return true;
        });
      }; // 处理不同的数据结构
      if (data.forYouTweets) {
        data.forYouTweets = filterTweets(data.forYouTweets);
      }
      if (data.followingTweets) {
        data.followingTweets = filterTweets(data.followingTweets);
      }
      if (data.tweets && Array.isArray(data.tweets)) {
        data.tweets = filterTweets(data.tweets);
      }
      if (data.comments && Array.isArray(data.comments)) {
        data.comments = filterComments(data.comments);
      }
      if (data.replies && Array.isArray(data.replies)) {
        data.replies = filterComments(data.replies);
      }
      // 处理 Mentions 数据
      if (data.likes && Array.isArray(data.likes)) {
        data.likes = data.likes.filter(like => {
          const allUsers = like.users || [];
          like.users = allUsers.filter(user => !isUserImpersonation(user));
          if (like.users.length === 0) {
            console.warn(`🗑️ [身份筛选] 删除全冒用点赞通知`);
            removedCount++;
            return false;
          }
          return true;
        });
      }
      if (data.retweets && Array.isArray(data.retweets)) {
        data.retweets = data.retweets.filter(retweet => {
          // 检查转推者
          if (isUserImpersonation(retweet.user)) {
            console.warn(`🗑️ [身份筛选] 删除冒用转推通知`);
            removedCount++;
            return false;
          }
          // 筛选转推的评论
          if (retweet.comments) {
            retweet.comments = filterComments(retweet.comments);
          }
          return true;
        });
      }
      if (removedCount > 0) {
        console.log(`✅ [身份筛选] 共删除 ${removedCount} 个冒用用户身份的内容`);
      } else {
        console.log(`✅ [身份筛选] 未检测到身份冒用`);
      }
      return data;
    },
    // ========== 头像强制修正工具 ==========
    // 🆕 内部辅助方法：构建头像映射表
    async _buildAvatarMap() {
      const xDB = getXDB();
      const mainDB = getDB();
      const avatarMap = new Map();
      const defaultAvatar = 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg';
      // 辅助函数：添加头像映射
      const addAvatarMapping = (handle, avatar, type, name) => {
        const cleanHandle = HandleUtils.clean(handle);
        if (!cleanHandle) return;
        avatarMap.set(cleanHandle, { avatar, type, name });
      };
      // 加载用户的X资料（最高优先级）
      if (window.userProfileData?.handle && window.userProfileData?.avatar) {
        addAvatarMapping(
          window.userProfileData.handle,
          window.userProfileData.avatar,
          'user',
          window.userProfileData.name,
        );
        console.log(`👤 [头像修正] 已加载用户头像: ${window.userProfileData.name} (${window.userProfileData.handle})`);
      }
      // 加载所有角色的X资料
      const allXProfiles = await xDB.xCharacterProfiles.toArray();
      for (const xProfile of allXProfiles) {
        if (xProfile.xHandle && xProfile.xAvatar) {
          addAvatarMapping(xProfile.xHandle, xProfile.xAvatar, 'character', xProfile.xName);
        }
        // 加载关系NPC（使用默认头像）
        if (xProfile.relationships?.length > 0) {
          for (const rel of xProfile.relationships) {
            if (rel.npcHandle) {
              addAvatarMapping(rel.npcHandle, defaultAvatar, 'relationshipNpc', rel.npcName);
            }
          }
        }
      }
      // 加载所有绑定NPC
      const npcDataId = 'xNPCs_global';
      const npcData = await xDB.xNPCs.get(npcDataId);
      const allNPCs = npcData?.npcs || [];
      for (const npc of allNPCs) {
        if (npc.handle && npc.avatar) {
          addAvatarMapping(npc.handle, npc.avatar, 'npc', npc.name);
        }
      }
      // 加载所有陌生人的自定义头像
      const allProfiles = await xDB.xAccountProfiles.toArray();
      const strangerSettings = allProfiles.filter(
        item => item.handle?.startsWith('strangerSettings_') && item.customAvatar,
      );
      const messagesLists = allProfiles.filter(item => item.name === 'messagesList');
      for (const setting of strangerSettings) {
        if (!setting.messageId) continue;
        for (const msgList of messagesLists) {
          if (!msgList.data || !Array.isArray(msgList.data)) continue;
          const stranger = msgList.data.find(msg => msg.id === setting.messageId);
          if (stranger?.userHandle) {
            addAvatarMapping(stranger.userHandle, setting.customAvatar, 'stranger', stranger.userName || '陌生人');
            console.log(
              `🆕 [头像修正] 已加载陌生人自定义头像: ${stranger.userName} (${stranger.userHandle}) -> ${setting.customAvatar}`,
            );
            break;
          }
        }
      }
      console.log(`📋 [头像修正] 已加载 ${avatarMap.size} 个用户/角色/NPC/陌生人的头像信息`);
      return avatarMap;
    },
    // 强制修正所有用户头像，确保遵守头像规则
    async enforceAvatarRules(data, userHandle = null) {
      console.log('🔧 [头像修正] 开始修正头像...');
      const avatarMap = await this._buildAvatarMap(); // 2. 定义修正函数
      const defaultAvatar = 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg';
      let fixedCount = 0;
      const fixUser = user => {
        if (!user || !user.handle) return;
        const cleanHandle = HandleUtils.clean(user.handle); // 检查是否是已知用户/角色/NPC/陌生人
        if (avatarMap.has(cleanHandle)) {
          const correctInfo = avatarMap.get(cleanHandle);
          if (user.avatar !== correctInfo.avatar) {
            const typeLabel =
              {
                user: '用户',
                character: '角色',
                npc: 'NPC',
                relationshipNpc: '关系NPC',
                stranger: '陌生人（自定义）',
              }[correctInfo.type] || correctInfo.type;
            console.log(
              `🔧 [头像修正] ${user.name} (${user.handle}): ${typeLabel}头像 ${user.avatar} -> ${correctInfo.avatar}`,
            );
            user.avatar = correctInfo.avatar;
            fixedCount++;
          }
        } else {
          // 未知用户（路人），强制使用默认头像
          if (user.avatar !== defaultAvatar) {
            console.log(`🔧 [头像修正] ${user.name} (${user.handle}): 路人头像 ${user.avatar} -> ${defaultAvatar}`);
            user.avatar = defaultAvatar;
            fixedCount++;
          }
        }
      }; // 3. 递归修正所有用户对象
      const fixDataRecursively = obj => {
        if (!obj || typeof obj !== 'object') return; // 如果是数组，递归处理每个元素
        if (Array.isArray(obj)) {
          obj.forEach(item => fixDataRecursively(item));
          return;
        }
        // 如果有user字段，修正它
        if (obj.user && obj.user.handle) {
          fixUser(obj.user);
        }
        // 🎯 粉丝群消息格式：修正 senderHandle 和 senderAvatar
        if (obj.senderHandle && obj.senderAvatar) {
          const cleanHandle = HandleUtils.clean(obj.senderHandle);
          if (avatarMap.has(cleanHandle)) {
            const correctInfo = avatarMap.get(cleanHandle);
            if (obj.senderAvatar !== correctInfo.avatar) {
              const typeLabel =
                {
                  user: '用户',
                  character: '角色',
                  npc: 'NPC',
                  relationshipNpc: '关系NPC',
                  stranger: '陌生人（自定义）',
                }[correctInfo.type] || correctInfo.type;
              console.log(
                `🔧 [头像修正-粉丝群] ${obj.senderName} (${obj.senderHandle}): ${typeLabel}头像 ${obj.senderAvatar} -> ${correctInfo.avatar}`,
              );
              obj.senderAvatar = correctInfo.avatar;
              fixedCount++;
            }
          } else {
            // 未知用户（路人），强制使用默认头像
            if (obj.senderAvatar !== defaultAvatar) {
              console.log(
                `🔧 [头像修正-粉丝群] ${obj.senderName} (${obj.senderHandle}): 路人头像 ${obj.senderAvatar} -> ${defaultAvatar}`,
              );
              obj.senderAvatar = defaultAvatar;
              fixedCount++;
            }
          }
        }
        // 递归处理所有属性
        for (const key in obj) {
          if (obj.hasOwnProperty(key) && typeof obj[key] === 'object') {
            fixDataRecursively(obj[key]);
          }
        }
      }; // 4. 开始修正
      fixDataRecursively(data);
      if (fixedCount > 0) {
        console.log(`✅ [头像修正] 共修正了 ${fixedCount} 个头像`);
      } else {
        console.log(`✅ [头像修正] 所有头像都正确，无需修正`);
      }
      return data;
    },
    // 🔧 JSON修复工具 - 尝试修复AI返回的常见JSON格式错误
    repairJSON(jsonString) {
      console.log('🔧 [JSON修复] 开始尝试修复JSON格式错误...');

      if (!jsonString || typeof jsonString !== 'string') {
        console.error('❌ [JSON修复] 输入不是有效的字符串');
        return null;
      }

      let repairedString = jsonString;
      let fixCount = 0;

      try {
        // 1. 清理JSON外部的代码块标记和多余文字
        repairedString = repairedString
          .replace(/^[\s\S]*?```json\s*/i, '') // 移除开头的```json
          .replace(/```\s*[\s\S]*$/i, '') // 移除结尾的```及其后的内容
          .replace(/^[^{\[]*/, '') // 移除JSON开始前的非JSON字符
          .replace(/[^}\]]*$/, '') // 移除JSON结束后的非JSON字符
          .trim();

        // 2. 修复对象/数组末尾的多余逗号
        const trailingCommaPattern = /,(\s*[}\]])/g;
        if (trailingCommaPattern.test(repairedString)) {
          repairedString = repairedString.replace(trailingCommaPattern, '$1');
          fixCount++;
          console.log('✅ [JSON修复] 已移除末尾多余逗号');
        }

        // 3. 修复未转义的换行符（在字符串值中）
        const unescapedNewlinePattern = /("(?:\\.|[^"\\])*?")/g;
        repairedString = repairedString.replace(unescapedNewlinePattern, match => {
          if (match.includes('\n') && !match.includes('\\n')) {
            fixCount++;
            return match.replace(/\n/g, '\\n');
          }
          return match;
        });

        // 4. 尝试修复缺少引号的键名（简单情况）
        const unquotedKeyPattern = /([{,]\s*)([a-zA-Z_][a-zA-Z0-9_]*)\s*:/g;
        if (unquotedKeyPattern.test(repairedString)) {
          repairedString = repairedString.replace(unquotedKeyPattern, '$1"$2":');
          fixCount++;
          console.log('✅ [JSON修复] 已为键名添加引号');
        }

        // 5. 修复单引号（替换为双引号）
        // 注意：这个修复比较激进，可能会误伤字符串内容中的单引号
        const singleQuotePattern = /'/g;
        if (repairedString.includes("'")) {
          // 只在疑似键值对的地方替换单引号
          repairedString = repairedString.replace(/:\s*'([^']*?)'/g, ': "$1"');
          repairedString = repairedString.replace(/{\s*'([^']*?)'\s*:/g, '{"$1":');
          fixCount++;
          console.log('✅ [JSON修复] 已替换部分单引号为双引号');
        }

        // 6. 修复未转义的内部引号（在字符串值中）
        // 例如: "content": "他说"你好""  -> "content": "他说\"你好\""
        repairedString = repairedString.replace(/"([^"]*)":\s*"([^"]*)"/g, (match, key, value) => {
          // 检查value中是否有未转义的引号（通过检查\"的数量）
          const escapedQuotes = (value.match(/\\"/g) || []).length;
          const totalQuotes = (value.match(/"/g) || []).length;

          if (totalQuotes > escapedQuotes) {
            // 有未转义的引号，尝试修复
            const fixedValue = value.replace(/(?<!\\)"/g, '\\"');
            fixCount++;
            return `"${key}": "${fixedValue}"`;
          }
          return match;
        });

        // 7. 尝试验证修复后的JSON
        try {
          JSON.parse(repairedString);
          if (fixCount > 0) {
            console.log(`✅ [JSON修复] 成功修复 ${fixCount} 处错误，JSON现在有效`);
          } else {
            console.log('ℹ️ [JSON修复] JSON原本就是有效的，无需修复');
          }
          return repairedString;
        } catch (parseError) {
          // 8. 如果还是无法解析，尝试更激进的修复
          console.warn('⚠️ [JSON修复] 基础修复后仍无法解析，尝试深度修复...');

          // 移除所有控制字符（除了\n, \r, \t）
          repairedString = repairedString.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]/g, '');

          // 尝试修复常见的数组/对象不匹配
          const openBraces = (repairedString.match(/{/g) || []).length;
          const closeBraces = (repairedString.match(/}/g) || []).length;
          const openBrackets = (repairedString.match(/\[/g) || []).length;
          const closeBrackets = (repairedString.match(/\]/g) || []).length;

          if (openBraces > closeBraces) {
            repairedString += '}'.repeat(openBraces - closeBraces);
            console.log(`✅ [JSON修复] 添加了 ${openBraces - closeBraces} 个缺失的 }`);
            fixCount++;
          }
          if (openBrackets > closeBrackets) {
            repairedString += ']'.repeat(openBrackets - closeBrackets);
            console.log(`✅ [JSON修复] 添加了 ${openBrackets - closeBrackets} 个缺失的 ]`);
            fixCount++;
          }

          // 最后一次验证
          try {
            JSON.parse(repairedString);
            console.log(`✅ [JSON修复] 深度修复成功，共修复 ${fixCount} 处错误`);
            return repairedString;
          } catch (finalError) {
            console.error('❌ [JSON修复] 修复失败，JSON仍然无效:', finalError.message);
            console.error('修复后的内容:', repairedString.substring(0, 500) + '...');
            return null;
          }
        }
      } catch (error) {
        console.error('❌ [JSON修复] 修复过程中发生错误:', error);
        return null;
      }
    },
    // 获取适用的世界书内容
    async getApplicableWorldBooks(scene, options = {}) {
      try {
        const xDB = getXDB(); // 🔧 从全局设置读取世界书（所有账户共享）
        const globalSettings = await xDB.xSettings.get('globalWorldBooks');
        if (!globalSettings || !globalSettings.worldBooks || globalSettings.worldBooks.length === 0) {
          console.log(`🔍 [世界书] 未找到全局世界书数据`);
          return '';
        }
        console.log(`🔍 [世界书] 当前场景: ${scene}, 总世界书数: ${globalSettings.worldBooks.length}`);
        const { boundCharacters = [] } = options; // 筛选适用的世界书
        const applicableBooks = globalSettings.worldBooks.filter(book => {
          const hasSceneBinding = book.scenes && book.scenes.length > 0; // 是否绑定了场景
          const hasTargetBinding = book.targetType && book.targetType !== 'none'; // 是否绑定了目标
          // 真正的闲置状态：既没有场景绑定，也没有目标绑定
          const isTrulyIdle = !hasSceneBinding && !hasTargetBinding;
          if (isTrulyIdle) {
            console.log(`⏸️ [世界书] "${book.name}" - 闲置状态，跳过应用`);
            return false;
          }
          const isMessagesScene = scene === 'messages'; // 私信详情页
          // 【指定角色】：该角色出现的任何地方都使用，无视场景
          if (book.targetType === 'specific' && book.selectedCharacters) {
            const applicable =
              boundCharacters && boundCharacters.some(charId => book.selectedCharacters.includes(charId));
            console.log(
              `${applicable ? '✅' : '❌'} [世界书] "${book.name}" - 指定角色 (当前: [${boundCharacters.join(
                ', ',
              )}], 需要: [${book.selectedCharacters.join(', ')}])`,
            );
            return applicable;
          }
          // 【私信详情页场景】：通过绑定目标（全局对话/仅角色对话）判断
          if (isMessagesScene) {
            // 如果绑定了场景（且不包含全局），则不适用于私信场景
            if (hasSceneBinding && !book.scenes.includes('global')) {
              console.log(`❌ [世界书] "${book.name}" - 私信场景但绑定了其他场景 (${book.scenes.join(', ')})`);
              return false;
            }
            // 如果包含全局场景，直接适用
            if (book.scenes && book.scenes.includes('global')) {
              console.log(`✅ [世界书] "${book.name}" - 全局场景，适用于所有场景`);
              return true;
            }
            // 全局对话：所有私信详情页
            if (book.targetType === 'all') {
              console.log(`✅ [世界书] "${book.name}" - 全局对话，适用于所有私信`);
              return true;
            }
            // 仅角色对话：所有角色私信详情页
            if (book.targetType === 'characterOnly') {
              const applicable = boundCharacters && boundCharacters.length > 0;
              console.log(
                `${applicable ? '✅' : '❌'} [世界书] "${book.name}" - 仅角色对话 (当前角色数: ${
                  boundCharacters.length
                })`,
              );
              return applicable;
            }
            console.log(`❌ [世界书] "${book.name}" - 私信场景但目标类型不适用`);
            return false;
          }
          // 【其他场景】：必须检查场景绑定
          if (!hasSceneBinding) {
            console.log(`❌ [世界书] "${book.name}" - 非私信场景且未绑定场景`);
            return false;
          }
          // 检查场景是否匹配
          const sceneMatches = book.scenes.includes('global') || book.scenes.includes(scene);
          if (!sceneMatches) {
            console.log(`❌ [世界书] "${book.name}" - 场景不匹配 (需要: ${book.scenes.join(', ')}, 当前: ${scene})`);
            return false;
          }
          console.log(`✅ [世界书] "${book.name}" - 场景匹配 (${book.scenes.join(', ')})`); // 场景匹配后，如果是全局场景，直接适用
          if (book.scenes.includes('global')) {
            console.log(`✅ [世界书] "${book.name}" - 全局场景，无需检查目标类型`);
            return true;
          }
          // 其他场景需要检查目标类型
          if (book.targetType === 'all') {
            console.log(`✅ [世界书] "${book.name}" - 目标: 全局对话，适用`);
            return true;
          } else if (book.targetType === 'characterOnly') {
            const applicable = boundCharacters && boundCharacters.length > 0;
            console.log(
              `${applicable ? '✅' : '❌'} [世界书] "${book.name}" - 目标: 仅角色 (角色数: ${boundCharacters.length})`,
            );
            return applicable;
          } else if (book.targetType === 'none') {
            // targetType为none但有场景绑定，也应该适用（只要场景匹配）
            console.log(`✅ [世界书] "${book.name}" - 场景绑定，无特定目标限制`);
            return true;
          }
          console.log(`❌ [世界书] "${book.name}" - 未知目标类型: ${book.targetType}`);
          return false;
        }); // 合并世界书内容
        if (applicableBooks.length === 0) {
          console.log(`🔍 [世界书] 没有适用的世界书`);
          return '';
        }
        console.log(
          `✅ [世界书] 找到 ${applicableBooks.length} 个适用的世界书: ${applicableBooks.map(b => b.name).join(', ')}`,
        );
        let worldBooksContent =
          '\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n📚 世界书（额外知识库）📚\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n';
        applicableBooks.forEach(book => {
          worldBooksContent += `\n【${book.name}】\n${book.content}\n`;
        });
        return worldBooksContent;
      } catch (error) {
        console.error('获取世界书内容失败:', error);
        return '';
      }
    },
    // 构建角色关系信息
    async buildCharacterRelationships(boundCharacters, currentAccountId) {
      if (!boundCharacters || boundCharacters.length === 0) return '';
      try {
        const xDB = getXDB();
        const currentAccount = currentAccountId || 'main';
        const dataId = `xCharacterRelationships_${currentAccount}`; // 加载角色关系数据
        const relationshipRecord = await xDB.xCharacterRelationships.get(dataId);
        if (!relationshipRecord || !relationshipRecord.data) {
          return '';
        }
        const relationshipData = relationshipRecord.data;
        const links = relationshipData.links || [];
        if (links.length === 0) {
          return '';
        }
        // 获取角色名称和X资料映射
        const mainDB = getDB();
        const allChats = await mainDB.chats.toArray();
        const allXProfiles = await xDB.xCharacterProfiles.toArray();
        const charMap = new Map();
        const xProfileMap = new Map();
        allChats.forEach(chat => {
          if (!chat.isGroup) {
            charMap.set(chat.id, chat.name);
          }
        });
        allXProfiles.forEach(profile => {
          xProfileMap.set(profile.characterId, profile);
        }); // 构建关系信息
        let relationshipsInfo = `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
💞 角色关系网络（角色之间的关系）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🚨 重要提示：以下是已绑定角色彼此之间的关系，这些关系与用户无关！
- 用户是独立的个体，不要将任何角色误认为用户
- 这些关系描述的是角色A与角色B之间的互动，而非用户参与的关系
`;
        links.forEach((link, index) => {
          const charAName = charMap.get(link.charA) || '未知角色A';
          const charBName = charMap.get(link.charB) || '未知角色B';
          const xProfileA = xProfileMap.get(link.charA);
          const xProfileB = xProfileMap.get(link.charB);
          relationshipsInfo += `【角色关系 ${index + 1}】（角色之间的关系，与用户无关）\n`; // 角色A的基本身份信息
          relationshipsInfo += `- 角色A：${charAName}\n`;
          if (xProfileA) {
            relationshipsInfo += ` X平台身份：${xProfileA.xName} (${xProfileA.xHandle})\n`;
          }
          // 角色B的基本身份信息
          relationshipsInfo += `- 角色B：${charBName}\n`;
          if (xProfileB) {
            relationshipsInfo += ` X平台身份：${xProfileB.xName} (${xProfileB.xHandle})\n`;
          }
          relationshipsInfo += `- ${charAName}对${charBName}的关系：${link.relationshipAtoB || '未设置'}\n`;
          relationshipsInfo += `- ${charBName}对${charAName}的关系：${link.relationshipBtoA || '未设置'}\n`;
          if (link.story && link.story.trim()) {
            relationshipsInfo += `- 关系情节：${link.story}\n`;
          }
          relationshipsInfo += `\n`;
        });
        relationshipsInfo += `
【角色关系互动规则】：
🚨 核心原则：这些是角色之间的关系，不要与用户关系混淆！
1. 角色互动对象识别：
- 当角色A与角色B互动时，使用上述列出的X平台身份（xName和xHandle）
- 绝对不要将角色B误认为用户
- 用户有独立的用户名和句柄，不要与角色身份混淆
2. 互动频率和类型根据关系亲密度决定：
- 亲密关系（情侣、挚友、家人等）：互动频率较高（30-50%），可以亲昵称呼、开玩笑
- 普通关系（朋友、同事、熟人等）：互动频率中等（15-30%），保持礼貌友好
- 紧张关系（竞争、冷战、敌对等）：互动频率较低（5-15%），可能带有暗讽、针锋相对
3. 互动内容要符合关系设定和情节背景
4. 避免强行制造互动，保持自然真实
5. 如果关系情节中有具体故事，可以在互动中体现相关细节
6. 🚨 再次强调：所有上述关系都是"角色↔角色"的关系，不是"角色↔用户"的关系！
`;
        return relationshipsInfo;
      } catch (error) {
        console.error('构建角色关系信息失败:', error);
        return '';
      }
    },
  }; // HTML模板生成工具 - 简化重复的DOM创建
  const TemplateBuilders = {
    // 构建角色选择项模板
    buildCharacterItem(character, isChecked = false) {
      const itemId = `character-item-${character.id}`;
      const avatarId = `character-avatar-${character.id}`;
      setTimeout(() => {
        // 添加事件处理器
        const item = document.getElementById(itemId);
        const avatar = document.getElementById(avatarId);
        if (item) {
          EventUtils.addHoverEffect(
            item,
            { backgroundColor: 'rgba(255,255,255,0.05)' },
            { backgroundColor: 'transparent' },
          );
          EventUtils.safeAddEventListener(item, 'click', () => toggleCharacterSelection(character.id));
        }
        if (avatar) {
          EventUtils.safeAddEventListener(avatar, 'contextmenu', e => {
            e.preventDefault();
            openCharacterXProfile(character.id);
            return false;
          }); // 长按事件
          let longPressTimer;
          EventUtils.safeAddEventListener(avatar, 'mousedown', () => {
            longPressTimer = setTimeout(() => openCharacterXProfile(character.id), 500);
          });
          EventUtils.safeAddEventListener(avatar, 'mouseup', () => clearTimeout(longPressTimer));
          EventUtils.safeAddEventListener(avatar, 'mouseleave', () => clearTimeout(longPressTimer));
          EventUtils.safeAddEventListener(avatar, 'touchstart', () => {
            longPressTimer = setTimeout(() => openCharacterXProfile(character.id), 500);
          });
          EventUtils.safeAddEventListener(avatar, 'touchend', () => clearTimeout(longPressTimer));
        }
      }, 0);
      return `
 <div id="${itemId}" class="character-item" style="display: flex; align-items: center; gap: 12px; padding: 12px; border: 1px solid #333; border-radius: 8px; margin-bottom: 8px; cursor: pointer; transition: all 0.2s;">
 <img id="${avatarId}" src="${character.settings.aiAvatar}" alt="${character.name}"
 style="width: 40px; height: 40px; border-radius: 50%; flex-shrink: 0; cursor: pointer;"
 title="长按设置X资料">
 <div style="flex: 1; min-width: 0;">
 <div style="color: #fff; font-weight: 600; font-size: 15px; margin-bottom: 2px;">${character.name}</div>
 <div style="color: #71767b; font-size: 13px; text-overflow: ellipsis; overflow: hidden; white-space: nowrap;">
 ${character.originalName}
 </div>
 <div style="color: var(--x-accent); font-size: 11px; margin-top: 2px;">
 长按头像设置X资料
 </div>
 </div>
 ${this.buildCheckbox(character.id, isChecked)}
 </div>
 `;
    },
    // 构建复选框
    buildCheckbox(characterId, isChecked) {
      return `
 <div class="character-checkbox" data-character-id="${characterId}" style="width: 20px; height: 20px; border: 2px solid ${
        isChecked ? 'var(--x-accent)' : '#71767b'
      }; border-radius: 4px; display: flex; align-items: center; justify-content: center; background-color: ${
        isChecked ? 'var(--x-accent)' : '#71767b'
      }; transition: all 0.2s; ">
 ${
   isChecked
     ? '<svg viewBox="0 0 24 24" style="width: 12px; height: 12px; fill: #fff;"><path d="M9 16.17L5.53 12.7l-1.06 1.06L9 18.3l9.54-9.54-1.06-1.06L9 16.17z"/></svg>'
     : ''
 }
 </div>
 `;
    },
    // 构建角色信息显示
    buildCharacterInfoDisplay(character) {
      return `
 <div style="display: flex; align-items: center; gap: 16px;">
 <img src="${character.settings.aiAvatar}" alt="${character.name}" style="width: 60px; height: 60px; border-radius: 50%;">
 <div>
 <div style="color: #fff; font-size: 18px; font-weight: 600; margin-bottom: 4px;">${character.name}</div>
 <div style="color: #71767b; font-size: 14px;">本名：${character.originalName}</div>
 <div style="color: #71767b; font-size: 14px;">设置该角色在X平台的专属身份资料</div>
 </div>
 </div>
 `;
    },
    // 构建空状态提示
    buildEmptyState(message) {
      return `<p style="color: #71767b; text-align: center; padding: 20px;">${message}</p>`;
    },
    // 构建错误状态提示
    buildErrorState(message) {
      return `<p style="color: #f4212e; text-align: center; padding: 20px;">${message}</p>`;
    },
  }; // 验证和错误处理工具 - 简化重复验证逻辑
  const ValidationUtils = {
    // 验证必需字段
    validateRequired(fields) {
      const missing = [];
      for (const [key, value] of Object.entries(fields)) {
        if (!value || value.trim() === '') {
          missing.push(key);
        }
      }
      return {
        isValid: missing.length === 0,
        missing: missing,
      };
    },
    // 验证句柄格式
    validateHandle(handle) {
      if (!handle) return { isValid: false, error: '句柄不能为空' };
      if (handle.length > 15) return { isValid: false, error: '句柄长度不能超过15个字符' };
      if (!/^[a-zA-Z0-9_]+$/.test(handle)) return { isValid: false, error: '句柄只能包含字母、数字和下划线' };
      return { isValid: true };
    },
    // 验证名称长度
    validateName(name, maxLength = 30) {
      if (!name) return { isValid: false, error: '名称不能为空' };
      if (name.length > maxLength) return { isValid: false, error: `名称长度不能超过${maxLength}个字符` };
      return { isValid: true };
    },
    // 安全的数据解析
    safeParseJSON(jsonString, defaultValue = null) {
      try {
        return JSON.parse(jsonString);
      } catch (error) {
        console.error('JSON解析失败:', error);
        return defaultValue;
      }
    },
    // 安全的DOM操作
    safeGetElement(id) {
      const element = document.getElementById(id);
      if (!element) {
        console.warn(`未找到元素: ${id}`);
      }
      return element;
    },
    // 统一错误处理
    handleError(error, context = '') {
      console.error(`${context} 错误:`, error);
      showXToast(`${context}失败: ${error.message}`, 'error');
    },
  }; // Token计数工具 - 用于监控AI调用的token使用量
  const TokenUtils = {
    // 估算文本的token数量（粗略估计：1个token ≈ 4个字符）
    estimateTokens(text) {
      if (!text) return 0; // 对于中文，大约2个汉字=1个token；对于英文，大约4个字符=1个token
      const chineseChars = (text.match(/[\u4e00-\u9fa5]/g) || []).length;
      const otherChars = text.length - chineseChars;
      return Math.ceil(chineseChars / 2 + otherChars / 4);
    },
    // 记录token使用情况
    logTokenUsage(sceneName, step, content, cumulativeTokens = 0) {
      const tokens = this.estimateTokens(content);
      const newTotal = cumulativeTokens + tokens;
      console.log(
        `📊 [${sceneName}] ${step}: ${tokens.toLocaleString()} tokens | 累计: ${newTotal.toLocaleString()} tokens`,
      );
      return newTotal;
    },
    // 记录完整prompt的token使用情况
    logFinalPrompt(sceneName, systemPrompt, userMessage = '', contextInfo = '') {
      const systemTokens = this.estimateTokens(systemPrompt);
      const userTokens = this.estimateTokens(userMessage);
      const contextTokens = this.estimateTokens(contextInfo);
      const totalTokens = systemTokens + userTokens + contextTokens;
      console.log(`
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📊 [${sceneName}] Token使用统计
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
系统提示词: ${systemTokens.toLocaleString()} tokens
用户消息: ${userTokens.toLocaleString()} tokens
上下文信息: ${contextTokens.toLocaleString()} tokens
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
总计: ${totalTokens.toLocaleString()} tokens
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 `);
      return {
        systemTokens,
        userTokens,
        contextTokens,
        totalTokens,
      };
    },
  }; // 事件处理工具 - 简化重复的事件处理逻辑
  const EventUtils = {
    // 添加悬停效果
    addHoverEffect(element, hoverStyle = {}, defaultStyle = {}) {
      if (!element) return;
      element.addEventListener('mouseover', () => {
        Object.assign(element.style, hoverStyle);
      });
      element.addEventListener('mouseout', () => {
        Object.assign(element.style, defaultStyle);
      });
    },
    // 批量添加悬停效果
    addHoverEffectBatch(selector, hoverStyle = {}, defaultStyle = {}) {
      document.querySelectorAll(selector).forEach(element => {
        this.addHoverEffect(element, hoverStyle, defaultStyle);
      });
    },
    // 添加按钮悬停效果（通用样式）
    addButtonHover(element) {
      this.addHoverEffect(
        element,
        {
          backgroundColor: 'rgba(255,255,255,0.1)',
        },
        {
          backgroundColor: 'transparent',
        },
      );
    },
    // 添加链接下划线悬停效果
    addLinkUnderlineHover(element, targetSelector = 'span') {
      if (!element) return;
      element.addEventListener('mouseover', () => {
        const target = targetSelector ? element.querySelector(targetSelector) : element;
        if (target) target.style.textDecoration = 'underline';
      });
      element.addEventListener('mouseout', () => {
        const target = targetSelector ? element.querySelector(targetSelector) : element;
        if (target) target.style.textDecoration = 'none';
      });
    },
    // 安全的事件监听器添加
    safeAddEventListener(element, event, handler) {
      if (element && typeof handler === 'function') {
        element.addEventListener(event, handler);
      }
    },
    // 防抖函数
    debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    },
    // 节流函数
    throttle(func, limit) {
      let inThrottle;
      return function executedFunction(...args) {
        if (!inThrottle) {
          func.apply(this, args);
          inThrottle = true;
          setTimeout(() => (inThrottle = false), limit);
        }
      };
    },
  }; // API工具 - 统一API配置读取和请求处理
  const APIUtils = {
    // Gemini辅助函数
    _getGeminiResponseText(data) {
      if (data.candidates && data.candidates[0] && data.candidates[0].content && data.candidates[0].content.parts) {
        return data.candidates[0].content.parts[0].text || '';
      }
      return '';
    },
    // 加载API配置和X设置
    async loadConfigAndSettings(accountId = null) {
      const db = getDB();
      const xDb = getXDB();
      // 读取API配置
      const apiConfig = await db.apiConfig.get('main');
      if (!apiConfig || !apiConfig.proxyUrl || !apiConfig.apiKey || !apiConfig.model) {
        throw new Error('请先配置API设置');
      }
      // 读取X设置
      const settingsId = `xSettings_${accountId || currentAccountId || 'main'}`;
      const xSettings = await xDb.xSettings.get(settingsId);
      return {
        db,
        xDb,
        apiConfig,
        xSettings: {
          userPrompt: xSettings?.systemPrompt || '',
          worldSetting: xSettings?.worldSetting || '',
          boundCharacters: xSettings?.boundCharacters || [],
        },
      };
    },
    // 加载绑定的NPC数据
    async loadBoundNPCs(accountId = null) {
      const xDb = getXDB();
      const npcDataId = 'xNPCs_global';
      const npcData = await xDb.xNPCs.get(npcDataId);
      const allNPCs = npcData?.npcs || [];
      const currentAccount = accountId || currentAccountId || 'main';
      const boundNPCs = allNPCs.filter(npc => npc.boundUsers && npc.boundUsers.includes(currentAccount));
      if (boundNPCs.length > 0) {
        console.log(
          `📋 已加载 ${boundNPCs.length} 个绑定NPC:`,
          boundNPCs.map(n => `${n.name}(${n.handle})`).join(', '),
        );
      }
      return boundNPCs;
    },
    // 发送AI请求（统一处理Gemini和OpenAI）
    async sendAIRequest({ apiConfig, systemPrompt, messages, temperature = 0.8 }) {
      const { proxyUrl, apiKey, model } = apiConfig;
      const isGemini = proxyUrl.includes('generativelanguage');
      let response;
      if (isGemini) {
        const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models';
        const geminiConfig = {
          url: `${GEMINI_API_URL}/${model}:generateContent?key=${getRandomValue(apiKey)}`,
          data: {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              contents: [
                {
                  parts: [
                    {
                      text:
                        systemPrompt +
                        '\n\n' +
                        messages
                          .map(m =>
                            Array.isArray(m.content) ? m.content.map(c => c.text || '[图片]').join(' ') : m.content,
                          )
                          .join('\n'),
                    },
                  ],
                },
              ],
              generationConfig: {
                temperature,
              },
            }),
          },
        };
        response = await fetch(geminiConfig.url, geminiConfig.data);
      } else {
        const openAiPayload = {
          model: model,
          messages: [{ role: 'system', content: systemPrompt }, ...messages],
          temperature,
          stream: false,
        };
        response = await fetch(`${proxyUrl}/v1/chat/completions`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${apiKey}`,
          },
          body: JSON.stringify(openAiPayload),
        });
      }
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`API错误: ${response.status} - ${errorData.error?.message || response.statusText}`);
      }
      const data = await response.json();
      let aiResponseContent;
      if (isGemini) {
        aiResponseContent = this._getGeminiResponseText(data);
      } else {
        aiResponseContent = data.choices?.[0]?.message?.content || '';
      }
      console.log('AI原始响应:', aiResponseContent);
      return aiResponseContent;
    },
    // 清理和解析JSON响应
    parseJSONResponse(aiResponseContent) {
      const cleanedResponse = aiResponseContent
        .replace(/```json\s*/i, '')
        .replace(/```\s*$/, '')
        .trim();
      if (!cleanedResponse) {
        throw new Error('AI返回了空的响应内容');
      }

      // 先尝试直接解析
      try {
        return JSON.parse(cleanedResponse);
      } catch (parseError) {
        console.warn('⚠️ [JSON解析] 直接解析失败，尝试使用修复工具...');
        console.error('原始错误:', parseError.message);
        console.error('尝试解析的内容:', cleanedResponse.substring(0, 500) + '...');

        // 使用JSON修复工具尝试修复
        const repairedJSON = StringBuilders.repairJSON(cleanedResponse);

        if (repairedJSON) {
          try {
            const parsedData = JSON.parse(repairedJSON);
            console.log('✅ [JSON解析] 使用修复工具成功解析');
            return parsedData;
          } catch (repairError) {
            console.error('❌ [JSON解析] 修复后仍然无法解析:', repairError.message);
            throw new Error(`AI返回的数据无法修复: ${repairError.message}`);
          }
        } else {
          console.error('❌ [JSON解析] JSON修复工具无法修复');
          throw new Error(`AI返回的数据不是有效的JSON格式: ${parseError.message}`);
        }
      }
    },
    // 后处理：身份筛选和头像修正
    async postProcessData(data, userProfileInfo) {
      // 身份冒用筛选
      data = StringBuilders.filterUserImpersonation(data, userProfileInfo.handle, userProfileInfo.name);
      // 头像修正
      await StringBuilders.enforceAvatarRules(data, userProfileInfo.handle);
      return data;
    },
  }; // 数据处理工具 - 简化重复的数据处理逻辑
  const DataUtils = {
    // 格式化数字显示
    formatNumber(num) {
      if (num === undefined || num === null) return '0';
      if (num < 1000) return num.toString();
      if (num < 1000000) return (num / 1000).toFixed(1).replace(/\.0$/, '') + 'K';
      if (num < 1000000000) return (num / 1000000).toFixed(1).replace(/\.0$/, '') + 'M';
      return (num / 1000000000).toFixed(1).replace(/\.0$/, '') + 'B';
    },
    // 格式化时间显示
    formatTime(dateString) {
      const date = new Date(dateString);
      const now = new Date();
      const diffInSeconds = Math.floor((now - date) / 1000);
      if (diffInSeconds < 60) return '刚刚';
      if (diffInSeconds < 3600) return Math.floor(diffInSeconds / 60) + '分钟前';
      if (diffInSeconds < 86400) return Math.floor(diffInSeconds / 3600) + '小时前';
      if (diffInSeconds < 2592000) return Math.floor(diffInSeconds / 86400) + '天前';
      return date.toLocaleDateString('zh-CN', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
      });
    },
    // 生成唯一ID
    generateId(prefix = 'id') {
      return `${prefix}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    },
    // 深拷贝对象
    deepClone(obj) {
      if (obj === null || typeof obj !== 'object') return obj;
      if (obj instanceof Date) return new Date(obj.getTime());
      if (obj instanceof Array) return obj.map(item => this.deepClone(item));
      if (typeof obj === 'object') {
        const clonedObj = {};
        for (const key in obj) {
          if (obj.hasOwnProperty(key)) {
            clonedObj[key] = this.deepClone(obj[key]);
          }
        }
        return clonedObj;
      }
    },
    // 数组去重
    uniqueArray(arr, key = null) {
      if (key) {
        const seen = new Set();
        return arr.filter(item => {
          const keyValue = item[key];
          if (seen.has(keyValue)) {
            return false;
          }
          seen.add(keyValue);
          return true;
        });
      }
      return [...new Set(arr)];
    },
    // 安全获取嵌套对象属性
    safeGet(obj, path, defaultValue = null) {
      const keys = path.split('.');
      let result = obj;
      for (const key of keys) {
        if (result === null || result === undefined || !result.hasOwnProperty(key)) {
          return defaultValue;
        }
        result = result[key];
      }
      return result;
    },
    // 数据排序
    sortBy(arr, key, ascending = true) {
      return arr.sort((a, b) => {
        const aVal = this.safeGet(a, key);
        const bVal = this.safeGet(b, key);
        if (aVal < bVal) return ascending ? -1 : 1;
        if (aVal > bVal) return ascending ? 1 : -1;
        return 0;
      });
    },
    // 分页数据
    paginate(arr, page = 1, limit = 10) {
      const offset = (page - 1) * limit;
      return {
        data: arr.slice(offset, offset + limit),
        pagination: {
          page,
          limit,
          total: arr.length,
          totalPages: Math.ceil(arr.length / limit),
          hasNext: offset + limit < arr.length,
          hasPrev: page > 1,
        },
      };
    },
  }; // 性能优化工具 - 提升代码执行效率
  const PerformanceUtils = {
    // 缓存机制
    cache: new Map(),
    // 设置缓存
    setCache(key, value, ttl = 300000) {
      // 默认5分钟过期
      this.cache.set(key, {
        value,
        expiry: Date.now() + ttl,
      });
    },
    // 获取缓存
    getCache(key) {
      const item = this.cache.get(key);
      if (!item) return null;
      if (Date.now() > item.expiry) {
        this.cache.delete(key);
        return null;
      }
      return item.value;
    },
    // 清理过期缓存
    cleanExpiredCache() {
      const now = Date.now();
      for (const [key, item] of this.cache.entries()) {
        if (now > item.expiry) {
          this.cache.delete(key);
        }
      }
    },
    // 批量DOM操作
    batchDOMUpdate(updates) {
      const fragment = document.createDocumentFragment();
      updates.forEach(update => {
        if (typeof update === 'function') {
          update(fragment);
        }
      });
      return fragment;
    },
    // 延迟执行
    defer(callback, delay = 0) {
      return setTimeout(callback, delay);
    },
    // 请求空闲时间执行
    idle(callback) {
      if (window.requestIdleCallback) {
        return window.requestIdleCallback(callback);
      } else {
        return setTimeout(callback, 1);
      }
    },
    // 监控性能
    measurePerformance(name, fn) {
      return async (...args) => {
        const start = performance.now();
        try {
          const result = await fn(...args);
          const end = performance.now();
          console.log(`Performance [${name}]: ${(end - start).toFixed(2)}ms`);
          return result;
        } catch (error) {
          const end = performance.now();
          console.error(`Performance [${name}] Error: ${(end - start).toFixed(2)}ms`, error);
          throw error;
        }
      };
    },
  }; // 定期清理缓存
  setInterval(() => PerformanceUtils.cleanExpiredCache(), 60000); // 每分钟清理一次
  // === 核心业务逻辑函数 ===
  // 页面切换函数
  // 切换X社交页面的函数 - 优化后
  function switchXPage(pageType) {
    // 如果切换到主页、消息、通知、设置等主要页面，清除搜索结果标记
    const mainPages = ['home', 'notifications', 'messages', 'settings', 'profile'];
    if (mainPages.includes(pageType) && isInSearchResults) {
      console.log('📖 [导航] 切换到其他页面，清除搜索结果标记');
      isInSearchResults = false;
      currentSearchQuery = '';
    }
    // 清除对应页面的提醒点
    if (pageType === 'home') {
      hideNavNotificationDot('home');
    } else if (pageType === 'notifications') {
      hideNavNotificationDot('notifications');
    } else if (pageType === 'messages') {
      hideNavNotificationDot('messages');
    }
    // 隐藏所有页面，显示选中页面
    DOMUtils.hide('.x-page');
    const targetPage = document.getElementById('x-' + pageType + '-page');
    if (targetPage) targetPage.style.display = 'flex'; // 获取顶部栏和底部导航栏
    const topBar = document.querySelector('.x-top-bar');
    const bottomNav = document.querySelector('.x-bottom-nav');
    const refreshBtn = document.querySelector('.refresh-trends-btn'); // 如果是提问箱页面或直播页面，隐藏顶部栏和底部导航栏
    if (pageType === 'askbox' || pageType === 'live') {
      if (topBar) topBar.style.display = 'none';
      if (bottomNav) bottomNav.style.display = 'none';
      if (refreshBtn) refreshBtn.style.display = 'none';
    } else {
      // 其他页面显示顶部栏和底部导航栏
      if (topBar) topBar.style.display = 'flex';
      if (bottomNav) bottomNav.style.display = 'flex'; // 只在搜索页面显示刷新按钮
      if (refreshBtn) {
        refreshBtn.style.display = pageType === 'search' ? 'flex' : 'none';
      }
    }
    // 重置导航样式
    DOMUtils.removeClass('.x-nav-item', 'active');
    DOMUtils.setStyle('.x-nav-item svg', 'fill', '#fff');
    DOMUtils.hide('.nav-highlight'); // 页面索引映射
    const pageIndexMap = {
      home: 0,
      search: 1,
      notifications: 2,
      messages: 3,
      settings: -1,
      profile: -1,
      askbox: -1,
      live: -1,
    };
    const targetIndex = pageIndexMap[pageType];
    if (pageType === 'profile') {
      setTimeout(() => {
        loadUserProfileToUI(); // 刷新用户资料显示
        loadUserProfileTweets(); // 加载用户推文
      }, 100);
    } else if (pageType === 'askbox') {
      // 加载提问箱数据
      setTimeout(() => {
        loadAskboxData();
      }, 100);
    } else if (pageType === 'live') {
      // 加载直播页面数据
      setTimeout(async () => {
        await initLivePage();
      }, 100);
    } else if (pageType === 'search') {
      // 加载搜索页面数据
      setTimeout(() => {
        initSearchPage();
      }, 100);
    } else if (pageType === 'notifications') {
      // 加载通知数据
      setTimeout(async () => {
        await loadNotifications();
      }, 100);
    } else if (pageType === 'messages') {
      // 加载私信列表
      setTimeout(async () => {
        await loadMessagesList();
      }, 100);
    }
    // 切换到设置页面时，重新加载X设置（按账号加载）
    if (pageType === 'settings') {
      setTimeout(async () => {
        await initializeXSettings();
        await loadLanguagePreference(); // 加载语言偏好
        await loadAccentColorPreference(); // 加载主题色偏好
        console.log('✅ 已加载当前账号的X设置');
      }, 100);
    }
    // 高亮当前导航项
    const navItems = document.querySelectorAll('.x-nav-item');
    if (navItems[targetIndex] && targetIndex >= 0) {
      navItems[targetIndex].classList.add('active');
      navItems[targetIndex].querySelector('svg').style.fill = 'var(--x-accent)';
      navItems[targetIndex].querySelector('.nav-highlight').style.display = 'block';
    }
  }
  // 添加主页标签切换功能
  function switchHomeTab(tabName) {
    // 重置所有标签和内容
    DOMUtils.removeClass('.x-tab', 'active');
    DOMUtils.setStyle('.x-tab', 'color', '#71767b');
    DOMUtils.hide('.tab-indicator');
    DOMUtils.hide('.tab-content'); // 激活选中的标签
    const tabs = document.querySelectorAll('.x-tab');
    const tabIndex = tabName === 'for-you' ? 0 : 1;
    const contentId = tabName === 'for-you' ? 'for-you-content' : 'following-content';
    if (tabs[tabIndex]) {
      tabs[tabIndex].classList.add('active');
      tabs[tabIndex].style.color = '#fff';
      tabs[tabIndex].querySelector('.tab-indicator').style.display = 'block';
    }
    const content = document.getElementById(contentId);
    if (content) content.style.display = 'flex';
  }
  // ============================================
  // 搜索页面功能
  // ============================================
  // 热搜数据
  let currentSearchTab = 'recommended';
  let trendingData = {
    recommended: [
      {
        id: 't1',
        category: '娱乐 · 热门话题',
        title: '流行电影讨论',
        count: 125600,
      },
      {
        id: 't2',
        category: '体育 · 实时',
        title: '篮球比赛精彩瞬间',
        count: 89200,
      },
      {
        id: 't3',
        category: '科技 · 趋势',
        title: 'AI技术新突破',
        count: 256700,
      },
      {
        id: 't4',
        category: '音乐 · 流行',
        title: '新专辑发布',
        count: 67800,
      },
      {
        id: 't5',
        category: '游戏 · 热门',
        title: '年度游戏评选',
        count: 145300,
      },
    ],
    trending: [
      {
        id: 't6',
        category: '全球 · 趋势',
        title: '国际新闻热点',
        count: 892300,
      },
      {
        id: 't7',
        category: '商业 · 财经',
        title: '股市最新动态',
        count: 234500,
      },
      {
        id: 't8',
        category: '社会 · 讨论',
        title: '社会话题关注',
        count: 456700,
      },
      {
        id: 't9',
        category: '文化 · 热议',
        title: '传统文化传承',
        count: 178900,
      },
      {
        id: 't10',
        category: '健康 · 生活',
        title: '养生健康小贴士',
        count: 123400,
      },
    ],
  }; // 自定义分类数据
  let customCategories = []; // 搜索相关数据
  let currentSearchQuery = '';
  let currentSearchResultTab = 'top';
  let isInSearchResults = false; // 标记是否在搜索结果视图
  let searchResultsData = {
    top: [],
    latest: [],
    users: [],
  }; // 切换搜索标签
  function switchSearchTab(tabName) {
    currentSearchTab = tabName; // 更新标签样式
    const tabs = document.querySelectorAll('.search-tab');
    tabs.forEach(tab => {
      tab.classList.remove('active');
    });
    const activeTab = Array.from(tabs).find(tab => tab.onclick && tab.onclick.toString().includes(tabName));
    if (activeTab) {
      activeTab.classList.add('active');
    }
    // 渲染对应的热搜列表
    renderTrendingList();
  }
  // 渲染热搜列表
  function renderTrendingList() {
    const container = document.getElementById('trending-list');
    if (!container) return;
    const trends = trendingData[currentSearchTab] || [];
    if (trends.length === 0) {
      container.innerHTML = `
 <div style="display: flex; justify-content: center; align-items: center; padding: 40px 20px; color: #71767b;">
 暂无热搜内容
 </div>
 `;
      return;
    }
    container.innerHTML = trends
      .map(
        trend => `
 <div class="trending-item" onclick="handleTrendingClick('${trend.id}')">
 <div class="trending-header">
 <div class="trending-category">${trend.category}</div>
 <div class="trending-more" onclick="event.stopPropagation(); handleTrendingMore('${trend.id}')">
 <svg viewBox="0 0 24 24" aria-hidden="true">
 <g><path d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"></path></g>
 </svg>
 </div>
 </div>
 <div class="trending-title">${trend.title}</div>
 <div class="trending-count">${formatNumber(trend.count)} 条帖子</div>
 </div>
`,
      )
      .join('');
  }
  // 刷新热搜（第五个情景：热搜生成器）
  async function refreshTrends() {
    const refreshBtn = document.querySelector('.refresh-trends-btn');
    if (!refreshBtn) return; // 添加旋转动画
    refreshBtn.classList.add('spinning');
    try {
      // 🔧 使用统一的API配置加载工具
      const { apiConfig, xSettings, xDb } = await APIUtils.loadConfigAndSettings();
      const { userPrompt, worldSetting, boundCharacters } = xSettings; // 3. 构建用户X个人资料信息
      const userXProfileInfo = StringBuilders.buildUserXProfileInfo(window.userProfileData); // 4. 判断用户是否为大曝光身份（明星/网红等公众人物）
      const publicIdentity = userXProfileInfo.publicIdentity || '';
      const bio = userXProfileInfo.bio || '';
      const isPublicFigure =
        /明星|网红|博主|演员|歌手|艺人|主播|up主|偶像|导演|制片|编剧|作家|influencer|celebrity|singer|actor|artist|streamer|idol/i.test(
          publicIdentity + ' ' + bio,
        );
      console.log('🎭 用户公众身份检测:', {
        isPublicFigure,
        publicIdentity,
        bio,
      }); // Token计数器
      let tokenCount = 0; // 5. 构建基础系统提示词（提示词 + 世界观）
      let systemPrompt = StringBuilders.buildBaseSystemPrompt({
        userPrompt,
        worldSetting,
      });
      tokenCount = TokenUtils.logTokenUsage('热搜生成器', '基础系统提示词', systemPrompt, tokenCount); // 5.5. 获取适用的世界书内容
      const worldBooksContent = await StringBuilders.getApplicableWorldBooks('trending', {
        boundCharacters,
      });
      if (worldBooksContent) {
        systemPrompt += worldBooksContent;
        tokenCount = TokenUtils.logTokenUsage('热搜生成器', '世界书内容', worldBooksContent, tokenCount);
      }
      // 6. 获取启用的自定义分类
      const enabledCustomCategories = customCategories.filter(cat => cat.enabled && cat.name); // 7. 添加热搜生成任务说明
      systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 核心任务说明 🎯
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
你是X社交平台的热搜生成器。请生成当前的热门话题列表。
【生成要求】：
- 为"为你推荐"和"当前趋势"各生成5条热搜
${
  enabledCustomCategories.length > 0
    ? `- 同时为以下自定义分类各生成5条热搜：${enabledCustomCategories.map(c => `"${c.name}"`).join('、')}`
    : ''
}
- 热搜话题要多样化，涵盖不同领域和分类
- 热搜数量（帖子数）要符合真实社交平台规模（1万到100万之间）
- 话题标题要简洁有力，符合社交媒体特点
${
  isPublicFigure
    ? '- 用户或绑定角色是公众人物，可以适当生成1-2条相关热搜（占比约20%）'
    : '- 用户和角色不是公众人物，生成通用热门话题即可，不要涉及用户或角色'
}
【热搜分类示例】：
- 娱乐 · 热门话题：电影、音乐、综艺、明星动态
- 体育 · 实时：比赛、运动员、体育赛事
- 科技 · 趋势：新技术、产品发布、科技新闻
- 社会 · 讨论：时事、民生、社会话题
- 游戏 · 热门：游戏更新、电竞、游戏新闻
- 文化 · 热议：艺术、文学、传统文化
- 音乐 · 流行：新歌、演唱会、音乐人动态
- 美食 · 推荐：美食探店、烹饪技巧
- 旅游 · 探索：旅行目的地、旅游攻略
- 时尚 · 潮流：穿搭、时装周、潮流单品
- 健康 · 生活：养生、健身、生活方式
- 全球 · 趋势：国际新闻、全球热点
- 商业 · 财经：经济动态、商业新闻
- 教育 · 学习：学习方法、教育资讯
${
  enabledCustomCategories.length > 0
    ? `
【自定义分类详细说明】：${enabledCustomCategories
        .map(
          cat => `
- ${cat.name}：${cat.description || '生成该分类下的热门话题'}`,
        )
        .join('')}
`
    : ''
}
`; // 8. 如果是公众人物，添加用户和角色信息
      if (isPublicFigure) {
        systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📋 公众人物信息（可用于生成相关热搜）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
【用户公开信息】：
- 用户名：${userXProfileInfo.name}
- 用户句柄：${userXProfileInfo.handle}
- 公众身份：${userXProfileInfo.publicIdentity}
${userXProfileInfo.bio ? `- 个人简介：${userXProfileInfo.bio}` : ''}
${
  userXProfileInfo.verificationType !== 'none'
    ? `- 认证状态：${StringBuilders.getUserVerificationTypeDescription(userXProfileInfo)}`
    : ''
}
${
  userXProfileInfo.verificationType === 'couple' && userXProfileInfo.coupleCharacterName
    ? `- 情侣关系：与${userXProfileInfo.coupleCharacterName}为公开情侣`
    : ''
}
`; // 9. 读取绑定的公众人物（角色 + NPC）
        // 🎯 优化：添加NPC支持
        const publicFigureProfiles = []; // 9.1. 检查绑定角色
        if (boundCharacters.length > 0) {
          const allXProfiles = await xDb.xCharacterProfiles.toArray();
          for (const charId of boundCharacters) {
            const xProfile = allXProfiles.find(p => p.characterId === charId);
            if (xProfile && xProfile.publicIdentity) {
              // 只添加有公众身份的角色
              const isCharPublicFigure =
                /明星|网红|博主|演员|歌手|艺人|主播|up主|偶像|导演|制片|编剧|作家|influencer|celebrity|singer|actor|artist|streamer|idol/i.test(
                  xProfile.publicIdentity,
                );
              if (isCharPublicFigure) {
                publicFigureProfiles.push({
                  type: 'character',
                  name: xProfile.xName,
                  handle: xProfile.xHandle,
                  publicIdentity: xProfile.publicIdentity,
                  bio: xProfile.xBio || '',
                });
              }
            }
          }
        }
        // 9.2. 检查绑定的NPC
        const npcDataId = 'xNPCs_global';
        const npcData = await xDb.xNPCs.get(npcDataId);
        const allNPCs = npcData?.npcs || [];
        const currentAccount = currentAccountId || 'main';
        const boundNPCs = allNPCs.filter(npc => npc.boundUsers && npc.boundUsers.includes(currentAccount));
        for (const npc of boundNPCs) {
          // 检查NPC是否有公众属性（人设或主页内容中提到明星、网红等）
          const npcTexts = [npc.personality || '', npc.homepage || ''].join(' ');
          const isNpcPublicFigure =
            /明星|网红|博主|演员|歌手|艺人|主播|up主|偶像|导演|制片|编剧|作家|influencer|celebrity|singer|actor|artist|streamer|idol/i.test(
              npcTexts,
            );
          if (isNpcPublicFigure) {
            publicFigureProfiles.push({
              type: 'npc',
              name: npc.name,
              handle: npc.handle,
              publicIdentity: '公众人物',
              bio: npc.personality || '',
            });
          }
        }
        if (publicFigureProfiles.length > 0) {
          systemPrompt += `
【绑定公众人物信息】：
`;
          for (const profile of publicFigureProfiles) {
            systemPrompt += `
【${profile.name}】（${profile.type === 'character' ? '角色' : 'NPC'}）
- X姓名：${profile.name}
- X句柄：${profile.handle}
- 公众身份：${profile.publicIdentity}
${profile.bio ? `- 简介/人设：${profile.bio}` : ''}
`; // 读取近期推文
            try {
              const cleanHandle = profile.handle.replace('@', '');
              const accountProfile = await xDb.xAccountProfiles.get(cleanHandle);
              const recentTweets = accountProfile?.tweets?.slice(0, 5) || [];
              if (recentTweets.length > 0) {
                systemPrompt += `
${profile.name} 的近期推文（${recentTweets.length}条）：
`;
                recentTweets.forEach((tweet, index) => {
                  systemPrompt += `
${index + 1}. "${tweet.content}"
- 时间：${tweet.time || '最近'}
- 互动：${tweet.stats?.likes || 0}喜欢，${tweet.stats?.retweets || 0}转发
${tweet.media && tweet.media.length > 0 ? ` - 媒体：${tweet.media[0].description.substring(0, 50) + '...'}\n` : ''}`;
                });
              }
            } catch (error) {
              console.warn(`热搜生成器：读取 ${profile.name} 的推文失败:`, error);
            }
            systemPrompt += `\n`;
          }
        }
        // 10. 添加用户近期推文（如果用户是公众人物）
        // 读取用户的最近5条推文
        try {
          const userTweetsId = `userTweets_${currentAccountId || 'main'}`;
          const userTweetsData = await xDb.xUserTweets.get(userTweetsId);
          const recentUserTweets = userTweetsData?.tweets?.slice(0, 5) || [];
          if (recentUserTweets.length > 0) {
            systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📰 用户近期推文（公众人物）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
${userXProfileInfo.name} 的近期推文（${recentUserTweets.length}条）：
`;
            recentUserTweets.forEach((tweet, index) => {
              systemPrompt += `
${index + 1}. "${tweet.content}"
- 时间：${tweet.time || '最近'}
- 互动：${tweet.stats?.likes || 0}喜欢，${tweet.stats?.retweets || 0}转发，${tweet.stats?.comments || 0}评论
${
  tweet.image
    ? ` - 媒体：${tweet.image.type === 'description' ? tweet.image.content.substring(0, 50) + '...' : '包含图片'}\n`
    : ''
}`;
            });
            systemPrompt += `
【使用说明】：
- 可以基于用户和角色的近期推文内容生成相关的热搜话题
- 热搜可以反映他们最近的活动、作品、或引起的讨论
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
          }
        } catch (error) {
          console.warn('热搜生成器：读取用户推文失败:', error);
        }
        systemPrompt += `
【公众人物热搜规则】：
- 可以生成与用户或角色相关的热搜话题（1-2条，占比约20%）
- 话题应该基于公众身份信息和近期推文内容，符合其领域和形象
- 可以围绕他们的近期动态、作品、或引起的热议生成热搜
- 不要泄露私密人设、聊天记忆等非公开信息
- 热搜内容要真实可信，像真正的社交平台热搜
- 其余80%的热搜应该是与用户/角色无关的通用热门话题
`; // 统计公众人物信息和推文的 token 使用
        const publicFigureSection = systemPrompt.substring(systemPrompt.indexOf('📋 公众人物信息'));
        tokenCount = TokenUtils.logTokenUsage('热搜生成器', '公众人物信息与近期推文', publicFigureSection, tokenCount);
      }
      // 11. 添加格式要求
      let jsonFormat = `{
"recommended": [
{
 "category": "分类 · 标签",
 "title": "热搜话题标题",
 "count": 数字（帖子数量，1万-100万之间）
}
],
"trending": [
{
 "category": "分类 · 标签",
 "title": "热搜话题标题",
 "count": 数字（帖子数量，1万-100万之间）
}
]`; // 如果有自定义分类，添加到JSON格式中
      if (enabledCustomCategories.length > 0) {
        enabledCustomCategories.forEach(cat => {
          jsonFormat += `,
"${cat.id}": [
{
 "category": "分类 · 标签",
 "title": "热搜话题标题",
 "count": 数字（帖子数量，1万-100万之间）
}
]`;
        });
      }
      jsonFormat += `
}`;
      systemPrompt += `
【返回格式】：严格JSON格式，不要添加任何其他文字说明
${jsonFormat}
**注意事项**：
1. category格式：分类 · 标签（例如："娱乐 · 热门话题"）
2. title要简洁有力，不超过20个字
3. count必须是纯数字，不带引号，范围在10000-1000000之间
4. 每个数组包含5个热搜项
5. 话题要多样化，不要集中在某一领域
6. 确保返回纯JSON，不要有markdown代码块标记
${enabledCustomCategories.length > 0 ? `7. 自定义分类的热搜要紧密围绕分类主题和描述，确保内容相关性` : ''}
【最终检查】：确认话题真实可信，分类准确，数量合理，${worldSetting.trim() ? '严格遵守世界观设定，' : ''}格式正确。
`;
      const requirementsSection = systemPrompt.substring(systemPrompt.indexOf('🎯 核心任务说明 🎯'));
      tokenCount = TokenUtils.logTokenUsage('热搜生成器', '任务说明与格式要求', requirementsSection, tokenCount);
      const messages = [{ role: 'user', content: '请生成最新的X平台热搜话题列表' }]; // 最终统计
      TokenUtils.logFinalPrompt('热搜生成器', systemPrompt, messages[0].content); // 🔧 使用统一的API请求工具
      const aiResponseContent = await APIUtils.sendAIRequest({
        apiConfig,
        systemPrompt,
        messages,
        temperature: 0.9,
      }); // 🔧 使用统一的JSON解析工具
      const newTrendsData = APIUtils.parseJSONResponse(aiResponseContent);
      // 14. 验证数据格式
      if (!newTrendsData.recommended || !newTrendsData.trending) {
        throw new Error('AI返回的数据格式不正确，缺少必要字段');
      }
      if (!Array.isArray(newTrendsData.recommended) || !Array.isArray(newTrendsData.trending)) {
        throw new Error('热搜数据格式错误：recommended和trending必须是数组');
      }
      // 验证自定义分类数据
      if (enabledCustomCategories.length > 0) {
        for (const category of enabledCustomCategories) {
          if (!newTrendsData[category.id]) {
            console.warn(`⚠️ AI未返回自定义分类"${category.name}"的数据`);
          } else if (!Array.isArray(newTrendsData[category.id])) {
            console.warn(`⚠️ 自定义分类"${category.name}"的数据格式错误`);
          }
        }
      }
      // 15. 为热搜添加唯一ID
      const timestamp = Date.now();
      newTrendsData.recommended = newTrendsData.recommended.map((trend, index) => ({
        ...trend,
        id: `rec_${timestamp}_${index}`,
      }));
      newTrendsData.trending = newTrendsData.trending.map((trend, index) => ({
        ...trend,
        id: `trend_${timestamp}_${index}`,
      })); // 为自定义分类添加唯一ID
      enabledCustomCategories.forEach(category => {
        if (newTrendsData[category.id] && Array.isArray(newTrendsData[category.id])) {
          newTrendsData[category.id] = newTrendsData[category.id].map((trend, index) => ({
            ...trend,
            id: `${category.id}_${timestamp}_${index}`,
          }));
        }
      }); // 16. 更新全局热搜数据
      trendingData.recommended = newTrendsData.recommended;
      trendingData.trending = newTrendsData.trending; // 更新自定义分类数据
      enabledCustomCategories.forEach(category => {
        if (newTrendsData[category.id]) {
          trendingData[category.id] = newTrendsData[category.id];
        }
      }); // 17. 保存到数据库
      try {
        const saveData = {
          id: 'trends',
          recommended: newTrendsData.recommended,
          trending: newTrendsData.trending,
          lastUpdated: new Date().toISOString(),
        }; // 添加自定义分类数据
        enabledCustomCategories.forEach(category => {
          if (newTrendsData[category.id]) {
            saveData[category.id] = newTrendsData[category.id];
          }
        });
        await xDb.xTweetsData.put(saveData);
        console.log('✅ 热搜数据已保存到数据库', {
          默认分类: 2,
          自定义分类: enabledCustomCategories.length,
        });
      } catch (saveError) {
        console.error('⚠️ 保存热搜数据失败:', saveError); // 不影响主流程，继续执行
      }
      // 18. 重新渲染热搜列表
      renderTrendingList();
      showXToast('热搜已刷新', 'success');
    } catch (error) {
      console.error('❌ 刷新热搜失败:', error);
      showXToast(`刷新失败: ${error.message}`, 'error');
    } finally {
      // 移除旋转动画
      if (refreshBtn) {
        refreshBtn.classList.remove('spinning');
      }
    }
  }
  // 处理热搜点击
  function handleTrendingClick(trendId) {
    console.log('点击热搜:', trendId); // 查找热搜数据
    let trendItem = null;
    for (const category in trendingData) {
      const found = trendingData[category].find(t => t.id === trendId);
      if (found) {
        trendItem = found;
        break;
      }
    }
    if (!trendItem) {
      console.error('未找到热搜数据:', trendId);
      return;
    }
    // 将热搜标题填入搜索框
    const searchInput = document.getElementById('search-input');
    if (searchInput) {
      searchInput.value = trendItem.title;
      toggleSearchButton(); // 显示搜索按钮
    }
    // 自动执行搜索
    performSearch();
  }
  // 处理热搜更多选项
  function handleTrendingMore(trendId) {
    console.log('热搜更多选项:', trendId);
    showXToast('更多选项功能待开发', 'info');
  }
  // 显示/隐藏搜索按钮
  function toggleSearchButton() {
    const input = document.getElementById('search-input');
    const button = document.getElementById('search-submit-btn');
    if (input && button) {
      if (input.value.trim()) {
        button.style.display = 'flex';
      } else {
        button.style.display = 'none';
      }
    }
  }
  // 切换搜索结果标签
  function switchSearchResultTab(tabName) {
    currentSearchResultTab = tabName; // 更新标签样式
    const tabs = document.querySelectorAll('#search-results-view .search-tab');
    tabs.forEach((tab, index) => {
      const tabNames = ['top', 'latest', 'users'];
      if (tabNames[index] === tabName) {
        tab.classList.add('active');
      } else {
        tab.classList.remove('active');
      }
    }); // 渲染对应的搜索结果
    renderSearchResults();
  }
  // 渲染搜索结果
  function renderSearchResults() {
    const container = document.getElementById('search-results-content');
    if (!container) return;
    const results = searchResultsData[currentSearchResultTab] || [];
    if (results.length === 0) {
      container.innerHTML = `
 <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 60px 20px; color: #71767b; ">
 <svg viewBox="0 0 24 24" style="width: 80px; height: 80px; fill: #71767b; margin-bottom: 20px;">
 <g><path d="M10.25 3.75c-3.59 0-6.5 2.91-6.5 6.5s2.91 6.5 6.5 6.5c1.795 0 3.419-.726 4.596-1.904 1.178-1.177 1.904-2.801 1.904-4.596 0-3.59-2.91-6.5-6.5-6.5zm-8.5 6.5c0-4.694 3.806-8.5 8.5-8.5s8.5 3.806 8.5 8.5c0 1.986-.682 3.815-1.824 5.262l4.781 4.781-1.414 1.414-4.781-4.781c-1.447 1.142-3.276 1.824-5.262 1.824-4.694 0-8.5-3.806-8.5-8.5z"></path></g>
 </svg>
 <div style="font-size: 20px; font-weight: 600; margin-bottom: 8px;">没有找到结果</div>
 <div style="font-size: 14px;">尝试搜索其他内容</div>
 </div>
 `;
      return;
    }
    // 如果是用户标签，显示用户卡片
    if (currentSearchResultTab === 'users') {
      container.innerHTML = results
        .map(
          user => `
 <div style="padding: 16px; border-bottom: 1px solid #2f3336; display: flex; align-items: center; gap: 12px; cursor: pointer; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(255,255,255,0.03)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <img
 src="${user.avatar}"
 alt="${user.name}"
 onclick="event.stopPropagation(); openAccountProfile('${user.name.replace(/'/g, "\\'")}', '${
            user.handle.startsWith('@') ? user.handle : '@' + user.handle
          }', '${user.avatar}', {
 source: 'search',
 searchQuery: '${currentSearchQuery.replace(/'/g, "\\'")}',
 userBio: '${(user.bio || '').replace(/'/g, "\\'")}',
 verified: ${user.verified || false}
 })"
 style="width: 48px; height: 48px; border-radius: 50%; flex-shrink: 0; cursor: pointer; transition: opacity 0.2s; "
 onmouseover="this.style.opacity='0.8'"
 onmouseout="this.style.opacity='1'">
 <div style="flex: 1; min-width: 0;">
 <div style="display: flex; align-items: center; gap: 4px; margin-bottom: 2px;">
 <span style="color: #fff; font-weight: 700; font-size: 15px;">${user.name}</span>
 ${
   user.verified
     ? `<svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: var(--x-accent);">
 <g><path d="M22.25 12c0-1.43-.88-2.67-2.19-3.34.46-1.39.2-2.9-.81-3.91s-2.52-1.27-3.91-.81c-.66-1.31-1.91-2.19-3.34-2.19s-2.67.88-3.33 2.19c-1.4-.46-2.91-.2-3.92.81s-1.26 2.52-.8 3.91c-1.31.67-2.2 1.91-2.2 3.34s.89 2.67 2.2 3.34c-.46 1.39-.21 2.9.8 3.91s2.52 1.26 3.91.81c.67 1.31 1.91 2.19 3.34 2.19s2.68-.88 3.34-2.19c1.39.45 2.9.2 3.91-.81s1.27-2.52.81-3.91c1.31-.67 2.19-1.91 2.19-3.34zm-11.71 4.2L6.8 12.46l1.41-1.42 2.26 2.26 4.8-5.23 1.47 1.36-6.2 6.77z"></path></g>
 </svg>`
     : ''
 }
 </div>
 <div style="color: #71767b; font-size: 15px; margin-bottom: 4px;">@${user.handle}</div>
 ${user.bio ? `<div style="color: #e7e9ea; font-size: 14px;">${user.bio}</div>` : ''}
 </div>
 </div>
 `,
        )
        .join('');
    } else {
      // 渲染推文列表（热门/最新）
      container.innerHTML = '';
      results.forEach(tweet => {
        const tweetElement = createTweetElement(tweet);
        container.appendChild(tweetElement); // 修改评论按钮的点击行为，使其显示详情页而不是评论列表
        const commentAction = tweetElement.querySelector('.tweet-action.comment');
        if (commentAction) {
          // 移除原有的 onclick 属性
          commentAction.removeAttribute('onclick'); // 添加新的点击事件
          commentAction.addEventListener('click', async e => {
            e.stopPropagation();
            console.log('📖 [搜索结果] 点击评论按钮，显示详情:', tweet.id);
            await showSearchTweetDetail(tweet.id);
          });
        }
      });
    }
  }
  // 显示搜索结果推文详情
  window.showSearchTweetDetail = async function (tweetId) {
    console.log('📖 [搜索结果] 显示推文详情:', tweetId); // 从搜索结果中查找推文
    const allSearchTweets = [...(searchResultsData.top || []), ...(searchResultsData.latest || [])];
    const tweet = allSearchTweets.find(t => t.id === tweetId);
    if (!tweet) {
      showXToast('未找到该推文', 'error');
      return;
    }
    // 确保推文已标记为搜索结果
    if (!tweet._source) {
      tweet._source = 'search';
    }
    // 使用现有的showTweetDetail函数显示详情
    await showTweetDetail(tweet);
  }; // 执行搜索（第六个情景：搜索生成器）
  async function performSearch() {
    const input = document.getElementById('search-input');
    const query = input?.value?.trim();
    if (!query) {
      showXToast('请输入搜索内容', 'info');
      return;
    }
    currentSearchQuery = query;
    isInSearchResults = true; // 标记进入搜索结果视图
    // 显示搜索结果视图，隐藏热搜视图
    document.getElementById('trending-view').style.display = 'none';
    document.getElementById('search-results-view').style.display = 'flex'; // 显示返回按钮，隐藏刷新按钮
    const backBtn = document.getElementById('search-back-btn');
    if (backBtn) backBtn.style.display = 'flex';
    const refreshBtn = document.querySelector('.refresh-trends-btn');
    if (refreshBtn) refreshBtn.style.display = 'none'; // 显示加载状态
    const container = document.getElementById('search-results-content');
    container.innerHTML = `
 <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 60px 20px; color: #71767b; ">
 <div style="width: 40px; height: 40px; border: 3px solid var(--x-accent); border-top-color: transparent; border-radius: 50%; animation: spin 1s linear infinite; "></div>
 <div style="margin-top: 20px; font-size: 15px;">正在搜索"${query}"...</div>
 </div>
`;
    try {
      // 🔧 使用统一的API配置加载工具
      const { apiConfig, xSettings, xDb } = await APIUtils.loadConfigAndSettings();
      const { userPrompt, worldSetting, boundCharacters } = xSettings; // 3. 构建用户X个人资料信息
      const userXProfileInfo = StringBuilders.buildUserXProfileInfo(window.userProfileData); // 4. 读取绑定角色的X资料
      const allXProfiles = await xDb.xCharacterProfiles.toArray();
      const characterXProfiles = [];
      for (const charId of boundCharacters) {
        const xProfile = allXProfiles.find(p => p.characterId === charId);
        if (xProfile) {
          characterXProfiles.push(xProfile);
        }
      }
      // 5. 检查用户是否为公众人物（高曝光率身份）
      const userPublicIdentity = userXProfileInfo.publicIdentity || '';
      const userBio = userXProfileInfo.bio || '';
      const isUserPublicFigure =
        /明星|网红|博主|演员|歌手|艺人|主播|up主|偶像|导演|制片|编剧|作家|influencer|celebrity|singer|actor|artist|streamer|idol/i.test(
          userPublicIdentity + ' ' + userBio,
        ); // Token计数器
      let tokenCount = 0; // 7. 构建基础系统提示词
      let systemPrompt = StringBuilders.buildBaseSystemPrompt({
        userPrompt,
        worldSetting,
      });
      tokenCount = TokenUtils.logTokenUsage('搜索生成器', '基础系统提示词', systemPrompt, tokenCount); // 7.5. 获取适用的世界书内容
      const worldBooksContent = await StringBuilders.getApplicableWorldBooks('search', {
        boundCharacters,
      });
      if (worldBooksContent) {
        systemPrompt += worldBooksContent;
        tokenCount = TokenUtils.logTokenUsage('搜索生成器', '世界书内容', worldBooksContent, tokenCount);
      }
      // 7.6. 从世界书中提取可能提到的角色ID，并将其添加到允许列表
      const worldBookCharacterIds = new Set();
      if (worldBooksContent) {
        // 遍历所有绑定的角色，检查世界书中是否提到他们
        for (const charId of boundCharacters) {
          const xProfile = allXProfiles.find(p => p.characterId === charId);
          if (xProfile) {
            const charName = xProfile.xName || '';
            const charHandle = xProfile.xHandle || ''; // 如果世界书内容中提到了角色名或句柄，将其加入列表
            if (
              (charName && worldBooksContent.includes(charName)) ||
              (charHandle && worldBooksContent.includes(charHandle))
            ) {
              worldBookCharacterIds.add(charId);
              console.log(`🔍 世界书中提到角色: ${charName} (${charHandle})`);
            }
          }
        }
      }
      // 6. 检查所有可能出现在搜索中的身份（角色/NPC/关系NPC）
      // 🎯 优化：使用统一资料获取系统
      const allowedProfiles = [];
      const queryLower = query.toLowerCase(); // 6.1. 检查绑定角色
      for (const xProfile of characterXProfiles) {
        let allowInSearch = false; // 检查角色是否为公众人物
        const charPublicIdentity = xProfile.publicIdentity || '';
        const isCharPublicFigure =
          /明星|网红|博主|演员|歌手|艺人|主播|up主|偶像|导演|制片|编剧|作家|influencer|celebrity|singer|actor|artist|streamer|idol/i.test(
            charPublicIdentity,
          ); // 判断是否允许在搜索结果中出现
        if (isCharPublicFigure) {
          // 公众人物：检查搜索关键词是否与角色相关
          const charName = xProfile.xName || '';
          const charHandle = xProfile.xHandle || '';
          const charBio = xProfile.xBio || '';
          if (
            charName.toLowerCase().includes(queryLower) ||
            queryLower.includes(charName.toLowerCase()) ||
            charHandle.toLowerCase().includes(queryLower) ||
            queryLower.includes(charHandle.toLowerCase()) ||
            charPublicIdentity.toLowerCase().includes(queryLower) ||
            queryLower.includes(charPublicIdentity.toLowerCase()) ||
            (charBio && (charBio.toLowerCase().includes(queryLower) || queryLower.includes(charBio.toLowerCase())))
          ) {
            allowInSearch = true;
          }
        }
        // 检查真名搜索：只有公开真名的角色才能通过真名搜索到
        if (xProfile.showRealName && xProfile.realName) {
          const realNameLower = xProfile.realName.toLowerCase();
          if (realNameLower.includes(queryLower) || queryLower.includes(realNameLower)) {
            allowInSearch = true;
          }
        }
        if (allowInSearch) {
          allowedProfiles.push({
            type: 'character',
            characterId: xProfile.characterId,
            xProfile: xProfile,
            name: xProfile.xName,
            handle: xProfile.xHandle,
            avatar: xProfile.xAvatar,
            verified: xProfile.xVerified || false,
            publicIdentity: charPublicIdentity,
            bio: xProfile.xBio || '',
            reason: '公众人物或真名搜索',
          });
        }
      }
      // 6.2. 检查绑定的NPC
      const npcDataId = 'xNPCs_global';
      const npcData = await xDb.xNPCs.get(npcDataId);
      const allNPCs = npcData?.npcs || [];
      const currentAccount = currentAccountId || 'main';
      const boundNPCs = allNPCs.filter(npc => npc.boundUsers && npc.boundUsers.includes(currentAccount));
      for (const npc of boundNPCs) {
        // NPC默认可以被搜索到（因为它们通常是公开账户）
        const npcName = npc.name || '';
        const npcHandle = npc.handle || '';
        const npcPersonality = npc.personality || '';
        const npcHomepage = npc.homepage || ''; // 检查搜索关键词是否与NPC相关
        if (
          npcName.toLowerCase().includes(queryLower) ||
          queryLower.includes(npcName.toLowerCase()) ||
          npcHandle.toLowerCase().includes(queryLower) ||
          queryLower.includes(npcHandle.toLowerCase()) ||
          npcPersonality.toLowerCase().includes(queryLower) ||
          npcHomepage.toLowerCase().includes(queryLower)
        ) {
          allowedProfiles.push({
            type: 'npc',
            npc: npc,
            name: npcName,
            handle: npcHandle,
            avatar: npc.avatar,
            verified: false,
            publicIdentity: '',
            bio: '',
            reason: 'NPC账户匹配',
          });
        }
      }
      // 6.3. 检查关系NPC
      for (const xProfile of allXProfiles) {
        if (xProfile.relationships && xProfile.relationships.length > 0) {
          for (const relationship of xProfile.relationships) {
            const relNpcName = relationship.npcName || '';
            const relNpcHandle = relationship.npcHandle || '';
            const relType = relationship.relationshipType || '';
            const relDesc = relationship.description || ''; // 检查搜索关键词是否与关系NPC相关
            if (
              relNpcName.toLowerCase().includes(queryLower) ||
              queryLower.includes(relNpcName.toLowerCase()) ||
              relNpcHandle.toLowerCase().includes(queryLower) ||
              queryLower.includes(relNpcHandle.toLowerCase()) ||
              relType.toLowerCase().includes(queryLower) ||
              relDesc.toLowerCase().includes(queryLower)
            ) {
              allowedProfiles.push({
                type: 'relationshipNpc',
                relationship: relationship,
                ownerXProfile: xProfile,
                name: relNpcName,
                handle: relNpcHandle,
                avatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
                verified: false,
                publicIdentity: '',
                bio: '',
                reason: '关系NPC匹配',
              });
            }
          }
        }
      }
      console.log('🔍 搜索匹配检查:', {
        query,
        角色: allowedProfiles.filter(p => p.type === 'character').length,
        NPC: allowedProfiles.filter(p => p.type === 'npc').length,
        关系NPC: allowedProfiles.filter(p => p.type === 'relationshipNpc').length,
        总计: allowedProfiles.length,
      }); // 7.7. 将世界书中提到的角色也加入允许列表（如果尚未加入）
      for (const charId of worldBookCharacterIds) {
        // 检查是否已在允许列表中
        if (!allowedProfiles.find(p => p.type === 'character' && p.characterId === charId)) {
          const xProfile = allXProfiles.find(p => p.characterId === charId);
          if (xProfile) {
            allowedProfiles.push({
              type: 'character',
              characterId: xProfile.characterId,
              xProfile: xProfile,
              name: xProfile.xName,
              handle: xProfile.xHandle,
              avatar: xProfile.xAvatar,
              verified: xProfile.xVerified || false,
              publicIdentity: xProfile.publicIdentity || '',
              bio: xProfile.xBio || '',
              reason: '世界书提及',
            });
          }
        }
      }
      console.log('🔍 搜索隐私检查（优化后）:', {
        query,
        isUserPublicFigure,
        totalCharacters: boundCharacters.length,
        totalNPCs: boundNPCs.length,
        worldBookMentioned: worldBookCharacterIds.size,
        allowedTotal: allowedProfiles.length,
        allowedList: allowedProfiles.map(p => `${p.name} (${p.reason})`),
      }); // 8. 添加搜索任务说明
      systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 核心任务说明 🎯
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
你是X社交平台的搜索结果生成器。用户搜索了关键词："${query}"
这是全局搜索，需要生成符合搜索关键词的X平台内容。
请生成与搜索关键词相关的结果：
- 热门：3-8条与关键词高度相关的热门推文
- 最新：3-5条与关键词相关的最新推文
- 用户：2-6个与关键词相关的X用户账号
【重要隐私规则】：
${
  allowedProfiles.length === 0 && !isUserPublicFigure
    ? `- **禁止出现绑定身份**：用户和所有绑定身份都不符合搜索条件
- 生成的所有内容必须是虚构的陌生用户，不能使用任何绑定角色/NPC的信息
- 这是全局搜索，应该展示与关键词相关的公众内容，而非私人关系`
    : ''
}
${
  isUserPublicFigure && queryLower.includes(userXProfileInfo.name.toLowerCase())
    ? `- **用户是公众人物且搜索了用户相关关键词**：可以生成少量与用户相关的内容（1-2条）`
    : ''
}
${
  allowedProfiles.length > 0
    ? `- **允许出现以下身份**（仅限这些）：${allowedProfiles.map(p => `${p.name}[${p.reason}]`).join('、')}
- 原因说明：
* "公众人物或真名搜索"：该角色是公众人物且搜索关键词与他们相关，或搜索了他们公开的真名
* "世界书提及"：该角色在世界书中被提及，可以根据世界书的上下文在搜索结果中出现
* "NPC账户匹配"：该NPC的名称、句柄或人设与搜索关键词匹配
* "关系NPC匹配"：该关系NPC的名称、句柄或关系描述与搜索关键词匹配
- 其他未列出的身份严禁出现`
    : `- **禁止出现任何绑定身份**：没有身份符合出现条件（非公众人物、搜索关键词不相关、且未在世界书中提及）`
}
【生成要求】：
- 所有内容必须与搜索关键词"${query}"高度相关
- 热门推文应该有较高的互动数据（点赞、转发、评论）
- 最新推文时间较近（几分钟到几小时前）
- 推文内容要多样化，从不同角度体现搜索关键词
- 每条推文2-5条评论即可
- 用户账号要有相关性（用户名、简介、或身份与关键词相关）
- 除已绑定角色外，其他用户头像统一：https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg
- 这是全局搜索，应展示多样化的陌生用户内容，而非私人社交圈
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
      const taskSection = systemPrompt.substring(systemPrompt.indexOf('🎯 核心任务说明 🎯'));
      tokenCount = TokenUtils.logTokenUsage('搜索生成器', '搜索任务说明', taskSection, tokenCount); // 9. 如果有允许出现的身份，添加资料 + 近期推文
      // 🎯 优化：支持角色/NPC/关系NPC
      if (allowedProfiles.length > 0) {
        const profileSectionStart = systemPrompt.length;
        systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📋 允许出现的身份信息
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
以下是符合搜索条件、可以在结果中出现的身份：
`;
        for (const profile of allowedProfiles) {
          systemPrompt += `
【${profile.name}】（${profile.type === 'character' ? '角色' : profile.type === 'npc' ? 'NPC' : '关系NPC'}）
- X姓名：${profile.name}
- X句柄：${profile.handle}
- X头像：${profile.avatar}
- 认证状态：${profile.verified ? '已认证' : '未认证'}
${profile.publicIdentity ? `- 公众身份：${profile.publicIdentity}` : ''}
${profile.bio ? `- X简介：${profile.bio}` : ''}
- 出现原因：${profile.reason}
`; // 根据类型添加特定信息
          if (profile.type === 'character' && profile.xProfile) {
            if (profile.xProfile.showRealName && profile.xProfile.realName) {
              systemPrompt += `- 真实姓名：${profile.xProfile.realName}（已公开）\n`;
            }
          } else if (profile.type === 'npc' && profile.npc) {
            if (profile.npc.personality) {
              systemPrompt += `- 人设：${profile.npc.personality}\n`;
            }
            if (profile.npc.postingHabits) {
              systemPrompt += `- 发帖习惯：${profile.npc.postingHabits}\n`;
            }
          } else if (profile.type === 'relationshipNpc' && profile.relationship) {
            systemPrompt += `- 关系类型：与 ${profile.ownerXProfile.xName} (${profile.ownerXProfile.xHandle}) 的 ${profile.relationship.relationshipType}\n`;
            if (profile.relationship.description) {
              systemPrompt += `- 关系描述：${profile.relationship.description}\n`;
            }
          }
          // 读取近期推文（所有类型都尝试读取）
          try {
            const cleanHandle = profile.handle.replace('@', '');
            const accountProfile = await xDb.xAccountProfiles.get(cleanHandle);
            const recentTweets = accountProfile?.tweets?.slice(0, 5) || [];
            if (recentTweets.length > 0) {
              systemPrompt += `
${profile.name} 的近期推文（${recentTweets.length}条）：
`;
              recentTweets.forEach((tweet, index) => {
                systemPrompt += `
${index + 1}. "${tweet.content}"
- 时间：${tweet.time || '最近'}
- 互动：${tweet.stats?.likes || 0}喜欢，${tweet.stats?.retweets || 0}转发
${tweet.media && tweet.media.length > 0 ? ` - 媒体：${tweet.media[0].description.substring(0, 50) + '...'}\n` : ''}`;
              });
            }
          } catch (error) {
            console.warn(`搜索生成器：读取 ${profile.name} 的推文失败:`, error);
          }
          systemPrompt += `\n`;
        }
        systemPrompt += `
【使用规则】：
- 只能使用上述列出的身份信息
- 必须严格使用其X姓名、句柄、头像、认证状态
- 如果他们与搜索关键词相关，可以作为推文发布者或出现在用户列表中
- 可以基于他们的近期推文内容生成相关的搜索结果
- 标注为"世界书提及"的角色，说明他们在世界书中被提及
- 标注为"公众人物或真名搜索"的角色，说明他们是公众人物且与搜索关键词相关
- 标注为"NPC账户匹配"的NPC，说明其信息与搜索关键词匹配
- 标注为"关系NPC匹配"的关系NPC，说明其关系信息与搜索关键词匹配
- 其他未列出的身份严禁出现
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
        const profileSection = systemPrompt.substring(profileSectionStart);
        tokenCount = TokenUtils.logTokenUsage('搜索生成器', '允许身份信息与推文', profileSection, tokenCount);
      }
      // 10. 用户资料 + 近期推文（如果用户是公众人物且被搜索）
      const userConstraintsStart = systemPrompt.length;
      systemPrompt += StringBuilders.buildUniversalConstraints(userXProfileInfo); // 如果用户是公众人物且搜索关键词与用户相关，添加用户近期推文
      if (isUserPublicFigure && queryLower.includes(userXProfileInfo.name.toLowerCase())) {
        systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📰 用户近期推文（公众人物）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`; // 读取用户的最近5条推文
        try {
          const userTweetsId = `userTweets_${currentAccountId || 'main'}`;
          const userTweetsData = await xDb.xUserTweets.get(userTweetsId);
          const recentUserTweets = userTweetsData?.tweets?.slice(0, 5) || [];
          if (recentUserTweets.length > 0) {
            systemPrompt += `${userXProfileInfo.name} 的近期推文（${recentUserTweets.length}条）：
`;
            recentUserTweets.forEach((tweet, index) => {
              systemPrompt += `
${index + 1}. "${tweet.content}"
- 时间：${tweet.time || '最近'}
- 互动：${tweet.stats?.likes || 0}喜欢，${tweet.stats?.retweets || 0}转发，${tweet.stats?.comments || 0}评论
${
  tweet.image
    ? ` - 媒体：${tweet.image.type === 'description' ? tweet.image.content.substring(0, 50) + '...' : '包含图片'}\n`
    : ''
}`;
            });
            systemPrompt += `
【使用说明】：
- 可以基于用户的近期推文生成相关的搜索结果
- 用户是公众人物，可以在搜索结果中适度出现（1-2条推文）
- 但仍然禁止在评论区假扮用户身份
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
          } else {
            systemPrompt += `暂无近期推文数据
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
          }
        } catch (error) {
          console.warn('搜索生成器：读取用户推文失败:', error);
          systemPrompt += `暂无近期推文数据
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
        }
      }
      const userConstraints = systemPrompt.substring(userConstraintsStart);
      tokenCount = TokenUtils.logTokenUsage('搜索生成器', '用户资料约束与推文', userConstraints, tokenCount); // 11. 添加格式要求
      systemPrompt += `
【JSON返回格式】：
\`\`\`json
{
"top": [热门推文数组(3-5条)],
"latest": [最新推文数组(3-5条)],
"users": [用户数组(2-4个)]
}
\`\`\`
推文对象结构：
- user: {name, handle, avatar, verified}
- content: 推文文本（必须与"${query}"相关）
- time: 时间描述
- stats: {comments, retweets, likes, views} (纯数字)
- media: [{type:"description", description:"描述，至少20字", sensitive:false}] (可选，30-50%推文包含)
- comments: [评论数组(2-5条，必须生成)]
评论对象结构：
- id: 评论唯一ID（可留空，系统自动生成）
- user: {name, handle, avatar, verified}
- content: 评论文本
- time: 时间描述
- image: {type: "description", content: "图片文字描述"} (可选，10-20%的评论带图)
- replies: [楼中楼回复数组] (可选，0-2条)
楼中楼回复对象结构：
- id: 回复唯一ID（可留空，系统自动生成）
- user: {name, handle, avatar, verified}
- content: 回复文本
- time: 时间描述
- image: {type: "description", content: "图片文字描述"} (可选)
- replyTo: "@被回复者句柄" (必填)
用户对象结构：
- name: 用户姓名
- handle: 用户句柄（不带@）
- avatar: 头像URL
- verified: 布尔值
- bio: 个人简介（体现与"${query}"的关联）
关键规则：
1. 所有内容必须围绕搜索关键词"${query}"展开
2. 热门推文stats高（1万-50万），最新推文stats低（100-5千）
3. 最新推文时间近（刚刚、几分钟前、1小时前等）
4. verified字段必须是布尔值(true/false)
5. stats中所有数字必须是纯数字
6. 每条推文必须包含2-5条评论，10-20%的评论可带图
7. 评论可以包含楼中楼回复（replies数组），形成对话链${worldSetting.trim() ? '\n8. 严格遵守世界观设定' : ''}
【🔒 隐私保护规则】：
🚨 搜索结果中的评论者（非绑定角色/关系NPC的路人）只能基于X平台公开信息：
✅ 可以使用：X姓名、X句柄、X简介、公开身份
❌ 禁止提及：真实姓名、真实职业、私人关系、未公开的身份信息
❌ 禁止使用：只有亲密关系才知道的称呼（如"老师"、"同学"等，除非是公开身份）
⚠️ 只有已绑定的关系NPC才能在评论中提及私密信息（因为他们是角色的私人关系）
`;
      const formatSection = systemPrompt.substring(systemPrompt.lastIndexOf('【JSON返回格式】'));
      tokenCount = TokenUtils.logTokenUsage('搜索生成器', 'JSON格式要求', formatSection, tokenCount);
      const messages = [{ role: 'user', content: `请生成关键词"${query}"的搜索结果` }]; // 最终统计
      TokenUtils.logFinalPrompt('搜索生成器', systemPrompt, messages[0].content); // 🔧 使用统一的API请求工具
      const aiResponseContent = await APIUtils.sendAIRequest({
        apiConfig,
        systemPrompt,
        messages,
        temperature: 0.8,
      }); // 🔧 使用统一的JSON解析和后处理工具
      let searchResults = APIUtils.parseJSONResponse(aiResponseContent);
      searchResults = await APIUtils.postProcessData(searchResults, userXProfileInfo); // 14. 验证数据格式
      if (!searchResults.top || !searchResults.latest || !searchResults.users) {
        throw new Error('AI返回的数据格式不正确，缺少必要字段');
      }
      // 15. 为推文添加唯一ID和来源标记
      const timestamp = Date.now();
      searchResults.top = searchResults.top.map((tweet, index) => ({
        ...tweet,
        id: `search_top_${timestamp}_${index}`,
        _source: 'search', // 标记为搜索结果
        comments:
          tweet.comments?.map((comment, cIndex) => {
            const commentWithId = {
              ...comment,
              id: `search_top_${timestamp}_${index}_c${cIndex}`,
            }; // 为楼中楼回复添加ID
            if (comment.replies && comment.replies.length > 0) {
              commentWithId.replies = comment.replies.map((reply, rIndex) => ({
                ...reply,
                id: `search_top_${timestamp}_${index}_c${cIndex}_r${rIndex}`,
              }));
            }
            return commentWithId;
          }) || [],
      }));
      searchResults.latest = searchResults.latest.map((tweet, index) => ({
        ...tweet,
        id: `search_latest_${timestamp}_${index}`,
        _source: 'search', // 标记为搜索结果
        comments:
          tweet.comments?.map((comment, cIndex) => {
            const commentWithId = {
              ...comment,
              id: `search_latest_${timestamp}_${index}_c${cIndex}`,
            }; // 为楼中楼回复添加ID
            if (comment.replies && comment.replies.length > 0) {
              commentWithId.replies = comment.replies.map((reply, rIndex) => ({
                ...reply,
                id: `search_latest_${timestamp}_${index}_c${rIndex}`,
              }));
            }
            return commentWithId;
          }) || [],
      })); // 16. 更新搜索结果数据
      searchResultsData.top = searchResults.top;
      searchResultsData.latest = searchResults.latest;
      searchResultsData.users = searchResults.users; // 17. 保存到数据库
      try {
        await xDb.xTweetsData.put({
          id: `search_${query}`,
          query: query,
          results: searchResults,
          timestamp: new Date().toISOString(),
        });
        console.log('✅ 搜索结果已保存到数据库');
      } catch (saveError) {
        console.error('⚠️ 保存搜索结果失败:', saveError);
      }
      // 18. 渲染搜索结果
      renderSearchResults();
      showXToast(`找到 ${searchResults.top.length + searchResults.latest.length} 条相关推文`, 'success');
    } catch (error) {
      console.error('❌ 搜索失败:', error);
      showXToast(`搜索失败: ${error.message}`, 'error'); // 显示错误状态
      const container = document.getElementById('search-results-content');
      container.innerHTML = `
 <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 60px 20px; color: #f4212e; ">
 <svg viewBox="0 0 24 24" style="width: 80px; height: 80px; fill: #f4212e; margin-bottom: 20px;">
 <g><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"></path></g>
 </svg>
 <div style="font-size: 18px; font-weight: 600; margin-bottom: 8px;">搜索出错</div>
 <div style="font-size: 14px; color: #71767b;">${error.message}</div>
 </div>
 `;
    }
  }
  // 返回热搜视图
  function backToTrending() {
    isInSearchResults = false; // 清除搜索结果标记
    document.getElementById('search-results-view').style.display = 'none';
    document.getElementById('trending-view').style.display = 'flex'; // 隐藏返回按钮，显示刷新按钮
    const backBtn = document.getElementById('search-back-btn');
    if (backBtn) backBtn.style.display = 'none';
    const refreshBtn = document.querySelector('.refresh-trends-btn');
    if (refreshBtn) refreshBtn.style.display = 'flex'; // 清空搜索框
    const input = document.getElementById('search-input');
    if (input) {
      input.value = '';
      toggleSearchButton();
    }
    currentSearchQuery = '';
  }
  // 打开自定义分类管理模态框
  async function openAddCategoryModal() {
    const modal = document.getElementById('category-manager-modal');
    if (modal) {
      modal.style.display = 'flex'; // 加载自定义分类数据
      await loadCustomCategories(); // 渲染分类列表
      renderCustomCategoriesList();
    }
  }
  // 关闭分类管理模态框
  function closeCategoryModal(event) {
    if (event && event.target !== event.currentTarget) return;
    const modal = document.getElementById('category-manager-modal');
    if (modal) {
      modal.style.display = 'none';
    }
  }
  // 加载自定义分类
  async function loadCustomCategories() {
    try {
      const xDb = getXDB();
      const accountId = currentAccountId || 'main';
      const settingsId = `customCategories_${accountId}`;
      const savedData = await xDb.xTweetsData.get(settingsId);
      if (savedData && savedData.categories) {
        customCategories = savedData.categories;
        console.log('✅ 已加载自定义分类:', customCategories.length, '个');
      } else {
        customCategories = [];
      }
    } catch (error) {
      console.error('⚠️ 加载自定义分类失败:', error);
      customCategories = [];
    }
  }
  // 保存自定义分类
  async function saveCustomCategories() {
    try {
      const xDb = getXDB();
      const accountId = currentAccountId || 'main';
      const settingsId = `customCategories_${accountId}`;
      await xDb.xTweetsData.put({
        id: settingsId,
        categories: customCategories,
        lastUpdated: new Date().toISOString(),
      });
      console.log('✅ 自定义分类已保存');
      showXToast('分类设置已保存', 'success'); // 更新标签栏显示
      updateSearchTabs(); // 关闭模态框
      closeCategoryModal();
    } catch (error) {
      console.error('❌ 保存自定义分类失败:', error);
      showXToast('保存失败: ' + error.message, 'error');
    }
  }
  // 渲染自定义分类列表
  function renderCustomCategoriesList() {
    const container = document.getElementById('custom-categories-list');
    if (!container) return;
    if (customCategories.length === 0) {
      container.innerHTML = `
 <div style="text-align: center; padding: 40px 20px; color: #71767b; font-size: 14px; ">
 还没有自定义分类，点击"添加分类"按钮创建
 </div>
 `;
      return;
    }
    container.innerHTML = customCategories
      .map(
        (category, index) => `
 <div style="background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; padding: 16px; ">
 <div style="display: flex; align-items: flex-start; gap: 12px;">

 <label style="display: flex; align-items: center; cursor: pointer; margin-top: 4px; ">
 <input
 type="checkbox"
 ${category.enabled ? 'checked' : ''}
 onchange="toggleCategory(${index})"
 style="width: 18px; height: 18px; accent-color: var(--x-accent); cursor: pointer; ">
 </label>

 <div style="flex: 1; min-width: 0;">

 <div style="margin-bottom: 12px;">
 <label style="display: block; color: #8b98a5; font-size: 13px; margin-bottom: 4px; ">分类名称 *</label>
 <input
 type="text"
 value="${category.name || ''}"
 placeholder="例如：动漫"
 onchange="updateCategoryName(${index}, this.value)"
 style="width: 100%; background-color:#000; border: 1px solid #333; border-radius: 4px; color: #fff; padding: 8px 12px; font-size: 15px; outline: none; "
 onfocus="this.style.borderColor='var(--x-accent)'"
 onblur="this.style.borderColor='#333'">
 </div>

 <div style="margin-bottom: 12px;">
 <label style="display: block; color: #8b98a5; font-size: 13px; margin-bottom: 4px; ">分类内容/类型（可选）</label>
 <textarea
 placeholder="例如：动画、漫画、声优、番剧相关内容"
 onchange="updateCategoryDescription(${index}, this.value)"
 style="width: 100%; min-height: 60px; background-color:#000; border: 1px solid #333; border-radius: 4px; color: #fff; padding: 8px 12px; font-size: 14px; resize: vertical; outline: none; font-family: inherit; "
 onfocus="this.style.borderColor='var(--x-accent)'"
 onblur="this.style.borderColor='#333'">${category.description || ''}</textarea>
 </div>

 <div style="display: flex; align-items: center; justify-content: space-between; color:${
   category.enabled ? 'var(--x-accent)' : '#71767b'
 }; font-size: 12px; ">
 <span>${category.enabled ? '✅ 已启用' : '❌ 已禁用'}</span>
 <button
 onclick="deleteCategory(${index})"
 style="background: transparent; color: #f4212e; border: 1px solid #f4212e; border-radius: 16px; padding: 4px 12px; font-size: 12px; cursor: pointer; transition: all 0.2s; "
 onmouseover="this.style.backgroundColor='rgba(244,33,46,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'">
 删除
 </button>
 </div>
 </div>
 </div>
 </div>
`,
      )
      .join('');
  }
  // 添加新分类
  function addNewCategory() {
    customCategories.push({
      id: `custom_${Date.now()}`,
      name: '',
      description: '',
      enabled: true,
    });
    renderCustomCategoriesList();
  }
  // 删除分类
  function deleteCategory(index) {
    if (confirm('确定要删除这个分类吗？')) {
      customCategories.splice(index, 1);
      renderCustomCategoriesList();
    }
  }
  // 切换分类启用状态
  function toggleCategory(index) {
    if (customCategories[index]) {
      customCategories[index].enabled = !customCategories[index].enabled;
      renderCustomCategoriesList();
    }
  }
  // 更新分类名称
  function updateCategoryName(index, name) {
    if (customCategories[index]) {
      customCategories[index].name = name.trim();
    }
  }
  // 更新分类描述
  function updateCategoryDescription(index, description) {
    if (customCategories[index]) {
      customCategories[index].description = description.trim();
    }
  }
  // 更新搜索标签栏
  function updateSearchTabs() {
    const tabsContainer = document.querySelector('.search-tabs');
    if (!tabsContainer) return; // 清空现有标签（保留+号按钮）
    const addBtn = tabsContainer.querySelector('.add-category-btn');
    tabsContainer.innerHTML = ''; // 添加默认标签
    const recommendedTab = document.createElement('div');
    recommendedTab.className = 'search-tab' + (currentSearchTab === 'recommended' ? ' active' : '');
    recommendedTab.textContent = '为你推荐';
    recommendedTab.onclick = () => switchSearchTab('recommended');
    tabsContainer.appendChild(recommendedTab);
    const trendingTab = document.createElement('div');
    trendingTab.className = 'search-tab' + (currentSearchTab === 'trending' ? ' active' : '');
    trendingTab.textContent = '当前趋势';
    trendingTab.onclick = () => switchSearchTab('trending');
    tabsContainer.appendChild(trendingTab); // 添加启用的自定义分类标签
    customCategories
      .filter(cat => cat.enabled && cat.name)
      .forEach(category => {
        const customTab = document.createElement('div');
        customTab.className = 'search-tab' + (currentSearchTab === category.id ? ' active' : '');
        customTab.textContent = category.name;
        customTab.onclick = () => switchSearchTab(category.id);
        tabsContainer.appendChild(customTab);
      }); // 重新添加+号按钮
    if (addBtn) {
      tabsContainer.appendChild(addBtn);
    }
  }
  // 初始化搜索页面
  async function initSearchPage() {
    // 加载自定义分类
    await loadCustomCategories(); // 更新标签栏
    updateSearchTabs(); // 检查是否需要恢复搜索结果视图
    if (isInSearchResults && currentSearchQuery) {
      // 保持搜索结果视图
      document.getElementById('trending-view').style.display = 'none';
      document.getElementById('search-results-view').style.display = 'flex'; // 显示返回按钮，隐藏刷新按钮
      const backBtn = document.getElementById('search-back-btn');
      if (backBtn) backBtn.style.display = 'flex';
      const refreshBtn = document.querySelector('.refresh-trends-btn');
      if (refreshBtn) refreshBtn.style.display = 'none';
    } else {
      // 默认显示热搜视图，隐藏搜索结果视图
      document.getElementById('trending-view').style.display = 'flex';
      document.getElementById('search-results-view').style.display = 'none'; // 显示刷新按钮，隐藏返回按钮
      const refreshBtn = document.querySelector('.refresh-trends-btn');
      if (refreshBtn) refreshBtn.style.display = 'flex';
      const backBtn = document.getElementById('search-back-btn');
      if (backBtn) backBtn.style.display = 'none';
    }
    // 尝试从数据库加载热搜数据
    try {
      const xDb = getXDB();
      const savedTrends = await xDb.xTweetsData.get('trends');
      if (savedTrends) {
        // 加载默认分类数据
        if (savedTrends.recommended && savedTrends.trending) {
          trendingData.recommended = savedTrends.recommended;
          trendingData.trending = savedTrends.trending;
        }
        // 加载自定义分类数据
        customCategories.forEach(category => {
          if (savedTrends[category.id]) {
            trendingData[category.id] = savedTrends[category.id];
          }
        });
        console.log('✅ 已从数据库加载热搜数据');
      }
    } catch (error) {
      console.log('⚠️ 加载热搜数据失败，使用默认数据:', error);
    }
    // 渲染热搜列表
    renderTrendingList();
  }
  // ▼▼▼ ！！！三个情景综合如下！！！▼▼▼
  // "为你推荐"页面的测试推文数据（示范用）
  const forYouTweets = [
    {
      id: '1',
      user: {
        name: '热门推荐用户',
        handle: '@trending_user',
        avatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
        verified: true,
      },
      content: '🔥 今日热门话题！大家都在讨论的新技术趋势 #AI #科技 #未来',
      time: '3小时',
      media: [],
      stats: {
        comments: 567,
        retweets: 1200,
        likes: 5600,
        views: 89000,
      },
      comments: [
        {
          id: 'c1-1',
          user: {
            name: '科技达人',
            handle: '@tech_expert',
            avatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
            verified: true,
          },
          content: '确实，AI技术发展太快了，每天都有新突破',
          time: '2小时',
          replies: [
            {
              id: 'c1-1-1',
              user: {
                name: '学生小王',
                handle: '@student_wang',
                avatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
                verified: false,
              },
              content: '请问有什么推荐的学习资源吗？',
              time: '1小时',
              replyTo: '@tech_expert',
            },
          ],
        },
      ],
    },
  ]; // "正在关注"页面的测试推文数据（示范用）
  const followingTweets = [
    {
      id: '2',
      user: {
        name: '我的朋友',
        handle: '@my_friend',
        avatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
        verified: false,
      },
      content: '今天天气真不错，和朋友们一起出去玩了！😊 #美好时光',
      time: '30分钟',
      media: [
        {
          type: 'image',
          description: '阳光明媚的公园里，几个朋友在草地上野餐的温馨场景',
          sensitive: false,
        },
      ],
      stats: {
        comments: 8,
        retweets: 2,
        likes: 24,
        views: 156,
      },
      comments: [
        {
          id: 'c2-1',
          user: {
            name: '好友A',
            handle: '@friend_a',
            avatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
            verified: false,
          },
          content: '看起来很棒！下次叫上我 😊',
          time: '25分钟',
          replies: [],
        },
      ],
    },
    {
      id: '3',
      user: {
        name: '数码达人',
        handle: '@digital_expert',
        avatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
        verified: true,
      },
      content: '完全同意这个观点！AI确实正在改变我们的生活方式，每个人都应该学会拥抱这种变化 🤖✨',
      time: '45分钟',
      media: [],
      quotedTweet: {
        type: 'tweet',
        user: {
          name: '科技前沿',
          handle: '@tech_frontier',
          avatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
          verified: true,
        },
        content: 'AI技术的快速发展正在重塑各行各业，从自动驾驶到智能助手，我们正生活在一个科技革命的时代 #AI #未来科技',
        time: '2小时',
      },
      stats: {
        comments: 15,
        retweets: 32,
        likes: 89,
        views: 1250,
      },
      comments: [
        {
          id: 'c3-1',
          user: {
            name: '科技爱好者',
            handle: '@tech_lover',
            avatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
            verified: false,
          },
          content: '是的，特别是在工作效率提升方面，AI工具帮助很大',
          time: '40分钟',
          replies: [],
        },
      ],
    },
  ]; // 格式化数字显示
  function formatNumber(num) {
    if (num >= 1000000) {
      return (num / 1000000).toFixed(1) + '万';
    } else if (num >= 10000) {
      return (num / 10000).toFixed(1) + '万';
    } else if (num >= 1000) {
      return (num / 1000).toFixed(1) + 'K';
    }
    return num.toString();
  }
  // 处理推文内容，为话题标签和提及添加高亮
  function processContent(content, options = {}) {
    if (!content) return '';
    const isOwn = options.isOwn || false;
    const highlightColor = isOwn ? 'rgba(255, 255, 255, 0.9)' : 'var(--x-accent)'; // 处理话题标签 (#hashtag)
    content = content.replace(
      /#([^\s#@]+)/g,
      `<span class="hashtag" style="color: ${highlightColor}; font-weight: 600;">#$1</span>`,
    ); // 处理提及 (@mention)
    content = content.replace(
      /@([^\s#@]+)/g,
      `<span class="mention" style="color: ${highlightColor}; font-weight: 600;">@$1</span>`,
    );
    return content;
  }
  // 清理评论内容中的重复回复文本
  function cleanReplyContent(content, replyTo) {
    if (!content) return ''; // 如果有replyTo，移除评论内容开头的"回复@xxx:"格式
    if (replyTo) {
      // 移除开头的"回复@用户名:"或"回复 @用户名:"
      content = content.replace(/^回复\s*@[^\s:：]+[：:]\s*/, ''); // 移除开头直接的"@用户名"格式（如果跟replyTo重复）
      const replyHandle = replyTo.replace('@', '');
      content = content.replace(new RegExp(`^@${replyHandle}\\s*[：:]?\\s*`, 'i'), ''); // 移除内容中任何与replyTo重复的@提及
      content = content.replace(new RegExp(`@${replyHandle}(?=\\s|$|[^\\w])`, 'gi'), '');
    }
    return content;
  }
  // 创建推文元素
  function createTweetElement(tweet) {
    const tweetEl = document.createElement('div');
    tweetEl.className = 'tweet-item';
    tweetEl.dataset.tweetId = tweet.id;
    tweetEl.innerHTML = `
 <img class="tweet-avatar" src="${tweet.user.avatar}" alt="${tweet.user.name}">
 <div class="tweet-main">
 <div class="tweet-user-info">
 <span class="tweet-user-name">${tweet.user.name}</span>
 ${
   tweet.user.verified
     ? '<svg class="tweet-verified" viewBox="0 0 24 24"><g><path d="M22.25 12c0-1.43-.88-2.67-2.19-3.34.46-1.39.2-2.9-.81-3.91s-2.52-1.27-3.91-.81c-.66-1.31-1.91-2.19-3.34-2.19s-2.67.88-3.33 2.19c-1.4-.46-2.91-.2-3.92.81s-1.26 2.52-.8 3.91c-1.31.67-2.2 1.91-2.2 3.34s.89 2.67 2.2 3.34c-.46 1.39-.21 2.9.8 3.91s2.52 1.27 3.91.81c.67 1.31 1.91 2.19 3.34 2.19s2.68-.88 3.34-2.19c1.39.46 2.9.2 3.91-.81s1.27-2.52.81-3.91c1.31-.67 2.19-1.91 2.19-3.34zm-11.71 4.2L6.8 12.46l1.41-1.42 2.26 2.26 4.8-5.23 1.47 1.36-6.2 6.77z"></path></g></svg>'
     : ''
 }
 <span class="tweet-user-handle">${tweet.user.handle}</span>
 <span class="tweet-time">·${tweet.time}</span>
 <div class="tweet-more">
 <svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor">
 <g><path d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"></path></g>
 </svg>
 </div>
 </div>
 ${tweet.content ? `<div class="tweet-content">${processContent(tweet.content)}</div>` : ''}
 ${
   tweet.quotedTweet
     ? `
 <div class="quoted-tweet" onclick="handleQuotedTweetClick('${tweet.quotedTweet.user.handle}')">
 <div class="quote-indicator">
 <svg viewBox="0 0 24 24">
 <g><path d="M4.5 3.88l4.432 4.14-1.364 1.46L5.5 7.55V16c0 1.1.896 2 2 2H13v2H7.5c-2.209 0-4-1.791-4-4V7.55L1.432 9.48.068 8.02 4.5 3.88zM16.5 6H11V4h5.5c2.209 0 4 1.791 4 4v8.45l2.068-1.93 1.364 1.46-4.432 4.14-4.432-4.14 1.364-1.46 2.068 1.93V8c0-1.1-.896-2-2-2z"></path></g>
 </svg>
 ${tweet.quotedTweet.type === 'comment' ? '引用评论' : '引用推文'}
 </div>
 <div class="quoted-user-info">
 <img class="quoted-user-avatar" src="${tweet.quotedTweet.user.avatar}" alt="${tweet.quotedTweet.user.name}">
 <span class="quoted-user-name">${tweet.quotedTweet.user.name}</span>
 ${
   tweet.quotedTweet.user.verified
     ? '<svg class="tweet-verified" style="width: 14px; height: 14px;" viewBox="0 0 24 24"><g><path d="M22.25 12c0-1.43-.88-2.67-2.19-3.34.46-1.39.2-2.9-.81-3.91s-2.52-1.27-3.91-.81c-.66-1.31-1.91-2.19-3.34-2.19s-2.67.88-3.33 2.19c-1.4-.46-2.91-.2-3.92.81s-1.26 2.52-.8 3.91c-1.31.67-2.2 1.91-2.2 3.34s.89 2.67 2.2 3.34c-.46 1.39-.21 2.9.8 3.91s2.52 1.27 3.91.81c.67 1.31 1.91 2.19 3.34 2.19s2.68-.88 3.34-2.19c1.39.46 2.9.2 3.91-.81s1.27-2.52.81-3.91c1.31-.67 2.19-1.91 2.19-3.34zm-11.71 4.2L6.8 12.46l1.41-1.42 2.26 2.26 4.8-5.23 1.47 1.36-6.2 6.77z"></path></g></svg>'
     : ''
 }
 <span class="quoted-user-handle">${tweet.quotedTweet.user.handle}</span>
 <span class="quoted-user-time">·${tweet.quotedTweet.time}</span>
 </div>
 <div class="quoted-content">${processContent(tweet.quotedTweet.content)}</div>
 ${
   tweet.quotedTweet.image
     ? `
 <div class="quoted-media" style="margin-top: 8px;">
 ${
   tweet.quotedTweet.image.type === 'description'
     ? `
 <div style="background-color: rgba(255,255,255,0.05); border: 1px solid #333; border-radius: 8px; padding: 8px;">
 <div style="color: #fff; font-size: 12px; line-height: 1.4;">${tweet.quotedTweet.image.content}</div>
 </div>
 `
     : ''
 }
 ${
   tweet.quotedTweet.image.type === 'upload'
     ? `
 <div style="border-radius: 8px; overflow: hidden;">
 <img src="${tweet.quotedTweet.image.content}" style="width: 100%; max-height: 100px; object-fit: cover; display: block;" alt="引用图片">
 </div>
 `
     : ''
 }
 </div>
 `
     : ''
 }
 </div>
 `
     : ''
 }
 ${
   tweet.media && tweet.media.length > 0
     ? `
 <div class="tweet-media">
 <div style="width: 100%; max-height: 200px; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 16px; color:var(--x-text-primary); position: relative; overflow: hidden;" id="media-${
   tweet.id
 }">
 ${
   tweet.media[0].sensitive
     ? `
 <div class="sensitive-overlay" onclick="showSensitiveContent('${tweet.id}')">
 <div class="sensitive-text">敏感内容</div>
 <div class="sensitive-description">此推文可能包含敏感内容</div>
 </div>
 `
     : ''
 }
 <div class="tweet-media-scrollable" style="width: 100%; max-height: 200px; padding: 16px; overflow-y: auto; box-sizing: border-box; ${
   tweet.media[0].sensitive ? 'filter: blur(20px);' : ''
 }" id="content-${tweet.id}">
 <div style="font-size: 14px; line-height: 1.5; white-space: pre-wrap; word-wrap: break-word; overflow-wrap: break-word; width: 100%; box-sizing: border-box;">${
   tweet.media[0].description
 }</div>
 </div>
 </div>
 </div>
 `
     : ''
 }
 <div class="tweet-actions">
 <div class="tweet-action comment" onclick="showTweetComments('${tweet.id}')">
 <svg class="action-icon" viewBox="0 0 24 24" fill="currentColor">
 <g><path d="M1.751 10c0-4.42 3.584-8.005 8.005-8.005h4.366c4.49 0 8.129 3.64 8.129 8.13 0 2.96-1.607 5.68-4.196 7.11l-8.054 4.46v-3.69h-.067c-4.49.1-8.183-3.51-8.183-8.005zm8.005-6.005c-3.317 0-6.005 2.69-6.005 6.005 0 3.37 2.77 6.08 6.138 6.01l.351-.01h1.761v2.3l5.087-2.81c1.951-1.08 3.163-3.13 3.163-5.36 0-3.39-2.744-6.13-6.129-6.13H9.756z"></path></g>
 </svg>
 <span>${formatNumber(tweet.stats.comments)}</span>
 </div>
 <div class="tweet-action retweet" onclick="handleQuoteRetweetFromData('tweet', '${tweet.id}')">
 <svg class="action-icon" viewBox="0 0 24 24" fill="currentColor">
 <g><path d="M4.5 3.88l4.432 4.14-1.364 1.46L5.5 7.55V16c0 1.1.896 2 2 2H13v2H7.5c-2.209 0-4-1.791-4-4V7.55L1.432 9.48.068 8.02 4.5 3.88zM16.5 6H11V4h5.5c2.209 0 4 1.791 4 4v8.45l2.068-1.93 1.364 1.46-4.432 4.14-4.432-4.14 1.364-1.46 2.068 1.93V8c0-1.1-.896-2-2-2z"></path></g>
 </svg>
 <span>${DataUtils.formatNumber(tweet.stats.retweets)}</span>
 </div>
 <div class="tweet-action like" onclick="toggleLike('${tweet.id}', this)" data-liked="false" data-likes="${
      tweet.stats.likes
    }">
 <svg class="action-icon like-icon" viewBox="0 0 24 24" fill="currentColor">
 <g><path d="M16.697 5.5c-1.222-.06-2.679.51-3.89 2.16l-.805 1.09-.806-1.09C9.984 6.01 8.526 5.44 7.304 5.5c-1.243.07-2.349.78-2.91 1.91-.552 1.12-.633 2.78.479 4.82 1.074 1.97 3.257 4.27 7.129 6.61 3.87-2.34 6.052-4.64 7.126-6.61 1.111-2.04 1.03-3.7.477-4.82-.561-1.13-1.666-1.84-2.908-1.91zm4.187 7.69c-1.351 2.48-4.001 5.12-8.379 7.67l-.503.3-.504-.3c-4.379-2.55-7.029-5.19-8.382-7.67-1.36-2.5-1.41-4.86-.514-6.67.887-1.79 2.647-2.91 4.601-3.01 1.651-.09 3.368.56 4.798 2.01 1.429-1.45 3.146-2.1 4.796-2.01 1.954.1 3.714 1.22 4.601 3.01.896 1.81.846 4.17-.514 6.67z"></path></g>
 </svg>
 <span class="like-count">${DataUtils.formatNumber(tweet.stats.likes)}</span>
 </div>
 <div class="tweet-action view">
 <svg class="action-icon" viewBox="0 0 24 24" fill="currentColor">
 <g><path d="M8.75 21V3h2v18h-2zM18 21V8.5h2V21h-2zM4 21l.004-10H6v10H4zm9.248 0v-7h2v7h-2z"></path></g>
 </svg>
 <span>${DataUtils.formatNumber(tweet.stats.views)}</span>
 </div>
 <div class="tweet-action bookmark" onclick="toggleBookmark('${tweet.id}', this)" data-bookmarked="false">
 <svg class="action-icon" viewBox="0 0 24 24" fill="currentColor">
 <g><path d="M4 4.5C4 3.12 5.119 2 6.5 2h11C18.881 2 20 3.12 20 4.5v18.44l-8-5.71-8 5.71V4.5zM6.5 4c-.276 0-.5.22-.5.5v14.56l6-4.29 6 4.29V4.5c0-.28-.224-.5-.5-.5h-11z"></path></g>
 </svg>
 </div>
 <div class="tweet-action share">
 <svg class="action-icon" viewBox="0 0 24 24" fill="currentColor">
 <g><path d="M12 2.59l5.7 5.7-1.41 1.42L13 6.41V16h-2V6.41l-3.29 3.3-1.42-1.42L12 2.59zM21 15l-.02 3.51c0 1.38-1.12 2.49-2.5 2.49H5.5C4.11 21 3 19.88 3 18.5V15h2v3.5c0 .28.22.5.5.5h12.98c.28 0 .5-.22.5-.5L19 15h2z"></path></g>
 </svg>
 </div>
 </div>
 </div>
 `; // 异步检查书签状态并更新UI
    (async () => {
      const bookmarked = await isBookmarked(tweet.id);
      const bookmarkBtn = tweetEl.querySelector('.bookmark');
      if (bookmarkBtn) {
        bookmarkBtn.setAttribute('data-bookmarked', bookmarked ? 'true' : 'false');
        if (bookmarked) {
          const svg = bookmarkBtn.querySelector('svg');
          if (svg) {
            // 填充的书签图标
            svg.innerHTML =
              '<g><path d="M4 4.5C4 3.12 5.119 2 6.5 2h11C18.881 2 20 3.12 20 4.5v18.44l-8-5.71-8 5.71V4.5z"></path></g>';
          }
        }
      }
    })(); // 异步检查喜欢状态并更新UI
    (async () => {
      const liked = await isLiked(tweet.id);
      const likeBtn = tweetEl.querySelector('.tweet-action.like');
      if (likeBtn) {
        likeBtn.setAttribute('data-liked', liked ? 'true' : 'false');
        if (liked) {
          const svg = likeBtn.querySelector('svg');
          if (svg) {
            // 填充的爱心图标
            svg.innerHTML =
              '<g><path d="M20.884 13.19c-1.351 2.48-4.001 5.12-8.379 7.67l-.503.3-.504-.3c-4.379-2.55-7.029-5.19-8.382-7.67-1.36-2.5-1.41-4.86-.514-6.67.887-1.79 2.647-2.91 4.601-3.01 1.651-.09 3.368.56 4.798 2.01 1.429-1.45 3.146-2.1 4.796-2.01 1.954.1 3.714 1.22 4.601 3.01.896 1.81.846 4.17-.514 6.67z"></path></g>';
          }
        }
      }
    })();
    return tweetEl;
  }
  // 处理引用推文点击
  function handleQuotedTweetClick(userHandle) {
    showXToast(`点击了引用的 ${userHandle} 的内容`, 'info');
  }
  // ============================================
  // 书签/亮点功能
  // ============================================
  // 切换书签状态
  window.toggleBookmark = async function (tweetId, buttonElement) {
    try {
      const isBookmarked = buttonElement.getAttribute('data-bookmarked') === 'true';
      if (isBookmarked) {
        // 取消收藏
        await removeBookmark(tweetId);
        buttonElement.setAttribute('data-bookmarked', 'false'); // 更新图标为未收藏状态
        const svg = buttonElement.querySelector('svg');
        if (svg) {
          svg.innerHTML =
            '<g><path d="M4 4.5C4 3.12 5.119 2 6.5 2h11C18.881 2 20 3.12 20 4.5v18.44l-8-5.71-8 5.71V4.5zM6.5 4c-.276 0-.5.22-.5.5v14.56l6-4.29 6 4.29V4.5c0-.28-.224-.5-.5-.5h-11z"></path></g>';
        }
        showXToast('已取消收藏', 'info');
        console.log(`📌 [书签] 已取消收藏推文: ${tweetId}`);
      } else {
        // 添加收藏
        await saveBookmark(tweetId);
        buttonElement.setAttribute('data-bookmarked', 'true'); // 更新图标为已收藏状态（实心）
        const svg = buttonElement.querySelector('svg');
        if (svg) {
          svg.innerHTML =
            '<g><path d="M4 4.5C4 3.12 5.119 2 6.5 2h11C18.881 2 20 3.12 20 4.5v18.44l-8-5.71-8 5.71V4.5z"></path></g>';
        }
        showXToast('已添加到书签', 'success');
        console.log(`📌 [书签] 已收藏推文: ${tweetId}`);
      }
      // 如果当前在用户主页的亮点标签，刷新内容
      const highlightsContent = document.getElementById('profile-highlights-content');
      if (highlightsContent && highlightsContent.style.display === 'block') {
        await loadHighlights();
      }
    } catch (error) {
      console.error('❌ [书签] 切换书签状态失败:', error);
      showXToast('操作失败', 'error');
    }
  }; // 保存书签到数据库（按账户隔离）
  async function saveBookmark(tweetId) {
    try {
      const accountId = currentAccountId || 'main';
      const xDb = getXDB(); // 查找推文数据 - 多种来源
      let tweetData = null; // 1. 从内存中的首页推文查找
      const allTweets = [...(window.xTweetsData?.forYouTweets || []), ...(window.xTweetsData?.followingTweets || [])];
      tweetData = allTweets.find(t => t.id === tweetId); // 2. 如果没找到，从数据库中的首页推文查找
      if (!tweetData) {
        const tweetsData = await xDb.xTweetsData.get('tweets');
        if (tweetsData) {
          tweetData =
            tweetsData.forYouTweets?.find(t => t.id === tweetId) ||
            tweetsData.followingTweets?.find(t => t.id === tweetId);
        }
      }
      // 3. 如果是用户发的推文，从用户推文数据查找
      if (!tweetData && tweetId.startsWith('user_')) {
        const userTweetsId = `userTweets_${accountId}`;
        const userTweetsData = await xDb.xUserTweets.get(userTweetsId);
        if (userTweetsData && userTweetsData.tweets) {
          tweetData = userTweetsData.tweets.find(t => t.id === tweetId);
        }
      }
      // 4. 从账户主页推文中查找
      if (!tweetData && currentViewingAccount && currentViewingAccount.tweets) {
        tweetData = currentViewingAccount.tweets.find(t => t.id === tweetId);
      }
      // 5. 从DOM中提取推文数据作为最后的备选方案
      if (!tweetData) {
        const tweetElement = document.querySelector(`[data-tweet-id="${tweetId}"]`);
        if (tweetElement) {
          console.log('📝 [书签] 从DOM中提取推文数据'); // 从DOM元素中提取基本信息
          tweetData = extractTweetDataFromDOM(tweetElement);
        }
      }
      if (!tweetData) {
        console.warn('⚠️ [书签] 未找到推文数据:', tweetId);
        showXToast('无法收藏该推文', 'error');
        return;
      }
      const bookmarkId = `bookmark_${accountId}_${tweetId}`; // 保存书签数据（多账户隔离）
      await xDb.xBookmarks.put({
        id: bookmarkId,
        accountId: accountId,
        tweetId: tweetId,
        tweetData: tweetData,
        bookmarkedAt: Date.now(),
      });
      console.log(`✅ [书签] 账户 ${accountId} 已保存书签: ${tweetId}`);
    } catch (error) {
      console.error('❌ [书签] 保存书签失败:', error);
      throw error;
    }
  }
  // 从DOM元素中提取推文数据（备用方案）
  function extractTweetDataFromDOM(tweetElement) {
    try {
      // 提取用户信息
      const avatar = tweetElement.querySelector('.tweet-avatar')?.src || '';
      const userName = tweetElement.querySelector('.tweet-user-name')?.textContent || '';
      const userHandle = tweetElement.querySelector('.tweet-user-handle')?.textContent || '';
      const verified = !!tweetElement.querySelector('.tweet-verified'); // 提取推文内容
      const content = tweetElement.querySelector('.tweet-content')?.textContent || '';
      const time = tweetElement.querySelector('.tweet-time')?.textContent?.replace('·', '').trim() || ''; // 提取统计数据
      const commentCount = tweetElement.querySelector('.tweet-action.comment span')?.textContent || '0';
      const retweetCount = tweetElement.querySelector('.tweet-action.retweet span')?.textContent || '0';
      const likeCount = tweetElement.querySelector('.like-count')?.textContent || '0';
      const viewCount = tweetElement.querySelector('.tweet-action.view span')?.textContent || '0';
      return {
        id: tweetElement.dataset.tweetId,
        user: {
          name: userName,
          handle: userHandle,
          avatar: avatar,
          verified: verified,
        },
        content: content,
        time: time,
        stats: {
          comments: parseStatNumber(commentCount),
          retweets: parseStatNumber(retweetCount),
          likes: parseStatNumber(likeCount),
          views: parseStatNumber(viewCount),
        },
        comments: [], // DOM中无法获取完整评论数据
      };
    } catch (error) {
      console.error('❌ [书签] 从DOM提取推文数据失败:', error);
      return null;
    }
  }
  // 解析统计数字（支持K、M等单位）
  function parseStatNumber(str) {
    if (!str) return 0;
    str = str.trim().toUpperCase();
    if (str.endsWith('K')) {
      return Math.round(parseFloat(str) * 1000);
    } else if (str.endsWith('M')) {
      return Math.round(parseFloat(str) * 1000000);
    }
    return parseInt(str) || 0;
  }
  // 从数据库移除书签（按账户隔离）
  async function removeBookmark(tweetId) {
    try {
      const accountId = currentAccountId || 'main';
      const xDb = getXDB();
      const bookmarkId = `bookmark_${accountId}_${tweetId}`;
      await xDb.xBookmarks.delete(bookmarkId);
      console.log(`✅ [书签] 账户 ${accountId} 已删除书签: ${tweetId}`);
    } catch (error) {
      console.error('❌ [书签] 删除书签失败:', error);
      throw error;
    }
  }
  // 加载当前账户的所有书签（多账户隔离）
  async function loadBookmarks() {
    try {
      const accountId = currentAccountId || 'main';
      const xDb = getXDB(); // 只加载当前账户的书签
      const bookmarks = await xDb.xBookmarks.where('accountId').equals(accountId).sortBy('bookmarkedAt'); // 倒序排列（最新的在前）
      bookmarks.reverse();
      console.log(`📚 [书签] 账户 ${accountId} 已加载 ${bookmarks.length} 个书签`);
      return bookmarks;
    } catch (error) {
      console.error('❌ [书签] 加载书签失败:', error);
      return [];
    }
  }
  // 检查推文是否已被当前账户收藏
  async function isBookmarked(tweetId) {
    try {
      const accountId = currentAccountId || 'main';
      const xDb = getXDB();
      const bookmarkId = `bookmark_${accountId}_${tweetId}`;
      const bookmark = await xDb.xBookmarks.get(bookmarkId);
      return !!bookmark;
    } catch (error) {
      console.error('❌ [书签] 检查收藏状态失败:', error);
      return false;
    }
  }
  // 加载并显示亮点内容
  window.loadHighlights = async function () {
    try {
      console.log('🌟 [亮点] 开始加载亮点内容');
      const highlightsContent = document.getElementById('profile-highlights-content');
      if (!highlightsContent) {
        console.warn('⚠️ [亮点] 未找到亮点容器');
        return;
      }
      // 加载当前账户的所有书签
      const bookmarks = await loadBookmarks();
      if (bookmarks.length === 0) {
        // 显示空状态（使用国际化文本）
        const config = languageConfig[currentLanguage] || languageConfig.zh;
        highlightsContent.innerHTML = `
 <div style="padding: 60px 32px; text-align: center;">
 <div style="color:var(--x-text-secondary); font-size: 31px; font-weight: 800; margin-bottom: 8px;">${config.profileNoHighlights}</div>
 <div style="color:var(--x-text-secondary); font-size: 15px;">${config.profileNoHighlightsDesc}</div>
 </div>
 `;
        return;
      }
      // 清空容器
      highlightsContent.innerHTML = ''; // 渲染每个收藏的推文
      bookmarks.forEach(bookmark => {
        if (bookmark.tweetData) {
          const tweetElement = createTweetElement(bookmark.tweetData);
          highlightsContent.appendChild(tweetElement); // 更新书签按钮状态为已收藏
          const bookmarkBtn = tweetElement.querySelector('.bookmark');
          if (bookmarkBtn) {
            bookmarkBtn.setAttribute('data-bookmarked', 'true');
            const svg = bookmarkBtn.querySelector('svg');
            if (svg) {
              svg.innerHTML =
                '<g><path d="M4 4.5C4 3.12 5.119 2 6.5 2h11C18.881 2 20 3.12 20 4.5v18.44l-8-5.71-8 5.71V4.5z"></path></g>';
            }
          }
        }
      });
      console.log(`✅ [亮点] 已显示 ${bookmarks.length} 个收藏的推文`);
    } catch (error) {
      console.error('❌ [亮点] 加载亮点内容失败:', error);
      showXToast('加载失败', 'error');
    }
  }; // ============================================
  // 💖 喜欢功能
  // ============================================
  // 切换喜欢状态
  window.toggleLike = async function (tweetId, buttonElement) {
    try {
      const isLiked = buttonElement.getAttribute('data-liked') === 'true';
      const likeCountSpan = buttonElement.querySelector('.like-count');
      let currentLikes = parseInt(buttonElement.getAttribute('data-likes')) || 0;
      if (isLiked) {
        // 取消喜欢
        await removeLike(tweetId);
        buttonElement.setAttribute('data-liked', 'false');
        currentLikes = Math.max(0, currentLikes - 1);
        buttonElement.setAttribute('data-likes', currentLikes); // 更新UI
        if (likeCountSpan) {
          likeCountSpan.textContent = DataUtils.formatNumber(currentLikes);
        }
        // 更新图标为未喜欢状态（空心）
        const svg = buttonElement.querySelector('svg');
        if (svg) {
          svg.innerHTML =
            '<g><path d="M16.697 5.5c-1.222-.06-2.679.51-3.89 2.16l-.805 1.09-.806-1.09C9.984 6.01 8.526 5.44 7.304 5.5c-1.243.07-2.349.78-2.91 1.91-.552 1.12-.633 2.78.479 4.82 1.074 1.97 3.257 4.27 7.129 6.61 3.87-2.34 6.052-4.64 7.126-6.61 1.111-2.04 1.03-3.7.477-4.82-.561-1.13-1.666-1.84-2.908-1.91zm4.187 7.69c-1.351 2.48-4.001 5.12-8.379 7.67l-.503.3-.504-.3c-4.379-2.55-7.029-5.19-8.382-7.67-1.36-2.5-1.41-4.86-.514-6.67.887-1.79 2.647-2.91 4.601-3.01 1.651-.09 3.368.56 4.798 2.01 1.429-1.45 3.146-2.1 4.796-2.01 1.954.1 3.714 1.22 4.601 3.01.896 1.81.846 4.17-.514 6.67z"></path></g>';
        }
        console.log(`💔 [喜欢] 已取消喜欢推文: ${tweetId}`);
      } else {
        // 添加喜欢
        await saveLike(tweetId);
        buttonElement.setAttribute('data-liked', 'true');
        currentLikes += 1;
        buttonElement.setAttribute('data-likes', currentLikes); // 更新UI
        if (likeCountSpan) {
          likeCountSpan.textContent = DataUtils.formatNumber(currentLikes);
        }
        // 更新图标为已喜欢状态（实心）
        const svg = buttonElement.querySelector('svg');
        if (svg) {
          svg.innerHTML =
            '<g><path d="M20.884 13.19c-1.351 2.48-4.001 5.12-8.379 7.67l-.503.3-.504-.3c-4.379-2.55-7.029-5.19-8.382-7.67-1.36-2.5-1.41-4.86-.514-6.67.887-1.79 2.647-2.91 4.601-3.01 1.651-.09 3.368.56 4.798 2.01 1.429-1.45 3.146-2.1 4.796-2.01 1.954.1 3.714 1.22 4.601 3.01.896 1.81.846 4.17-.514 6.67z"></path></g>';
        }
        console.log(`💖 [喜欢] 已喜欢推文: ${tweetId}`); // 🎯 检查是否需要触发AI主动发消息
        await checkAutoMessageTrigger();
      }
      // 如果当前在用户主页的喜欢标签，刷新内容
      const likesContent = document.getElementById('profile-likes-content');
      if (likesContent && likesContent.style.display === 'block') {
        await loadLikes();
      }
    } catch (error) {
      console.error('❌ [喜欢] 切换喜欢状态失败:', error);
      showXToast('操作失败', 'error');
    }
  }; // 保存喜欢到数据库（按账户隔离）
  async function saveLike(tweetId) {
    try {
      const accountId = currentAccountId || 'main';
      const xDb = getXDB(); // 查找推文数据 - 多种来源
      let tweetData = null; // 1. 从内存中的首页推文查找
      const allTweets = [...forYouTweets, ...followingTweets];
      tweetData = allTweets.find(t => t.id === tweetId); // 2. 如果没找到，从数据库中的首页推文查找
      if (!tweetData) {
        const tweetsData = await xDb.xTweetsData.get('tweets');
        if (tweetsData) {
          tweetData =
            tweetsData.forYouTweets?.find(t => t.id === tweetId) ||
            tweetsData.followingTweets?.find(t => t.id === tweetId);
        }
      }
      // 3. 如果是用户发的推文，从用户推文数据查找
      if (!tweetData && tweetId.startsWith('user_')) {
        const userTweetsId = `userTweets_${accountId}`;
        const userTweetsData = await xDb.xUserTweets.get(userTweetsId);
        if (userTweetsData && userTweetsData.tweets) {
          tweetData = userTweetsData.tweets.find(t => t.id === tweetId);
        }
      }
      // 4. 从账户主页推文中查找
      if (!tweetData && currentViewingAccount && currentViewingAccount.tweets) {
        tweetData = currentViewingAccount.tweets.find(t => t.id === tweetId);
      }
      // 5. 从DOM中提取推文数据作为最后的备选方案
      if (!tweetData) {
        const tweetElement = document.querySelector(`[data-tweet-id="${tweetId}"]`);
        if (tweetElement) {
          console.log('📝 [喜欢] 从DOM中提取推文数据');
          tweetData = extractTweetDataFromDOM(tweetElement);
        }
      }
      if (!tweetData) {
        console.warn('⚠️ [喜欢] 未找到推文数据:', tweetId);
        showXToast('无法喜欢该推文', 'error');
        return;
      }
      const likeId = `like_${accountId}_${tweetId}`; // 保存喜欢数据（多账户隔离）
      await xDb.xLikes.put({
        id: likeId,
        accountId: accountId,
        tweetId: tweetId,
        tweetData: tweetData,
        likedAt: Date.now(),
      });
      console.log(`✅ [喜欢] 账户 ${accountId} 已保存喜欢: ${tweetId}`);
    } catch (error) {
      console.error('❌ [喜欢] 保存喜欢失败:', error);
      throw error;
    }
  }
  // 从数据库移除喜欢（按账户隔离）
  async function removeLike(tweetId) {
    try {
      const accountId = currentAccountId || 'main';
      const xDb = getXDB();
      const likeId = `like_${accountId}_${tweetId}`;
      await xDb.xLikes.delete(likeId);
      console.log(`✅ [喜欢] 账户 ${accountId} 已删除喜欢: ${tweetId}`);
    } catch (error) {
      console.error('❌ [喜欢] 删除喜欢失败:', error);
      throw error;
    }
  }
  // 加载当前账户的所有喜欢（多账户隔离）
  async function loadLikesData() {
    try {
      const accountId = currentAccountId || 'main';
      const xDb = getXDB(); // 只加载当前账户的喜欢
      const likes = await xDb.xLikes.where('accountId').equals(accountId).sortBy('likedAt'); // 倒序排列（最新的在前）
      likes.reverse();
      console.log(`💖 [喜欢] 账户 ${accountId} 已加载 ${likes.length} 个喜欢`);
      return likes;
    } catch (error) {
      console.error('❌ [喜欢] 加载喜欢失败:', error);
      return [];
    }
  }
  // 检查推文是否已被当前账户喜欢
  async function isLiked(tweetId) {
    try {
      const accountId = currentAccountId || 'main';
      const xDb = getXDB();
      const likeId = `like_${accountId}_${tweetId}`;
      const like = await xDb.xLikes.get(likeId);
      return !!like;
    } catch (error) {
      console.error('❌ [喜欢] 检查喜欢状态失败:', error);
      return false;
    }
  }
  // 加载并显示喜欢内容
  window.loadLikes = async function () {
    try {
      console.log('💖 [喜欢] 开始加载喜欢内容');
      const likesContent = document.getElementById('profile-likes-content');
      if (!likesContent) {
        console.warn('⚠️ [喜欢] 未找到喜欢容器');
        return;
      }
      // 加载当前账户的所有喜欢
      const likes = await loadLikesData();
      if (likes.length === 0) {
        // 显示空状态（使用国际化文本）
        const config = languageConfig[currentLanguage] || languageConfig.zh;
        likesContent.innerHTML = `
 <div style="padding: 60px 32px; text-align: center;">
 <div style="color:var(--x-text-secondary); font-size: 31px; font-weight: 800; margin-bottom: 8px;">${config.profileNoLikes}</div>
 <div style="color:var(--x-text-secondary); font-size: 15px;">${config.profileNoLikesDesc}</div>
 </div>
 `;
        return;
      }
      // 清空容器
      likesContent.innerHTML = ''; // 渲染每个喜欢的推文
      likes.forEach(like => {
        if (like.tweetData) {
          const tweetElement = createTweetElement(like.tweetData);
          likesContent.appendChild(tweetElement); // 更新喜欢按钮状态为已喜欢
          const likeBtn = tweetElement.querySelector('.tweet-action.like');
          if (likeBtn) {
            likeBtn.setAttribute('data-liked', 'true');
            const svg = likeBtn.querySelector('svg');
            if (svg) {
              svg.innerHTML =
                '<g><path d="M20.884 13.19c-1.351 2.48-4.001 5.12-8.379 7.67l-.503.3-.504-.3c-4.379-2.55-7.029-5.19-8.382-7.67-1.36-2.5-1.41-4.86-.514-6.67.887-1.79 2.647-2.91 4.601-3.01 1.651-.09 3.368.56 4.798 2.01 1.429-1.45 3.146-2.1 4.796-2.01 1.954.1 3.714 1.22 4.601 3.01.896 1.81.846 4.17-.514 6.67z"></path></g>';
            }
          }
        }
      });
      console.log(`✅ [喜欢] 已显示 ${likes.length} 个喜欢的推文`);
    } catch (error) {
      console.error('❌ [喜欢] 加载喜欢内容失败:', error);
      showXToast('加载失败', 'error');
    }
  }; // 🎯 检查是否需要触发AI主动发消息（每点赞5条触发一次）
  let lastLikeTriggerTime = 0; // 上次触发时间戳
  const LIKE_TRIGGER_COOLDOWN = 5 * 60 * 1000; // 5分钟冷却时间

  async function checkAutoMessageTrigger() {
    try {
      const accountId = currentAccountId || 'main';
      const xDb = getXDB(); // 获取当前账户的喜欢总数
      const likesCount = await xDb.xLikes.where('accountId').equals(accountId).count();
      console.log(`📊 [喜欢触发] 当前喜欢总数: ${likesCount}`); // 每5条喜欢触发一次
      if (likesCount > 0 && likesCount % 5 === 0) {
        // 检查冷却时间
        const now = Date.now();
        const timeSinceLastTrigger = now - lastLikeTriggerTime;
        if (timeSinceLastTrigger < LIKE_TRIGGER_COOLDOWN) {
          const remainingSeconds = Math.ceil((LIKE_TRIGGER_COOLDOWN - timeSinceLastTrigger) / 1000);
          console.log(`⏳ [喜欢触发] 冷却中，还需等待 ${remainingSeconds} 秒`);
          return;
        }
        console.log('🎯 [喜欢触发] 达到触发条件，准备随机选择一条喜欢的推文');
        lastLikeTriggerTime = now; // 更新触发时间
        // 获取最近5条喜欢的推文
        const recentLikes = await xDb.xLikes.where('accountId').equals(accountId).sortBy('likedAt');
        const last5Likes = recentLikes.slice(-5);
        if (last5Likes.length > 0) {
          // 随机选择其中一条
          const randomLike = last5Likes[Math.floor(Math.random() * last5Likes.length)];
          const tweetData = randomLike.tweetData;
          console.log(`🎲 [喜欢触发] 随机选中推文:`, tweetData); // 查找对应的角色或账户私信
          const tweetAuthorHandle = tweetData.user.handle.replace('@', ''); // 触发AI主动发消息
          await triggerAutoMessageFromLikedTweet(tweetAuthorHandle, tweetData);
        }
      }
    } catch (error) {
      console.error('❌ [喜欢触发] 检查触发条件失败:', error);
    }
  }
  // 🤖 从喜欢的推文触发AI主动发消息
  async function triggerAutoMessageFromLikedTweet(authorHandle, tweetData) {
    try {
      console.log(`🤖 [喜欢触发AI] 开始处理推文作者: ${authorHandle}`);
      const xDb = getXDB();
      const accountId = currentAccountId || 'main'; // 1. 检查是否是角色
      const allXProfiles = await xDb.xCharacterProfiles.toArray();
      const characterProfile = allXProfiles.find(
        p => p.xHandle && p.xHandle.replace('@', '').toLowerCase() === authorHandle.toLowerCase(),
      );
      if (characterProfile) {
        console.log(`✅ [喜欢触发AI] 找到角色: ${characterProfile.xName}`); // 构造消息数据（模拟私信结构）
        const messageData = {
          id: characterProfile.characterId ? `msg_${characterProfile.characterId}` : 'msg_001',
          user: {
            name: characterProfile.xName,
            handle: characterProfile.xHandle,
            avatar: characterProfile.xAvatar,
            verified: characterProfile.xVerified || false,
          },
          preview: `看到你喜欢了我的推文`,
          time: '刚刚',
        }; // 触发私信详情生成（续写模式 + 自动发消息模式）
        const result = await generateMessageConversation(messageData, true, {
          isAutoMessage: true,
          timeSinceLastMessage: 0,
          likedTweetContext: tweetData, // 传递喜欢的推文信息
        });
        if (result && result.length > 0) {
          // 保存AI生成的消息到对话记录
          const conversationId = `messageConversation_${currentAccountId || 'main'}_${messageData.id}`;
          let savedConversation = await xDb.xAccountProfiles.get(conversationId);
          if (!savedConversation) {
            savedConversation = {
              handle: conversationId,
              name: 'messageConversation',
              data: { messages: [] },
              messageId: messageData.id,
              accountId: currentAccountId || 'main',
              updatedAt: new Date().toISOString(),
            };
          }
          // 添加新消息
          savedConversation.data.messages.push(...result);
          savedConversation.updatedAt = new Date().toISOString();
          await xDb.xAccountProfiles.put(savedConversation); // 显示手机样式通知
          const isEnglish = currentLanguage === 'en';
          showPhoneNotification({
            title: 'X',
            message: isEnglish
              ? `${characterProfile.xName} noticed you liked their tweet and sent you a message!`
              : `${characterProfile.xName} 看到你喜欢了TA的推文，发来了私信！`,
            avatar: characterProfile.xAvatar,
            leftIcon: 'x',
          });
          console.log(`✅ [喜欢触发AI] 已触发${characterProfile.xName}的主动私信`);
        }
      } else {
        console.log(`ℹ️ [喜欢触发AI] ${authorHandle} 不是绑定角色，跳过触发`);
      }
    } catch (error) {
      console.error('❌ [喜欢触发AI] 触发失败:', error);
    }
  }
  // 渲染推文到容器
  function renderTweets(tweets, containerId) {
    const container = document.querySelector(`#${containerId} .tweets-container`);
    container.innerHTML = '';
    tweets.forEach((tweet, index) => {
      const tweetElement = createTweetElement(tweet); // 🎬 新推文添加滑入动画
      if (tweet.isNew) {
        tweetElement.style.opacity = '0';
        tweetElement.style.transform = 'translateY(-20px)';
        tweetElement.style.transition = 'opacity 0.4s ease, transform 0.4s ease'; // 延迟添加动画，创造层叠效果
        setTimeout(() => {
          tweetElement.style.opacity = '1';
          tweetElement.style.transform = 'translateY(0)'; // 动画完成后移除isNew标记
          tweet.isNew = false;
        }, index * 50); // 每个推文延迟50ms
      }
      container.appendChild(tweetElement); // 为推文作者头像添加点击事件
      const avatar = tweetElement.querySelector('.tweet-avatar');
      if (avatar) {
        avatar.style.cursor = 'pointer';
        avatar.addEventListener('click', e => {
          e.stopPropagation();
          openAccountProfile(tweet.user.name, tweet.user.handle, tweet.user.avatar, {
            source: 'feed',
            tweetContent: tweet.content,
            tweetMedia: tweet.media,
            tweetStats: tweet.stats,
            tweetTime: tweet.time,
          });
        });
      }
      // 为引用推文中的头像添加点击事件
      const quotedAvatar = tweetElement.querySelector('.quoted-user-avatar');
      if (quotedAvatar && tweet.quotedTweet) {
        quotedAvatar.style.cursor = 'pointer';
        quotedAvatar.addEventListener('click', e => {
          e.stopPropagation();
          openAccountProfile(
            tweet.quotedTweet.user.name,
            tweet.quotedTweet.user.handle,
            tweet.quotedTweet.user.avatar,
            {
              source: 'feed',
              tweetContent: tweet.quotedTweet.content,
              tweetTime: tweet.quotedTweet.time,
            },
          );
        });
      }
      // 📱 长按多选删除功能
      let longPressTimer = null;
      let touchStarted = false; // 移动端长按
      tweetElement.addEventListener('touchstart', e => {
        if (isFeedMultiSelectMode) {
          // 已经在多选模式，直接点击选择
          return;
        }
        touchStarted = true;
        longPressTimer = setTimeout(() => {
          if (touchStarted) {
            e.preventDefault();
            enterFeedMultiSelectMode(containerId);
            selectFeedTweet(tweet.id, tweetElement);
          }
        }, 500);
      });
      tweetElement.addEventListener('touchmove', () => {
        touchStarted = false;
        if (longPressTimer) clearTimeout(longPressTimer);
      });
      tweetElement.addEventListener('touchend', () => {
        touchStarted = false;
        if (longPressTimer) clearTimeout(longPressTimer);
      }); // 桌面端长按
      tweetElement.addEventListener('mousedown', e => {
        if (isFeedMultiSelectMode) {
          // 已经在多选模式，直接点击选择
          return;
        }
        if (e.button !== 0) return;
        longPressTimer = setTimeout(() => {
          enterFeedMultiSelectMode(containerId);
          selectFeedTweet(tweet.id, tweetElement);
        }, 500);
      });
      tweetElement.addEventListener('mouseup', () => {
        if (longPressTimer) clearTimeout(longPressTimer);
      });
      tweetElement.addEventListener('mouseleave', () => {
        if (longPressTimer) clearTimeout(longPressTimer);
      }); // 多选模式下点击选择
      tweetElement.addEventListener('click', e => {
        if (isFeedMultiSelectMode) {
          e.preventDefault();
          e.stopPropagation();
          selectFeedTweet(tweet.id, tweetElement);
        }
      });
    });
  }
  // ============================================
  // 📱 首页推文多选删除功能
  // ============================================
  let isFeedMultiSelectMode = false;
  let selectedFeedTweetIds = new Set();
  let currentFeedContainer = null; // 进入多选模式
  function enterFeedMultiSelectMode(containerId) {
    if (isFeedMultiSelectMode) return;
    isFeedMultiSelectMode = true;
    currentFeedContainer = containerId;
    selectedFeedTweetIds.clear(); // 显示多选工具栏
    showFeedMultiSelectToolbar(); // 给所有推文添加视觉提示
    const container = document.querySelector(`#${containerId} .tweets-container`);
    if (container) {
      const tweetElements = container.querySelectorAll('.tweet-item');
      tweetElements.forEach(el => {
        el.style.transition = 'transform 0.2s ease, box-shadow 0.2s ease, background-color 0.2s ease';
        el.style.cursor = 'pointer';
      });
    }
    console.log('📱 [首页多选] 已进入多选模式');
  }
  // 选择推文
  function selectFeedTweet(tweetId, tweetElement) {
    if (!isFeedMultiSelectMode) return;
    if (selectedFeedTweetIds.has(tweetId)) {
      // 取消选择
      selectedFeedTweetIds.delete(tweetId);
      tweetElement.style.transform = '';
      tweetElement.style.boxShadow = '';
      tweetElement.style.backgroundColor = '';
    } else {
      // 选中
      selectedFeedTweetIds.add(tweetId);
      tweetElement.style.transform = 'scale(0.98)';
      tweetElement.style.boxShadow = '0 0 0 3px var(--x-accent)';
      tweetElement.style.backgroundColor = 'color-mix(in srgb, var(--x-accent) 10%, transparent)';
    }
    updateFeedMultiSelectToolbar();
  }
  // 显示多选工具栏
  function showFeedMultiSelectToolbar() {
    const oldToolbar = document.getElementById('feed-multi-select-toolbar');
    if (oldToolbar) oldToolbar.remove();
    const toolbar = document.createElement('div');
    toolbar.id = 'feed-multi-select-toolbar';
    toolbar.style.cssText = `
 position: fixed; bottom: 70px; left: 50%; transform: translateX(-50%); background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 24px; padding: 12px 20px; display: flex; align-items: center; gap: 16px; z-index: 1000; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3); animation: feedSlideUp 0.3s ease;
`;
    toolbar.innerHTML = `
 <span id="feed-selected-count" style="color:var(--x-text-primary); font-size: 14px; font-weight: 600;">已选择 0 条</span>
 <button onclick="selectAllFeedTweets()" style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 16px; padding: 8px 16px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.opacity='0.8'" onmouseout="this.style.opacity='1'">
 全选
 </button>
 <button onclick="deleteFeedSelectedTweets()" style="background-color: #f4212e; color: #fff; border: none; border-radius: 16px; padding: 8px 16px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='#d91b2a'" onmouseout="this.style.backgroundColor='#f4212e'">
 删除
 </button>
 <button onclick="exitFeedMultiSelectMode()" style="background-color: transparent; color:var(--x-text-primary); border: 1px solid var(--x-border-color); border-radius: 16px; padding: 8px 16px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'" onmouseout="this.style.backgroundColor='transparent'">
 取消
 </button>
`;
    document.body.appendChild(toolbar); // 添加动画CSS
    if (!document.getElementById('feed-multiselect-animation-style')) {
      const style = document.createElement('style');
      style.id = 'feed-multiselect-animation-style';
      style.textContent = `
 @keyframes feedSlideUp {
 from {
 transform: translateX(-50%) translateY(20px); opacity: 0; }
 to {
 transform: translateX(-50%) translateY(0); opacity: 1; }
 }
 @keyframes feedSlideDown {
 from {
 transform: translateX(-50%) translateY(0); opacity: 1; }
 to {
 transform: translateX(-50%) translateY(20px); opacity: 0; }
 }
 `;
      document.head.appendChild(style);
    }
  }
  // 更新工具栏
  function updateFeedMultiSelectToolbar() {
    const countElement = document.getElementById('feed-selected-count');
    if (countElement) {
      countElement.textContent = `已选择 ${selectedFeedTweetIds.size} 条`;
    }
  }
  // 全选
  window.selectAllFeedTweets = function () {
    if (!isFeedMultiSelectMode || !currentFeedContainer) return;
    const container = document.querySelector(`#${currentFeedContainer} .tweets-container`);
    if (!container) return;
    const isForYou = currentFeedContainer === 'for-you-content';
    const tweets = isForYou ? forYouTweets : followingTweets; // 全选所有推文
    const tweetElements = container.querySelectorAll('.tweet-item');
    tweets.forEach((tweet, index) => {
      selectedFeedTweetIds.add(tweet.id);
      const tweetElement = tweetElements[index];
      if (tweetElement) {
        tweetElement.style.transform = 'scale(0.98)';
        tweetElement.style.boxShadow = '0 0 0 3px var(--x-accent)';
        tweetElement.style.backgroundColor = 'color-mix(in srgb, var(--x-accent) 10%, transparent)';
      }
    });
    updateFeedMultiSelectToolbar();
  }; // 退出多选模式
  window.exitFeedMultiSelectMode = function () {
    if (!isFeedMultiSelectMode) return;
    isFeedMultiSelectMode = false;
    selectedFeedTweetIds.clear();
    currentFeedContainer = null; // 隐藏工具栏
    const toolbar = document.getElementById('feed-multi-select-toolbar');
    if (toolbar) {
      toolbar.style.animation = 'feedSlideDown 0.3s ease';
      setTimeout(() => toolbar.remove(), 300);
    }
    // 移除所有选择样式
    document.querySelectorAll('.tweet-item').forEach(el => {
      el.style.transform = '';
      el.style.boxShadow = '';
      el.style.backgroundColor = '';
      el.style.cursor = '';
    });
    console.log('📱 [首页多选] 已退出多选模式');
  }; // 删除选中的推文
  window.deleteFeedSelectedTweets = async function () {
    if (selectedFeedTweetIds.size === 0) {
      showXToast('请先选择要删除的推文', 'info');
      return;
    }
    if (!confirm(`确定要删除 ${selectedFeedTweetIds.size} 条推文吗？`)) {
      return;
    }
    try {
      const isForYou = currentFeedContainer === 'for-you-content';
      const tweetsArray = isForYou ? forYouTweets : followingTweets; // 过滤掉选中的推文
      const remainingTweets = tweetsArray.filter(tweet => !selectedFeedTweetIds.has(tweet.id));
      if (isForYou) {
        forYouTweets.length = 0;
        forYouTweets.push(...remainingTweets);
      } else {
        followingTweets.length = 0;
        followingTweets.push(...remainingTweets);
      }
      // 更新数据库
      const xDb = getXDB();
      await xDb.xTweetsData.put({
        id: 'tweets',
        forYouTweets: forYouTweets,
        followingTweets: followingTweets,
        lastUpdated: new Date().toISOString(),
      }); // 重新渲染
      renderTweets(isForYou ? forYouTweets : followingTweets, currentFeedContainer);
      showXToast(`已删除 ${selectedFeedTweetIds.size} 条推文`, 'success'); // 退出多选模式
      exitFeedMultiSelectMode();
    } catch (error) {
      console.error('删除推文失败:', error);
      showXToast('删除失败', 'error');
    }
  }; // 初始化推文数据
  async function initializeTweets() {
    try {
      // 尝试从数据库加载保存的推文数据
      const db = getXDB();
      const savedData = await db.xTweetsData.get('tweets');
      if (savedData && savedData.forYouTweets && savedData.followingTweets) {
        // 使用保存的数据
        forYouTweets.length = 0;
        followingTweets.length = 0;
        forYouTweets.push(...savedData.forYouTweets);
        followingTweets.push(...savedData.followingTweets);
        console.log('已加载保存的推文数据，最后更新时间:', savedData.lastUpdated);
      }
    } catch (error) {
      console.error('加载推文数据失败，使用默认数据:', error);
    }
    // 渲染推文
    renderTweets(forYouTweets, 'for-you-content');
    renderTweets(followingTweets, 'following-content');
  }
  // ============================================
  // ⏰ 动态时间更新功能
  // ============================================
  // 计算相对时间
  function getRelativeTime(createdAt) {
    const now = Date.now();
    const diff = now - createdAt;
    const seconds = Math.floor(diff / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);
    if (seconds < 60) return '刚刚';
    if (minutes < 60) return `${minutes}分钟前`;
    if (hours < 24) return `${hours}小时前`;
    if (days < 7) return `${days}天前`; // 超过7天显示具体日期
    const date = new Date(createdAt);
    const month = date.getMonth() + 1;
    const day = date.getDate();
    return `${month}月${day}日`;
  }
  // 更新所有推文的时间显示
  function updateAllTweetTimes() {
    // 更新为你推荐页面
    forYouTweets.forEach(tweet => {
      if (tweet.createdAt) {
        tweet.time = getRelativeTime(tweet.createdAt);
      }
    }); // 更新正在关注页面
    followingTweets.forEach(tweet => {
      if (tweet.createdAt) {
        tweet.time = getRelativeTime(tweet.createdAt);
      }
    }); // 🔧 更新DOM中所有带有data-timestamp的时间显示（适用于所有页面）
    document.querySelectorAll('.tweet-time[data-timestamp]').forEach(timeEl => {
      const timestamp = parseInt(timeEl.dataset.timestamp);
      if (timestamp && !isNaN(timestamp)) {
        timeEl.textContent = getRelativeTime(timestamp);
      }
    }); // 🔧 兼容旧的推文时间更新逻辑
    document.querySelectorAll('.tweet-time').forEach(timeEl => {
      const tweetEl = timeEl.closest('.tweet-item');
      if (tweetEl && tweetEl.dataset.tweetId && !timeEl.dataset.timestamp) {
        const tweetId = tweetEl.dataset.tweetId;
        const tweet = [...forYouTweets, ...followingTweets].find(t => t.id === tweetId);
        if (tweet && tweet.createdAt) {
          timeEl.textContent = getRelativeTime(tweet.createdAt);
        }
      }
    });
  }
  // 启动动态时间更新定时器（每30秒更新一次）
  setInterval(updateAllTweetTimes, 30000); // 显示敏感内容
  function showSensitiveContent(tweetId) {
    const overlay = document.querySelector(`#media-${tweetId} .sensitive-overlay`);
    const content = document.getElementById(`content-${tweetId}`);
    if (overlay) {
      overlay.style.display = 'none';
    }
    if (content) {
      content.style.filter = 'none';
    }
  }
  // 点赞功能已移至书签功能下方的window.toggleLike（完整版本，包含数据库保存和AI触发）
  // 生成随机点赞数
  function generateRandomLikes() {
    return Math.floor(Math.random() * 50) + 1;
  }
  // 动态计算评论时间显示
  function formatCommentTime(commentTimestamp) {
    // 验证时间戳有效性
    if (!commentTimestamp || isNaN(commentTimestamp) || commentTimestamp <= 0) {
      console.warn('⚠️ [时间显示] 无效的时间戳:', commentTimestamp);
      return '刚刚';
    }
    const now = Date.now();
    const diff = now - commentTimestamp;
    const minutes = Math.floor(diff / (1000 * 60));
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    if (minutes < 1) return '刚刚';
    if (minutes < 60) return `${minutes}分钟前`;
    if (hours < 24) return `${hours}小时前`;
    if (days < 7) return `${days}天前`; // 超过7天显示具体日期
    const date = new Date(commentTimestamp); // 二次验证日期对象有效性
    if (isNaN(date.getTime())) {
      console.warn('⚠️ [时间显示] 无效的日期对象，时间戳:', commentTimestamp);
      return '刚刚';
    }
    const month = date.getMonth() + 1;
    const day = date.getDate();
    return `${month}月${day}日`;
  }
  // 创建评论元素
  function createCommentElement(comment, isReply = false) {
    const commentEl = document.createElement('div');
    commentEl.className = isReply ? 'comment-item reply-item' : 'comment-item';
    commentEl.dataset.commentId = comment.id;
    const randomLikes = generateRandomLikes();
    const randomComments = Math.floor(Math.random() * 10) + 1;
    const randomRetweets = Math.floor(Math.random() * 5) + 1;
    const randomViews = Math.floor(Math.random() * 1000) + 50;
    commentEl.innerHTML = `
 <img class="tweet-avatar" src="${comment.user.avatar}" alt="${comment.user.name}"
 onclick="openAccountProfile('${comment.user.name.replace(/'/g, "\\'")}', '${comment.user.handle}', '${
      comment.user.avatar
    }', {source: 'tweetDetail', commentContent: '${comment.content
      .replace(/'/g, "\\'")
      .substring(0, 100)}'});event.stopPropagation();"
 style="cursor: pointer; transition: opacity 0.2s;"
 onmouseover="this.style.opacity='0.8'"
 onmouseout="this.style.opacity='1'">
 <div class="comment-main">
 <div class="comment-user-info">
 <span class="tweet-user-name" onclick="openAccountProfile('${comment.user.name.replace(/'/g, "\\'")}', '${
      comment.user.handle
    }', '${comment.user.avatar}', {source: 'tweetDetail', commentContent: '${comment.content
      .replace(/'/g, "\\'")
      .substring(0, 100)}'});event.stopPropagation();" style="cursor: pointer;">${comment.user.name}</span>
 ${
   comment.user.verified
     ? '<svg class="tweet-verified" viewBox="0 0 24 24"><g><path d="M22.25 12c0-1.43-.88-2.67-2.19-3.34.46-1.39.2-2.9-.81-3.91s-2.52-1.27-3.91-.81c-.66-1.31-1.91-2.19-3.34-2.19s-2.67.88-3.33 2.19c-1.4-.46-2.91-.2-3.92.81s-1.26 2.52-.8 3.91c-1.31.67-2.2 1.91-2.2 3.34s.89 2.67 2.2 3.34c-.46 1.39-.21 2.9.8 3.91s2.52 1.27 3.91.81c.67 1.31 1.91 2.19 3.34 2.19s2.68-.88 3.34-2.19c1.39.46 2.9.2 3.91-.81s1.27-2.52.81-3.91c1.31-.67 2.19-1.91 2.19-3.34zm-11.71 4.2L6.8 12.46l1.41-1.42 2.26 2.26 4.8-5.23 1.47 1.36-6.2 6.77z"></path></g></svg>'
     : ''
 }
 <span class="tweet-user-handle">${
   comment.user.handle.startsWith('@') ? comment.user.handle : '@' + comment.user.handle
 }</span>
 <span class="tweet-time">·${comment.timestamp ? formatCommentTime(comment.timestamp) : comment.time || '刚刚'}</span>
 <div style="margin-left: auto; cursor: pointer; padding: 4px; border-radius: 50%; transition: background-color: 0.2s; display: flex; align-items: center;" onmouseover="this.style.backgroundColor='color-mix(in srgb, var(--x-accent) , 0.1)'" onmouseout="this.style.backgroundColor='transparent'" onclick="${
   comment.user.handle === userProfileData.handle
     ? `deleteUserComment('${comment.id}')`
     : `event.stopPropagation(); showXToast('更多选项开发中', 'info')`
 }">
 <svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: #71767b;">
 <g><circle cx="12" cy="5" r="2"></circle><circle cx="12" cy="12" r="2"></circle><circle cx="12" cy="19" r="2"></circle></g>
 </svg>
 </div>
 </div>
 <div class="comment-content">
 ${comment.replyTo ? `<span class="reply-to">${comment.replyTo}</span>` : ''}
 ${processContent(cleanReplyContent(comment.content, comment.replyTo))}
 ${
   comment.image
     ? comment.image.type === 'description'
       ? `<div style="margin-top: 8px; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 8px; padding: 8px; box-sizing: border-box;">
 <div style="color:var(--x-text-primary); font-size: 13px; line-height: 1.4; white-space: pre-wrap; word-wrap: break-word; overflow-wrap: break-word; width: 100%; box-sizing: border-box;">${comment.image.content}</div>
 </div>`
       : `<div style="margin-top: 8px; border-radius: 12px; overflow: hidden; max-width: 300px;">
 <img src="${comment.image.content}" style="width: 100%; max-height: 280px; object-fit: cover; display: block;" alt="评论图片">
 </div>`
     : ''
 }
 ${
   comment.sticker
     ? `<div style="margin-top: 8px; max-width: 120px;">
 <img src="${comment.sticker.url}" alt="${comment.sticker.description}" style="width: 100%; height: auto; display: block; border-radius: 8px; cursor: pointer;"
      onerror="this.style.display='none'; this.parentElement.innerHTML='<div style=\\'padding: 12px; color:var(--x-text-secondary); text-align: center;\\'>表情包加载失败</div>';"
      title="${comment.sticker.description}">
 </div>`
     : ''
 }
 </div>
 <div class="comment-actions" style="display: flex; justify-content: space-between; align-items: center; margin-top: 8px; gap: 2px; max-width: 100%; overflow-x: hidden;">
 <div class="comment-action reply-action" onclick="showReplyInput('${comment.id}', '${
      comment.user.handle
    }')" style="display: flex; align-items: center; gap: 2px; cursor: pointer; color: #71767b; transition: color 0.2s; flex: 0 1 auto; min-width: 0;">
 <svg class="action-icon" viewBox="0 0 24 24" fill="currentColor" style="width: 16px; height: 16px; flex-shrink: 0;">
 <g><path d="M1.751 10c0-4.42 3.584-8.005 8.005-8.005h4.366c4.49 0 8.129 3.64 8.129 8.13 0 2.96-1.607 5.68-4.196 7.11l-8.054 4.46v-3.69h-.067c-4.49.1-8.183-3.51-8.183-8.005zm8.005-6.005c-3.317 0-6.005 2.69-6.005 6.005 0 3.37 2.77 6.08 6.138 6.01l.351-.01h1.761v2.3l5.087-2.81c1.951-1.08 3.163-3.13 3.163-5.36 0-3.39-2.744-6.13-6.129-6.13H9.756z"></path></g>
 </svg>
 <span style="font-size: 12px; white-space: nowrap;">${randomComments}</span>
 </div>
 <div class="comment-action" onclick="handleQuoteRetweetFromData('comment', '${
   comment.id
 }')" style="display: flex; align-items: center; gap: 2px; cursor: pointer; color: #71767b; transition: color 0.2s; flex: 0 1 auto; min-width: 0;">
 <svg class="action-icon" viewBox="0 0 24 24" fill="currentColor" style="width: 16px; height: 16px; flex-shrink: 0;">
 <g><path d="M4.5 3.88l4.432 4.14-1.364 1.46L5.5 7.55V16c0 1.1.896 2 2 2H13v2H7.5c-2.209 0-4-1.791-4-4V7.55L1.432 9.48.068 8.02 4.5 3.88zM16.5 6H11V4h5.5c2.209 0 4 1.791 4 4v8.45l2.068-1.93 1.364 1.46-4.432 4.14-4.432-4.14 1.364-1.46 2.068 1.93V8c0-1.1-.896-2-2-2z"></path></g>
 </svg>
 <span style="font-size: 12px; white-space: nowrap;">${randomRetweets}</span>
 </div>
 <div class="comment-action like" onclick="toggleCommentLike('${
   comment.id
 }', this)" data-liked="false" data-likes="${randomLikes}" style="display: flex; align-items: center; gap: 2px; cursor: pointer; color: #71767b; transition: color 0.2s; flex: 0 1 auto; min-width: 0;">
 <svg class="action-icon like-icon" viewBox="0 0 24 24" fill="currentColor" style="width: 16px; height: 16px; flex-shrink: 0;">
 <g><path d="M16.697 5.5c-1.222-.06-2.679.51-3.89 2.16l-.805 1.09-.806-1.09C9.984 6.01 8.526 5.44 7.304 5.5c-1.243.07-2.349.78-2.91 1.91-.552 1.12-.633 2.78.479 4.82 1.074 1.97 3.257 4.27 7.129 6.61 3.87-2.34 6.052-4.64 7.126-6.61 1.111-2.04 1.03-3.7.477-4.82-.561-1.13-1.666-1.84-2.908-1.91zm4.187 7.69c-1.351 2.48-4.001 5.12-8.379 7.67l-.503.3-.504-.3c-4.379-2.55-7.029-5.19-8.382-7.67-1.36-2.5-1.41-4.86-.514-6.67.887-1.79 2.647-2.91 4.601-3.01 1.651-.09 3.368.56 4.798 2.01 1.429-1.45 3.146-2.1 4.796-2.01 1.954.1 3.714 1.22 4.601 3.01.896 1.81.846 4.17-.514 6.67z"></path></g>
 </svg>
 <span class="like-count" style="font-size: 12px; white-space: nowrap;">${randomLikes}</span>
 </div>
 <div class="comment-action" style="display: flex; align-items: center; gap: 2px; cursor: pointer; color: #71767b; transition: color 0.2s; flex: 0 1 auto; min-width: 0;">
 <svg class="action-icon" viewBox="0 0 24 24" fill="currentColor" style="width: 16px; height: 16px; flex-shrink: 0;">
 <g><path d="M8.75 21V3h2v18h-2zM18 21V8.5h2V21h-2zM4 21l.004-10H6v10H4zm9.248 0v-7h2v7h-2z"></path></g>
 </svg>
 <span style="font-size: 12px; white-space: nowrap;">${formatNumber(randomViews)}</span>
 </div>
 <div class="comment-action bookmark" style="display: flex; align-items: center; cursor: pointer; color: #71767b; transition: color 0.2s; flex: 0 0 auto; min-width: 16px;">
 <svg class="action-icon" viewBox="0 0 24 24" fill="currentColor" style="width: 16px; height: 16px; flex-shrink: 0;">
 <g><path d="M4 4.5C4 3.12 5.119 2 6.5 2h11C18.881 2 20 3.12 20 4.5v18.44l-8-5.71-8 5.71V4.5zM6.5 4c-.276 0-.5.22-.5.5v14.56l6-4.29 6 4.29V4.5c0-.28-.224-.5-.5-.5h-11z"></path></g>
 </svg>
 </div>
 <div class="comment-action share comment-share-btn" data-comment-id="${
   comment.id
 }" style="display: flex; align-items: center; cursor: pointer; color: #71767b; transition: color 0.2s; flex: 0 0 auto; min-width: 16px;">
 <svg class="action-icon" viewBox="0 0 24 24" fill="currentColor" style="width: 16px; height: 16px; flex-shrink: 0;">
 <g><path d="M12 2.59l5.7 5.7-1.41 1.42L13 6.41V16h-2V6.41l-3.29 3.3-1.42-1.42L12 2.59zM21 15l-.02 3.51c0 1.38-1.12 2.49-2.5 2.49H5.5C4.11 21 3 19.88 3 18.5V15h2v3.5c0 .28.22.5.5.5h12.98c.28 0 .5-.22.5-.5L19 15h2z"></path></g>
 </svg>
 </div>
 </div>

 <div id="reply-input-${
   comment.id
 }" class="reply-input-container" style="display: none; margin-top: 12px; padding-left: 48px;">
 <div style="display: flex; align-items: flex-start; gap: 12px;">
 <img src="https://i.postimg.cc/pXxk1JXk/IMG-6442.jpg" alt="Your avatar" style="width: 32px; height: 32px; border-radius: 50%; flex-shrink: 0;" class="reply-user-avatar">
 <div style="flex: 1;">
 <textarea placeholder="发布你的回复" style="width: 100%; min-height: 20px; max-height: 80px; background: transparent; border: none; color: #fff; font-size: 15px; resize: none; outline: none; font-family: inherit; line-height: 1.3; border-bottom: 1px solid #333; padding-bottom: 8px;" oninput="autoResizeReply(this, '${
   comment.id
 }')" onkeydown="handleReplyInput(event, '${comment.id}', '${comment.user.handle}')"></textarea>
 <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 8px;">
 <div style="display: flex; gap: 12px;">
 <svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: var(--x-accent); cursor: pointer;">
 <g><path d="M3 5.5C3 4.119 4.119 3 5.5 3h13C19.881 3 21 4.119 21 5.5v13c0 1.381-1.119 2.5-2.5 2.5h-13C4.119 21 3 19.881 3 18.5v-13zM5.5 5c-.276 0-.5.224-.5.5v9.086l3-3 3 3 5-5 3 3V5.5c0-.276-.224-.5-.5-.5h-13zM19 15.414l-3-3-5 5-3-3-3 3V18.5c0 .276.224.5.5.5h13c.276 0 .5-.224.5-.5v-3.086zM9.75 7C8.784 7 8 7.784 8 8.75s.784 1.75 1.75 1.75 1.75-.784 1.75-1.75S10.716 7 9.75 7z"></path></g>
 </svg>
 <svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: var(--x-accent); cursor: pointer;">
 <g><path d="M8 9.5C8 8.119 8.672 7 9.5 7S11 8.119 11 9.5 10.328 12 9.5 12 8 10.881 8 9.5zm6.5 2.5c.828 0 1.5-1.119 1.5-2.5S15.328 7 14.5 7 13 8.119 13 9.5s.672 2.5 1.5 2.5zM12 16c-2.224 0-3.021-2.227-3.051-2.316l-1.897.633c.05.15 1.271 3.684 4.949 3.684s4.898-3.533 4.949-3.684l-1.896-.638c-.033.095-.83 2.322-3.053 2.322zm10.25-4.001c0 5.652-4.598 10.25-10.25 10.25S1.75 17.652 1.75 12 6.348 1.75 12 1.75 22.25 6.348 22.25 12zm-2 0c0-4.549-3.701-8.25-8.25-8.25S3.75 7.451 3.75 12s3.701 8.25 8.25 8.25 8.25-3.701 8.25-8.25z"></path></g>
 </svg>
 </div>
 <div style="display: flex; gap: 8px;">
 <button onclick="cancelReply('${
   comment.id
 }')" style="background: transparent; color: #71767b; border: 1px solid #333; border-radius: 16px; padding: 4px 12px; font-size: 13px; cursor: pointer;">取消</button>
 <button id="reply-btn-${comment.id}" onclick="submitReply('${comment.id}', '${
      comment.user.handle
    }')" style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 16px; padding: 4px 12px; font-size: 13px; cursor: pointer; opacity: 0.5;" disabled>回复</button>
 </div>
 </div>
 </div>
 </div>
 </div>
 </div>
 `; // 添加分享按钮点击事件
    const shareBtn = commentEl.querySelector('.comment-share-btn');
    if (shareBtn) {
      shareBtn.onclick = () => {
        // 尝试从 sessionStorage 获取当前推文数据
        let parentTweet = null;
        const currentTweetDataStr = sessionStorage.getItem('currentTweetData');
        if (currentTweetDataStr) {
          try {
            parentTweet = JSON.parse(currentTweetDataStr);
          } catch (e) {
            console.error('解析推文数据失败:', e);
          }
        }
        showShareContentModal(
          {
            user: comment.user,
            content: comment.content,
            time: comment.time || (comment.timestamp ? formatCommentTime(comment.timestamp) : '刚刚'),
            image: comment.image,
            // 包含所属推文的数据
            parentTweet: parentTweet,
          },
          'comment',
        );
      };
    }
    return commentEl;
  }
  // 删除用户评论功能
  async function deleteUserComment(commentId) {
    if (!confirm('确定要删除这条评论吗？')) {
      return;
    }
    const commentElement = document.querySelector(`[data-comment-id="${commentId}"]`);
    if (commentElement) {
      // 添加淡出动画
      commentElement.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
      commentElement.style.opacity = '0';
      commentElement.style.transform = 'translateX(-20px)'; // 动画完成后移除元素
      setTimeout(() => {
        commentElement.remove();
        showXToast('评论已删除', 'success');
      }, 300); // 递归删除评论的辅助函数
      const removeCommentById = (comments, targetId) => {
        return comments.filter(comment => {
          if (comment.id === targetId) {
            return false; // 删除匹配的评论
          }
          if (comment.replies && comment.replies.length > 0) {
            comment.replies = removeCommentById(comment.replies, targetId);
          }
          return true;
        });
      }; // 同时从推文数据中移除这条评论
      try {
        // 更新sessionStorage中的数据
        const currentTweetData = sessionStorage.getItem('currentTweetData');
        if (currentTweetData) {
          const tweetData = JSON.parse(currentTweetData);
          if (tweetData.comments) {
            tweetData.comments = removeCommentById(tweetData.comments, commentId);
            sessionStorage.setItem('currentTweetData', JSON.stringify(tweetData)); // 更新统计数据
            const commentsCount = document.querySelector('.tweet-stats .comment-count');
            if (commentsCount) {
              const currentCount = parseInt(commentsCount.textContent) || 0;
              if (currentCount > 0) {
                commentsCount.textContent = currentCount - 1;
              }
            }
            // 同时更新数据库中的数据
            const db = getXDB();
            const tweetsData = await db.xTweetsData.get('tweets');
            if (tweetsData) {
              // 在forYouTweets中查找并更新
              if (tweetsData.forYouTweets) {
                const tweetIndex = tweetsData.forYouTweets.findIndex(t => t.id === tweetData.id);
                if (tweetIndex !== -1) {
                  tweetsData.forYouTweets[tweetIndex].comments = removeCommentById(
                    tweetsData.forYouTweets[tweetIndex].comments || [],
                    commentId,
                  ); // 更新全局变量
                  forYouTweets[tweetIndex] = tweetsData.forYouTweets[tweetIndex];
                }
              }
              // 在followingTweets中查找并更新
              if (tweetsData.followingTweets) {
                const tweetIndex = tweetsData.followingTweets.findIndex(t => t.id === tweetData.id);
                if (tweetIndex !== -1) {
                  tweetsData.followingTweets[tweetIndex].comments = removeCommentById(
                    tweetsData.followingTweets[tweetIndex].comments || [],
                    commentId,
                  ); // 更新全局变量
                  followingTweets[tweetIndex] = tweetsData.followingTweets[tweetIndex];
                }
              }
              // 保存更新后的数据
              await db.xTweetsData.put(tweetsData);
            }
            // 如果是用户自己的推文，也更新用户推文数据
            if (tweetData.id.startsWith('user_')) {
              // 🔧 多账户隔离：使用账户ID
              const userTweetsId = `userTweets_${currentAccountId || 'main'}`;
              const userTweets = await db.xUserTweets.get(userTweetsId);
              if (userTweets && userTweets.tweets) {
                const userTweetIndex = userTweets.tweets.findIndex(t => t.id === tweetData.id);
                if (userTweetIndex !== -1) {
                  userTweets.tweets[userTweetIndex].comments = removeCommentById(
                    userTweets.tweets[userTweetIndex].comments || [],
                    commentId,
                  );
                  await db.xUserTweets.put(userTweets);
                }
              }
            }
            console.log('评论已从数据库中删除:', commentId);
          }
        } else if (currentTweetId) {
          // 如果是主页评论页面，更新主页数据
          const allTweets = [...forYouTweets, ...followingTweets];
          const tweet = allTweets.find(t => t.id === currentTweetId);
          if (tweet && tweet.comments) {
            tweet.comments = removeCommentById(tweet.comments, commentId);
            tweet.stats.comments = Math.max(0, (tweet.stats.comments || 0) - 1); // 更新全局数组引用
            const tweetIndex = forYouTweets.findIndex(t => t.id === tweet.id);
            if (tweetIndex !== -1) {
              forYouTweets[tweetIndex] = tweet;
            } else {
              const followingIndex = followingTweets.findIndex(t => t.id === tweet.id);
              if (followingIndex !== -1) {
                followingTweets[followingIndex] = tweet;
              }
            }
            // 保存到数据库
            const db = getXDB();
            await db.xTweetsData.put({
              id: 'tweets',
              forYouTweets: forYouTweets,
              followingTweets: followingTweets,
              lastUpdated: new Date().toISOString(),
            });
            console.log('主页评论已从数据库中删除:', commentId);
          }
        }
      } catch (error) {
        console.error('删除评论数据失败:', error);
        showXToast('删除评论失败，请重试', 'error');
      }
    }
  }
  // 评论点赞功能
  function toggleCommentLike(commentId, element) {
    const isLiked = element.dataset.liked === 'true';
    const currentLikes = parseInt(element.dataset.likes);
    const likeIcon = element.querySelector('.like-icon');
    const likeCount = element.querySelector('.like-count');
    if (isLiked) {
      element.dataset.liked = 'false';
      element.dataset.likes = (currentLikes - 1).toString();
      element.classList.remove('liked');
      likeCount.textContent = (currentLikes - 1).toString();
    } else {
      element.dataset.liked = 'true';
      element.dataset.likes = (currentLikes + 1).toString();
      element.classList.add('liked');
      likeCount.textContent = (currentLikes + 1).toString();
      likeIcon.classList.add('like-animation');
      setTimeout(() => {
        likeIcon.classList.remove('like-animation');
      }, 600);
    }
  }
  // 渲染评论
  function renderComments(tweetId) {
    const container = document.querySelector('.comments-container');
    container.innerHTML = ''; // 找到对应的推文（包括主页推文、搜索结果推文、账户推文）
    let allTweets = [...forYouTweets, ...followingTweets]; // 添加搜索结果推文
    if (searchResultsData.top || searchResultsData.latest) {
      allTweets = [...allTweets, ...(searchResultsData.top || []), ...(searchResultsData.latest || [])];
    }
    // 添加账户推文
    if (currentViewingAccount && currentViewingAccount.tweets) {
      allTweets = [...allTweets, ...currentViewingAccount.tweets];
    }
    const tweet = allTweets.find(t => t.id === tweetId);
    if (!tweet || !tweet.comments) return;
    tweet.comments.forEach(comment => {
      // 创建评论组容器
      const commentGroup = document.createElement('div');
      commentGroup.style.cssText = 'position: relative;'; // 添加主评论
      const commentElement = createCommentElement(comment); // 如果有回复，给主评论添加特殊类
      if (comment.replies && comment.replies.length > 0) {
        commentElement.classList.add('has-replies');
      }
      commentGroup.appendChild(commentElement); // 为主评论头像添加点击事件
      const commentAvatar = commentElement.querySelector('.tweet-avatar');
      if (commentAvatar) {
        commentAvatar.style.cursor = 'pointer';
        commentAvatar.addEventListener('click', e => {
          e.stopPropagation();
          openAccountProfile(comment.user.name, comment.user.handle, comment.user.avatar, {
            source: 'comment',
            commentContent: comment.content,
            commentImage: comment.image,
            commentTime: comment.time,
          });
        });
      }
      // 渲染回复
      if (comment.replies && comment.replies.length > 0) {
        comment.replies.forEach(reply => {
          const replyElement = createCommentElement(reply, true);
          commentGroup.appendChild(replyElement); // 为回复头像添加点击事件
          const replyAvatar = replyElement.querySelector('.tweet-avatar');
          if (replyAvatar) {
            replyAvatar.style.cursor = 'pointer';
            replyAvatar.addEventListener('click', e => {
              e.stopPropagation();
              openAccountProfile(reply.user.name, reply.user.handle, reply.user.avatar, {
                source: 'comment',
                commentContent: reply.content,
                commentImage: reply.image,
                commentTime: reply.time,
                replyTo: reply.replyTo,
              });
            });
          }
        });
      }
      container.appendChild(commentGroup);
    }); // 更新所有回复输入框头像
    const replyUserAvatars = document.querySelectorAll('.reply-user-avatar');
    replyUserAvatars.forEach(avatar => {
      avatar.src = userProfileData.avatar;
    });
  }
  // 评论图片数据存储
  let commentImageData = null;
  let detailCommentImageData = null; // 触发主页评论图片上传
  function triggerCommentImageUpload() {
    document.getElementById('comment-image-input').click();
  }
  // 处理主页评论图片上传
  function handleCommentImageUpload(event) {
    const file = event.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = function (e) {
      commentImageData = e.target.result;
      const preview = document.getElementById('comment-image-preview');
      const img = document.getElementById('comment-image-preview-img');
      img.src = commentImageData;
      preview.style.display = 'block';
      showXToast('图片已添加', 'success');
    };
    reader.readAsDataURL(file);
  }
  // 移除主页评论图片
  function removeCommentImage() {
    commentImageData = null;
    const preview = document.getElementById('comment-image-preview');
    const img = document.getElementById('comment-image-preview-img');
    img.src = '';
    preview.style.display = 'none';
    document.getElementById('comment-image-input').value = '';
  }
  // 触发详情页评论图片上传
  function triggerDetailCommentImageUpload() {
    document.getElementById('detail-comment-image-input').click();
  }

  // 触发详情页评论表情包选择
  function openCommentStickers() {
    if (window.setCommentStickerMode) {
      window.setCommentStickerMode(true);
    }

    if (window.resetSelectedCommentSticker) {
      window.resetSelectedCommentSticker();
    }

    if (window.openStickerPicker) {
      window.openStickerPicker();
    } else {
      showXToast('表情包功能暂不可用', 'error');
    }
  }
  // 处理详情页评论图片上传
  function handleDetailCommentImageUpload(event) {
    const file = event.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = function (e) {
      detailCommentImageData = e.target.result;
      const preview = document.getElementById('detail-comment-image-preview');
      const img = document.getElementById('detail-comment-image-preview-img');
      img.src = detailCommentImageData;
      preview.style.display = 'block';
      showXToast('图片已添加', 'success');
    };
    reader.readAsDataURL(file);
  }
  // 移除详情页评论图片
  function removeDetailCommentImage() {
    detailCommentImageData = null;
    const preview = document.getElementById('detail-comment-image-preview');
    const img = document.getElementById('detail-comment-image-preview-img');
    img.src = '';
    preview.style.display = 'none';
    document.getElementById('detail-comment-image-input').value = '';
  }
  // 处理评论输入
  function handleCommentInput(event) {
    const textarea = event.target;
    const replyBtn = document.getElementById('reply-btn'); // 更新按钮状态
    if (textarea.value.trim().length > 0) {
      replyBtn.style.opacity = '1';
      replyBtn.disabled = false;
    } else {
      replyBtn.style.opacity = '0.5';
      replyBtn.disabled = true;
    }
    // 回车发送评论（Shift+回车换行）
    if (event.key === 'Enter' && !event.shiftKey) {
      event.preventDefault();
      if (textarea.value.trim().length > 0) {
        submitComment();
      }
    }
  }
  // 自动调整textarea高度
  function autoResize(textarea) {
    textarea.style.height = '20px';
    textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px'; // 更新按钮状态
    const replyBtn = document.getElementById('reply-btn');
    if (textarea.value.trim().length > 0) {
      replyBtn.style.opacity = '1';
      replyBtn.disabled = false;
    } else {
      replyBtn.style.opacity = '0.5';
      replyBtn.disabled = true;
    }
  }
  // 当前正在查看的推文ID
  let currentTweetId = null; // 提交评论
  async function submitComment() {
    const textarea = document.getElementById('comment-input');
    const content = textarea.value.trim();
    if (content.length === 0 || !currentTweetId) return; // 获取当前推文数据 - 需要同时检查账户推文
    let tweet = null;
    let isAccountTweet = false; // 先从主页推文中查找
    const allTweets = [...forYouTweets, ...followingTweets];
    tweet = allTweets.find(t => t.id === currentTweetId); // 如果没找到，检查是否为账户推文
    if (!tweet && currentViewingAccount && currentViewingAccount.tweets) {
      tweet = currentViewingAccount.tweets.find(t => t.id === currentTweetId);
      isAccountTweet = !!tweet;
    }
    if (!tweet) {
      showXToast('无法找到对应的推文', 'error');
      return;
    }
    // 检查是否为仅自己可见的帖子（主页推文一般不会有private标记，但为了统一）
    if (tweet.privacy === 'private') {
      showXToast('私有帖子不支持回复功能', 'error');
      return;
    }
    // 创建新评论对象（使用window.userProfileData确保获取最新账号数据）
    const newComment = {
      id: 'new-' + Date.now(),
      user: {
        name: window.userProfileData.name,
        handle: window.userProfileData.handle,
        avatar: window.userProfileData.avatar,
        verified: window.userProfileData.verified,
      },
      content: content,
      timestamp: Date.now(), // 使用时间戳而不是固定文本
      replies: [],
    }; // 如果有图片，添加图片数据
    if (commentImageData) {
      newComment.image = {
        type: 'upload',
        content: commentImageData,
      };
    }
    // 添加到对应推文的评论列表
    if (tweet) {
      // 确保评论列表存在
      if (!tweet.comments) {
        tweet.comments = [];
      }
      tweet.comments.push(newComment);
      tweet.stats.comments += 1; // 强制更新全局数组引用，确保数据同步
      const tweetIndex = forYouTweets.findIndex(t => t.id === tweet.id);
      if (tweetIndex !== -1) {
        forYouTweets[tweetIndex] = tweet;
      } else {
        const followingIndex = followingTweets.findIndex(t => t.id === tweet.id);
        if (followingIndex !== -1) {
          followingTweets[followingIndex] = tweet;
        }
      }
      // 保存更新后的推文数据
      try {
        const db = getXDB();
        if (isAccountTweet) {
          // 保存到账户主页数据
          const accountHandle =
            tweet._accountHandle || (currentViewingAccount.accountInfo || currentViewingAccount).handle;
          const cleanHandle = accountHandle.replace('@', ''); // 更新currentViewingAccount中的推文
          const tweetIndex = currentViewingAccount.tweets.findIndex(t => t.id === tweet.id);
          if (tweetIndex !== -1) {
            currentViewingAccount.tweets[tweetIndex] = tweet;
          }
          // 保存到数据库
          await db.xAccountProfiles.put({
            handle: cleanHandle,
            name: (currentViewingAccount.accountInfo || currentViewingAccount).name,
            accountInfo: currentViewingAccount.accountInfo || currentViewingAccount,
            tweets: currentViewingAccount.tweets,
            accountReplies: currentViewingAccount.accountReplies || [],
            updatedAt: new Date().toISOString(),
          });
          console.log('✅ 用户评论已保存到账户推文，评论ID:', newComment.id, '账户:', cleanHandle);
        } else {
          // 保存到主页推文数据
          await db.xTweetsData.put({
            id: 'tweets',
            forYouTweets: forYouTweets,
            followingTweets: followingTweets,
            lastUpdated: new Date().toISOString(),
          });
          console.log('用户评论已保存到数据库，评论ID:', newComment.id);
        }
      } catch (saveError) {
        console.error('保存评论数据失败:', saveError);
      }
    }
    // 重新渲染评论
    renderComments(currentTweetId); // 清空输入框并重置高度
    textarea.value = '';
    textarea.style.height = '20px'; // 清除图片
    if (commentImageData) {
      removeCommentImage();
    }
    // 重置按钮状态
    const replyBtn = document.getElementById('reply-btn');
    replyBtn.style.opacity = '0.5';
    replyBtn.disabled = true; // 滚动到底部显示新评论
    const commentsContainer = document.querySelector('.comments-container');
    setTimeout(() => {
      commentsContainer.scrollTop = commentsContainer.scrollHeight;
    }, 100);
    showXToast('你的评论等待回复中', 'info'); // 触发AI回复 - 判断是否为用户自己的帖子（主页推文中用户自己的帖子需要特别处理）
    const isOwnPost = tweet.user && (tweet.user.handle === userProfileData.handle || tweet.id.startsWith('user_')); // 延迟触发AI回复，确保用户评论已经完全渲染和保存
    setTimeout(async () => {
      await generateUnifiedAIResponse(tweet, newComment, {
        isOwnPost,
        commentType: 'main_comment',
        pageType: 'main',
        parentComment: null,
      });
    }, 100);
  }
  // 显示回复输入框
  function showReplyInput(commentId, userHandle) {
    // 隐藏所有其他回复输入框
    document.querySelectorAll('.reply-input-container').forEach(container => {
      container.style.display = 'none';
    }); // 显示当前评论的回复输入框
    const replyContainer = document.getElementById(`reply-input-${commentId}`);
    if (replyContainer) {
      replyContainer.style.display = 'block';
      const textarea = replyContainer.querySelector('textarea');
      textarea.focus();
    }
  }
  // 取消回复
  function cancelReply(commentId) {
    const replyContainer = document.getElementById(`reply-input-${commentId}`);
    if (replyContainer) {
      replyContainer.style.display = 'none';
      const textarea = replyContainer.querySelector('textarea');
      textarea.value = '';
      textarea.style.height = '20px'; // 重置按钮状态
      const replyBtn = document.getElementById(`reply-btn-${commentId}`);
      replyBtn.style.opacity = '0.5';
      replyBtn.disabled = true;
    }
  }
  // 处理回复输入
  function handleReplyInput(event, commentId, userHandle) {
    const textarea = event.target;
    const replyBtn = document.getElementById(`reply-btn-${commentId}`); // 更新按钮状态
    if (textarea.value.trim().length > 0) {
      replyBtn.style.opacity = '1';
      replyBtn.disabled = false;
    } else {
      replyBtn.style.opacity = '0.5';
      replyBtn.disabled = true;
    }
    // 回车发送回复
    if (event.key === 'Enter' && !event.shiftKey) {
      event.preventDefault();
      if (textarea.value.trim().length > 0) {
        submitReply(commentId, userHandle);
      }
    }
  }
  // 自动调整回复textarea高度
  function autoResizeReply(textarea, commentId) {
    textarea.style.height = '20px';
    textarea.style.height = Math.min(textarea.scrollHeight, 80) + 'px'; // 更新按钮状态
    const replyBtn = document.getElementById(`reply-btn-${commentId}`);
    if (textarea.value.trim().length > 0) {
      replyBtn.style.opacity = '1';
      replyBtn.disabled = false;
    } else {
      replyBtn.style.opacity = '0.5';
      replyBtn.disabled = true;
    }
  }
  // 提交回复
  async function submitReply(commentId, replyToHandle) {
    const replyContainer = document.getElementById(`reply-input-${commentId}`);
    const textarea = replyContainer.querySelector('textarea');
    const content = textarea.value.trim();
    if (content.length === 0) return; // 获取当前推文数据 - 先尝试从sessionStorage（详情页），再从主页数据
    let tweetData = null;
    const currentTweetDataFromSession = sessionStorage.getItem('currentTweetData');
    if (currentTweetDataFromSession) {
      // 详情页面的情况
      try {
        tweetData = JSON.parse(currentTweetDataFromSession);
      } catch (e) {
        console.error('解析sessionStorage推文数据失败:', e);
      }
    }
    if (!tweetData && currentTweetId) {
      // 主页推文的情况
      const allTweets = [...forYouTweets, ...followingTweets];
      tweetData = allTweets.find(t => t.id === currentTweetId);
    }
    if (!tweetData) {
      showXToast('无法获取推文信息', 'error');
      return;
    }
    // 检查是否为仅自己可见的帖子
    if (tweetData.privacy === 'private') {
      showXToast('私有帖子不支持回复功能', 'error');
      return;
    }
    // 找到被回复的评论 - 支持楼中楼回复并处理为平级显示
    let parentComment = null;
    let mainCommentId = commentId; // 用于查找主评论ID（对于楼中楼回复）
    const isDetailPage = !!currentTweetDataFromSession;
    const commentsContainer = isDetailPage
      ? document.getElementById('detail-comments-container')
      : document.querySelector('.comments-container');
    const allComments = commentsContainer.querySelectorAll('.comment-item'); // 首先找到被回复的评论
    let targetCommentEl = null;
    allComments.forEach(commentEl => {
      if (commentEl.dataset.commentId === commentId) {
        targetCommentEl = commentEl;
      }
    });
    if (targetCommentEl) {
      // 从DOM中提取评论信息构建parentComment
      const userName = targetCommentEl.querySelector('.tweet-user-name').textContent;
      const userHandle = targetCommentEl.querySelector('.tweet-user-handle').textContent;
      const commentContent = targetCommentEl.querySelector('.comment-content').textContent.trim();
      parentComment = {
        id: commentId,
        user: { name: userName, handle: userHandle },
        content: commentContent,
      }; // 如果被回复的是楼中楼，需要找到对应的主评论ID（用于数据存储）
      if (targetCommentEl.classList.contains('reply-item')) {
        // 向上查找同一个评论组中的主评论
        let currentEl = targetCommentEl.previousElementSibling;
        while (currentEl && currentEl.classList.contains('reply-item')) {
          currentEl = currentEl.previousElementSibling;
        }
        if (currentEl && currentEl.classList.contains('comment-item') && !currentEl.classList.contains('reply-item')) {
          mainCommentId = currentEl.dataset.commentId;
        } else {
          // 如果向上没找到，可能是第一个回复，向上查找父容器中的主评论
          let parentContainer = targetCommentEl.parentNode;
          let firstComment = parentContainer.querySelector('.comment-item:not(.reply-item)');
          if (firstComment) {
            mainCommentId = firstComment.dataset.commentId;
          }
        }
      }
    }
    // 创建新回复对象（使用window.userProfileData确保获取最新账号数据）
    const newReply = {
      id: 'reply-' + Date.now(),
      user: {
        name: window.userProfileData.name,
        handle: window.userProfileData.handle,
        avatar: window.userProfileData.avatar,
        verified: window.userProfileData.verified,
      },
      content: content,
      timestamp: Date.now(), // 使用时间戳而不是固定文本
      replyTo: replyToHandle,
      replies: [],
    };
    console.log('💬 [楼中楼回复] 创建新回复:', {
      id: newReply.id,
      content: newReply.content.substring(0, 50) + '...',
      replyTo: replyToHandle,
      mainCommentId,
      isDetailPage,
    });
    if (isDetailPage) {
      // 详情页面：渲染到页面并同时保存到数据库 - 修复楼中楼插入位置
      const commentElement = createCommentElement(newReply, true);
      if (targetCommentEl) {
        let insertAfter = null;
        if (targetCommentEl.classList.contains('reply-item')) {
          // 如果回复的是楼中楼，找到这个评论组的最后一个评论
          let nextSibling = targetCommentEl.nextElementSibling;
          insertAfter = targetCommentEl; // 找到当前评论组的最后一条评论
          while (nextSibling && nextSibling.classList.contains('reply-item')) {
            insertAfter = nextSibling;
            nextSibling = nextSibling.nextElementSibling;
          }
        } else {
          // 如果回复的是主评论，找到这个评论组的最后一条评论（包括所有楼中楼）
          let nextSibling = targetCommentEl.nextElementSibling;
          insertAfter = targetCommentEl;
          while (nextSibling && nextSibling.classList.contains('reply-item')) {
            insertAfter = nextSibling;
            nextSibling = nextSibling.nextElementSibling;
          }
        }
        // 插入到正确位置
        if (insertAfter.nextSibling) {
          insertAfter.parentNode.insertBefore(commentElement, insertAfter.nextSibling);
        } else {
          insertAfter.parentNode.appendChild(commentElement);
        }
      }
      // 同时保存到sessionStorage中的推文数据
      try {
        console.log('💬 [楼中楼回复] 开始保存到数据库');
        let updatedTweetData = JSON.parse(sessionStorage.getItem('currentTweetData'));
        if (updatedTweetData) {
          console.log('💬 [楼中楼回复] 推文ID:', updatedTweetData.id);
          console.log('💬 [楼中楼回复] 主评论ID:', mainCommentId);
          console.log('💬 [楼中楼回复] 当前评论总数:', updatedTweetData.comments?.length || 0);
          const mainComment = updatedTweetData.comments.find(c => c.id === mainCommentId);
          if (mainComment) {
            console.log('💬 [楼中楼回复] 找到主评论，当前回复数:', mainComment.replies?.length || 0);
            if (!mainComment.replies) mainComment.replies = [];
            mainComment.replies.push(newReply);
            console.log('💬 [楼中楼回复] 新回复已添加，新回复总数:', mainComment.replies.length); // 更新sessionStorage
            sessionStorage.setItem('currentTweetData', JSON.stringify(updatedTweetData));
            console.log('✅ [楼中楼回复] sessionStorage 已更新'); // 同时保存到数据库
            const db = getXDB();
            const isUserTweet = updatedTweetData.id.startsWith('user_');
            const isAccountTweet = updatedTweetData._source === 'account';
            console.log('💬 [楼中楼回复] 是否为用户推文:', isUserTweet);
            console.log('💬 [楼中楼回复] 是否为账户推文:', isAccountTweet);
            if (isAccountTweet) {
              // 账户推文，保存到 xAccountProfiles
              console.log('💬 [楼中楼回复] 保存到账户推文数据库');
              const accountHandle =
                updatedTweetData._accountHandle || (currentViewingAccount.accountInfo || currentViewingAccount).handle;
              const cleanHandle = accountHandle.replace('@', '');
              if (currentViewingAccount && currentViewingAccount.tweets) {
                const tweetIndex = currentViewingAccount.tweets.findIndex(t => t.id === updatedTweetData.id);
                if (tweetIndex !== -1) {
                  currentViewingAccount.tweets[tweetIndex] = updatedTweetData;
                  await db.xAccountProfiles.put({
                    handle: cleanHandle,
                    name: (currentViewingAccount.accountInfo || currentViewingAccount).name,
                    accountInfo: currentViewingAccount.accountInfo || currentViewingAccount,
                    tweets: currentViewingAccount.tweets,
                    accountReplies: currentViewingAccount.accountReplies || [],
                    updatedAt: new Date().toISOString(),
                  });
                  console.log('✅ [楼中楼回复] 账户推文已更新，账户:', cleanHandle);
                } else {
                  console.warn('⚠️ [楼中楼回复] 未找到目标账户推文');
                }
              }
            } else if (isUserTweet) {
              // 用户自己的推文，保存到 xUserTweets
              console.log('💬 [楼中楼回复] 保存到用户推文数据库');
              const accountTweetsId = `userTweets_${currentAccountId || 'main'}`;
              const userTweets = await db.xUserTweets.get(accountTweetsId);
              if (userTweets && userTweets.tweets) {
                console.log('💬 [楼中楼回复] 找到用户推文数据，推文总数:', userTweets.tweets.length);
                const userTweetIndex = userTweets.tweets.findIndex(t => t.id === updatedTweetData.id);
                if (userTweetIndex !== -1) {
                  console.log('💬 [楼中楼回复] 找到目标推文，索引:', userTweetIndex);
                  userTweets.tweets[userTweetIndex] = updatedTweetData;
                  await db.xUserTweets.put(userTweets);
                  console.log('✅ [楼中楼回复] 用户推文已更新到账户:', accountTweetsId);
                } else {
                  console.warn('⚠️ [楼中楼回复] 未找到目标用户推文');
                }
              } else {
                console.warn('⚠️ [楼中楼回复] 未找到用户推文数据');
              }
            } else {
              // 主页推文，保存到 xTweetsData
              console.log('💬 [楼中楼回复] 保存到主页推文数据库');
              const tweetsData = await db.xTweetsData.get('tweets');
              if (tweetsData) {
                let updated = false;
                if (tweetsData.forYouTweets) {
                  const tweetIndex = tweetsData.forYouTweets.findIndex(t => t.id === updatedTweetData.id);
                  if (tweetIndex !== -1) {
                    tweetsData.forYouTweets[tweetIndex] = updatedTweetData;
                    updated = true;
                    console.log('💬 [楼中楼回复] 已更新 forYouTweets');
                  }
                }
                if (!updated && tweetsData.followingTweets) {
                  const tweetIndex = tweetsData.followingTweets.findIndex(t => t.id === updatedTweetData.id);
                  if (tweetIndex !== -1) {
                    tweetsData.followingTweets[tweetIndex] = updatedTweetData;
                    updated = true;
                    console.log('💬 [楼中楼回复] 已更新 followingTweets');
                  }
                }
                if (updated) {
                  await db.xTweetsData.put(tweetsData);
                  console.log('✅ [楼中楼回复] 主页推文已保存到数据库');
                } else {
                  console.warn('⚠️ [楼中楼回复] 未在主页数据中找到目标推文');
                }
              }
            }
          } else {
            console.warn('⚠️ [楼中楼回复] 未找到主评论，mainCommentId:', mainCommentId);
          }
        } else {
          console.warn('⚠️ [楼中楼回复] sessionStorage 中无推文数据');
        }
      } catch (saveError) {
        console.error('❌ [楼中楼回复] 保存失败:', saveError);
      }
    } else {
      // 主页推文：添加到数据并重新渲染 - 支持楼中楼平级回复
      const mainComment = tweetData.comments.find(c => c.id === mainCommentId);
      if (mainComment) {
        if (!mainComment.replies) mainComment.replies = [];
        mainComment.replies.push(newReply); // 强制更新全局数组引用，确保数据同步
        const tweetIndex = forYouTweets.findIndex(t => t.id === tweetData.id);
        if (tweetIndex !== -1) {
          forYouTweets[tweetIndex] = tweetData;
        } else {
          const followingIndex = followingTweets.findIndex(t => t.id === tweetData.id);
          if (followingIndex !== -1) {
            followingTweets[followingIndex] = tweetData;
          }
        }
        // 保存更新后的推文数据
        try {
          const db = getXDB();
          await db.xTweetsData.put({
            id: 'tweets',
            forYouTweets: forYouTweets,
            followingTweets: followingTweets,
            lastUpdated: new Date().toISOString(),
          });
          console.log('用户回复已保存到数据库，回复ID:', newReply.id);
        } catch (saveError) {
          console.error('保存回复数据失败:', saveError);
        }
        // 重新渲染评论
        renderComments(currentTweetId);
      }
    }
    // 隐藏回复输入框
    cancelReply(commentId);
    showXToast('你的评论等待回复中', 'info'); // 触发AI回复 - 判断是否为用户自己的帖子
    const isOwnPost =
      tweetData.user && (tweetData.user.handle === userProfileData.handle || tweetData.id.startsWith('user_')); // 延迟触发AI回复，确保用户回复已经完全渲染和保存
    setTimeout(async () => {
      await generateUnifiedAIResponse(tweetData, newReply, {
        isOwnPost,
        commentType: 'reply_comment',
        pageType: isDetailPage ? 'detail' : 'main',
        parentComment,
        mainCommentId, // 传递主评论ID用于楼中楼回复处理
      });
    }, 100);
  }
  // 修改显示推文评论页面函数，保存当前推文ID
  async function showTweetComments(tweetId) {
    console.log('📖 [首页推文] 点击评论按钮，推文ID:', tweetId); // 从forYouTweets或followingTweets中找到对应的推文
    let tweet = forYouTweets.find(t => t.id === tweetId);
    if (!tweet) {
      tweet = followingTweets.find(t => t.id === tweetId);
    }
    if (!tweet) {
      console.error('❌ [首页推文] 未找到推文:', tweetId);
      showXToast('未找到该推文', 'error');
      return;
    }
    // 使用统一的推文详情页面显示
    await showTweetDetail(tweet);
  }
  // X风格提示框
  function showXToast(message, type = 'success') {
    // 移除现有的提示框
    const existingToast = document.querySelector('.x-toast');
    if (existingToast) {
      existingToast.remove();
    }
    const toast = document.createElement('div');
    toast.className = 'x-toast';
    toast.style.cssText = `
 position: fixed; top: 80px; left: 50%; transform: translateX(-50%); background-color: ${
   type === 'success' ? '#1d9bf0' : '#f4212e'
 }; color: #fff; padding: 12px 20px; border-radius: 20px; font-size: 15px; font-weight: 600; z-index: 1000; box-shadow: 0 4px 12px rgba(0,0,0,0.3); animation: fadeInOut 3s ease-in-out forwards; `;
    toast.textContent = message; // 添加淡入淡出动画
    const style = document.createElement('style');
    style.textContent = `
 @keyframes fadeInOut {
 0 % { opacity: 0; transform: translateX(-50 %) translateY(- 20px); }
 15% {opacity: 1; transform: translateX(-50%) translateY(0); }
 85% {opacity: 1; transform: translateX(-50%) translateY(0); }
 100% {opacity: 0; transform: translateX(-50%) translateY(-20px); }
 }
 `;
    document.head.appendChild(style);
    document.body.appendChild(toast); // 3秒后自动移除
    setTimeout(() => {
      if (toast.parentNode) {
        toast.remove();
      }
      if (style.parentNode) {
        style.remove();
      }
    }, 3000);
  }
  // ▼▼▼ 【主要！！！】第一个情景：推文生成器▼▼▼
  async function refreshXTweets() {
    const refreshBtn = document.querySelector('.x-refresh-btn'); // 添加旋转动画
    refreshBtn.style.animation = 'spin 1s linear infinite';
    const spinStyle = document.createElement('style');
    spinStyle.textContent = `
 @keyframes spin {
 from {transform: rotate(0deg); }
 to {transform: rotate(360deg); }
 }
 `;
    document.head.appendChild(spinStyle);
    try {
      // CSV解析函数
      function parseCSVToTweets(csvText) {
        const lines = csvText
          .split('\n')
          .map(line => line.trim())
          .filter(line => line);
        const tweetsData = {
          forYouTweets: [],
          followingTweets: [],
        };
        let currentSection = '';
        let tweetIndex = 0;
        for (const line of lines) {
          if (line.includes('=== 为你推荐 ===')) {
            currentSection = 'forYou';
            tweetIndex = 0;
            continue;
          } else if (line.includes('=== 正在关注 ===')) {
            currentSection = 'following';
            tweetIndex = 0;
            continue;
          }
          // 跳过表头
          if (line.includes('用户名,用户句柄,用户头像,是否认证') || line.includes('评论1用户名,评论1句柄')) {
            continue;
          }
          // 解析推文数据行
          if (currentSection && line.includes(',')) {
            const values = line.split(',').map(v => v.trim());
            if (values.length >= 12) {
              // 至少包含基本推文信息（包括头像字段）
              const tweet = {
                id: `${currentSection}_${tweetIndex}`,
                user: {
                  name: values[0] || '匿名用户',
                  handle: values[1] || '@anonymous',
                  avatar: values[2] || 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
                  verified: values[3] === '是',
                },
                content: values[4] || '',
                time: values[5] || '刚刚',
                media: values[6]
                  ? [
                      {
                        type: 'image',
                        description: values[6],
                        sensitive: values[7] === '是',
                      },
                    ]
                  : [],
                stats: {
                  comments: parseInt(values[8]) || 0,
                  retweets: parseInt(values[9]) || 0,
                  likes: parseInt(values[10]) || 0,
                  views: parseInt(values[11]) || 0,
                },
                comments: [],
              }; // 解析引用推文数据（如果存在）
              // 检查引用字段：索引12-18是引用相关字段（引用类型、引用用户名、引用句柄、引用头像、引用认证、引用内容、引用时间）
              if (values.length >= 19 && values[12] && values[13] && values[17]) {
                tweet.quotedTweet = {
                  type: values[12] || 'tweet', // 'tweet' 或 'comment'
                  user: {
                    name: values[13] || '引用用户',
                    handle: values[14] || '@quoted',
                    avatar: values[15] || 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
                    verified: values[16] === '是',
                  },
                  content: values[17] || '',
                  time: values[18] || '刚刚',
                };
              }
              // 统一处理评论解析：所有推文的评论都从索引19开始
              // 无论是否有引用推文，评论字段的位置都是固定的
              const comments = [];
              const commentStartIndex = 19; // 12个基本字段 + 7个引用字段 = 19
              // 从索引19开始，每7个字段为一个评论：用户名、句柄、头像、认证、内容、时间、回复对象
              let commentIndex = 1;
              let startIndex = commentStartIndex;
              while (startIndex + 6 < values.length) {
                const commentName = values[startIndex];
                const commentHandle = values[startIndex + 1];
                const commentAvatar = values[startIndex + 2];
                const commentVerified = values[startIndex + 3];
                const commentContent = values[startIndex + 4];
                const commentTime = values[startIndex + 5];
                const commentReplyTo = values[startIndex + 6]; // 检查评论是否有效（至少需要用户名、句柄、内容）
                if (commentName && commentHandle && commentContent) {
                  const newComment = {
                    id: `${tweet.id}_c${commentIndex}`,
                    user: {
                      name: commentName,
                      handle: commentHandle,
                      avatar: commentAvatar || 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
                      verified: commentVerified === '是',
                    },
                    content: commentContent,
                    time: commentTime || '刚刚',
                    replyTo: commentReplyTo || '',
                    replies: [],
                  }; // 如果这个评论是回复其他评论，找到被回复的评论并添加为回复
                  if (commentReplyTo) {
                    const targetComment = comments.find(c => c.user.handle === commentReplyTo);
                    if (targetComment) {
                      targetComment.replies.push(newComment);
                    } else {
                      // 如果找不到被回复的评论，作为独立评论添加
                      comments.push(newComment);
                    }
                  } else {
                    // 独立评论
                    comments.push(newComment);
                  }
                  commentIndex++;
                } else {
                  // 如果遇到空的评论字段，停止解析
                  break;
                }
                // 移动到下一个评论的起始位置
                startIndex += 7;
              }
              tweet.comments = comments;
              if (currentSection === 'forYou') {
                tweetsData.forYouTweets.push(tweet);
              } else if (currentSection === 'following') {
                tweetsData.followingTweets.push(tweet);
              }
              tweetIndex++;
            }
          }
        }
        return tweetsData;
      }
      // 🔧 使用统一的API配置加载工具
      const { db, xDb, apiConfig, xSettings } = await APIUtils.loadConfigAndSettings();
      const { userPrompt, worldSetting, boundCharacters } = xSettings;
      // 🔧 使用统一的NPC加载工具
      const boundNPCs = await APIUtils.loadBoundNPCs();
      // 使用工具函数构建用户X个人资料信息（使用window.userProfileData确保获取最新数据）
      const userXProfileInfo = StringBuilders.buildUserXProfileInfo(window.userProfileData); // 调试：输出用户身份识别设置
      console.log('🎭 绑定角色数量:', boundCharacters.length);
      if (boundCharacters.length > 0) {
        console.log('🎭 绑定角色列表:', boundCharacters);
      }
      console.log('👤 已知身份角色数:', window.userProfileData.knownIdentityCharacters?.length || 0);
      if (window.userProfileData.knownIdentityCharacters?.length > 0) {
        console.log('👤 已知身份角色列表:', window.userProfileData.knownIdentityCharacters);
      }
      // 检测用户是否为高曝光身份（明星/网红等公众人物）
      const userPublicIdentity = userXProfileInfo.publicIdentity || '';
      const userBio = userXProfileInfo.bio || '';
      const isUserHighExposure =
        /明星|网红|博主|演员|歌手|艺人|主播|up主|偶像|导演|制片|编剧|作家|influencer|celebrity|singer|actor|artist|streamer|idol/i.test(
          userPublicIdentity + ' ' + userBio,
        ); // 检测角色是否为高曝光身份
      const highExposureCharacters = [];
      if (boundCharacters.length > 0) {
        const allXProfiles = await xDb.xCharacterProfiles.toArray();
        for (const charId of boundCharacters) {
          const xProfile = allXProfiles.find(p => p.characterId === charId);
          if (xProfile && xProfile.publicIdentity) {
            const isCharHighExposure =
              /明星|网红|博主|演员|歌手|艺人|主播|up主|偶像|导演|制片|编剧|作家|influencer|celebrity|singer|actor|artist|streamer|idol/i.test(
                xProfile.publicIdentity,
              );
            if (isCharHighExposure) {
              highExposureCharacters.push({
                characterId: charId,
                xProfile: xProfile,
              });
            }
          }
        }
      }
      console.log('🌟 高曝光身份检测:', {
        isUserHighExposure,
        highExposureCharactersCount: highExposureCharacters.length,
        highExposureCharactersList: highExposureCharacters.map(c => c.xProfile.xName),
      }); // 如果有高曝光身份，读取近期推文
      let recentTweetsContext = '';
      if (isUserHighExposure || highExposureCharacters.length > 0) {
        const userTweetsId = `userTweets_${currentAccountId || 'main'}`;
        const userTweetsData = await xDb.xUserTweets.get(userTweetsId);
        const recentUserTweets = userTweetsData?.tweets?.slice(0, 3) || [];
        if (recentUserTweets.length > 0 || highExposureCharacters.length > 0) {
          recentTweetsContext = `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━🌟 高曝光身份 - 近期推文上下文
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
以下是高曝光身份的公众人物近期发布的推文，其他用户可能会讨论这些内容：
`; // 添加用户近期推文
          if (isUserHighExposure && recentUserTweets.length > 0) {
            recentTweetsContext += `
【${userXProfileInfo.name} 的近期推文】（${userXProfileInfo.publicIdentity}）
`;
            recentUserTweets.forEach((tweet, index) => {
              recentTweetsContext += `
${index + 1}. "${tweet.content}"`;
              // 添加位置信息
              if (tweet.location) {
                recentTweetsContext += `
- 位置：${tweet.location}`;
              }
              // 添加图片信息
              if (tweet.image) {
                if (tweet.image.type === 'description') {
                  recentTweetsContext += `
- 图片描述：${tweet.image.content}`;
                } else if (tweet.image.type === 'upload') {
                  recentTweetsContext += `
- 附带真实上传图片`;
                } else if (tweet.image.type === 'uploads' && tweet.image.images) {
                  recentTweetsContext += `
- 附带${tweet.image.images.length}张真实上传图片`;
                }
              }
              // 添加链接信息
              if (tweet.link) {
                recentTweetsContext += `
- 附带链接：${tweet.link.title || tweet.link.url || '链接'}`;
                if (tweet.link.description) {
                  recentTweetsContext += `（${tweet.link.description}）`;
                }
              }
              // 添加引用推文信息
              if (tweet.quotedTweet) {
                const quoted = tweet.quotedTweet;
                const quotedType = quoted.type === 'tweet' ? '推文' : '评论';
                recentTweetsContext += `
- 引用转发了 ${quoted.user.name} 的${quotedType}："${quoted.content}"`;
                if (quoted.image) {
                  if (quoted.image.type === 'description') {
                    recentTweetsContext += `（含图片：${quoted.image.content}）`;
                  } else {
                    recentTweetsContext += `（含图片）`;
                  }
                }
              }
              // 添加粉丝群引用信息
              if (tweet.quotedFanGroup) {
                const fanGroup = tweet.quotedFanGroup;
                recentTweetsContext += `
- 转发了粉丝群：${fanGroup.name}（${fanGroup.memberCount || 0}位成员，门槛：${fanGroup.threshold || '无'}）`;
              }
              recentTweetsContext += `
- 发布时间：${tweet.time || '最近'}
- 互动数据：${tweet.stats?.likes || 0}喜欢，${tweet.stats?.retweets || 0}转发，${tweet.stats?.comments || 0}评论
`;
            });
          }
          // 添加高曝光角色的近期推文（如果有）
          for (const { xProfile } of highExposureCharacters) {
            recentTweetsContext += `
【${xProfile.xName} 的信息】（${xProfile.publicIdentity}）
- 可能会发布与其身份相关的推文
- 可能会被其他用户讨论或提及
`;
          }
          recentTweetsContext += `
【高曝光身份推文生成规则】：
- 约20-30%的新推文可以包含对上述推文的讨论、转发、或评论
- 讨论应该是其他普通用户或粉丝的视角，而非本人
- 可以是支持、批评、分析、或单纯的转发评论
- 不要在每条推文中都提及，保持自然和多样性
- 其余70-80%的推文应该是与高曝光身份无关的通用热门内容
- 如果生成讨论推文，要体现公众人物的影响力（较高的互动数据）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
          console.log('📰 已加载高曝光身份近期推文上下文，用户推文数:', recentUserTweets.length);
        }
      }
      // Token计数器
      let tokenCount = 0; // 0. 时间感知（北京时间）
      const now = new Date();
      const beijingTime = new Date(now.getTime() + 8 * 60 * 60 * 1000); // UTC+8
      const timeInfo = `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
⏰ 时间感知
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
当前北京时间：${beijingTime.toLocaleString('zh-CN', {
        timeZone: 'Asia/Shanghai',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        weekday: 'long',
      })}
【时间相关提示】：
- 生成的推文时间应该合理（例如：刚刚、1分钟前、5分钟前、1小时前、今天 xx:xx等）
- 不要生成未来时间
- 根据当前时间判断是早晨、中午、下午、晚上、深夜，内容应该符合时段特征
- 周末/工作日的内容风格可以有所不同
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`; // 1. 提示词 + 世界书
      let systemPrompt =
        timeInfo +
        StringBuilders.buildBaseSystemPrompt({
          userPrompt,
          worldSetting,
        });
      tokenCount = TokenUtils.logTokenUsage('推文生成器', '时间感知+基础系统提示词', systemPrompt, tokenCount); // 1.5. 获取适用的世界书内容
      const worldBooksContent = await StringBuilders.getApplicableWorldBooks('feed', {
        boundCharacters,
      });
      if (worldBooksContent) {
        systemPrompt += worldBooksContent;
        tokenCount = TokenUtils.logTokenUsage('推文生成器', '世界书内容', worldBooksContent, tokenCount);
      }
      // 2. 角色定义（推文生成专用）
      systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 核心任务说明 🎯
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
你是X社交平台的内容生成器。请生成两组推文数据：
- "为你推荐"页面（热门有趣内容）
- "正在关注"页面（个人生活日常）
**你只负责生成其他用户的推文，绝不生成用户本人的推文！**

🚨 **重要：你必须只返回有效的JSON格式数据，任何语法错误都会导致系统崩溃！** 🚨
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
【生成要求】：
- 每组生成5-10条推文，内容多样化
- 热门推文5-12条评论，普通推文1-5条，支持多层级楼中楼回复
- **绑定角色可以作为推文发布者**：根据角色设定和兴趣发布独立推文
- **绑定NPC可以作为推文发布者**：根据NPC人设和发帖习惯发布推文
- NPC关系互动：有绑定关系的NPC在角色推文下自然留言，体现关系特点
- 除了绑定角色外，其他用户头像统一：https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg
- 引用推文功能：约20-30%的推文可以使用引用功能，适合表达观点、评论热点、转发有趣内容
【情侣关系与粉丝群体规则】：
${
  userXProfileInfo.verificationType === 'couple' && userXProfileInfo.coupleCharacterName
    ? `- **情侣关系自然化**：用户与${userXProfileInfo.coupleCharacterName}是公开情侣，但这是私人关系
- 情侣角色可以偶尔出现在推文/评论中，但频率要低（建议10-20%概率），保持自然
- 情侣互动应该围绕推文主题，不要每次都强调情侣身份
- 粉丝群体判断：
* 如果用户或情侣角色有明星/网红/公众人物等身份 → 可以生成少量CP粉丝评论（最多1-2条）
* 如果都是普通人身份 → 禁止生成"磕CP""嗑糖"等粉丝向评论，普通情侣不会有粉丝群体`
    : '- **普通情侣关系**：如果生成情侣内容，确保只在适合的场景下出现，且不应有粉丝群体'
}`;
      const coreTaskSection = systemPrompt.substring(
        tokenCount > 0 ? systemPrompt.lastIndexOf('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━') : 0,
      );
      tokenCount = TokenUtils.logTokenUsage('推文生成器', '核心任务说明', coreTaskSection, tokenCount); // 3. 角色资料（推文发布场景）
      const charactersInfo = await StringBuilders.buildCompleteCharacterInfo(
        boundCharacters,
        userXProfileInfo,
        'tweet',
      );
      if (charactersInfo) {
        systemPrompt += charactersInfo;
        tokenCount = TokenUtils.logTokenUsage('推文生成器', '角色资料信息', charactersInfo, tokenCount);
      }
      // 3.3. 角色关系网络（新增）
      const relationshipsInfo = await StringBuilders.buildCharacterRelationships(
        boundCharacters,
        currentAccountId || 'main',
      );
      if (relationshipsInfo) {
        systemPrompt += relationshipsInfo;
        tokenCount = TokenUtils.logTokenUsage('推文生成器', '角色关系网络', relationshipsInfo, tokenCount);
        console.log('💞 已加载角色关系网络信息');
      }
      // 3.5. NPC资料（绑定NPC信息）
      if (boundNPCs.length > 0) {
        const npcSectionStart = systemPrompt.length;
        systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📋 绑定NPC资料
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
以下是与当前用户绑定的NPC，他们可以在推文生成中作为独立用户出现：
`;
        for (const npc of boundNPCs) {
          systemPrompt += `
【NPC基本信息】
- X姓名：${npc.name}
- X句柄：${npc.handle}
- X头像：${npc.avatar}
- 认证状态：false（NPC默认无认证）
【NPC人设】
${npc.personality || '暂无人设描述'}
【发帖习惯】
${npc.postingHabits || '暂无发帖习惯描述'}
【主页内容】
${npc.homepage || '暂无主页内容设置'}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
        }
        systemPrompt += `
【NPC使用规则】：
1. NPC可以作为推文发布者，生成符合其人设和发帖习惯的推文
2. NPC可以在评论区出现，根据其人设进行互动
3. NPC的内容应该围绕其人设和主页内容展开
4. NPC与角色/用户的互动应该自然，不要过于频繁
5. 严格使用NPC的X姓名(${boundNPCs.map(n => n.name).join('、')})、句柄(${boundNPCs.map(n => n.handle).join('、')})和头像
6. NPC认证状态固定为 false
`;
        const npcSection = systemPrompt.substring(npcSectionStart);
        tokenCount = TokenUtils.logTokenUsage('推文生成器', 'NPC资料信息', npcSection, tokenCount);
      }
      // 3.7. 高曝光身份近期推文上下文（如果有）
      if (recentTweetsContext) {
        systemPrompt += recentTweetsContext;
        tokenCount = TokenUtils.logTokenUsage('推文生成器', '高曝光身份推文上下文', recentTweetsContext, tokenCount);
      }
      // 4. 用户资料
      const userConstraintsStart = systemPrompt.length;
      systemPrompt += StringBuilders.buildUniversalConstraints(userXProfileInfo);
      const userConstraints = systemPrompt.substring(userConstraintsStart);
      tokenCount = TokenUtils.logTokenUsage('推文生成器', '用户资料约束', userConstraints, tokenCount);
      systemPrompt += `
【JSON返回格式】：
\`\`\`json
{"forYouTweets": [推文数组], "followingTweets": [推文数组]}
\`\`\`
推文对象结构：
- user: {name, handle, avatar, verified}
- content: 推文文本
- time: 时间描述
- stats: {comments, retweets, likes, views} (纯数字)
- media: [{type:"description", description:"文字描述，至少30字"}] (可选)
- quotedTweet: {type, user, content, time} (可选，约20-30%推文使用)
- comments: [评论数组] (3-8条热门推文，1-4条普通推文)
评论对象结构：
- user: {name, handle, avatar, verified}
- content: 评论文本
- time: 时间描述
- replies: [回复数组] (可选，支持多层级但不超过3层)
- replyTo: "@被回复者句柄" (楼中楼回复时必填)
关键规则：
1. verified字段必须是布尔值(true/false)
2. stats中所有数字必须是纯数字，不带引号
3. 可选字段不使用时完全省略，不要设为null
4. content直接写内容，不用引号包裹`;
      const formatSection = systemPrompt.substring(systemPrompt.lastIndexOf('【JSON返回格式】'));
      tokenCount = TokenUtils.logTokenUsage('推文生成器', 'JSON格式要求', formatSection, tokenCount);
      const messages = [{ role: 'user', content: '请生成新的X社交平台推文数据' }]; // 最终统计
      TokenUtils.logFinalPrompt('推文生成器', systemPrompt, messages[0].content); // 🔧 使用统一的API请求工具
      const aiResponseContent = await APIUtils.sendAIRequest({
        apiConfig,
        systemPrompt,
        messages,
        temperature: 0.8,
      }); // 🔧 使用统一的JSON解析工具
      let newTweetsData = APIUtils.parseJSONResponse(aiResponseContent); // 🔧 使用统一的后处理工具
      newTweetsData = await APIUtils.postProcessData(newTweetsData, userXProfileInfo); // 验证数据格式
      if (!newTweetsData.forYouTweets || !newTweetsData.followingTweets) {
        throw new Error('AI返回的数据格式不正确，缺少必要字段');
      }
      // 为推文添加必要的ID和格式化
      const processTweets = tweets => {
        return tweets.map(tweet => {
          // 确保stats字段存在
          if (!tweet.stats) {
            tweet.stats = {
              comments: tweet.comments?.length || 0,
              retweets: 0,
              likes: 0,
              views: 0,
            };
          }
          // 处理评论数据，添加ID
          if (tweet.comments) {
            tweet.comments = tweet.comments.map(comment => {
              const processedComment = {
                ...comment,
                id: `c_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
              }; // 处理回复数据
              if (comment.replies) {
                processedComment.replies = comment.replies.map(reply => ({
                  ...reply,
                  id: `r_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                }));
              }
              return processedComment;
            });
          }
          return tweet;
        });
      };
      newTweetsData.forYouTweets = processTweets(newTweetsData.forYouTweets);
      newTweetsData.followingTweets = processTweets(newTweetsData.followingTweets); // 为推文分配ID和时间戳
      const timestamp = Date.now();
      newTweetsData.forYouTweets.forEach((tweet, index) => {
        tweet.id = `fy_${timestamp}_${index}`;
        tweet.createdAt = timestamp; // 添加创建时间戳用于动态时间计算
      });
      newTweetsData.followingTweets.forEach((tweet, index) => {
        tweet.id = `fl_${timestamp}_${index}`;
        tweet.createdAt = timestamp; // 添加创建时间戳用于动态时间计算
      }); // 🔧 推进模式：在现有推文前面添加新推文，而不是覆盖
      forYouTweets.unshift(...newTweetsData.forYouTweets);
      followingTweets.unshift(...newTweetsData.followingTweets); // 限制推文总数，避免数据过多（保留最新的50条）
      if (forYouTweets.length > 50) {
        forYouTweets.splice(50);
      }
      if (followingTweets.length > 50) {
        followingTweets.splice(50);
      }
      // 保存推文数据到数据库
      try {
        await xDb.xTweetsData.put({
          id: 'tweets',
          forYouTweets: newTweetsData.forYouTweets,
          followingTweets: newTweetsData.followingTweets,
          lastUpdated: new Date().toISOString(),
        });
      } catch (saveError) {
        console.error('保存推文数据失败:', saveError);
      }
      // 检查是否有人@用户
      const userHandle = userXProfileInfo.handle;
      let mentionFound = false; // 检查"为你推荐"中的推文和评论
      for (const tweet of newTweetsData.forYouTweets) {
        if (tweet.content && tweet.content.includes(userHandle)) {
          mentionFound = true;
          break;
        }
        if (tweet.comments) {
          for (const comment of tweet.comments) {
            if (comment.content && comment.content.includes(userHandle)) {
              mentionFound = true;
              break;
            }
            // 检查回复中的内容
            if (comment.replies) {
              for (const reply of comment.replies) {
                if (reply.content && reply.content.includes(userHandle)) {
                  mentionFound = true;
                  break;
                }
              }
            }
            if (mentionFound) break;
          }
        }
        if (mentionFound) break;
      }
      // 检查"正在关注"中的推文和评论
      if (!mentionFound) {
        for (const tweet of newTweetsData.followingTweets) {
          if (tweet.content && tweet.content.includes(userHandle)) {
            mentionFound = true;
            break;
          }
          if (tweet.comments) {
            for (const comment of tweet.comments) {
              if (comment.content && comment.content.includes(userHandle)) {
                mentionFound = true;
                break;
              }
              // 检查回复中的内容
              if (comment.replies) {
                for (const reply of comment.replies) {
                  if (reply.content && reply.content.includes(userHandle)) {
                    mentionFound = true;
                    break;
                  }
                }
              }
              if (mentionFound) break;
            }
          }
          if (mentionFound) break;
        }
      }
      // 标记新推文（用于动画效果）
      newTweetsData.forYouTweets.forEach(tweet => {
        tweet.isNew = true;
      });
      newTweetsData.followingTweets.forEach(tweet => {
        tweet.isNew = true;
      }); // 重新渲染页面
      renderTweets(forYouTweets, 'for-you-content');
      renderTweets(followingTweets, 'following-content'); // 显示相应的提醒消息
      const isEnglish = currentLanguage === 'en';
      const userAvatar = window.userProfileData?.avatar || 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg';
      if (mentionFound) {
        showPhoneNotification({
          title: 'X',
          message: isEnglish
            ? 'Your feed has been refreshed! Someone mentioned you 🔔'
            : '你的首页已刷新！有人提到你了哦 🔔',
          avatar: userAvatar,
          leftIcon: 'x',
        });
      } else {
        showPhoneNotification({
          title: 'X',
          message: isEnglish ? 'Your feed has been refreshed!' : '你的首页已刷新！',
          avatar: userAvatar,
          leftIcon: 'x',
        });
      }
    } catch (error) {
      console.error('刷新推文失败:', error);
      showXToast(`刷新失败: ${error.message}`, 'error');
    } finally {
      // 停止旋转动画
      refreshBtn.style.animation = '';
      if (spinStyle.parentNode) {
        spinStyle.remove();
      }
    }
  }
  // ▲▲▲ 【主要！！！】第一个情景：推文生成器 ▲▲▲
  // ============================================
  // 底部导航栏提醒点管理
  // ============================================
  // 显示提醒点
  function showNavNotificationDot(page) {
    const dotId = `${page}-notification-dot`;
    const dot = document.getElementById(dotId);
    if (dot) {
      dot.style.display = 'block';
      console.log(`✨ 显示${page}提醒点`);
    }
  }
  // 隐藏提醒点
  function hideNavNotificationDot(page) {
    const dotId = `${page}-notification-dot`;
    const dot = document.getElementById(dotId);
    if (dot) {
      dot.style.display = 'none';
      console.log(`✅ 清除${page}提醒点`);
    }
  }
  // 将函数暴露到全局
  window.showNavNotificationDot = showNavNotificationDot;
  window.hideNavNotificationDot = hideNavNotificationDot; // ============================================
  // 智能刷新主页服务管理
  // ============================================
  let autoRefreshFeedTimer = null;
  let autoRefreshFeedEnabled = false;
  const REFRESH_INTERVAL = 10 * 60 * 1000; // 10分钟
  // 开关智能刷新主页服务
  window.toggleAutoRefreshFeed = async function () {
    autoRefreshFeedEnabled = !autoRefreshFeedEnabled;
    const toggle = document.getElementById('auto-refresh-feed-toggle');
    const circle = toggle.querySelector('.toggle-circle');
    const statusDiv = document.getElementById('auto-refresh-feed-status');
    if (autoRefreshFeedEnabled) {
      // 开启刷新
      toggle.style.backgroundColor = 'var(--x-accent)';
      circle.style.left = '22px';
      statusDiv.style.display = 'block'; // 启动定时器
      startAutoRefreshFeedTimer(); // 保存状态
      await saveAutoRefreshFeedState(true);
      const isEnglish = currentLanguage === 'en';
      showXToast(isEnglish ? 'Auto refresh enabled' : '智能刷新已开启', 'success');
    } else {
      // 关闭刷新
      toggle.style.backgroundColor = '#333';
      circle.style.left = '2px';
      statusDiv.style.display = 'none'; // 停止定时器
      if (autoRefreshFeedTimer) {
        clearInterval(autoRefreshFeedTimer);
        autoRefreshFeedTimer = null;
      }
      // 保存状态
      await saveAutoRefreshFeedState(false);
      const isEnglish = currentLanguage === 'en';
      showXToast(isEnglish ? 'Auto refresh disabled' : '智能刷新已关闭', 'info');
    }
  }; // 启动定时器
  function startAutoRefreshFeedTimer() {
    if (autoRefreshFeedTimer) {
      clearInterval(autoRefreshFeedTimer);
    }
    autoRefreshFeedTimer = setInterval(async () => {
      await runAutoRefresh();
    }, REFRESH_INTERVAL);
    updateNextRefreshTime();
  }
  // 执行自动刷新
  async function runAutoRefresh() {
    try {
      console.log('⏰ [智能刷新] 开始自动刷新主页推文...');
      await refreshXTweets();
      updateNextRefreshTime(); // 显示主页提醒点（如果用户不在主页）
      const currentPage = document.querySelector('.x-page[style*="display: flex"]');
      const isOnHomePage = currentPage && currentPage.id === 'x-home-page';
      if (!isOnHomePage) {
        showNavNotificationDot('home');
      }
      console.log('✅ [智能刷新] 刷新完成');
    } catch (error) {
      console.error('❌ [智能刷新] 自动刷新失败:', error);
    }
  }
  // 更新下次刷新时间显示
  function updateNextRefreshTime() {
    const nextTime = new Date(Date.now() + REFRESH_INTERVAL);
    const timeStr = `${nextTime.getHours().toString().padStart(2, '0')}:${nextTime
      .getMinutes()
      .toString()
      .padStart(2, '0')}`;
    const timeSpan = document.getElementById('next-refresh-time');
    if (timeSpan) {
      timeSpan.textContent = timeStr;
    }
  }
  // 保存刷新状态
  async function saveAutoRefreshFeedState(enabled) {
    try {
      const xDb = getXDB();
      const settingsId = `xSettings_${currentAccountId || 'main'}`;
      let settings = await xDb.xSettings.get(settingsId);
      if (!settings) {
        settings = {
          id: settingsId,
          autoRefreshFeedEnabled: enabled,
          updatedAt: new Date().toISOString(),
        };
      } else {
        settings.autoRefreshFeedEnabled = enabled;
        settings.updatedAt = new Date().toISOString();
      }
      await xDb.xSettings.put(settings);
      console.log(`💾 [智能刷新] 状态已保存: ${enabled ? '开启' : '关闭'}`);
    } catch (error) {
      console.error('保存刷新状态失败:', error);
    }
  }
  // 恢复刷新状态（在初始化时调用）
  async function restoreAutoRefreshFeedState() {
    try {
      const xDb = getXDB();
      const settingsId = `xSettings_${currentAccountId || 'main'}`;
      const settings = await xDb.xSettings.get(settingsId);
      if (settings && settings.autoRefreshFeedEnabled) {
        console.log('🔄 [智能刷新] 检测到已保存的开启状态，正在恢复...'); // 延迟1秒后启动，确保UI已加载
        setTimeout(() => {
          const toggle = document.getElementById('auto-refresh-feed-toggle');
          if (toggle) {
            autoRefreshFeedEnabled = false; // 先设为false，让toggle函数切换
            window.toggleAutoRefreshFeed();
          }
        }, 1000);
      } else {
        console.log('ℹ️ [智能刷新] 未检测到开启状态，保持关闭');
      }
    } catch (error) {
      console.error('恢复刷新状态失败:', error);
    }
  }
  // ▼▼▼ 【主要！！！】第七个情景：账户主页生成器 ▼▼▼
  // 当前查看的账户数据
  let currentViewingAccount = null; // 推进模式状态
  let isProgressMode = false;
  let progressLongPressTimer = null; // 计算两个字符串的相似度（0-1之间，1表示完全相同）- 账户主页生成器专用
  function calculateSimilarity(str1, str2) {
    if (str1 === str2) return 1;
    if (str1.length === 0 || str2.length === 0) return 0; // 使用最长公共子序列（LCS）算法的简化版本
    const longer = str1.length > str2.length ? str1 : str2;
    const shorter = str1.length > str2.length ? str2 : str1; // 计算字符匹配度
    let matches = 0;
    const shorterChars = shorter.split('');
    const longerChars = longer.split('');
    shorterChars.forEach(char => {
      const index = longerChars.indexOf(char);
      if (index !== -1) {
        matches++;
        longerChars.splice(index, 1); // 移除已匹配的字符，避免重复计数
      }
    }); // 相似度 = 匹配字符数 / 较长字符串长度
    const similarity = matches / longer.length; // 额外检测：如果较短字符串完全包含在较长字符串中，提高相似度
    if (longer.includes(shorter)) {
      return Math.max(similarity, shorter.length / longer.length);
    }
    return similarity;
  }
  // 打开账户主页
  window.openAccountProfile = async function (accountName, accountHandle, accountAvatar, sourceContext = {}) {
    try {
      console.log(`🔍 正在打开账户主页: ${accountName} (${accountHandle})`);
      console.log('📍 来源信息:', sourceContext); // 先检查数据库中是否有已保存的账户主页数据
      const xDB = getXDB();
      const cleanHandle = accountHandle.replace('@', '');
      const savedProfile = await xDB.xAccountProfiles.get(cleanHandle);
      if (savedProfile) {
        console.log('✅ 找到已保存的账户主页数据'); // 🔄 检查是否是角色账户，如果是则同步最新的X资料信息
        const characterProfile = await xDB.xCharacterProfiles.toArray();
        const matchedCharacter = characterProfile.find(
          cp => cp.xHandle === accountHandle || cp.xHandle === `@${cleanHandle}`,
        );
        if (matchedCharacter) {
          console.log('🔄 [账户主页] 检测到角色账户，同步最新X资料'); // 判断认证类型
          let verificationType = 'verified';
          if (
            window.userProfileData.verificationType === 'couple' &&
            window.userProfileData.coupleCharacterId === matchedCharacter.characterId
          ) {
            verificationType = 'couple';
          }
          // 更新账户基本信息为最新的X资料
          savedProfile.accountInfo = {
            ...savedProfile.accountInfo,
            name: matchedCharacter.xName,
            handle: matchedCharacter.xHandle,
            avatar: matchedCharacter.xAvatar,
            verified: matchedCharacter.xVerified,
            verificationType: matchedCharacter.xVerified ? verificationType : 'none',
            cover:
              matchedCharacter.xCover ||
              savedProfile.accountInfo.cover ||
              'https://i.postimg.cc/tT8Rfsf1/mmexport1759603246385.jpg',
            bio: matchedCharacter.xBio || '',
            publicIdentity: matchedCharacter.publicIdentity || '',
            customTag1: matchedCharacter.customTag1 || null,
            customTag2: matchedCharacter.customTag2 || null,
            followingCount: matchedCharacter.followingCount || savedProfile.accountInfo.followingCount || '',
            followersCount: matchedCharacter.followersCount || savedProfile.accountInfo.followersCount || '',
          }; // 同步更新所有推文、评论、回复中的用户信息
          const updateUserInfo = user => {
            if (user && user.handle === matchedCharacter.xHandle) {
              user.name = matchedCharacter.xName;
              user.avatar = matchedCharacter.xAvatar;
              user.verified = matchedCharacter.xVerified;
              user.verificationType = matchedCharacter.xVerified ? verificationType : 'none';
            }
          }; // 更新推文中的用户信息
          if (savedProfile.tweets) {
            savedProfile.tweets.forEach(tweet => {
              updateUserInfo(tweet.user); // 更新推文评论中的用户信息
              if (tweet.comments) {
                tweet.comments.forEach(comment => {
                  updateUserInfo(comment.user); // 更新楼中楼回复
                  if (comment.replies) {
                    comment.replies.forEach(reply => updateUserInfo(reply.user));
                  }
                });
              }
            });
          }
          // 更新回复记录中的用户信息
          if (savedProfile.accountReplies) {
            savedProfile.accountReplies.forEach(reply => {
              if (reply.accountReply) {
                updateUserInfo(reply.accountReply.user);
              }
            });
          }
          // 保存更新后的数据
          savedProfile.updatedAt = new Date().toISOString();
          await xDB.xAccountProfiles.put(savedProfile);
          console.log('✅ [账户主页] 已同步最新X资料信息');
        }
        // 🆕 重新读取X平台私信记忆（即使是已保存的数据，私信记忆也要实时读取）
        console.log('🔄 [账户主页] 重新读取X平台私信记忆');
        savedProfile.xMessageHistory = await StringBuilders._loadXMessageHistory(accountHandle);
        if (savedProfile.xMessageHistory && savedProfile.xMessageHistory.length > 0) {
          console.log(`✅ [账户主页] 重新读取到 ${savedProfile.xMessageHistory.length} 条私信记忆`);
        } else {
          console.log('ℹ️ [账户主页] 该账户暂无私信记忆');
        }
        console.log('📊 [账户主页] 加载数据统计:', {
          推文数: savedProfile.tweets?.length || 0,
          回复数: savedProfile.accountReplies?.length || 0,
          喜欢数: savedProfile.accountLikes?.length || 0,
          私信数: savedProfile.xMessageHistory?.length || 0,
        });
        currentViewingAccount = savedProfile;
        renderAccountProfile(savedProfile);
        return;
      }
      // 如果没有保存的数据，查询账户数据（传递现有资料）
      const accountData = await queryAccountData(accountName, accountHandle, accountAvatar, sourceContext.existingInfo);
      if (!accountData) {
        showXToast('无法加载账户信息', 'error');
        return;
      }
      // 保存当前查看的账户（附加来源上下文）
      currentViewingAccount = { ...accountData, sourceContext }; // 如果有完整的主页数据，直接显示
      if (accountData.tweets && accountData.tweets.length > 0) {
        renderAccountProfile(accountData);
        return;
      }
      // 否则，调用AI生成账户主页内容
      showXToast('正在生成账户主页...', 'info');
      const profileData = await generateAccountProfileContent(accountData, { sourceContext });
      if (profileData) {
        // 更新账户数据
        currentViewingAccount = { ...accountData, ...profileData };
        console.log('📊 [账户主页] 新生成数据统计:', {
          推文数: profileData.tweets?.length || 0,
          回复数: profileData.accountReplies?.length || 0,
          喜欢数: profileData.accountLikes?.length || 0,
        });
        renderAccountProfile(currentViewingAccount); // 保存到数据库
        await saveAccountProfile(currentViewingAccount);
        showXToast('账户主页已生成并保存', 'success');
      }
    } catch (error) {
      console.error('打开账户主页失败:', error);
      showXToast(`加载失败: ${error.message}`, 'error');
    }
  }; // 查询账户数据（判断是角色/NPC/未知账户）
  // 🎯 已优化：使用统一资料获取系统
  async function queryAccountData(accountName, accountHandle, accountAvatar, existingInfo = {}) {
    console.log(`🔍 [账户查询] 查询账户: ${accountName} (${accountHandle})`);

    // 🆕 检查是否有来自私信名片的现有资料
    if (existingInfo.bio || existingInfo.followersCount || existingInfo.verified !== undefined) {
      console.log('📋 [账户查询] 检测到私信名片的现有资料:', {
        bio: existingInfo.bio,
        followersCount: existingInfo.followersCount,
        verified: existingInfo.verified,
      });
    }

    // 使用统一资料获取系统
    const profile = await StringBuilders.getUnifiedProfile(accountHandle, {
      userProfileInfo: window.userProfileData, // 传递用户资料以检查身份识别
      includeRecentTweets: false, // 不需要推文，主页生成器会单独获取
      includeRelationships: true,
    });
    if (!profile) {
      // 未找到账户，返回未知账户
      console.log('⚠️ 未知账户，将根据基本信息生成:', accountName);
      const unknownAccountData = {
        accountType: 'unknown',
        name: accountName,
        handle: accountHandle,
        avatar: accountAvatar,
        verified: existingInfo.verified !== undefined ? existingInfo.verified : false,
        cover: 'https://i.postimg.cc/tT8Rfsf1/mmexport1759603246385.jpg',
        bio: existingInfo.bio || '',
        publicIdentity: '',
        customTag1: null,
        customTag2: null,
        followingCount: '',
        followersCount: existingInfo.followersCount || '',
      };
      if (existingInfo.bio || existingInfo.followersCount) {
        console.log('✅ 使用来自私信的现有资料:', {
          bio: existingInfo.bio,
          followersCount: existingInfo.followersCount,
          verified: existingInfo.verified,
        });
      }
      return unknownAccountData;
    }
    // 根据账户类型返回对应的数据结构
    console.log(`✅ 识别为 ${profile.type} 账户:`, profile.name, `(${profile.handle})`); // 🆕 统一提取X平台私信记忆（所有账户类型通用）
    let xMessageHistory = [];
    if (profile.type === 'character' && profile.characterData?.xMessageHistory) {
      xMessageHistory = profile.characterData.xMessageHistory;
    } else if (profile.type === 'account' && profile.accountData?.xMessageHistory) {
      xMessageHistory = profile.accountData.xMessageHistory;
    } else if (profile.type === 'npc' && profile.npcData?.xMessageHistory) {
      xMessageHistory = profile.npcData.xMessageHistory;
    } else if (profile.type === 'relationshipNpc' && profile.relationshipData?.xMessageHistory) {
      xMessageHistory = profile.relationshipData.xMessageHistory;
    } else if (profile.type === 'stranger' && profile.accountData?.xMessageHistory) {
      xMessageHistory = profile.accountData.xMessageHistory;
    }
    if (xMessageHistory.length > 0) {
      console.log(`✅ [账户查询] 提取到 ${xMessageHistory.length} 条X平台私信记忆`);
    }
    if (profile.type === 'character') {
      // 角色账户
      // 判断认证类型：检查该角色是否是用户的情侣认证对象
      let verificationType = 'verified'; // 默认为普通认证
      if (
        window.userProfileData.verificationType === 'couple' &&
        window.userProfileData.coupleCharacterId === profile.characterId
      ) {
        verificationType = 'couple'; // 情侣认证
      }

      // 🆕 使用 existingInfo 覆盖部分字段（如果提供）
      const accountData = {
        accountType: 'character',
        name: profile.name,
        handle: profile.handle,
        avatar: profile.avatar,
        verified: existingInfo.verified !== undefined ? existingInfo.verified : profile.verified,
        verificationType: profile.verified ? verificationType : 'none',
        cover: profile.xProfile.xCover || 'https://i.postimg.cc/tT8Rfsf1/mmexport1759603246385.jpg',
        bio: existingInfo.bio || profile.bio, // 🆕 优先使用 existingInfo
        publicIdentity: profile.publicIdentity,
        customTag1: profile.xProfile.customTag1 || null,
        customTag2: profile.xProfile.customTag2 || null,
        followingCount: profile.xProfile.followingCount || '',
        followersCount: existingInfo.followersCount || profile.xProfile.followersCount || '', // 🆕 优先使用 existingInfo
        personality: profile.characterData.aiPersona || '',
        characterData: profile.character,
        xProfileData: profile.xProfile,
        characterId: profile.characterId,
        xMessageHistory: xMessageHistory, // 🆕 统一字段
      };

      if (existingInfo.bio || existingInfo.followersCount) {
        console.log('✅ [角色账户] 已应用私信名片的现有资料');
      }

      return accountData;
    } else if (profile.type === 'npc') {
      // NPC账户
      const accountData = {
        accountType: 'npc',
        name: profile.npc.name,
        handle: profile.npc.handle,
        avatar: profile.npc.avatar,
        verified: existingInfo.verified !== undefined ? existingInfo.verified : false,
        cover: 'https://i.postimg.cc/tT8Rfsf1/mmexport1759603246385.jpg',
        bio: existingInfo.bio || '', // 🆕 优先使用 existingInfo
        publicIdentity: '',
        customTag1: null,
        customTag2: null,
        followingCount: '',
        followersCount: existingInfo.followersCount || '', // 🆕 优先使用 existingInfo
        personality: profile.npc.personality || '',
        postingHabits: profile.npc.postingHabits || '',
        homepage: profile.npc.homepage || '',
        npcData: profile.npc,
        xMessageHistory: xMessageHistory, // 🆕 统一字段
      };

      if (existingInfo.bio || existingInfo.followersCount) {
        console.log('✅ [NPC账户] 已应用私信名片的现有资料');
      }

      return accountData;
    } else if (profile.type === 'relationshipNpc') {
      // 关系NPC账户
      const accountData = {
        accountType: 'relationshipNpc',
        name: profile.relationship.npcName,
        handle: profile.relationship.npcHandle,
        avatar: accountAvatar || 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
        verified: existingInfo.verified !== undefined ? existingInfo.verified : false,
        cover: 'https://i.postimg.cc/tT8Rfsf1/mmexport1759603246385.jpg',
        bio: existingInfo.bio || '', // 🆕 优先使用 existingInfo
        publicIdentity: '',
        customTag1: null,
        customTag2: null,
        followingCount: '',
        followersCount: existingInfo.followersCount || '', // 🆕 优先使用 existingInfo
        relationshipType: profile.relationship.relationshipType,
        relationshipDescription: profile.relationship.description || '',
        ownerCharacterId: profile.ownerCharacter.id,
        ownerCharacterName: profile.ownerCharacter.name,
        ownerXProfile: profile.ownerXProfile,
        relationshipData: profile.relationship,
        xMessageHistory: xMessageHistory, // 🆕 统一字段
      };

      if (existingInfo.bio || existingInfo.followersCount) {
        console.log('✅ [关系NPC账户] 已应用私信名片的现有资料');
      }

      return accountData;
    } else if (profile.type === 'account') {
      // X账户（来自xAccountProfiles）
      const accountData = {
        accountType: 'account',
        name: profile.accountInfo.name,
        handle: profile.accountInfo.handle,
        avatar: profile.accountInfo.avatar,
        verified: existingInfo.verified !== undefined ? existingInfo.verified : profile.accountInfo.verified || false,
        verificationType: profile.accountInfo.verificationType || 'none',
        cover: profile.accountInfo.cover || 'https://i.postimg.cc/tT8Rfsf1/mmexport1759603246385.jpg',
        bio: existingInfo.bio || profile.accountInfo.bio || '', // 🆕 优先使用 existingInfo
        publicIdentity: profile.accountInfo.publicIdentity || '',
        customTag1: profile.accountInfo.customTag1 || null,
        customTag2: profile.accountInfo.customTag2 || null,
        followingCount: profile.accountInfo.followingCount || '',
        followersCount: existingInfo.followersCount || profile.accountInfo.followersCount || '', // 🆕 优先使用 existingInfo
        accountInfo: profile.accountInfo,
        xMessageHistory: xMessageHistory, // 🆕 统一字段
      };

      if (existingInfo.bio || existingInfo.followersCount) {
        console.log('✅ [X账户] 已应用私信名片的现有资料');
      }

      return accountData;
    }
    // 兜底：返回未知账户
    return {
      accountType: 'unknown',
      name: accountName,
      handle: accountHandle,
      avatar: accountAvatar,
      verified: existingInfo.verified !== undefined ? existingInfo.verified : false,
      cover: 'https://i.postimg.cc/tT8Rfsf1/mmexport1759603246385.jpg',
      bio: existingInfo.bio || '',
      publicIdentity: '',
      customTag1: null,
      customTag2: null,
      followingCount: '',
      followersCount: existingInfo.followersCount || '',
    };
  }
  // 调用AI生成账户主页内容
  async function generateAccountProfileContent(accountData, options = {}) {
    try {
      const { isProgressMode = false, existingTweets = [], existingReplies = [], sourceContext = {} } = options;
      // 🔧 使用统一的API配置加载工具
      const { apiConfig, xSettings, xDb } = await APIUtils.loadConfigAndSettings();
      const { userPrompt, worldSetting } = xSettings;
      // 构建用户X资料信息
      const userXProfileInfo = StringBuilders.buildUserXProfileInfo(window.userProfileData); // Token计数器
      let tokenCount = 0; // ▼▼▼ 构建SystemPrompt ▼▼▼
      // 1. 提示词 + 世界书
      let systemPrompt = StringBuilders.buildBaseSystemPrompt({ userPrompt, worldSetting });
      tokenCount = TokenUtils.logTokenUsage('账户主页生成器', '基础系统提示词', systemPrompt, tokenCount); // 1.5. 获取适用的世界书内容（如果是角色账户，传入角色ID）
      const worldBooksOptions = { boundCharacters: [] };
      if (accountData.accountType === 'character' && accountData.characterId) {
        worldBooksOptions.boundCharacters = [accountData.characterId];
      }
      const worldBooksContent = await StringBuilders.getApplicableWorldBooks('profile', worldBooksOptions);
      if (worldBooksContent) {
        systemPrompt += worldBooksContent;
        tokenCount = TokenUtils.logTokenUsage('账户主页生成器', '世界书内容', worldBooksContent, tokenCount);
      }
      // 2. 核心任务说明
      if (isProgressMode) {
        systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 核心任务：推进账户主页内容 🎯
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
你需要为X平台账户生成**新的**主页展示内容，包括：
- **新的**推文（3-4条，必须与已有内容完全不同）
- **新的**回复互动（2-3条，必须与已有回复完全不同）
⚠️⚠️⚠️ 【绝对禁止重复】⚠️⚠️⚠️
- 已有的推文和回复会在下方完整展示
- 新推文的内容、话题、观点必须与已有推文**完全不同**
- 新回复必须是全新的互动对象和内容
- 绝对不允许出现相同或高度相似的表达
**推进模式生成策略**：
- 账户基本信息已固定，不需要生成
- 新推文应展现不同的话题维度或新的生活动态
- 可以是时间流逝后的新话题、新想法、新事件
- 新推文的时间应该比已有推文更新
- 严格遵循账户已有的风格和人设，但内容必须全新
- **禁止生成置顶推文**：所有新推文的 pinned 字段必须设置为 false 或不设置
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
      } else {
        systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 核心任务：生成账户主页内容 🎯
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
你需要为X平台账户生成主页展示内容，包括：
- 账户基本信息（若已提供则严格使用，不可修改）
- 最近发布的推文（3-5条）
- 推文下的评论互动
**生成原则**：
- 如果是已知角色账户，必须严格遵循其X资料设定
- 如果是NPC账户，必须严格遵循其人设和发帖习惯
- 如果是角色关系NPC账户，必须体现与所属角色的关系特点，遵循关系设定
- 如果是未知账户，根据昵称、句柄、简介进行合理推断
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
      }
      // 3. 目标账户信息
      systemPrompt += `
【目标账户信息】：
- X姓名：${accountData.name}
- X句柄：${accountData.handle}
- X头像：${accountData.avatar}
- 认证状态：${accountData.verified ? '是' : '否'}
${
  accountData.verified
    ? `- 认证类型：${
        accountData.verificationType === 'couple'
          ? '情侣认证（心形图标）'
          : accountData.verificationType === 'verified'
          ? '普通认证（蓝色勾标）'
          : '普通认证（蓝色勾标）'
      }`
    : ''
}
${accountData.bio ? `- X简介：${accountData.bio}` : ''}
${accountData.publicIdentity ? `- 公众身份：${accountData.publicIdentity}` : ''}
${accountData.personality ? `- 人设描述：${accountData.personality}` : ''}
${accountData.postingHabits ? `- 发帖习惯：${accountData.postingHabits}` : ''}
${accountData.cover ? `- 背景图：${accountData.cover}` : ''}
${
  accountData.customTag1
    ? `- 自定义标签1：${accountData.customTag1.icon} ${accountData.customTag1.text} (${accountData.customTag1.color})`
    : ''
}
${
  accountData.customTag2
    ? `- 自定义标签2：${accountData.customTag2.icon} ${accountData.customTag2.text} (${accountData.customTag2.color})`
    : ''
}
${accountData.followingCount ? `- 正在关注：${accountData.followingCount}` : ''}
${accountData.followersCount ? `- 关注者：${accountData.followersCount}` : ''}
`; // 3.5. 添加账户来源上下文（如果有）
      if (sourceContext && sourceContext.source) {
        systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
【账户来源上下文】
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
        if (sourceContext.source === 'feed') {
          systemPrompt += `来源：首页推文
该账户发布的内容：
"${sourceContext.tweetContent}"
${
  sourceContext.tweetMedia && sourceContext.tweetMedia.length > 0
    ? `媒体内容：${sourceContext.tweetMedia[0].description}\n`
    : ''
}- 发布时间：${sourceContext.tweetTime}
- 互动数据：${sourceContext.tweetStats?.comments || 0}评论，${sourceContext.tweetStats?.likes || 0}喜欢，${
            sourceContext.tweetStats?.retweets || 0
          }转发
**生成要求**：
- 基于该账户发布的内容，推断其兴趣、话题偏好和发帖风格
- 生成的主页推文应该与这条推文风格一致
- 可以生成主题相关但不重复的推文内容`;
        } else if (sourceContext.source === 'comment') {
          systemPrompt += `来源：评论区
该账户发表的评论：
"${sourceContext.commentContent}"
${
  sourceContext.commentImage
    ? `评论图片：${
        sourceContext.commentImage.type === 'description' ? sourceContext.commentImage.content : '包含图片'
      }\n`
    : ''
}- 发布时间：${sourceContext.commentTime}
${sourceContext.replyTo ? `- 回复对象：${sourceContext.replyTo}\n` : ''}
**生成要求**：
- 基于该账户发表的评论，推断其互动风格和表达习惯
- 生成的主页推文应该体现类似的表达方式和兴趣点
- 主页推文可以与评论主题相关，但要展现更完整的个人特色`;
        } else if (sourceContext.source === 'search') {
          systemPrompt += `来源：搜索结果
搜索关键词："${sourceContext.searchQuery}"
该账户在搜索结果中的信息：
- 昵称：${accountData.name}
- 句柄：${accountData.handle}
${sourceContext.userBio ? `- 简介：${sourceContext.userBio}\n` : ''}- 认证状态：${
            sourceContext.verified ? '已认证' : '未认证'
          }
**生成要求**：
- 基于搜索关键词和账户基本信息，推断账户特点和内容方向
- 生成的推文应该与搜索关键词"${sourceContext.searchQuery}"有一定相关性
- 确保账户特点与简介、昵称、句柄相符`;
        } else if (sourceContext.source === 'dm' || sourceContext.source === 'dm_quote_profile') {
          const sourceName = sourceContext.source === 'dm' ? '私信详情页' : '私信中的账户名片';
          systemPrompt += `来源：${sourceName}
该账户的已知信息：
- 昵称：${accountData.name}
- 句柄：${accountData.handle}
${accountData.bio ? `- 简介：${accountData.bio}\n` : ''}${
            accountData.followersCount ? `- 关注者：${accountData.followersCount}\n` : ''
          }- 认证状态：${accountData.verified ? '已认证' : '未认证'}
${sourceContext.messagePreview ? `- 私信预览："${sourceContext.messagePreview}"\n` : ''}`;

          // 🆕 如果是从私信名片点击进入，尝试读取对话记录
          if (sourceContext.source === 'dm_quote_profile' && sourceContext.conversationContext) {
            try {
              const { currentConversationHandle, messageId } = sourceContext.conversationContext;
              console.log('📝 [名片生成] 尝试读取对话记录:', currentConversationHandle, '| messageId:', messageId);

              // 构建对话ID并尝试从数据库读取
              const conversationId = `messageConversation_${currentAccountId || 'main'}_${messageId}`;
              console.log('📝 [名片生成] 查询对话ID:', conversationId);
              const savedConversation = await xDb.xAccountProfiles.get(conversationId);

              // 🔧 修正：数据保存在 savedConversation.data.messages 中
              if (
                savedConversation &&
                savedConversation.data &&
                savedConversation.data.messages &&
                savedConversation.data.messages.length > 0
              ) {
                console.log(`✅ [名片生成] 找到对话记录，共 ${savedConversation.data.messages.length} 条消息`);

                systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
【私信对话上下文】（该账户在私信中的对话记录）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;

                // 提取最近30条消息作为上下文
                const recentMessages = savedConversation.data.messages.slice(-30);
                let msgCount = 0;

                for (const msg of recentMessages) {
                  const sender = msg.isOwn ? '用户' : accountData.name;
                  let content = '';

                  if (msg.type === 'text') {
                    content = msg.content;
                  } else if (msg.type === 'image') {
                    content = msg.isOwn ? '[用户发送了图片]' : `[图片: ${msg.imageDescription || '图片'}]`;
                  } else if (msg.type === 'voice') {
                    content = `[语音: ${msg.voiceText || '语音消息'}]`;
                  } else if (msg.type === 'sticker') {
                    content = '[表情包]';
                  } else if (msg.type === 'transfer') {
                    const amount = msg.amount ? `$${msg.amount}` : '';
                    const note = msg.note ? ` (${msg.note})` : '';
                    content = `[转账${amount}${note}]`;
                  } else if (msg.type === 'link') {
                    content = `[分享链接: ${msg.title || '链接'}]`;
                  } else if (msg.type === 'quoteTweet') {
                    content = `[转发推文: ${msg.tweet?.content || ''}]`;
                  } else if (msg.type === 'quoteProfile') {
                    // 🆕 特别处理：如果是转发名片，显示详细信息
                    const profile = msg.profile || {};
                    content = `[分享主页: ${profile.name || ''}${profile.bio ? ` - ${profile.bio}` : ''}${
                      profile.followers ? ` (${profile.followers}关注者)` : ''
                    }]`;
                  } else {
                    content = `[${msg.type}消息]`;
                  }

                  if (content) {
                    const displayContent = content.length > 150 ? `${content.substring(0, 150)}...` : content;
                    systemPrompt += `${sender}: ${displayContent}\n`;
                    msgCount++;
                  }

                  if (msgCount >= 30) break;
                }

                systemPrompt += `
⚠️ 重要说明：
- 以上是该账户与用户在私信中的真实对话记录（共${msgCount}条）
- 生成账户主页时，必须基于这些对话内容来推断账户的性格、兴趣和特点
- 生成的推文内容、风格、话题应该与对话中展现的形象高度一致
- 如果对话中提到了具体的事件、话题或兴趣，推文应该体现这些内容
- 如果对话中有转发的账户名片，说明该账户与这些名片账户有关联
- 确保账户主页与私信中的形象完全匹配，不要出现矛盾
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;

                const conversationSection = systemPrompt.substring(systemPrompt.lastIndexOf('【私信对话上下文】'));
                tokenCount = TokenUtils.logTokenUsage(
                  '账户主页生成器',
                  '私信对话上下文',
                  conversationSection,
                  tokenCount,
                );
              } else {
                console.log('ℹ️ [名片生成] 未找到对话记录或对话为空');
                if (savedConversation) {
                  console.log('📋 [名片生成] 对话数据结构:', {
                    hasData: !!savedConversation.data,
                    hasMessages: !!savedConversation.data?.messages,
                    messageCount: savedConversation.data?.messages?.length || 0,
                  });
                } else {
                  console.log('📋 [名片生成] 数据库中未找到该对话ID的记录');
                }
              }
            } catch (error) {
              console.error('❌ [名片生成] 读取对话记录失败:', error);
            }
          }

          systemPrompt += `
**生成要求**：
- ${accountData.bio ? '已有简介，必须严格使用，不可修改' : '需要生成符合该账户特点的简介'}
- ${
            accountData.followersCount
              ? `已有关注者数量(${accountData.followersCount})，必须使用，不可修改`
              : '需要生成合理的关注者数量（100-5000之间）'
          }
- 生成的推文内容要与已有信息（简介、私信内容等）保持一致
- ${
            sourceContext.source === 'dm_quote_profile' && sourceContext.conversationContext
              ? '特别注意：生成的账户主页必须与上述私信对话中展现的性格、兴趣、话题完全一致'
              : '确保账户形象真实可信，符合其在私信中展现的特点'
          }`;
        }
        systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
        const contextSection = systemPrompt.substring(systemPrompt.lastIndexOf('【账户来源上下文】'));
        tokenCount = TokenUtils.logTokenUsage('账户主页生成器', '账户来源上下文', contextSection, tokenCount);
      }
      // 4. 账户类型特定要求
      if (accountData.accountType === 'character') {
        systemPrompt += `
【角色账户特殊要求】：
- **严格遵守**：所有已提供的X资料信息必须完全一致，不得修改
- 推文内容要符合角色人设和性格特点
- 评论互动要体现角色的社交风格
- 如有NPC关系，可在推文/评论中自然体现`;
      } else if (accountData.accountType === 'npc') {
        systemPrompt += `
【NPC账户特殊要求】：
- **严格遵守**：使用NPC的姓名、句柄、头像、人设
- 推文内容符合NPC的发帖习惯和主页内容设置
- 评论互动符合NPC的性格特点`;
      } else if (accountData.accountType === 'relationshipNpc') {
        systemPrompt += `
【角色关系NPC账户特殊要求】：
- **严格遵守**：使用NPC的姓名（${accountData.name}）和句柄（${accountData.handle}）
- 该NPC与角色 ${accountData.ownerCharacterName} (${accountData.ownerXProfile.xName} - ${
          accountData.ownerXProfile.xHandle
        }) 的关系：${accountData.relationshipType}
${accountData.relationshipDescription ? `- 关系描述：${accountData.relationshipDescription}` : ''}
- 推文内容应体现这种关系特点，可能会提及或艾特 ${accountData.ownerXProfile.xHandle}
- 生成的推文和互动要符合该NPC与角色的关系设定
- 评论区可能出现 ${accountData.ownerXProfile.xName} 的互动，要体现两者的关系
- 如未提供bio、关注者数等信息，由AI根据NPC特点和关系合理补充`;
      } else {
        systemPrompt += `
【未知账户生成要求】：
- 根据提供的昵称、句柄、简介推断账户特点
- 生成合理的推文内容和互动风格
- 保持账户身份的一致性`;
      }
      const accountInfoSection = systemPrompt.substring(systemPrompt.indexOf('【目标账户信息】'));
      tokenCount = TokenUtils.logTokenUsage('账户主页生成器', '账户信息与要求', accountInfoSection, tokenCount); // 4.3. 如果是关系NPC账户，添加所属角色的详细资料
      if (accountData.accountType === 'relationshipNpc' && accountData.ownerCharacterId) {
        const mainDB = getDB();
        const allChats = await mainDB.chats.toArray();
        const ownerCharacter = allChats.find(c => c.id === accountData.ownerCharacterId);
        const ownerXProfile = accountData.ownerXProfile;
        if (ownerCharacter && ownerXProfile) {
          let ownerInfo = `
【所属角色详细资料】（该NPC的关系对象）：
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
- 角色本名：${ownerCharacter.name}
- 角色人设：${ownerCharacter.settings.aiPersona || '无特定人设'}
- X平台身份（必须严格使用）：
* X用户名：${ownerXProfile.xName}
* X句柄：${ownerXProfile.xHandle}
* X头像：${ownerXProfile.xAvatar}
* 认证状态：${ownerXProfile.xVerified ? '是' : '否'}`;
          if (ownerXProfile.xBio) ownerInfo += `\n * X简介：${ownerXProfile.xBio}`;
          if (ownerXProfile.publicIdentity) ownerInfo += `\n * 公众身份：${ownerXProfile.publicIdentity}`;
          ownerInfo += `
- 该NPC（${accountData.name}）与角色（${ownerXProfile.xName}）的关系：${accountData.relationshipType}
${accountData.relationshipDescription ? `- 关系详情：${accountData.relationshipDescription}` : ''}
【关系互动要求】：
- 推文内容应自然体现与 ${ownerXProfile.xName} (${ownerXProfile.xHandle}) 的关系
- ${ownerXProfile.xName} 可能在评论区出现，互动要符合双方关系设定
- 必须严格使用 ${ownerXProfile.xName} 的X平台身份信息
- 可以提及或艾特 ${ownerXProfile.xHandle}，但不要过度频繁
- 保持该NPC独立的个性，不要完全依附于角色
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
          systemPrompt += ownerInfo;
          tokenCount = TokenUtils.logTokenUsage('账户主页生成器', '关系NPC-所属角色资料', ownerInfo, tokenCount); // 如果所属角色有NPC关系列表，也要加载
          if (ownerXProfile.relationships && ownerXProfile.relationships.length > 0) {
            let otherNpcsInfo = `
【所属角色的其他NPC关系】（可能在互动中出现）：
`;
            ownerXProfile.relationships.forEach(rel => {
              // 跳过当前NPC自己
              if (rel.npcHandle !== accountData.handle) {
                otherNpcsInfo += `
- ${rel.npcName} (${rel.npcHandle}): ${rel.relationshipType}`;
                if (rel.description) otherNpcsInfo += ` - ${rel.description}`;
              }
            });
            otherNpcsInfo += `
注意：这些NPC也可能出现在评论区，要体现各自与 ${ownerXProfile.xName} 的关系特点。
`;
            systemPrompt += otherNpcsInfo;
            tokenCount = TokenUtils.logTokenUsage('账户主页生成器', '关系NPC-其他NPC关系', otherNpcsInfo, tokenCount);
          }
          // 如果所属角色有角色关系网络，也要加载
          const ownerRelationshipsInfo = await StringBuilders.buildCharacterRelationships(
            [accountData.ownerCharacterId],
            currentAccountId || 'main',
          );
          if (ownerRelationshipsInfo) {
            systemPrompt += `
【所属角色的角色关系网络】（可能在互动中出现）：
${ownerRelationshipsInfo}
`;
            tokenCount = TokenUtils.logTokenUsage(
              '账户主页生成器',
              '关系NPC-角色关系网络',
              ownerRelationshipsInfo,
              tokenCount,
            );
          }
        }
      }
      // 4.4. 如果是角色账户，添加角色关系网络和关系角色的详细资料
      if (accountData.accountType === 'character' && accountData.characterId) {
        const relationshipsInfo = await StringBuilders.buildCharacterRelationships(
          [accountData.characterId],
          currentAccountId || 'main',
        );
        if (relationshipsInfo) {
          systemPrompt += relationshipsInfo;
          tokenCount = TokenUtils.logTokenUsage('账户主页生成器', '角色关系网络', relationshipsInfo, tokenCount); // 获取关系网络中涉及的其他角色的完整资料
          try {
            const mainDB = getDB();
            const currentAccount = currentAccountId || 'main';
            const dataId = `xCharacterRelationships_${currentAccount}`;
            const relationshipRecord = await xDb.xCharacterRelationships.get(dataId);
            if (relationshipRecord && relationshipRecord.data) {
              const links = relationshipRecord.data.links || [];
              const relatedCharacterIds = new Set(); // 收集所有关系中的其他角色ID
              links.forEach(link => {
                if (link.charA === accountData.characterId) {
                  relatedCharacterIds.add(link.charB);
                } else if (link.charB === accountData.characterId) {
                  relatedCharacterIds.add(link.charA);
                }
              });
              if (relatedCharacterIds.size > 0) {
                const allChats = await mainDB.chats.toArray();
                const allXProfiles = await xDb.xCharacterProfiles.toArray();
                let relatedCharsInfo = `
【关系角色详细资料】（可能出现在评论或互动中的角色）：
`;
                for (const charId of relatedCharacterIds) {
                  const charData = allChats.find(c => c.id === charId);
                  const xProfile = allXProfiles.find(p => p.characterId === charId);
                  if (charData && xProfile) {
                    relatedCharsInfo += `
- 角色名：${charData.name}
人设：${charData.settings.aiPersona || '无特定人设'}
X平台身份（必须严格使用）：
- X用户名：${xProfile.xName}
- X句柄：${xProfile.xHandle}
- X头像：${xProfile.xAvatar}
- 认证状态：${xProfile.xVerified ? '是' : '否'}`;
                    if (xProfile.xBio) relatedCharsInfo += `\n - X简介：${xProfile.xBio}`;
                    if (xProfile.publicIdentity) relatedCharsInfo += `\n - 公众身份：${xProfile.publicIdentity}`;
                    relatedCharsInfo += `\n`;
                  }
                }
                relatedCharsInfo += `
【关系角色互动要求】：
- 关系角色可能在推文评论或回复中出现，体现彼此的关系
- 必须严格使用上述X平台身份信息（xName、xHandle、xAvatar等）
- 互动内容要符合角色人设和关系设定
- 保持各角色身份的一致性和准确性
`;
                systemPrompt += relatedCharsInfo;
                tokenCount = TokenUtils.logTokenUsage(
                  '账户主页生成器',
                  '关系角色详细资料',
                  relatedCharsInfo,
                  tokenCount,
                );
              }
            }
          } catch (error) {
            console.error('获取关系角色详细资料失败:', error);
          }
        }
      }
      // 4.6. 如果是推进模式，添加现有内容作为上下文
      if (isProgressMode && (existingTweets.length > 0 || existingReplies.length > 0)) {
        systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
【已有内容上下文】- 绝对禁止重复以下内容
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
⚠️ 以下是该账户的所有已有推文和回复，生成新内容时必须**完全避开**这些话题和表达：
**已有推文（共${existingTweets.length}条）**：
`; // 显示所有已有推文，不再限制数量
        existingTweets.forEach((tweet, index) => {
          systemPrompt += `
${index + 1}. "${tweet.content}"
- 时间：${tweet.time}
- 互动：${tweet.stats.comments || 0}评论，${tweet.stats.likes || 0}喜欢
${tweet.media && tweet.media.length > 0 ? ` - 媒体：${tweet.media[0].description}\n` : ''}`;
        });
        if (existingReplies.length > 0) {
          systemPrompt += `
**已有回复（共${existingReplies.length}条）**：
`; // 显示所有已有回复
          existingReplies.forEach((reply, index) => {
            systemPrompt += `
${index + 1}. 回复了${reply.type === 'tweet' ? '推文' : '评论'}: "${reply.accountReply.content}"
- 时间：${reply.accountReply.time}`;
          });
        }
        systemPrompt += `
🚫🚫🚫 【重复检测清单】🚫🚫🚫
- 上述${existingTweets.length}条推文的内容、话题、观点都已被使用
- 新推文必须是**全新的话题**或**不同角度的观点**
- 不要生成任何与上述内容相似度超过30%的推文
- 时间设置必须比最新推文（${existingTweets[0]?.time || '未知'}）更新
- 保持风格一致，但内容必须创新
**新内容生成方向建议**：
- 探索完全不同的生活话题或兴趣领域
- 展现不同时间段的新想法或新发现
- 基于人设生成全新角度的内容
- 避免重复已有推文的关键词和主题
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
        const existingContentSection = systemPrompt.substring(systemPrompt.indexOf('【已有内容上下文】'));
        tokenCount = TokenUtils.logTokenUsage('账户主页生成器', '已有内容上下文', existingContentSection, tokenCount);
      }
      // 5. 身份约束与禁令（统一结构，分情况处理）
      const userConstraintsStart = systemPrompt.length; // 5.1 首先明确当前正在生成的账户身份
      systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 当前生成账户
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
正在生成：${accountData.name} (${accountData.handle}) 的账户主页
账户类型：${
        accountData.accountType === 'character'
          ? '角色账户'
          : accountData.accountType === 'npc'
          ? 'NPC账户'
          : accountData.accountType === 'relationshipNpc'
          ? `角色关系NPC账户（与 ${accountData.ownerCharacterName} 的关系NPC）`
          : '未知账户'
      }
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`; // 5.2 根据账户类型和身份识别情况，提供相关身份信息
      if (accountData.accountType === 'character' && accountData.characterId) {
        // 角色账户：检查是否知道用户身份
        const knowsUserIdentity = userXProfileInfo.knownIdentityCharacters.includes(accountData.characterId);
        if (knowsUserIdentity) {
          // 情况A：角色知道用户 → 提供用户X资料 + 角色专属用户人设 + 用户近期推文
          const knowsUserStart = systemPrompt.length;
          const verificationDesc =
            {
              verified: '蓝色勾标认证',
              couple: '情侣认证',
              married: '已婚认证',
              vip: 'VIP认证',
            }[userXProfileInfo.verificationType] || '无认证';
          const hasUserPersona = accountData.xProfileData?.userPersona && accountData.xProfileData.userPersona.trim();
          systemPrompt += `
【用户身份信息】该角色认识用户
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
用户X平台资料（仅供参考，严禁假扮）：
- 用户名：${userXProfileInfo.name}
- 用户句柄：${userXProfileInfo.handle}
- 认证状态：${verificationDesc}
${userXProfileInfo.publicIdentity ? `- 公众身份：${userXProfileInfo.publicIdentity}` : ''}
${userXProfileInfo.bio ? `- 个人简介：${userXProfileInfo.bio}` : ''}
`; // 读取用户的最近5条推文
          try {
            const userTweetsId = `userTweets_${currentAccountId || 'main'}`;
            const userTweetsData = await xDb.xUserTweets.get(userTweetsId);
            const recentUserTweets = userTweetsData?.tweets?.slice(0, 5) || [];
            if (recentUserTweets.length > 0) {
              systemPrompt += `
用户近期推文（${recentUserTweets.length}条）：
`;
              recentUserTweets.forEach((tweet, index) => {
                systemPrompt += `
${index + 1}. "${tweet.content}"
- 时间：${tweet.time || '最近'}
- 互动：${tweet.stats?.likes || 0}喜欢，${tweet.stats?.retweets || 0}转发，${tweet.stats?.comments || 0}评论
${
  tweet.image
    ? ` - 媒体：${tweet.image.type === 'description' ? tweet.image.content.substring(0, 50) + '...' : '包含图片'}\n`
    : ''
}`;
              });
            }
          } catch (error) {
            console.warn('读取用户推文失败:', error);
          }
          systemPrompt += `
该角色了解的用户信息：
${
  hasUserPersona
    ? accountData.xProfileData.userPersona
    : '⚠️ 未设置用户人设 - 该角色只知道用户的基本X平台信息（上述资料），不了解用户的私人信息、性格特点或两者之间的具体关系。'
}
🚫 【关键约束】
${
  hasUserPersona
    ? `- 该角色可以在推文中提及或艾特用户 ${userXProfileInfo.handle}，也可以讨论用户的推文
- 但评论区不能出现用户 ${userXProfileInfo.name} (${userXProfileInfo.handle}) 的发言
- 所有评论必须是虚构的普通用户，不得使用用户的名称或句柄`
    : `- 该角色可以在推文中提及用户 ${userXProfileInfo.handle}（基于基本认识），也可以讨论用户的推文
- 但不要捏造或推断两者的具体关系（如情侣、伴侣、家人等）
- 评论区绝对禁止出现用户 ${userXProfileInfo.name} (${userXProfileInfo.handle}) 的发言
- 所有评论必须是虚构的普通用户，不得使用用户的名称或句柄
- ⚠️ 重要：未设置用户人设意味着不能假设两者有特殊关系`
}
- ${accountData.name} 和 ${userXProfileInfo.name} 是两个完全独立的不同个体
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
          const knowsUserInfo = systemPrompt.substring(knowsUserStart);
          tokenCount = TokenUtils.logTokenUsage('账户主页生成器', '角色认识用户-资料与推文', knowsUserInfo, tokenCount);
        } else {
          // 情况B：角色不知道用户 → 只提供用户X平台公开资料
          systemPrompt += `
【用户身份信息】该角色不认识用户
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
用户X平台公开资料（仅供参考，禁止假扮）：
- 用户名：${userXProfileInfo.name}
- 用户句柄：${userXProfileInfo.handle}
${userXProfileInfo.publicIdentity ? `- 公众身份：${userXProfileInfo.publicIdentity}` : ''}
身份关系：
- ${accountData.name} 不知道用户的真实身份
- ${accountData.name} 和 ${userXProfileInfo.name} 是完全独立的不同个体
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
        }
      } else {
        // 非角色账户（NPC/未知）：检测是否提及用户或角色的X昵称和句柄
        const accountTexts = [
          accountData.name || '', // 账户昵称
          accountData.handle || '', // 账户句柄
          accountData.bio || '', // 账户简介
          accountData.publicIdentity || '',
          accountData.personality || '',
          accountData.postingHabits || '',
          accountData.homepage || '',
        ].join(' '); // 检测是否提及用户的X昵称或句柄
        const mentionsUser =
          accountTexts.includes(userXProfileInfo.name) || // 用户X昵称
          accountTexts.includes(userXProfileInfo.handle) || // 用户句柄（含@）
          accountTexts.includes(userXProfileInfo.handle.replace('@', '')); // 用户句柄（不含@）
        // 检测是否提及角色的X昵称或句柄
        const mainDB = getDB();
        const allChats = await mainDB.chats.toArray();
        const allXProfiles = await xDb.xCharacterProfiles.toArray();
        const mentionedCharacters = [];
        for (const xProfile of allXProfiles) {
          // 只基于X平台的昵称和句柄进行匹配
          if (
            accountTexts.includes(xProfile.xName) || // 角色X昵称
            accountTexts.includes(xProfile.xHandle) || // 角色句柄（含@）
            accountTexts.includes(xProfile.xHandle.replace('@', '')) // 角色句柄（不含@）
          ) {
            const character = allChats.find(c => c.id === xProfile.characterId);
            if (character) {
              mentionedCharacters.push({ character, xProfile });
            }
          }
        }
        if (mentionsUser || mentionedCharacters.length > 0) {
          // 情况C：账户资料提及用户/角色 → 提供X平台公开资料 + 近期推文
          const mentionedInfoStart = systemPrompt.length;
          systemPrompt += `
【提及的身份信息】该账户资料提及以下身份
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
          if (mentionsUser) {
            const verificationDesc =
              {
                verified: '蓝色勾标认证',
                couple: '情侣认证',
                married: '已婚认证',
                vip: 'VIP认证',
              }[userXProfileInfo.verificationType] || '无认证';
            systemPrompt += `
用户X平台公开资料（仅供参考，禁止假扮）：
- 用户名：${userXProfileInfo.name}
- 用户句柄：${userXProfileInfo.handle}
- 认证状态：${verificationDesc}
${userXProfileInfo.publicIdentity ? `- 公众身份：${userXProfileInfo.publicIdentity}` : ''}
${userXProfileInfo.bio ? `- 个人简介：${userXProfileInfo.bio}` : ''}
`; // 读取用户的最近5条推文
            try {
              const userTweetsId = `userTweets_${currentAccountId || 'main'}`;
              const userTweetsData = await xDb.xUserTweets.get(userTweetsId);
              const recentUserTweets = userTweetsData?.tweets?.slice(0, 5) || [];
              if (recentUserTweets.length > 0) {
                systemPrompt += `
用户近期推文（${recentUserTweets.length}条）：
`;
                recentUserTweets.forEach((tweet, index) => {
                  systemPrompt += `
${index + 1}. "${tweet.content}"
- 时间：${tweet.time || '最近'}
- 互动：${tweet.stats?.likes || 0}喜欢，${tweet.stats?.retweets || 0}转发，${tweet.stats?.comments || 0}评论
${
  tweet.image
    ? ` - 媒体：${tweet.image.type === 'description' ? tweet.image.content.substring(0, 50) + '...' : '包含图片'}\n`
    : ''
}`;
                });
              }
            } catch (error) {
              console.warn('读取用户推文失败:', error);
            }
          }
          if (mentionedCharacters.length > 0) {
            systemPrompt += `
提及的角色X平台资料（仅供参考，禁止假扮）：
`;
            for (const { character, xProfile } of mentionedCharacters) {
              systemPrompt += `
- ${character.name} - X身份：${xProfile.xName} (${xProfile.xHandle})
${xProfile.publicIdentity ? `公众身份：${xProfile.publicIdentity}` : ''}
${xProfile.xBio ? `简介：${xProfile.xBio}` : ''}
`; // 读取角色的最近5条推文（从角色的账户主页数据中）
              try {
                const cleanCharHandle = xProfile.xHandle.replace('@', '');
                const charAccountProfile = await xDb.xAccountProfiles.get(cleanCharHandle);
                const recentCharTweets = charAccountProfile?.tweets?.slice(0, 5) || [];
                if (recentCharTweets.length > 0) {
                  systemPrompt += `
${xProfile.xName} 的近期推文（${recentCharTweets.length}条）：
`;
                  recentCharTweets.forEach((tweet, index) => {
                    systemPrompt += `
${index + 1}. "${tweet.content}"
- 时间：${tweet.time || '最近'}
- 互动：${tweet.stats?.likes || 0}喜欢，${tweet.stats?.retweets || 0}转发
${tweet.media && tweet.media.length > 0 ? ` - 媒体：${tweet.media[0].description.substring(0, 50) + '...'}\n` : ''}`;
                  });
                }
              } catch (error) {
                console.warn(`读取角色 ${xProfile.xName} 的推文失败:`, error);
              }
            }
          }
          systemPrompt += `
互动说明：
- ${accountData.name} 可以讨论或评论上述身份和他们的推文内容
- 可以基于上述推文内容生成相关的互动或回应
- 但 ${accountData.name} 不是上述任何身份，是独立的个体
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
          const mentionedInfo = systemPrompt.substring(mentionedInfoStart);
          tokenCount = TokenUtils.logTokenUsage('账户主页生成器', '提及身份信息与推文', mentionedInfo, tokenCount);
        } else {
          // 情况D：完全无关的陌生账户 → 只提供最基本的用户身份
          systemPrompt += `
【用户身份信息】无关联
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
用户基本标识（仅供参考，禁止假扮）：
- 用户名：${userXProfileInfo.name}
- 用户句柄：${userXProfileInfo.handle}
身份关系：
- ${accountData.name} 与用户无任何关联
- ${accountData.name} 和 ${userXProfileInfo.name} 是完全独立的不同个体
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
        }
      }
      // 5.2.5 🆕 统一添加X平台私信记忆（所有账户类型通用）
      if (accountData.xMessageHistory && accountData.xMessageHistory.length > 0) {
        const xMessageSectionStart = systemPrompt.length;
        console.log(`📝 [账户主页生成器] 开始处理私信记忆，总数: ${accountData.xMessageHistory.length} 条`);
        systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
【X平台私信记忆】（该账户与用户的私信对话记录）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
        const recentXMessages = accountData.xMessageHistory.slice(-50);
        let xMemCount = 0;
        for (const msg of recentXMessages) {
          const sender = msg.isOwn ? '用户' : accountData.name;
          let content = '';
          if (msg.type === 'text') {
            content = msg.content;
          } else if (msg.type === 'image') {
            content = msg.isOwn ? '[用户发送了图片]' : `[图片: ${msg.imageDescription || '图片'}]`;
          } else if (msg.type === 'voice') {
            content = `[语音: ${msg.voiceText || '语音消息'}]`;
          } else if (msg.type === 'sticker') {
            content = '[表情包]';
          } else if (msg.type === 'transfer') {
            const amount = msg.amount ? `$${msg.amount}` : '';
            const note = msg.note ? ` (${msg.note})` : '';
            content = `[转账${amount}${note}]`;
          } else if (msg.type === 'link') {
            content = `[分享链接: ${msg.title || '链接'}]`;
          } else if (msg.type === 'quoteTweet') {
            content = `[转发推文: ${msg.tweet?.content || ''}]`;
          } else if (msg.type === 'quoteProfile') {
            content = `[分享主页: ${msg.profile?.name || ''}]`;
          } else {
            content = `[${msg.type}消息]`;
          }
          if (content) {
            const displayContent = content.length > 80 ? `${content.substring(0, 80)}...` : content;
            systemPrompt += `${sender}: ${displayContent}\n`;
            xMemCount++;
          }
          if (xMemCount >= 50) break;
        }
        systemPrompt += `
⚠️ 重要说明：
- 这些是在X平台私信功能中的真实对话记录
- 无论账户类型（角色/NPC/陌生人），这些对话都是客观存在的
- 生成账户主页时，可以基于这些互动记录展现关系和沟通风格
- 不要在公开推文中直接提及私密的私信内容
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
        const xMessageSection = systemPrompt.substring(xMessageSectionStart);
        const xMessageTokens = TokenUtils.estimateTokens(xMessageSection);
        console.log(
          `📊 [私信] ${
            accountData.accountType === 'character' ? '角色' : accountData.accountType === 'npc' ? 'NPC' : '账户'
          } ${accountData.name}: ${xMemCount}条, ~${xMessageTokens} tokens`,
        );
        tokenCount = TokenUtils.logTokenUsage('账户主页生成器', 'X平台私信记忆', xMessageSection, tokenCount);
      } else {
        console.log(`ℹ️ [账户主页生成器] 该账户无私信记忆数据`);
      }
      // 5.3 统一的核心禁令（所有情况共用）
      systemPrompt += `
🚫🚫🚫 核心禁令（最高优先级）🚫🚫🚫
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
【绝对禁止】假扮用户发布任何内容！
身份识别：
当前账户：${accountData.name} (${accountData.handle})
用户账户：${userXProfileInfo.name} (${userXProfileInfo.handle})
⚠️ 这是两个完全不同的独立个体！
生成规则：
✅ 可以生成：${accountData.name} (${accountData.handle}) 发布的推文/评论/回复
✅ 可以生成：虚构的普通X平台用户（自创用户名和句柄）
❌ 绝对禁止：以 ${userXProfileInfo.name} (${userXProfileInfo.handle}) 的身份发布任何内容
❌ 绝对禁止：在 user.name 或 user.handle 字段中使用用户的名称或句柄
⚠️ 重要提醒：
所有推文的 user 字段必须是 ${accountData.name} (${accountData.handle})
所有评论的 user 字段必须是虚构用户（不得是 ${userXProfileInfo.name} 或 ${userXProfileInfo.handle}）${
        accountData.accountType === 'relationshipNpc'
          ? `
特殊说明：该NPC与 ${accountData.ownerXProfile.xName} (${accountData.ownerXProfile.xHandle}) 有关系，
评论区可以出现 ${accountData.ownerXProfile.xName} 的互动，但必须严格使用其X平台身份信息`
          : ''
      }
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
      const userConstraints = systemPrompt.substring(userConstraintsStart);
      tokenCount = TokenUtils.logTokenUsage('账户主页生成器', '身份约束与核心禁令', userConstraints, tokenCount); // 6. JSON返回格式
      if (isProgressMode) {
        systemPrompt += `
【JSON返回格式】：
\`\`\`json
{"tweets": [推文数组], "accountReplies": [回复数组], "accountLikes": [喜欢数组]}
\`\`\`
**注意**：推进模式下不需要返回accountInfo，只需返回新的推文、回复和喜欢`;
      } else {
        systemPrompt += `
【JSON返回格式】：
\`\`\`json
{"accountInfo": {...}, "tweets": [推文数组], "accountReplies": [回复数组], "accountLikes": [喜欢数组]}
\`\`\`
accountInfo对象结构：
- name, handle, avatar, verified (已提供的必须完全一致)
- verificationType: ${
          accountData.verified
            ? `"${accountData.verificationType || 'verified'}" (必须使用此值，不可修改)`
            : '"none" (不可修改)'
        }
- cover: 可补充
- bio: ${accountData.bio ? `"${accountData.bio}" (已提供，必须使用此值，不可修改)` : '可补充'}
- customTag1/2: {icon, text, color} (可选)
- followingCount: 可补充
- followersCount: ${
          accountData.followersCount ? `"${accountData.followersCount}" (已提供，必须使用此值，不可修改)` : '可补充'
        }`;
      }
      systemPrompt += `
tweets数组（3-5条）：
- user: {name, handle, avatar, verified, verificationType}
- content: 推文文本
- time: 时间描述
- stats: {comments, retweets, likes, views} (纯数字)
- media: [{type:"description", description:"图片描述，至少20字"}] (可选)
- comments: [评论数组] (1-5条，必须生成，10-20%的评论可带图)
- pinned: true/false (可选，第一条推文可置顶，显示"已置顶"标识)
评论对象结构（重要）：
- id: 评论唯一ID（可留空，系统自动生成）
- user: {name, handle, avatar, verified}
- content: 评论文本 (可与sticker同时存在)
- timeOffset: 相对推文发布的分钟数（负数，如-5表示推文发布后5分钟的评论）
- sticker: {url: "表情包链接", description: "表情包描述"} (可选，约10-15%评论使用)
- image: {type: "description", content: "图片文字描述"} (可选，10-20%的评论带图，用于展示图片视频等媒体)
- replies: [楼中楼回复数组] (可选，0-2条)
楼中楼回复对象结构：
- id: 回复唯一ID（可留空，系统自动生成）
- user: {name, handle, avatar, verified}
- content: 回复文本 (可与sticker同时存在)
- timeOffset: 相对推文发布的分钟数（负数，如-10表示推文发布后10分钟的回复）
- sticker: {url: "表情包链接", description: "表情包描述"} (可选，约10-15%回复使用)
- image: {type: "description", content: "图片文字描述"} (可选，少量回复可带图)
- replyTo: "@被回复者句柄" (必填)
accountReplies数组（2-4条，账户的回复记录）：
🚨 重要：每条回复都必须包含完整的三部分数据结构
结构说明：
- type: "tweet" | "comment" (回复推文或回复评论)
- originalTweet: 原始推文对象（🚨必填！无论type是什么）
{
user: {name, handle, avatar, verified},
content: "推文内容",
time: "时间描述",
stats: {comments: 数字, retweets: 数字, likes: 数字, views: 数字},
media: [{type:"description", description:"图片描述"}] //可选
}
- originalComment: 原始评论对象（⚠️仅当type="comment"时必填）
{
user: {name, handle, avatar, verified},
content: "评论内容",
time: "时间描述"
}
- accountReply: 账户的回复对象（🚨必填！）
{
user: {name, handle, avatar, verified}, //必须使用目标账户信息
content: "回复内容",
time: "时间描述",
stats: {comments: 数字, retweets: 数字, likes: 数字, views: 数字}
}
📋 示例1（回复推文）：
{
"type": "tweet",
"originalTweet": {完整推文对象},
"accountReply": {账户回复对象}
}
📋 示例2（回复评论）：
{
"type": "comment",
"originalTweet": {完整推文对象}, ← 必须提供！评论所属的推文
"originalComment": {完整评论对象}, ← 必须提供！被回复的评论
"accountReply": {账户回复对象}
}
accountLikes数组（3-5条，账户喜欢的推文）：
- user: {name, handle, avatar, verified, verificationType}
- content: 推文文本
- time: 时间描述
- stats: {comments, retweets, likes, views} (纯数字)
- media: [{type:"description", description:"图片描述"}] (可选，30-40%的推文可带媒体)
- comments: [评论数组] (1-3条即可，比主页推文评论少一些)
📋 喜欢推文示例：
{
"user": {
"name": "某用户",
"handle": "@someuser",
"avatar": "https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg",
"verified": false
},
"content": "推文内容",
"time": "2小时",
"stats": {
"comments": 45,
"retweets": 128,
"likes": 892,
"views": 12400
},
"comments": [...]
}
⚠️ accountLikes特殊要求：
- 喜欢的推文来自其他用户，不是账户自己的推文
- 推文内容应该与账户的兴趣、身份、人设相关
- 如果是角色账户，喜欢的内容要符合角色性格
- 如果是关系NPC，可以喜欢所属角色的推文
- 推文的互动数据应该合理（likes数应该较高，因为值得被喜欢）
- 时间描述应该是相对时间（如"3小时"、"昨天"、"2天"等）
【表情包使用规则】：
- 表情包仅限使用世界书中提供的真实链接，严禁虚构或编造链接
- 表情包与文字内容可以同时存在，用于增强表达效果
- 使用频率控制在约10-15%的评论和回复中，保持自然
- sticker对象包含url和description两个必需字段

关键规则：
1. accountInfo已提供字段必须与输入完全一致，不得修改
2. 未提供字段由AI合理补充
3. verified必须是布尔值(true/false)
4. 如果该账户在角色X资料或NPC设置中标注为情侣关系，必须设置verificationType为"couple"
5. ${
        isProgressMode
          ? '**禁止生成置顶推文**：所有推文的 pinned 必须为 false 或不设置'
          : '建议将最重要或最新的一条推文设置为pinned: true（置顶）'
      }
6. stats所有数字必须是纯数字，不带引号
7. 每条推文必须包含1-5条评论，评论内容要与推文相关
8. 评论可以包含楼中楼回复（replies数组），形成对话链
9. 🚨 accountReplies必须生成2-4条，每条都必须包含完整数据：
- type="tweet": 必须有 originalTweet + accountReply
- type="comment": 必须有 originalTweet + originalComment + accountReply（三个都要！）
10. accountReplies中的accountReply.user必须使用目标账户的信息
11. 🚨 accountLikes必须生成3-5条，每条都是完整的推文对象：
- 必须包含user、content、time、stats字段
- user不能是目标账户本人（账户不能喜欢自己的推文）
- 推文内容要与账户兴趣相关，体现账户的品味和关注点
12. 除了角色和npc以外所有账号都使用统一头像：https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg
13. 默认背景图：https://i.postimg.cc/tT8Rfsf1/mmexport1759603246385.jpg
14. 🚫 **禁止假扮用户**：绝对不可在user字段使用 ${userXProfileInfo.name} 或 ${
        userXProfileInfo.handle
      }，这是用户身份，不可假扮
15. ${
        accountData.accountType === 'character'
          ? `🚫 **严禁自创角色关系**：除非明确提供的关系信息，不要让目标角色(${accountData.name})在推文/评论中声称与其他角色有特殊关系（如情侣、家人等）。所有评论者必须是虚构用户，不要使用其他已知角色的身份。`
          : accountData.accountType === 'relationshipNpc'
          ? `✅ **关系NPC互动规则**：该NPC与 ${accountData.ownerXProfile.xName} (${accountData.ownerXProfile.xHandle}) 有 ${accountData.relationshipType} 关系。评论区可以出现 ${accountData.ownerXProfile.xName} 的互动，必须严格使用其X平台身份信息。其他评论者应为虚构用户。`
          : '评论者应为虚构的普通用户，保持身份的独立性'
      }
16. sticker字段只能使用世界书中存在的真实链接，禁止虚构`;
      const formatSection = systemPrompt.substring(systemPrompt.lastIndexOf('【JSON返回格式】'));
      tokenCount = TokenUtils.logTokenUsage('账户主页生成器', 'JSON格式要求', formatSection, tokenCount); // ▲▲▲ 构建SystemPrompt ▲▲▲
      const messages = [{ role: 'user', content: `请生成账户 ${accountData.name} (${accountData.handle}) 的主页内容` }]; // 最终统计
      TokenUtils.logFinalPrompt('账户主页生成器', systemPrompt, messages[0].content);
      // 🔧 使用统一的API请求工具
      const aiResponseContent = await APIUtils.sendAIRequest({
        apiConfig,
        systemPrompt,
        messages,
        temperature: 0.7,
      });
      // 🔧 使用统一的JSON解析工具
      let profileData = APIUtils.parseJSONResponse(aiResponseContent);
      // 🔧 使用统一的后处理工具
      profileData = await APIUtils.postProcessData(profileData, userXProfileInfo); // 验证数据格式
      if (isProgressMode) {
        // 推进模式下只需要推文数据
        if (!profileData.tweets) {
          throw new Error('AI返回的数据格式不正确：缺少推文数据');
        }
        // 推进模式：检测并过滤重复推文
        if (existingTweets && existingTweets.length > 0) {
          const newTweets = profileData.tweets || []; // 过滤重复推文
          const filteredTweets = newTweets.filter(newTweet => {
            const newContent = newTweet.content.toLowerCase().trim(); // 检查是否与已有推文重复
            const isDuplicate = existingTweets.some(existingTweet => {
              const existingContent = existingTweet.content.toLowerCase().trim(); // 完全相同
              if (existingContent === newContent) return true; // 计算相似度（使用简单的字符匹配算法）
              const similarity = calculateSimilarity(existingContent, newContent); // 相似度超过70%视为重复
              if (similarity > 0.7) {
                console.log(
                  `🚫 [账户主页推进] 检测到重复推文（相似度${(similarity * 100).toFixed(1)}%）:`,
                  newContent.substring(0, 50),
                );
                return true;
              }
              return false;
            });
            return !isDuplicate;
          });
          const removedCount = newTweets.length - filteredTweets.length;
          if (removedCount > 0) {
            console.log(`🔍 [账户主页推进] 过滤了 ${removedCount} 条重复推文`);
            profileData.tweets = filteredTweets;
          }
          // 如果所有推文都被过滤了，提示错误
          if (filteredTweets.length === 0) {
            throw new Error('AI生成的所有推文都与已有内容重复，请重新生成');
          }
        }
        // 推进模式：检测并过滤重复回复
        if (existingReplies && existingReplies.length > 0 && profileData.accountReplies) {
          const newReplies = profileData.accountReplies || [];
          const filteredReplies = newReplies.filter(newReply => {
            const newContent = newReply.accountReply?.content?.toLowerCase().trim() || '';
            if (!newContent) return true;
            const isDuplicate = existingReplies.some(existingReply => {
              const existingContent = existingReply.accountReply?.content?.toLowerCase().trim() || '';
              if (!existingContent) return false;
              if (existingContent === newContent) return true;
              const similarity = calculateSimilarity(existingContent, newContent);
              if (similarity > 0.7) {
                console.log(
                  `🚫 [账户主页推进] 检测到重复回复（相似度${(similarity * 100).toFixed(1)}%）:`,
                  newContent.substring(0, 50),
                );
                return true;
              }
              return false;
            });
            return !isDuplicate;
          });
          const removedCount = newReplies.length - filteredReplies.length;
          if (removedCount > 0) {
            console.log(`🔍 [账户主页推进] 过滤了 ${removedCount} 条重复回复`);
            profileData.accountReplies = filteredReplies;
          }
        }
      } else {
        // 正常模式需要完整数据
        if (!profileData.accountInfo || !profileData.tweets) {
          throw new Error('AI返回的数据格式不正确');
        }
        // 强制使用正确的 verificationType，防止 AI 错误生成
        if (profileData.accountInfo) {
          const correctVerificationType = accountData.verificationType || 'verified';
          profileData.accountInfo.verificationType = correctVerificationType;
          console.log(`🔒 [账户主页生成] 强制设置账户认证类型: ${correctVerificationType}`);
        }
      }
      // 强制修正所有推文和回复中的 verificationType
      const correctVerificationType = accountData.verificationType || 'verified';
      const accountHandle = accountData.handle;
      let fixedCount = 0; // 修正推文中的认证类型
      if (profileData.tweets && profileData.tweets.length > 0) {
        profileData.tweets.forEach(tweet => {
          if (tweet.user && tweet.user.handle === accountHandle) {
            if (tweet.user.verificationType !== correctVerificationType) {
              tweet.user.verificationType = correctVerificationType;
              fixedCount++;
            }
          }
          // 修正推文评论中的认证类型
          if (tweet.comments && tweet.comments.length > 0) {
            tweet.comments.forEach(comment => {
              if (comment.user && comment.user.handle === accountHandle) {
                if (comment.user.verificationType !== correctVerificationType) {
                  comment.user.verificationType = correctVerificationType;
                  fixedCount++;
                }
              }
              // 修正楼中楼回复中的认证类型
              if (comment.replies && comment.replies.length > 0) {
                comment.replies.forEach(reply => {
                  if (reply.user && reply.user.handle === accountHandle) {
                    if (reply.user.verificationType !== correctVerificationType) {
                      reply.user.verificationType = correctVerificationType;
                      fixedCount++;
                    }
                  }
                });
              }
            });
          }
        });
      }
      // 修正回复记录中的认证类型
      if (profileData.accountReplies && profileData.accountReplies.length > 0) {
        profileData.accountReplies.forEach(replyRecord => {
          if (
            replyRecord.accountReply &&
            replyRecord.accountReply.user &&
            replyRecord.accountReply.user.handle === accountHandle
          ) {
            if (replyRecord.accountReply.user.verificationType !== correctVerificationType) {
              replyRecord.accountReply.user.verificationType = correctVerificationType;
              fixedCount++;
            }
          }
        });
      }
      if (fixedCount > 0) {
        console.log(`🔒 [账户主页生成] 共修正了 ${fixedCount} 处认证类型错误`);
      }
      // 为推文、评论、喜欢分配唯一ID和时间戳
      const timestamp = Date.now();
      profileData.tweets.forEach((tweet, tweetIndex) => {
        // 为推文分配ID（如果没有）
        if (!tweet.id) {
          tweet.id = `account_tweet_${timestamp}_${tweetIndex}`;
        }
        // 为推文添加timestamp（如果没有）
        if (!tweet.timestamp) {
          // 根据索引生成不同的时间戳（越前面的推文越新）
          const hoursAgo = tweetIndex * 2 + Math.floor(Math.random() * 2);
          tweet.timestamp = timestamp - hoursAgo * 60 * 60 * 1000;
        }
        // 确保stats字段存在
        if (!tweet.stats) {
          tweet.stats = {
            comments: tweet.comments?.length || 0,
            retweets: 0,
            likes: 0,
            views: 0,
          };
        }
        // 为评论分配ID和时间戳
        if (tweet.comments && tweet.comments.length > 0) {
          tweet.comments.forEach((comment, commentIndex) => {
            if (!comment.id) {
              comment.id = `account_comment_${timestamp}_${tweetIndex}_${commentIndex}`;
            }
            // 转换timeOffset为实际时间戳
            if (comment.timeOffset !== undefined) {
              comment.timestamp = tweet.timestamp + Math.abs(comment.timeOffset) * 60 * 1000;
              delete comment.timeOffset;
            } else if (!comment.timestamp) {
              // 如果没有timeOffset，随机生成一个时间戳
              comment.timestamp = tweet.timestamp + (5 + Math.random() * 30) * 60 * 1000;
            }
            // 为楼中楼回复分配ID和时间戳
            if (comment.replies && comment.replies.length > 0) {
              comment.replies.forEach((reply, replyIndex) => {
                if (!reply.id) {
                  reply.id = `account_reply_${timestamp}_${tweetIndex}_${commentIndex}_${replyIndex}`;
                }
                // 转换timeOffset为实际时间戳
                if (reply.timeOffset !== undefined) {
                  reply.timestamp = tweet.timestamp + Math.abs(reply.timeOffset) * 60 * 1000;
                  delete reply.timeOffset;
                } else if (!reply.timestamp) {
                  // 回复时间应该比评论晚
                  reply.timestamp = comment.timestamp + (1 + Math.random() * 10) * 60 * 1000;
                }
              });
            }
          });
        }
      }); // 为喜欢的推文分配ID和时间戳
      if (profileData.accountLikes && profileData.accountLikes.length > 0) {
        profileData.accountLikes.forEach((likedTweet, likeIndex) => {
          // 为喜欢的推文分配ID（如果没有）
          if (!likedTweet.id) {
            likedTweet.id = `account_liked_${timestamp}_${likeIndex}`;
          }
          // 为喜欢的推文添加timestamp（如果没有）
          if (!likedTweet.timestamp) {
            // 喜欢的推文时间戳应该比账户推文更早一些
            const daysAgo = likeIndex + 1 + Math.floor(Math.random() * 2);
            likedTweet.timestamp = timestamp - daysAgo * 24 * 60 * 60 * 1000;
          }
          // 确保stats字段存在
          if (!likedTweet.stats) {
            likedTweet.stats = {
              comments: likedTweet.comments?.length || 0,
              retweets: 0,
              likes: 0,
              views: 0,
            };
          }
          // 为喜欢推文的评论分配ID和时间戳
          if (likedTweet.comments && likedTweet.comments.length > 0) {
            likedTweet.comments.forEach((comment, commentIndex) => {
              if (!comment.id) {
                comment.id = `liked_comment_${timestamp}_${likeIndex}_${commentIndex}`;
              }
              // 转换timeOffset为实际时间戳
              if (comment.timeOffset !== undefined) {
                comment.timestamp = likedTweet.timestamp + Math.abs(comment.timeOffset) * 60 * 1000;
                delete comment.timeOffset;
              } else if (!comment.timestamp) {
                comment.timestamp = likedTweet.timestamp + (5 + Math.random() * 30) * 60 * 1000;
              }
            });
          }
        });
      }
      // 显示手机样式通知
      const isEnglish = currentLanguage === 'en';
      const userAvatar = window.userProfileData?.avatar || 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg';
      showPhoneNotification({
        title: 'X',
        message: isEnglish ? 'Account profile has been generated!' : '账户主页已生成！',
        avatar: userAvatar,
        leftIcon: 'x',
      });
      return profileData;
    } catch (error) {
      console.error('生成账户主页内容失败:', error);
      showXToast(`生成失败: ${error.message}`, 'error');
      return null;
    }
  }
  // 渲染账户主页
  function renderAccountProfile(accountData) {
    console.log('渲染账户主页:', accountData); // 填充账户信息
    const accountInfo = accountData.accountInfo || accountData; // 设置导航栏标题和推文数
    document.getElementById('account-profile-nav-name').textContent = accountInfo.name || accountData.name;
    const tweetCount = (accountData.tweets && accountData.tweets.length) || 0;
    document.getElementById('account-profile-nav-count').textContent = `${DataUtils.formatNumber(
      tweetCount,
    )} ${getI18nText('accountPostsCount')}`; // 设置背景图
    const coverImage = document.getElementById('account-cover-image');
    coverImage.style.backgroundImage = `url('${
      accountInfo.cover || accountData.cover || 'https://i.postimg.cc/tT8Rfsf1/mmexport1759603246385.jpg'
    }')`; // 设置头像
    document.getElementById('account-avatar-image').src = accountInfo.avatar || accountData.avatar; // 设置名称
    document.getElementById('account-display-name').textContent = accountInfo.name || accountData.name; // 设置认证徽章（根据认证类型显示不同图标）
    const verifiedBadge = document.getElementById('account-verified-badge');
    const verificationType = accountInfo.verificationType || accountData.verificationType || 'verified';
    if (accountInfo.verified || accountData.verified) {
      // 情侣认证使用心形图标
      if (verificationType === 'couple') {
        verifiedBadge.innerHTML = `
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-text-primary);">
 <g><path d="M16.697 5.5c-1.222-.06-2.679.51-3.89 2.16l-.805 1.09-.806-1.09C9.984 6.01 8.526 5.44 7.304 5.5c-1.243.07-2.349.78-2.91 1.91-.552 1.12-.633 2.78.479 4.82 1.074 1.97 3.257 4.27 7.129 6.61 3.87-2.34 6.052-4.64 7.126-6.61 1.111-2.04 1.03-3.7.477-4.82-.561-1.13-1.666-1.84-2.908-1.91zm4.187 7.69c-1.351 2.48-4.001 5.12-8.379 7.67l-.503.3-.504-.3c-4.379-2.55-7.029-5.19-8.382-7.67-1.36-2.5-1.41-4.86-.514-6.67.887-1.79 2.647-2.91 4.601-3.01 1.651-.09 3.368.56 4.798 2.01 1.429-1.45 3.146-2.1 4.796-2.01 1.954.1 3.714 1.22 4.601 3.01.896 1.81.846 4.17-.514 6.67z"></path></g>
 </svg>
 `;
      } else {
        // 默认蓝色勾标
        verifiedBadge.innerHTML = `
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-accent);">
 <g><path d="M22.25 12c0-1.43-.88-2.67-2.19-3.34.46-1.39.2-2.9-.81-3.91s-2.52-1.27-3.91-.81c-.66-1.31-1.91-2.19-3.34-2.19s-2.67.88-3.33 2.19c-1.4-.46-2.91-.2-3.92.81s-1.26 2.52-.8 3.91c-1.31.67-2.2 1.91-2.2 3.34s.89 2.67 2.2 3.34c-.46 1.39-.21 2.9.8 3.91s2.52 1.27 3.91.81c.67 1.31 1.91 2.19 3.34 2.19s2.68-.88 3.34-2.19c1.39.46 2.9.2 3.91-.81s1.27-2.52.81-3.91c1.31-.67 2.19-1.91 2.19-3.34zm-11.71 4.2L6.8 12.46l1.41-1.42 2.26 2.26 4.8-5.23 1.47 1.36-6.2 6.77z"></path></g>
 </svg>
 `;
      }
      verifiedBadge.style.display = 'inline-flex';
      verifiedBadge.style.alignItems = 'center';
    } else {
      verifiedBadge.style.display = 'none';
    }
    // 设置句柄（添加@前缀）
    const handle = accountInfo.handle || accountData.handle;
    document.getElementById('account-handle-text').textContent = handle.startsWith('@') ? handle : `@${handle}`; // 设置简介
    const bioElement = document.getElementById('account-bio-text');
    if (accountInfo.bio || accountData.bio) {
      bioElement.textContent = accountInfo.bio || accountData.bio;
      bioElement.style.display = 'block';
    } else {
      bioElement.style.display = 'none';
    }
    // 设置自定义标签
    const tagsContainer = document.getElementById('account-tags-container');
    tagsContainer.innerHTML = '';
    const customTag1 = accountInfo.customTag1 || accountData.customTag1;
    const customTag2 = accountInfo.customTag2 || accountData.customTag2;
    if (customTag1 && customTag1.text) {
      const tag1 = document.createElement('div');
      tag1.style.cssText = `display: flex; align-items: center; gap: 4px; color: ${
        customTag1.color || '#71767b'
      }; font-size: 15px;`;
      tag1.innerHTML = `<span>${customTag1.icon || ''}</span><span>${customTag1.text}</span>`;
      tagsContainer.appendChild(tag1);
    }
    if (customTag2 && customTag2.text) {
      const tag2 = document.createElement('div');
      tag2.style.cssText = `display: flex; align-items: center; gap: 4px; color: ${
        customTag2.color || '#71767b'
      }; font-size: 15px;`;
      tag2.innerHTML = `<span>${customTag2.icon || ''}</span><span>${customTag2.text}</span>`;
      tagsContainer.appendChild(tag2);
    }
    // 设置关注数据
    document.getElementById('account-following-count').textContent =
      accountInfo.followingCount || accountData.followingCount || '0';
    document.getElementById('account-followers-count').textContent =
      accountInfo.followersCount || accountData.followersCount || '0'; // 初始化关注按钮文本
    const followBtn = document.getElementById('account-follow-btn');
    if (followBtn && followBtn.textContent.includes('关注')) {
      followBtn.textContent = getI18nText('accountFollow');
    } else if (followBtn && followBtn.textContent.includes('Following')) {
      followBtn.textContent = getI18nText('accountFollow');
    }
    // 渲染推文
    const tweetsContainer = document.getElementById('account-tweets-container');
    tweetsContainer.innerHTML = '';
    if (accountData.tweets && accountData.tweets.length > 0) {
      accountData.tweets.forEach(tweet => {
        const tweetElement = createAccountTweetElement(tweet, accountInfo);
        tweetsContainer.appendChild(tweetElement);
      });
    } else {
      tweetsContainer.innerHTML =
        '<div style="padding: 40px; text-align: center; color: #71767b;">该账户还没有发布推文</div>';
    }
    // 显示账户主页
    document.querySelectorAll('.x-page').forEach(page => (page.style.display = 'none'));
    document.getElementById('account-profile-page').style.display = 'flex';
    showXToast(`已加载 ${accountInfo.name || accountData.name} 的主页`, 'success');
  }
  // 创建账户回复元素
  function createAccountReplyElement(reply) {
    const replyEl = document.createElement('div');
    replyEl.style.cssText = 'border-bottom: 1px solid #2f3336;';
    const accountInfo = currentViewingAccount.accountInfo || currentViewingAccount; // 数据完整性检查
    if (!reply || !reply.type) {
      console.warn('⚠️ [账户回复] 回复数据不完整:', reply);
      replyEl.innerHTML = '<div style="padding: 16px; color: #71767b;">回复数据不完整</div>';
      return replyEl;
    }
    // 构建账户认证图标HTML
    let accountVerifiedBadgeHtml = '';
    if (accountInfo.verified) {
      if (accountInfo.verificationType === 'couple') {
        accountVerifiedBadgeHtml =
          '<svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: var(--x-text-primary);"><g><path d="M16.697 5.5c-1.222-.06-2.679.51-3.89 2.16l-.805 1.09-.806-1.09C9.984 6.01 8.526 5.44 7.304 5.5c-1.243.07-2.349.78-2.91 1.91-.552 1.12-.633 2.78.479 4.82 1.074 1.97 3.257 4.27 7.129 6.61 3.87-2.34 6.052-4.64 7.126-6.61 1.111-2.04 1.03-3.7.477-4.82-.561-1.13-1.666-1.84-2.908-1.91zm4.187 7.69c-1.351 2.48-4.001 5.12-8.379 7.67l-.503.3-.504-.3c-4.379-2.55-7.029-5.19-8.382-7.67-1.36-2.5-1.41-4.86-.514-6.67.887-1.79 2.647-2.91 4.601-3.01 1.651-.09 3.368.56 4.798 2.01 1.429-1.45 3.146-2.1 4.796-2.01 1.954.1 3.714 1.22 4.601 3.01.896 1.81.846 4.17-.514 6.67z"></path></g></svg>';
      } else {
        accountVerifiedBadgeHtml =
          '<svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: var(--x-accent);"><g><path d="M22.25 12c0-1.43-.88-2.67-2.19-3.34.46-1.39.2-2.9-.81-3.91s-2.52-1.27-3.91-.81c-.66-1.31-1.91-2.19-3.34-2.19s-2.67.88-3.33 2.19c-1.4-.46-2.91-.2-3.92.81s-1.26 2.52-.8 3.91c-1.31.67-2.2 1.91-2.2 3.34s.89 2.67 2.2 3.34c-.46 1.39-.21 2.9.8 3.91s2.52 1.27 3.91.81c.67 1.31 1.91 2.19 3.34 2.19s2.68-.88 3.34-2.19c1.39.46 2.9.2 3.91-.81s1.27-2.52.81-3.91c1.31-.67 2.19-1.91 2.19-3.34zm-11.71 4.2L6.8 12.46l1.41-1.42 2.26 2.26 4.8-5.23 1.47 1.36-6.2 6.77z"></path></g></svg>';
      }
    }
    if (reply.type === 'tweet') {
      // 数据完整性检查
      if (!reply.originalTweet || !reply.originalTweet.user || !reply.accountReply) {
        console.warn('⚠️ [账户回复] 推文回复数据不完整:', reply);
        replyEl.innerHTML = '<div style="padding: 16px; color: #71767b;">推文回复数据不完整</div>';
        return replyEl;
      }
      // 回复推文的样式
      const originalUser = reply.originalTweet.user;
      const accountReply = reply.accountReply; // 构建原推文作者认证图标
      let originalVerifiedHtml = '';
      if (originalUser.verified) {
        originalVerifiedHtml =
          '<svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: var(--x-accent);"><g><path d="M22.25 12c0-1.43-.88-2.67-2.19-3.34.46-1.39.2-2.9-.81-3.91s-2.52-1.27-3.91-.81c-.66-1.31-1.91-2.19-3.34-2.19s-2.67.88-3.33 2.19c-1.4-.46-2.91-.2-3.92.81s-1.26 2.52-.8 3.91c-1.31.67-2.2 1.91-2.2 3.34s.89 2.67 2.2 3.34c-.46 1.39-.21 2.9.8 3.91s2.52 1.27 3.91.81c.67 1.31 1.91 2.19 3.34 2.19s2.68-.88 3.34-2.19c1.39.46 2.9.2 3.91-.81s1.27-2.52.81-3.91c1.31-.67 2.19-1.91 2.19-3.34zm-11.71 4.2L6.8 12.46l1.41-1.42 2.26 2.26 4.8-5.23 1.47 1.36-6.2 6.77z"></path></g></svg>';
      }
      replyEl.innerHTML = `
 <div style="padding: 12px 16px;">

 <div style="display: flex; gap: 12px; margin-bottom: 8px;">
 <img src="${originalUser.avatar}" style="width: 40px; height: 40px; border-radius: 50%; flex-shrink: 0;">
 <div style="flex: 1; min-width: 0;">
 <div style="display: flex; align-items: center; gap: 4px; margin-bottom: 2px; flex-wrap: wrap;">
 <span style="color: #fff; font-weight: 800; font-size: 15px;">${originalUser.name}</span>
 ${originalVerifiedHtml}
 <span style="color: #71767b; font-size: 15px;">${
   originalUser.handle.startsWith('@') ? originalUser.handle : '@' + originalUser.handle
 }</span>
 <span style="color: #71767b; font-size: 15px; margin: 0 4px;">·</span>
 <span class="tweet-time" data-timestamp="${
   reply.originalTweet.timestamp || Date.now()
 }" style="color: #71767b; font-size: 15px;">${
        reply.originalTweet.timestamp
          ? getRelativeTime(reply.originalTweet.timestamp)
          : reply.originalTweet.time || '刚刚'
      }</span>
 </div>
 <div style="color: #fff; font-size: 15px; line-height: 20px; word-wrap: break-word;">${processContent(
   reply.originalTweet.content,
 )}</div>
 ${
   reply.originalTweet.media && reply.originalTweet.media.length > 0
     ? `
 <div style="background-color:var(--x-bg-secondary); border-radius: 16px; padding: 12px; margin-top: 12px; border: 1px solid var(--x-border-color);">
 <div style="color:var(--x-text-primary); font-size: 15px; line-height: 20px;">${reply.originalTweet.media[0].description}</div>
 </div>
 `
     : ''
 }
 </div>
 </div>

 <div style="display: flex; gap: 12px;">

 <div style="width: 40px; display: flex; justify-content: center; position: relative;">
 <div style="width: 2px; height: 100%; background-color: #2f3336;"></div>
 </div>
 <div style="flex: 1;"></div>
 </div>

 <div style="display: flex; gap: 12px; margin-top: 8px;">
 <img src="${accountInfo.avatar}" style="width: 40px; height: 40px; border-radius: 50%; flex-shrink: 0;">
 <div style="flex: 1; min-width: 0;">
 <div style="display: flex; align-items: center; gap: 4px; margin-bottom: 2px; flex-wrap: wrap;">
 <span style="color: #fff; font-weight: 800; font-size: 15px;">${accountInfo.name}</span>
 ${accountVerifiedBadgeHtml}
 <span style="color: #71767b; font-size: 15px;">${
   accountInfo.handle.startsWith('@') ? accountInfo.handle : '@' + accountInfo.handle
 }</span>
 <span style="color: #71767b; font-size: 15px; margin: 0 4px;">·</span>
 <span class="tweet-time" data-timestamp="${
   accountReply.timestamp || Date.now()
 }" style="color: #71767b; font-size: 15px;">${
        accountReply.timestamp ? getRelativeTime(accountReply.timestamp) : accountReply.time || '刚刚'
      }</span>
 </div>
 <div style="color: #71767b; font-size: 15px; margin-bottom: 4px;">${getI18nText(
   'accountReplyTo',
 )} <span style="color: var(--x-accent);">${
        originalUser.handle.startsWith('@') ? originalUser.handle : '@' + originalUser.handle
      }</span></div>
 <div style="color: #fff; font-size: 15px; line-height: 20px; margin-bottom: 12px; word-wrap: break-word;">${processContent(
   accountReply.content,
 )}</div>

 <div style="display: flex; justify-content: space-between; max-width: 425px;">
 <div style="display: flex; align-items: center; gap: 4px; color: #71767b; cursor: pointer;" onmouseover="this.style.color='var(--x-accent)'" onmouseout="this.style.color='#71767b'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: currentColor;"><g><path d="M1.751 10c0-4.42 3.584-8 8.005-8h4.366c4.49 0 8.129 3.64 8.129 8.13 0 2.96-1.607 5.68-4.196 7.11l-8.054 4.46v-3.69h-.067c-4.49.1-8.183-3.51-8.183-8.01zm8.005-6c-3.317 0-6.005 2.69-6.005 6 0 3.37 2.77 6.08 6.138 6.01l.351-.01h1.761v2.3l5.087-2.81c1.951-1.08 3.163-3.13 3.163-5.36 0-3.39-2.744-6.13-6.129-6.13H9.756z"></path></g></svg>
 <span style="font-size: 13px;">${DataUtils.formatNumber(accountReply.stats.comments || 0)}</span>
 </div>
 <div style="display: flex; align-items: center; gap: 4px; color: #71767b; cursor: pointer;" onmouseover="this.style.color='#00ba7c'" onmouseout="this.style.color='#71767b'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: currentColor;"><g><path d="M4.5 3.88l4.432 4.14-1.364 1.46L5.5 7.55V16c0 1.1.896 2 2 2H13v2H7.5c-2.209 0-4-1.79-4-4V7.55L1.432 9.48.068 8.02 4.5 3.88zM16.5 6H11V4h5.5c2.209 0 4 1.79 4 4v8.45l2.068-1.93 1.364 1.46-4.432 4.14-4.432-4.14 1.364-1.46 2.068 1.93V8c0-1.1-.896-2-2-2z"></path></g></svg>
 <span style="font-size: 13px;">${DataUtils.formatNumber(accountReply.stats.retweets || 0)}</span>
 </div>
 <div style="display: flex; align-items: center; gap: 4px; color: #71767b; cursor: pointer;" onmouseover="this.style.color='#f91880'" onmouseout="this.style.color='#71767b'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: currentColor;"><g><path d="M16.697 5.5c-1.222-.06-2.679.51-3.89 2.16l-.805 1.09-.806-1.09C9.984 6.01 8.526 5.44 7.304 5.5c-1.243.07-2.349.78-2.91 1.91-.552 1.12-.633 2.78.479 4.82 1.074 1.97 3.257 4.27 7.129 6.61 3.87-2.34 6.052-4.64 7.126-6.61 1.111-2.04 1.03-3.7.477-4.82-.561-1.13-1.666-1.84-2.908-1.91zm4.187 7.69c-1.351 2.48-4.001 5.12-8.379 7.67l-.503.3-.504-.3c-4.379-2.55-7.029-5.19-8.382-7.67-1.36-2.5-1.41-4.86-.514-6.67.887-1.79 2.647-2.91 4.601-3.01 1.651-.09 3.368.56 4.798 2.01 1.429-1.45 3.146-2.1 4.796-2.01 1.954.1 3.714 1.22 4.601 3.01.896 1.81.846 4.17-.514 6.67z"></path></g></svg>
 <span style="font-size: 13px;">${DataUtils.formatNumber(accountReply.stats.likes || 0)}</span>
 </div>
 <div style="display: flex; align-items: center; gap: 4px; color: #71767b; cursor: pointer;" onmouseover="this.style.color='var(--x-accent)'" onmouseout="this.style.color='#71767b'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: currentColor;"><g><path d="M8.75 21V3h2v18h-2zM18 21V8.5h2V21h-2zM4 21l.004-10h2L6 21H4zm9.248 0v-7h2v7h-2z"></path></g></svg>
 <span style="font-size: 13px;">${DataUtils.formatNumber(accountReply.stats.views || 0)}</span>
 </div>
 </div>
 </div>
 </div>
 </div>
 `;
    } else if (reply.type === 'comment') {
      // 数据完整性检查
      if (
        !reply.originalTweet ||
        !reply.originalTweet.user ||
        !reply.originalComment ||
        !reply.originalComment.user ||
        !reply.accountReply
      ) {
        console.warn('⚠️ [账户回复] 评论回复数据不完整:', reply);
        replyEl.innerHTML = '<div style="padding: 16px; color: #71767b;">评论回复数据不完整</div>';
        return replyEl;
      }
      // 回复评论的样式（楼中楼）
      const originalTweetUser = reply.originalTweet.user;
      const originalCommentUser = reply.originalComment.user;
      const accountReply = reply.accountReply; // 构建认证图标
      let tweetVerifiedHtml = '';
      if (originalTweetUser.verified) {
        tweetVerifiedHtml =
          '<svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: var(--x-accent);"><g><path d="M22.25 12c0-1.43-.88-2.67-2.19-3.34.46-1.39.2-2.9-.81-3.91s-2.52-1.27-3.91-.81c-.66-1.31-1.91-2.19-3.34-2.19s-2.67.88-3.33 2.19c-1.4-.46-2.91-.2-3.92.81s-1.26 2.52-.8 3.91c-1.31.67-2.2 1.91-2.2 3.34s.89 2.67 2.2 3.34c-.46 1.39-.21 2.9.8 3.91s2.52 1.27 3.91.81c.67 1.31 1.91 2.19 3.34 2.19s2.68-.88 3.34-2.19c1.39.46 2.9.2 3.91-.81s1.27-2.52.81-3.91c1.31-.67 2.19-1.91 2.19-3.34zm-11.71 4.2L6.8 12.46l1.41-1.42 2.26 2.26 4.8-5.23 1.47 1.36-6.2 6.77z"></path></g></svg>';
      }
      let commentVerifiedHtml = '';
      if (originalCommentUser.verified) {
        commentVerifiedHtml =
          '<svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: var(--x-accent);"><g><path d="M22.25 12c0-1.43-.88-2.67-2.19-3.34.46-1.39.2-2.9-.81-3.91s-2.52-1.27-3.91-.81c-.66-1.31-1.91-2.19-3.34-2.19s-2.67.88-3.33 2.19c-1.4-.46-2.91-.2-3.92.81s-1.26 2.52-.8 3.91c-1.31.67-2.2 1.91-2.2 3.34s.89 2.67 2.2 3.34c-.46 1.39-.21 2.9.8 3.91s2.52 1.27 3.91.81c.67 1.31 1.91 2.19 3.34 2.19s2.68-.88 3.34-2.19c1.39.46 2.9.2 3.91-.81s1.27-2.52.81-3.91c1.31-.67 2.19-1.91 2.19-3.34zm-11.71 4.2L6.8 12.46l1.41-1.42 2.26 2.26 4.8-5.23 1.47 1.36-6.2 6.77z"></path></g></svg>';
      }
      replyEl.innerHTML = `
 <div style="padding: 12px 16px;">

 <div style="display: flex; gap: 12px; margin-bottom: 4px;">
 <img src="${originalTweetUser.avatar}" style="width: 40px; height: 40px; border-radius: 50%; flex-shrink: 0;">
 <div style="flex: 1; min-width: 0;">
 <div style="display: flex; align-items: center; gap: 4px; margin-bottom: 2px; flex-wrap: wrap;">
 <span style="color: #fff; font-weight: 800; font-size: 15px;">${originalTweetUser.name}</span>
 ${tweetVerifiedHtml}
 <span style="color: #71767b; font-size: 15px;">${
   originalTweetUser.handle.startsWith('@') ? originalTweetUser.handle : '@' + originalTweetUser.handle
 }</span>
 <span style="color: #71767b; font-size: 15px; margin: 0 4px;">·</span>
 <span class="tweet-time" data-timestamp="${
   reply.originalTweet.timestamp || Date.now()
 }" style="color: #71767b; font-size: 15px;">${
        reply.originalTweet.timestamp
          ? getRelativeTime(reply.originalTweet.timestamp)
          : reply.originalTweet.time || '刚刚'
      }</span>
 </div>
 <div style="color: #fff; font-size: 15px; line-height: 20px; word-wrap: break-word;">${processContent(
   reply.originalTweet.content,
 )}</div>
 ${
   reply.originalTweet.media && reply.originalTweet.media.length > 0
     ? `
 <div style="background-color:var(--x-bg-secondary); border-radius: 16px; padding: 12px; margin-top: 12px; border: 1px solid var(--x-border-color);">
 <div style="color:var(--x-text-primary); font-size: 15px; line-height: 20px;">${reply.originalTweet.media[0].description}</div>
 </div>
 `
     : ''
 }
 </div>
 </div>

 <div style="display: flex; gap: 12px; margin-top: 8px;">
 <div style="width: 40px; display: flex; justify-content: center;">
 <div style="width: 2px; background-color: #2f3336; height: 100%;"></div>
 </div>
 <div style="flex: 1; padding-top: 4px;">
 <div style="display: flex; gap: 12px;">
 <img src="${originalCommentUser.avatar}" style="width: 40px; height: 40px; border-radius: 50%; flex-shrink: 0;">
 <div style="flex: 1; min-width: 0;">
 <div style="display: flex; align-items: center; gap: 4px; margin-bottom: 2px; flex-wrap: wrap;">
 <span style="color: #fff; font-weight: 800; font-size: 15px;">${originalCommentUser.name}</span>
 ${commentVerifiedHtml}
 <span style="color: #71767b; font-size: 15px;">${
   originalCommentUser.handle.startsWith('@') ? originalCommentUser.handle : '@' + originalCommentUser.handle
 }</span>
 <span style="color: #71767b; font-size: 15px; margin: 0 4px;">·</span>
 <span class="tweet-time" data-timestamp="${
   reply.originalComment.timestamp || Date.now()
 }" style="color: #71767b; font-size: 15px;">${
        reply.originalComment.timestamp
          ? getRelativeTime(reply.originalComment.timestamp)
          : reply.originalComment.time || '刚刚'
      }</span>
 </div>
 <div style="color: #fff; font-size: 15px; line-height: 20px; word-wrap: break-word;">${processContent(
   reply.originalComment.content,
 )}</div>
 </div>
 </div>
 </div>
 </div>

 <div style="display: flex; gap: 12px; margin-top: 8px;">
 <div style="width: 40px; display: flex; justify-content: center;">
 <div style="width: 2px; background-color: #2f3336; height: 100%;"></div>
 </div>
 <div style="flex: 1; padding-top: 4px;">
 <div style="display: flex; gap: 12px;">
 <img src="${accountInfo.avatar}" style="width: 40px; height: 40px; border-radius: 50%; flex-shrink: 0;">
 <div style="flex: 1; min-width: 0;">
 <div style="display: flex; align-items: center; gap: 4px; margin-bottom: 2px; flex-wrap: wrap;">
 <span style="color: #fff; font-weight: 800; font-size: 15px;">${accountInfo.name}</span>
 ${accountVerifiedBadgeHtml}
 <span style="color: #71767b; font-size: 15px;">${
   accountInfo.handle.startsWith('@') ? accountInfo.handle : '@' + accountInfo.handle
 }</span>
 <span style="color: #71767b; font-size: 15px; margin: 0 4px;">·</span>
 <span class="tweet-time" data-timestamp="${
   accountReply.timestamp || Date.now()
 }" style="color: #71767b; font-size: 15px;">${
        accountReply.timestamp ? getRelativeTime(accountReply.timestamp) : accountReply.time || '刚刚'
      }</span>
 </div>
 <div style="color: #71767b; font-size: 15px; margin-bottom: 4px;">${getI18nText(
   'accountReplyTo',
 )} <span style="color: var(--x-accent);">${
        originalCommentUser.handle.startsWith('@') ? originalCommentUser.handle : '@' + originalCommentUser.handle
      }</span></div>
 <div style="color: #fff; font-size: 15px; line-height: 20px; margin-bottom: 12px; word-wrap: break-word;">${processContent(
   accountReply.content,
 )}</div>

 <div style="display: flex; justify-content: space-between; max-width: 425px;">
 <div style="display: flex; align-items: center; gap: 4px; color: #71767b; cursor: pointer;" onmouseover="this.style.color='var(--x-accent)'" onmouseout="this.style.color='#71767b'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: currentColor;"><g><path d="M1.751 10c0-4.42 3.584-8 8.005-8h4.366c4.49 0 8.129 3.64 8.129 8.13 0 2.96-1.607 5.68-4.196 7.11l-8.054 4.46v-3.69h-.067c-4.49.1-8.183-3.51-8.183-8.01zm8.005-6c-3.317 0-6.005 2.69-6.005 6 0 3.37 2.77 6.08 6.138 6.01l.351-.01h1.761v2.3l5.087-2.81c1.951-1.08 3.163-3.13 3.163-5.36 0-3.39-2.744-6.13-6.129-6.13H9.756z"></path></g></svg>
 <span style="font-size: 13px;">${DataUtils.formatNumber(accountReply.stats.comments || 0)}</span>
 </div>
 <div style="display: flex; align-items: center; gap: 4px; color: #71767b; cursor: pointer;" onmouseover="this.style.color='#00ba7c'" onmouseout="this.style.color='#71767b'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: currentColor;"><g><path d="M4.5 3.88l4.432 4.14-1.364 1.46L5.5 7.55V16c0 1.1.896 2 2 2H13v2H7.5c-2.209 0-4-1.79-4-4V7.55L1.432 9.48.068 8.02 4.5 3.88zM16.5 6H11V4h5.5c2.209 0 4 1.79 4 4v8.45l2.068-1.93 1.364 1.46-4.432 4.14-4.432-4.14 1.364-1.46 2.068 1.93V8c0-1.1-.896-2-2-2z"></path></g></svg>
 <span style="font-size: 13px;">${DataUtils.formatNumber(accountReply.stats.retweets || 0)}</span>
 </div>
 <div style="display: flex; align-items: center; gap: 4px; color: #71767b; cursor: pointer;" onmouseover="this.style.color='#f91880'" onmouseout="this.style.color='#71767b'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: currentColor;"><g><path d="M16.697 5.5c-1.222-.06-2.679.51-3.89 2.16l-.805 1.09-.806-1.09C9.984 6.01 8.526 5.44 7.304 5.5c-1.243.07-2.349.78-2.91 1.91-.552 1.12-.633 2.78.479 4.82 1.074 1.97 3.257 4.27 7.129 6.61 3.87-2.34 6.052-4.64 7.126-6.61 1.111-2.04 1.03-3.7.477-4.82-.561-1.13-1.666-1.84-2.908-1.91zm4.187 7.69c-1.351 2.48-4.001 5.12-8.379 7.67l-.503.3-.504-.3c-4.379-2.55-7.029-5.19-8.382-7.67-1.36-2.5-1.41-4.86-.514-6.67.887-1.79 2.647-2.91 4.601-3.01 1.651-.09 3.368.56 4.798 2.01 1.429-1.45 3.146-2.1 4.796-2.01 1.954.1 3.714 1.22 4.601 3.01.896 1.81.846 4.17-.514 6.67z"></path></g></svg>
 <span style="font-size: 13px;">${DataUtils.formatNumber(accountReply.stats.likes || 0)}</span>
 </div>
 <div style="display: flex; align-items: center; gap: 4px; color: #71767b; cursor: pointer;" onmouseover="this.style.color='var(--x-accent)'" onmouseout="this.style.color='#71767b'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: currentColor;"><g><path d="M8.75 21V3h2v18h-2zM18 21V8.5h2V21h-2zM4 21l.004-10h2L6 21H4zm9.248 0v-7h2v7h-2z"></path></g></svg>
 <span style="font-size: 13px;">${DataUtils.formatNumber(accountReply.stats.views || 0)}</span>
 </div>
 </div>
 </div>
 </div>
 </div>
 </div>
 </div>
 `;
    }
    return replyEl;
  }
  // 创建喜欢的推文元素（X风格，带"已喜欢"提示）
  function createLikedTweetElement(tweet, accountInfo) {
    const tweetEl = document.createElement('div');
    tweetEl.style.cssText = 'border-bottom: 1px solid var(--x-border-color);';
    const user = tweet.user; // 构建认证图标HTML
    let verifiedBadgeHtml = '';
    if (user.verified) {
      if (user.verificationType === 'couple') {
        verifiedBadgeHtml =
          '<svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: var(--x-text-primary);"><g><path d="M16.697 5.5c-1.222-.06-2.679.51-3.89 2.16l-.805 1.09-.806-1.09C9.984 6.01 8.526 5.44 7.304 5.5c-1.243.07-2.349.78-2.91 1.91-.552 1.12-.633 2.78.479 4.82 1.074 1.97 3.257 4.27 7.129 6.61 3.87-2.34 6.052-4.64 7.126-6.61 1.111-2.04 1.03-3.7.477-4.82-.561-1.13-1.666-1.84-2.908-1.91zm4.187 7.69c-1.351 2.48-4.001 5.12-8.379 7.67l-.503.3-.504-.3c-4.379-2.55-7.029-5.19-8.382-7.67-1.36-2.5-1.41-4.86-.514-6.67.887-1.79 2.647-2.91 4.601-3.01 1.651-.09 3.368.56 4.798 2.01 1.429-1.45 3.146-2.1 4.796-2.01 1.954.1 3.714 1.22 4.601 3.01.896 1.81.846 4.17-.514 6.67z"></path></g></svg>';
      } else {
        verifiedBadgeHtml =
          '<svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: var(--x-accent);"><g><path d="M22.25 12c0-1.43-.88-2.67-2.19-3.34.46-1.39.2-2.9-.81-3.91s-2.52-1.27-3.91-.81c-.66-1.31-1.91-2.19-3.34-2.19s-2.67.88-3.33 2.19c-1.4-.46-2.91-.2-3.92.81s-1.26 2.52-.8 3.91c-1.31.67-2.2 1.91-2.2 3.34s.89 2.67 2.2 3.34c-.46 1.39-.21 2.9.8 3.91s2.52 1.27 3.91.81c.67 1.31 1.91 2.19 3.34 2.19s2.68-.88 3.34-2.19c1.39.46 2.9.2 3.91-.81s1.27-2.52.81-3.91c1.31-.67 2.19-1.91 2.19-3.34zm-11.71 4.2L6.8 12.46l1.41-1.42 2.26 2.26 4.8-5.23 1.47 1.36-6.2 6.77z"></path></g></svg>';
      }
    }
    tweetEl.innerHTML = `

 <div style="padding: 12px 16px 0; display: flex; align-items: center; gap: 12px;">
 <div style="width: 40px; display: flex; justify-content: flex-end;">
 <svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: var(--x-text-secondary);">
 <g><path d="M16.697 5.5c-1.222-.06-2.679.51-3.89 2.16l-.805 1.09-.806-1.09C9.984 6.01 8.526 5.44 7.304 5.5c-1.243.07-2.349.78-2.91 1.91-.552 1.12-.633 2.78.479 4.82 1.074 1.97 3.257 4.27 7.129 6.61 3.87-2.34 6.052-4.64 7.126-6.61 1.111-2.04 1.03-3.7.477-4.82-.561-1.13-1.666-1.84-2.908-1.91zm4.187 7.69c-1.351 2.48-4.001 5.12-8.379 7.67l-.503.3-.504-.3c-4.379-2.55-7.029-5.19-8.382-7.67-1.36-2.5-1.41-4.86-.514-6.67.887-1.79 2.647-2.91 4.601-3.01 1.651-.09 3.368.56 4.798 2.01 1.429-1.45 3.146-2.1 4.796-2.01 1.954.1 3.714 1.22 4.601 3.01.896 1.81.846 4.17-.514 6.67z"></path></g>
 </svg>
 </div>
 <span style="color:var(--x-text-secondary); font-size: 13px; font-weight: 700;">${accountInfo.name} ${getI18nText(
      'accountLiked',
    )}</span>
 </div>

 <div style="padding: 12px 16px; display: flex; gap: 12px; position: relative;">
 <img src="${user.avatar}" alt="${user.name}" style="width: 40px; height: 40px; border-radius: 50%; flex-shrink: 0;">
 <div style="flex: 1; min-width: 0;">
 <div style="display: flex; align-items: center; gap: 2px; margin-bottom: 2px; flex-wrap: wrap;">
 <span style="color:var(--x-text-primary); font-weight: 800; font-size: 15px;">${user.name}</span>
 ${verifiedBadgeHtml}
 <span style="color:var(--x-text-secondary); font-size: 15px; margin-left: 4px;">${
   user.handle.startsWith('@') ? user.handle : '@' + user.handle
 }</span>
 <span style="color:var(--x-text-secondary); font-size: 15px; margin: 0 4px;">·</span>
 <span class="tweet-time" data-timestamp="${
   tweet.timestamp || Date.now()
 }" style="color:var(--x-text-secondary); font-size: 15px;">${
      tweet.timestamp ? getRelativeTime(tweet.timestamp) : tweet.time || '刚刚'
    }</span>
 </div>
 <div style="color:var(--x-text-primary); font-size: 15px; line-height: 20px; margin-bottom: 12px; word-wrap: break-word;">${processContent(
   tweet.content,
 )}</div>
 ${
   tweet.media && tweet.media.length > 0
     ? `
 <div style="background-color:var(--x-bg-secondary); border-radius: 16px; padding: 12px; margin-bottom: 12px; border: 1px solid var(--x-border-color);">
 <div style="color:var(--x-text-primary); font-size: 15px; line-height: 20px;">${tweet.media[0].description}</div>
 </div>
 `
     : ''
 }
 <div style="display: flex; justify-content: space-between; max-width: 425px; margin-top: 12px;">
 <div onclick="showLikedTweetDetail('${
   tweet.id || Date.now()
 }')" style="display: flex; align-items: center; gap: 4px; color:var(--x-text-secondary); cursor: pointer; padding: 0;" onmouseover="this.style.color='var(--x-accent)'" onmouseout="this.style.color='var(--x-text-secondary)'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: currentColor;"><g><path d="M1.751 10c0-4.42 3.584-8 8.005-8h4.366c4.49 0 8.129 3.64 8.129 8.13 0 2.96-1.607 5.68-4.196 7.11l-8.054 4.46v-3.69h-.067c-4.49.1-8.183-3.51-8.183-8.01zm8.005-6c-3.317 0-6.005 2.69-6.005 6 0 3.37 2.77 6.08 6.138 6.01l.351-.01h1.761v2.3l5.087-2.81c1.951-1.08 3.163-3.13 3.163-5.36 0-3.39-2.744-6.13-6.129-6.13H9.756z"></path></g></svg>
 <span style="font-size: 13px;">${DataUtils.formatNumber(tweet.stats.comments || 0)}</span>
 </div>
 <div style="display: flex; align-items: center; gap: 4px; color:var(--x-text-secondary); cursor: pointer; padding: 0;" onmouseover="this.style.color='#00ba7c'" onmouseout="this.style.color='var(--x-text-secondary)'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: currentColor;"><g><path d="M4.5 3.88l4.432 4.14-1.364 1.46L5.5 7.55V16c0 1.1.896 2 2 2H13v2H7.5c-2.209 0-4-1.79-4-4V7.55L1.432 9.48.068 8.02 4.5 3.88zM16.5 6H11V4h5.5c2.209 0 4 1.79 4 4v8.45l2.068-1.93 1.364 1.46-4.432 4.14-4.432-4.14 1.364-1.46 2.068 1.93V8c0-1.1-.896-2-2-2z"></path></g></svg>
 <span style="font-size: 13px;">${DataUtils.formatNumber(tweet.stats.retweets || 0)}</span>
 </div>
 <div style="display: flex; align-items: center; gap: 4px; color: #f91880; cursor: pointer; padding: 0;" onmouseover="this.style.color='#f91880'" onmouseout="this.style.color='#f91880'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: currentColor;"><g><path d="M16.697 5.5c-1.222-.06-2.679.51-3.89 2.16l-.805 1.09-.806-1.09C9.984 6.01 8.526 5.44 7.304 5.5c-1.243.07-2.349.78-2.91 1.91-.552 1.12-.633 2.78.479 4.82 1.074 1.97 3.257 4.27 7.129 6.61 3.87-2.34 6.052-4.64 7.126-6.61 1.111-2.04 1.03-3.7.477-4.82-.561-1.13-1.666-1.84-2.908-1.91zm4.187 7.69c-1.351 2.48-4.001 5.12-8.379 7.67l-.503.3-.504-.3c-4.379-2.55-7.029-5.19-8.382-7.67-1.36-2.5-1.41-4.86-.514-6.67.887-1.79 2.647-2.91 4.601-3.01 1.651-.09 3.368.56 4.798 2.01 1.429-1.45 3.146-2.1 4.796-2.01 1.954.1 3.714 1.22 4.601 3.01.896 1.81.846 4.17-.514 6.67z"></path></g></svg>
 <span style="font-size: 13px;">${DataUtils.formatNumber(tweet.stats.likes || 0)}</span>
 </div>
 <div style="display: flex; align-items: center; gap: 4px; color:var(--x-text-secondary); cursor: pointer; padding: 0;" onmouseover="this.style.color='var(--x-accent)'" onmouseout="this.style.color='var(--x-text-secondary)'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: currentColor;"><g><path d="M8.75 21V3h2v18h-2zM18 21V8.5h2V21h-2zM4 21l.004-10h2L6 21H4zm9.248 0v-7h2v7h-2z"></path></g></svg>
 <span style="font-size: 13px;">${DataUtils.formatNumber(tweet.stats.views || 0)}</span>
 </div>
 <div style="display: flex; align-items: center; gap: 8px; color:var(--x-text-secondary); cursor: pointer; padding: 0;">
 <div style="display: flex; align-items: center;" onmouseover="this.style.color='var(--x-accent)'" onmouseout="this.style.color='var(--x-text-secondary)'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: currentColor;"><g><path d="M4 4.5C4 3.12 5.119 2 6.5 2h11C18.881 2 20 3.12 20 4.5v18.44l-8-5.71-8 5.71V4.5zM6.5 4c-.276 0-.5.22-.5.5v14.56l6-4.29 6 4.29V4.5c0-.28-.224-.5-.5-.5h-11z"></path></g></svg>
 </div>
 <div style="display: flex; align-items: center;" onmouseover="this.style.color='var(--x-accent)'" onmouseout="this.style.color='var(--x-text-secondary)'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: currentColor;"><g><path d="M12 2.59l5.7 5.7-1.41 1.42L13 6.41V16h-2V6.41l-3.3 3.3-1.41-1.42L12 2.59zM21 15l-.02 3.51c0 1.38-1.12 2.49-2.5 2.49H5.5C4.11 21 3 19.88 3 18.5V15h2v3.5c0 .28.22.5.5.5h12.98c.28 0 .5-.22.5-.5L19 15h2z"></path></g></svg>
 </div>
 </div>
 </div>
 </div>

 <div style="position: absolute; top: 12px; right: 16px; cursor: pointer; padding: 4px; border-radius: 50%; transition: background-color 0.2s;" onmouseover="this.style.backgroundColor='rgba(29,155,240,0.1)'" onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: var(--x-text-secondary);">
 <g><path d="M3 12c0-1.1.9-2 2-2s2 .9 2 2-.9 2-2 2-2-.9-2-2zm9 2c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm7 0c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z"></path></g>
 </svg>
 </div>
 </div>
`; // 将推文数据临时存储，方便后续点击查看详情
    tweetEl.dataset.tweetData = JSON.stringify(tweet);
    return tweetEl;
  }
  // 创建账户推文元素（按图片样式设计）
  function createAccountTweetElement(tweet, accountInfo) {
    const tweetEl = document.createElement('div');
    tweetEl.style.cssText = 'border-bottom: 1px solid var(--x-border-color);';
    const user = tweet.user || accountInfo;
    const isPinned = tweet.pinned || false; // 构建认证图标HTML
    let verifiedBadgeHtml = '';
    if (user.verified) {
      if (user.verificationType === 'couple') {
        verifiedBadgeHtml =
          '<svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: var(--x-text-primary);"><g><path d="M16.697 5.5c-1.222-.06-2.679.51-3.89 2.16l-.805 1.09-.806-1.09C9.984 6.01 8.526 5.44 7.304 5.5c-1.243.07-2.349.78-2.91 1.91-.552 1.12-.633 2.78.479 4.82 1.074 1.97 3.257 4.27 7.129 6.61 3.87-2.34 6.052-4.64 7.126-6.61 1.111-2.04 1.03-3.7.477-4.82-.561-1.13-1.666-1.84-2.908-1.91zm4.187 7.69c-1.351 2.48-4.001 5.12-8.379 7.67l-.503.3-.504-.3c-4.379-2.55-7.029-5.19-8.382-7.67-1.36-2.5-1.41-4.86-.514-6.67.887-1.79 2.647-2.91 4.601-3.01 1.651-.09 3.368.56 4.798 2.01 1.429-1.45 3.146-2.1 4.796-2.01 1.954.1 3.714 1.22 4.601 3.01.896 1.81.846 4.17-.514 6.67z"></path></g></svg>';
      } else {
        verifiedBadgeHtml =
          '<svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: var(--x-accent);"><g><path d="M22.25 12c0-1.43-.88-2.67-2.19-3.34.46-1.39.2-2.9-.81-3.91s-2.52-1.27-3.91-.81c-.66-1.31-1.91-2.19-3.34-2.19s-2.67.88-3.33 2.19c-1.4-.46-2.91-.2-3.92.81s-1.26 2.52-.8 3.91c-1.31.67-2.2 1.91-2.2 3.34s.89 2.67 2.2 3.34c-.46 1.39-.21 2.9.8 3.91s2.52 1.27 3.91.81c.67 1.31 1.91 2.19 3.34 2.19s2.68-.88 3.34-2.19c1.39.46 2.9.2 3.91-.81s1.27-2.52.81-3.91c1.31-.67 2.19-1.91 2.19-3.34zm-11.71 4.2L6.8 12.46l1.41-1.42 2.26 2.26 4.8-5.23 1.47 1.36-6.2 6.77z"></path></g></svg>';
      }
    }
    tweetEl.innerHTML = `
 ${
   isPinned
     ? `
 <div style="padding: 12px 16px 0; display: flex; align-items: center; gap: 12px;">
 <div style="width: 40px; display: flex; justify-content: flex-end;">
 <svg viewBox="0 0 32 32" style="width: 16px; height: 16px; fill: #71767b;">
 <path d="M20.743 14.815l-0.933-12.065h5.191c0.414 0 0.75-0.336 0.75-0.75s-0.336-0.75-0.75-0.75v0h-18c-0.414 0-0.75 0.336-0.75 0.75s0.336 0.75 0.75 0.75v0h5.432l-1.275 12.103c-3.213 0.959-5.574 3.738-5.904 7.113l-0.003 0.034c0 0.414 0.336 0.75 0.75 0.75h9.25v7.25c0 0.414 0.336 0.75 0.75 0.75s0.75-0.336 0.75-0.75v0-7.25h9.25c0.414-0 0.75-0.336 0.75-0.75v0c0-3.017-2.35-5.787-6.007-7.185zM12.104 16.081c0.096-0.035 0.179-0.085 0.249-0.148l-0.001 0.001 0.005-0.003c0.126-0.117 0.211-0.275 0.233-0.453l0-0.004 0.011-0.022 1.337-12.701h4.367l0.979 12.681c0.033 0.35 0.303 0.627 0.647 0.67l0.004 0c2.542 0.682 4.512 2.623 5.222 5.096l0.013 0.052h-18.341c0.729-2.54 2.714-4.49 5.222-5.157l0.052-0.012z"></path>
 </svg>
 </div>
 <span style="color: #71767b; font-size: 13px; font-weight: 700;">${getI18nText('accountPinned')}</span>
 </div>
 `
     : ''
 }
 <div style="padding: 12px 16px; display: flex; gap: 12px; position: relative;">
 <img src="${user.avatar}" alt="${user.name}" style="width: 40px; height: 40px; border-radius: 50%; flex-shrink: 0;">
 <div style="flex: 1; min-width: 0;">
 <div style="display: flex; align-items: center; gap: 2px; margin-bottom: 2px; flex-wrap: wrap;">
 <span style="color: #fff; font-weight: 800; font-size: 15px;">${user.name}</span>
 ${verifiedBadgeHtml}
 <span style="color: #71767b; font-size: 15px; margin-left: 4px;">${
   user.handle.startsWith('@') ? user.handle : '@' + user.handle
 }</span>
 <span style="color: #71767b; font-size: 15px; margin: 0 4px;">·</span>
 <span class="tweet-time" data-timestamp="${tweet.timestamp || Date.now()}" style="color: #71767b; font-size: 15px;">${
      tweet.timestamp ? getRelativeTime(tweet.timestamp) : tweet.time || '刚刚'
    }</span>
 </div>
 <div style="color: #fff; font-size: 15px; line-height: 20px; margin-bottom: 12px; word-wrap: break-word;">${processContent(
   tweet.content,
 )}</div>
 ${
   tweet.media && tweet.media.length > 0
     ? `
 <div style="background-color:var(--x-bg-secondary); border-radius: 16px; padding: 12px; margin-bottom: 12px; border: 1px solid var(--x-border-color);">
 <div style="color:var(--x-text-primary); font-size: 15px; line-height: 20px;">${tweet.media[0].description}</div>
 </div>
 `
     : ''
 }
 <div style="display: flex; justify-content: space-between; max-width: 425px; margin-top: 12px;">
 <div onclick="showAccountTweetDetail('${
   tweet.id
 }')" style="display: flex; align-items: center; gap: 4px; color: #71767b; cursor: pointer; padding: 0;" onmouseover="this.style.color='var(--x-accent)'" onmouseout="this.style.color='#71767b'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: currentColor;"><g><path d="M1.751 10c0-4.42 3.584-8 8.005-8h4.366c4.49 0 8.129 3.64 8.129 8.13 0 2.96-1.607 5.68-4.196 7.11l-8.054 4.46v-3.69h-.067c-4.49.1-8.183-3.51-8.183-8.01zm8.005-6c-3.317 0-6.005 2.69-6.005 6 0 3.37 2.77 6.08 6.138 6.01l.351-.01h1.761v2.3l5.087-2.81c1.951-1.08 3.163-3.13 3.163-5.36 0-3.39-2.744-6.13-6.129-6.13H9.756z"></path></g></svg>
 <span style="font-size: 13px;">${DataUtils.formatNumber(tweet.stats.comments || 0)}</span>
 </div>
 <div onclick="handleQuoteRetweetFromAccountTweet('${
   tweet.id
 }')" style="display: flex; align-items: center; gap: 4px; color: #71767b; cursor: pointer; padding: 0;" onmouseover="this.style.color='#00ba7c'" onmouseout="this.style.color='#71767b'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: currentColor;"><g><path d="M4.5 3.88l4.432 4.14-1.364 1.46L5.5 7.55V16c0 1.1.896 2 2 2H13v2H7.5c-2.209 0-4-1.79-4-4V7.55L1.432 9.48.068 8.02 4.5 3.88zM16.5 6H11V4h5.5c2.209 0 4 1.79 4 4v8.45l2.068-1.93 1.364 1.46-4.432 4.14-4.432-4.14 1.364-1.46 2.068 1.93V8c0-1.1-.896-2-2-2z"></path></g></svg>
 <span style="font-size: 13px;">${DataUtils.formatNumber(tweet.stats.retweets || 0)}</span>
 </div>
 <div class="tweet-action like" onclick="toggleLike('${tweet.id}', this)" data-liked="false" data-likes="${
      tweet.stats.likes || 0
    }" style="display: flex; align-items: center; gap: 4px; color: #71767b; cursor: pointer; padding: 0;" onmouseover="this.style.color='#f91880'" onmouseout="this.style.color='#71767b'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: currentColor;"><g><path d="M16.697 5.5c-1.222-.06-2.679.51-3.89 2.16l-.805 1.09-.806-1.09C9.984 6.01 8.526 5.44 7.304 5.5c-1.243.07-2.349.78-2.91 1.91-.552 1.12-.633 2.78.479 4.82 1.074 1.97 3.257 4.27 7.129 6.61 3.87-2.34 6.052-4.64 7.126-6.61 1.111-2.04 1.03-3.7.477-4.82-.561-1.13-1.666-1.84-2.908-1.91zm4.187 7.69c-1.351 2.48-4.001 5.12-8.379 7.67l-.503.3-.504-.3c-4.379-2.55-7.029-5.19-8.382-7.67-1.36-2.5-1.41-4.86-.514-6.67.887-1.79 2.647-2.91 4.601-3.01 1.651-.09 3.368.56 4.798 2.01 1.429-1.45 3.146-2.1 4.796-2.01 1.954.1 3.714 1.22 4.601 3.01.896 1.81.846 4.17-.514 6.67z"></path></g></svg>
 <span class="like-count" style="font-size: 13px;">${DataUtils.formatNumber(tweet.stats.likes || 0)}</span>
 </div>
 <div style="display: flex; align-items: center; gap: 4px; color: #71767b; cursor: pointer; padding: 0;" onmouseover="this.style.color='var(--x-accent)'" onmouseout="this.style.color='#71767b'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: currentColor;"><g><path d="M8.75 21V3h2v18h-2zM18 21V8.5h2V21h-2zM4 21l.004-10h2L6 21H4zm9.248 0v-7h2v7h-2z"></path></g></svg>
 <span style="font-size: 13px;">${DataUtils.formatNumber(tweet.stats.views || 0)}</span>
 </div>
 <div style="display: flex; align-items: center; gap: 8px; color: #71767b; cursor: pointer; padding: 0;">
 <div onclick="toggleBookmark('${
   tweet.id
 }', this)" data-bookmarked="false" style="display: flex; align-items: center;" onmouseover="this.style.color='var(--x-accent)'" onmouseout="this.style.color='#71767b'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: currentColor;"><g><path d="M4 4.5C4 3.12 5.119 2 6.5 2h11C18.881 2 20 3.12 20 4.5v18.44l-8-5.71-8 5.71V4.5zM6.5 4c-.276 0-.5.22-.5.5v14.56l6-4.29 6 4.29V4.5c0-.28-.224-.5-.5-.5h-11z"></path></g></svg>
 </div>
 <div style="display: flex; align-items: center;" onmouseover="this.style.color='var(--x-accent)'" onmouseout="this.style.color='#71767b'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: currentColor;"><g><path d="M12 2.59l5.7 5.7-1.41 1.42L13 6.41V16h-2V6.41l-3.3 3.3-1.41-1.42L12 2.59zM21 15l-.02 3.51c0 1.38-1.12 2.49-2.5 2.49H5.5C4.11 21 3 19.88 3 18.5V15h2v3.5c0 .28.22.5.5.5h12.98c.28 0 .5-.22.5-.5L19 15h2z"></path></g></svg>
 </div>
 </div>
 </div>
 </div>

 <div style="position: absolute; top: 12px; right: 16px; cursor: pointer; padding: 4px; border-radius: 50%; transition: background-color 0.2s;" onmouseover="this.style.backgroundColor='rgba(29,155,240,0.1)'" onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: #71767b;">
 <g><path d="M3 12c0-1.1.9-2 2-2s2 .9 2 2-.9 2-2 2-2-.9-2-2zm9 2c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm7 0c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z"></path></g>
 </svg>
 </div>
 </div>
`;
    return tweetEl;
  }
  // 关闭账户主页
  window.closeAccountProfile = function () {
    // 重置推进模式
    if (isProgressMode) {
      isProgressMode = false;
      updateRefreshButtonUI();
    }
    document.getElementById('account-profile-page').style.display = 'none'; // 检查是否需要返回搜索页
    if (isInSearchResults && currentSearchQuery) {
      console.log('📖 [返回] 从账户主页返回搜索结果页'); // 恢复搜索结果视图
      document.getElementById('trending-view').style.display = 'none';
      document.getElementById('search-results-view').style.display = 'flex'; // 显示返回按钮，隐藏刷新按钮
      const backBtn = document.getElementById('search-back-btn');
      if (backBtn) backBtn.style.display = 'flex';
      const refreshBtn = document.querySelector('.refresh-trends-btn');
      if (refreshBtn) refreshBtn.style.display = 'none'; // 显示搜索页
      document.getElementById('x-search-page').style.display = 'flex';
    } else {
      // 默认返回主页
      document.getElementById('x-home-page').style.display = 'flex';
    }
  }; // 显示账户推文详情
  window.showAccountTweetDetail = async function (tweetId) {
    if (!currentViewingAccount || !currentViewingAccount.tweets) {
      showXToast('无法找到推文数据', 'error');
      return;
    }
    // 从当前账户数据中查找推文
    const tweet = currentViewingAccount.tweets.find(t => t.id === tweetId);
    if (!tweet) {
      showXToast('未找到该推文', 'error');
      return;
    }
    // 标记数据来源为账户推文（避免与用户推文混淆）
    tweet._source = 'account';
    tweet._accountHandle = (currentViewingAccount.accountInfo || currentViewingAccount).handle; // 使用现有的showTweetDetail函数显示详情
    await showTweetDetail(tweet);
  }; // 显示喜欢的推文详情
  window.showLikedTweetDetail = async function (tweetId) {
    if (!currentViewingAccount || !currentViewingAccount.accountLikes) {
      showXToast('无法找到喜欢数据', 'error');
      return;
    }
    // 从喜欢列表中查找推文
    const tweet = currentViewingAccount.accountLikes.find(t => t.id === tweetId);
    if (!tweet) {
      showXToast('未找到该推文', 'error');
      return;
    }
    // 标记数据来源为喜欢的推文
    tweet._source = 'liked';
    tweet._accountHandle = (currentViewingAccount.accountInfo || currentViewingAccount).handle; // 使用现有的showTweetDetail函数显示详情
    await showTweetDetail(tweet);
  }; // 切换关注状态
  window.toggleAccountFollow = function () {
    const followBtn = document.getElementById('account-follow-btn');
    const notifyBtn = document.getElementById('account-notify-btn');
    const followText = getI18nText('accountFollow');
    const followingText = getI18nText('accountFollowing'); // 获取当前主题的颜色
    const bgPrimary = getComputedStyle(document.getElementById('x-social-screen'))
      .getPropertyValue('--x-bg-primary')
      .trim();
    const textPrimary = getComputedStyle(document.getElementById('x-social-screen'))
      .getPropertyValue('--x-text-primary')
      .trim();
    const borderColor = getComputedStyle(document.getElementById('x-social-screen'))
      .getPropertyValue('--x-border-color')
      .trim();
    if (followBtn.textContent === followText) {
      // 关注账户
      followBtn.textContent = followingText;
      followBtn.style.backgroundColor = bgPrimary || '#000';
      followBtn.style.color = textPrimary || '#fff';
      followBtn.style.border = `1px solid ${borderColor || '#536471'}`;
      notifyBtn.style.display = 'flex';
      showXToast('已关注该账户', 'success');
    } else {
      // 取消关注
      followBtn.textContent = followText; // 未关注状态：反转颜色
      followBtn.style.backgroundColor = textPrimary || '#fff';
      followBtn.style.color = bgPrimary || '#000';
      followBtn.style.border = 'none';
      notifyBtn.style.display = 'none';
      showXToast('已取消关注', 'info');
    }
  }; // 切换通知设置
  window.toggleAccountNotifications = function () {
    showXToast('通知设置已更新', 'success');
  }; // 发送私信
  window.sendMessageToAccount = async function () {
    if (!currentViewingAccount) {
      showXToast('无法获取账户信息', 'error');
      return;
    }
    console.log('📨 从账户主页打开私信详情页'); // 获取账户信息
    const accountInfo = currentViewingAccount.accountInfo || currentViewingAccount;
    const cleanHandle = accountInfo.handle.replace('@', '');

    // 🔧 检查该账户是否对应某个已绑定角色
    try {
      const xDb = getXDB();
      const settingsId = `xSettings_${currentAccountId || 'main'}`;
      const xSettings = await xDb.xSettings.get(settingsId);
      const boundCharacters = xSettings?.boundCharacters || [];

      // 遍历已绑定角色，查找匹配的账户句柄
      let matchedCharacterId = null;
      for (const characterId of boundCharacters) {
        const xProfile = await xDb.xCharacterProfiles.get(characterId);
        if (xProfile && xProfile.xHandle.replace('@', '') === cleanHandle) {
          matchedCharacterId = characterId;
          console.log('✅ [统一ID] 找到匹配的已绑定角色:', characterId);
          break;
        }
      }

      // 根据是否匹配到角色，使用不同的 ID 格式
      let accountId;
      if (matchedCharacterId) {
        // 已绑定角色：使用 msg_${characterId} 格式（与私信列表添加的格式统一）
        accountId = `msg_${matchedCharacterId}`;
        console.log('📝 [统一ID] 使用角色ID格式:', accountId);
      } else {
        // 未绑定角色：使用 msg_account_${cleanHandle} 格式
        accountId = `msg_account_${cleanHandle}`;
        console.log('📝 [统一ID] 使用账户ID格式:', accountId);
      }

      // 构建私信数据（messageData格式）
      const messageData = {
        id: accountId,
        userName: accountInfo.name,
        userHandle: accountInfo.handle,
        userAvatar: accountInfo.avatar,
        user: {
          name: accountInfo.name,
          handle: accountInfo.handle,
          avatar: accountInfo.avatar,
          verified: accountInfo.verified || false,
        },
        lastMessage: '',
        timestamp: new Date().toISOString(),
        unread: false,
        _fromAccountProfile: true, // 🔧 标记来自账户主页
      }; // 构建账户资料数据
      const profileData = {
        name: accountInfo.name,
        handle: accountInfo.handle,
        avatar: accountInfo.avatar,
        bio: accountInfo.bio || '',
        followersCount: accountInfo.followersCount || '0',
        verified: accountInfo.verified || false,
      }; // 标记当前消息
      currentMessageConversation = messageData;
      userMessageQueue = []; // 保持账户主页在后台（不隐藏，以便返回）
      // document.getElementById('account-profile-page').style.display = 'none'; // 显示私信详情页面
      document.getElementById('x-message-detail-page').style.display = 'flex'; // 加载私信详情
      loadCharacterMessageDetail(messageData, profileData);
      console.log('✅ 已打开私信详情页（来自账户主页）');
    } catch (error) {
      console.error('❌ [统一ID] 查找角色失败:', error);
      // 出错时使用默认的账户ID格式
      const accountId = `msg_account_${cleanHandle}`;
      const messageData = {
        id: accountId,
        userName: accountInfo.name,
        userHandle: accountInfo.handle,
        userAvatar: accountInfo.avatar,
        user: {
          name: accountInfo.name,
          handle: accountInfo.handle,
          avatar: accountInfo.avatar,
          verified: accountInfo.verified || false,
        },
        lastMessage: '',
        timestamp: new Date().toISOString(),
        unread: false,
        _fromAccountProfile: true, // 🔧 标记来自账户主页
      };
      const profileData = {
        name: accountInfo.name,
        handle: accountInfo.handle,
        avatar: accountInfo.avatar,
        bio: accountInfo.bio || '',
        followersCount: accountInfo.followersCount || '0',
        verified: accountInfo.verified || false,
      };
      currentMessageConversation = messageData;
      userMessageQueue = [];
      // document.getElementById('account-profile-page').style.display = 'none';
      document.getElementById('x-message-detail-page').style.display = 'flex';
      loadCharacterMessageDetail(messageData, profileData);
      console.log('✅ 已打开私信详情页（使用默认ID，来自账户主页）');
    }
  }; // 切换账户标签
  window.switchAccountTab = function (tabName) {
    // 更新标签样式
    const tabs = document.querySelectorAll('.account-tab');
    tabs.forEach(tab => {
      if (tab.onclick.toString().includes(tabName)) {
        tab.style.fontWeight = '700';
        tab.style.color = '#fff';
        tab.style.borderBottom = '4px solid var(--x-accent)';
      } else {
        tab.style.fontWeight = '500';
        tab.style.color = '#71767b';
        tab.style.borderBottom = '4px solid transparent';
      }
    });
    const tweetsContainer = document.getElementById('account-tweets-container');
    tweetsContainer.innerHTML = '';
    if (tabName === 'posts') {
      // 渲染推文
      if (currentViewingAccount && currentViewingAccount.tweets) {
        const accountInfo = currentViewingAccount.accountInfo || currentViewingAccount;
        currentViewingAccount.tweets.forEach(tweet => {
          const tweetElement = createAccountTweetElement(tweet, accountInfo);
          tweetsContainer.appendChild(tweetElement);
        });
      } else {
        tweetsContainer.innerHTML = `
 <div style="padding: 60px 32px; text-align: center;">
 <div style="color: #71767b; font-size: 31px; font-weight: 800; margin-bottom: 8px;">${getI18nText(
   'accountNoPosts',
 )}</div>
 <div style="color: #71767b; font-size: 15px;">${getI18nText('accountNoPostsDesc')}</div>
 </div>
 `;
      }
    } else if (tabName === 'replies') {
      // 渲染回复
      if (
        currentViewingAccount &&
        currentViewingAccount.accountReplies &&
        currentViewingAccount.accountReplies.length > 0
      ) {
        // 过滤掉无效的回复数据
        const validReplies = currentViewingAccount.accountReplies.filter(reply => {
          if (!reply) {
            console.warn('⚠️ [账户标签] 跳过无效回复: null/undefined');
            return false;
          }
          if (!reply.type) {
            console.warn('⚠️ [账户标签] 跳过无效回复: 缺少 type 字段', reply);
            return false;
          }
          return true;
        });
        if (validReplies.length > 0) {
          validReplies.forEach(reply => {
            const replyElement = createAccountReplyElement(reply);
            tweetsContainer.appendChild(replyElement);
          });
        } else {
          tweetsContainer.innerHTML = `
 <div style="padding: 60px 32px; text-align: center;">
 <div style="color: #71767b; font-size: 31px; font-weight: 800; margin-bottom: 8px;">${getI18nText(
   'accountNoReplies',
 )}</div>
 <div style="color: #71767b; font-size: 15px;">${getI18nText('accountNoRepliesDesc')}</div>
 </div>
 `;
        }
      } else {
        tweetsContainer.innerHTML = `
 <div style="padding: 60px 32px; text-align: center;">
 <div style="color: #71767b; font-size: 31px; font-weight: 800; margin-bottom: 8px;">${getI18nText(
   'accountNoReplies',
 )}</div>
 <div style="color: #71767b; font-size: 15px;">${getI18nText('accountNoRepliesDesc')}</div>
 </div>
 `;
      }
    } else if (tabName === 'likes') {
      // 渲染喜欢列表
      console.log('🔍 [喜欢列表] 开始渲染喜欢列表');
      console.log('🔍 [喜欢列表] currentViewingAccount:', currentViewingAccount);
      console.log('🔍 [喜欢列表] accountLikes数量:', currentViewingAccount?.accountLikes?.length || 0);
      if (
        currentViewingAccount &&
        currentViewingAccount.accountLikes &&
        currentViewingAccount.accountLikes.length > 0
      ) {
        console.log('✅ [喜欢列表] 找到喜欢数据，开始渲染');
        const accountInfo = currentViewingAccount.accountInfo || currentViewingAccount;
        currentViewingAccount.accountLikes.forEach((likedTweet, index) => {
          console.log(`📋 [喜欢列表] 渲染第 ${index + 1} 条喜欢:`, likedTweet.content?.substring(0, 30));
          const tweetElement = createLikedTweetElement(likedTweet, accountInfo);
          tweetsContainer.appendChild(tweetElement);
        });
        console.log(`✅ [喜欢列表] 共渲染了 ${currentViewingAccount.accountLikes.length} 条喜欢`);
      } else {
        console.warn('⚠️ [喜欢列表] 无喜欢数据，显示空状态');
        tweetsContainer.innerHTML = `
 <div style="padding: 60px 32px; text-align: center;">
 <div style="color:var(--x-text-secondary); font-size: 31px; font-weight: 800; margin-bottom: 8px;">${getI18nText(
   'accountNoLikes',
 )}</div>
 <div style="color:var(--x-text-secondary); font-size: 15px;">${getI18nText('accountNoLikesDesc')}</div>
 </div>
 `;
      }
    }
  }; // 保存账户主页数据到数据库
  async function saveAccountProfile(accountData) {
    try {
      const xDB = getXDB();
      const cleanHandle = accountData.accountInfo.handle.replace('@', ''); // 准备保存的数据
      const profileToSave = {
        handle: cleanHandle,
        name: accountData.accountInfo.name,
        accountInfo: accountData.accountInfo,
        tweets: accountData.tweets || [],
        accountReplies: accountData.accountReplies || [],
        accountLikes: accountData.accountLikes || [], // 添加喜欢数据
        updatedAt: new Date().toISOString(),
      };
      await xDB.xAccountProfiles.put(profileToSave);
      console.log(
        '✅ 账户主页数据已保存:',
        cleanHandle,
        '- 推文数:',
        profileToSave.tweets.length,
        '- 回复数:',
        profileToSave.accountReplies.length,
        '- 喜欢数:',
        profileToSave.accountLikes.length,
      );
    } catch (error) {
      console.error('保存账户主页数据失败:', error);
    }
  }
  // 🆕 将推文添加到账户主页（用于智能检测生成的推文）
  async function addTweetToAccountProfile(userHandle, tweetData) {
    try {
      const xDB = getXDB();
      const cleanHandle = userHandle.replace('@', '');
      console.log(`📝 [账户主页同步] 开始将推文添加到 ${cleanHandle} 的账户主页`); // 获取或创建账户主页数据
      let accountProfile = await xDB.xAccountProfiles.get(cleanHandle);
      if (!accountProfile) {
        // 如果账户主页不存在，创建新的
        console.log(`📝 [账户主页同步] 账户主页不存在，创建新的主页数据`);
        accountProfile = {
          handle: cleanHandle,
          name: tweetData.user.name,
          accountInfo: {
            name: tweetData.user.name,
            handle: userHandle,
            avatar: tweetData.user.avatar,
            verified: tweetData.user.verified || false,
            verificationType: tweetData.user.verificationType || 'verified',
          },
          tweets: [],
          accountReplies: [],
          accountLikes: [],
          updatedAt: new Date().toISOString(),
        };
      }
      // 确保 tweets 数组存在
      if (!accountProfile.tweets) {
        accountProfile.tweets = [];
      }
      // 检查推文是否已存在（根据ID或时间戳）
      const isDuplicate = accountProfile.tweets.some(
        tweet => tweet.id === tweetData.id || tweet.timestamp === tweetData.timestamp,
      );
      if (isDuplicate) {
        console.log(`⏭️ [账户主页同步] 推文已存在，跳过添加`);
        return;
      }
      // 添加推文到数组
      // 🔧 确保置顶推文始终在第一位
      const pinnedTweet = accountProfile.tweets.find(t => t.pinned);
      const unpinnedTweets = accountProfile.tweets.filter(t => !t.pinned); // 将新推文添加到非置顶推文的开头
      unpinnedTweets.unshift(tweetData); // 按时间戳排序非置顶推文（最新的在前）
      unpinnedTweets.sort((a, b) => (b.timestamp || 0) - (a.timestamp || 0)); // 重新组合：置顶推文 → 其他推文
      if (pinnedTweet) {
        accountProfile.tweets = [pinnedTweet, ...unpinnedTweets];
      } else {
        accountProfile.tweets = unpinnedTweets;
      }
      // 更新时间
      accountProfile.updatedAt = new Date().toISOString(); // 保存到数据库
      await xDB.xAccountProfiles.put(accountProfile);
      console.log(
        `✅ [账户主页同步] 推文已添加到 ${cleanHandle} 的主页，当前推文总数: ${accountProfile.tweets.length}`,
      ); // 如果当前正在查看该账户的主页，刷新显示
      if (
        currentViewingAccount &&
        (currentViewingAccount.accountInfo?.handle === userHandle || currentViewingAccount.handle === userHandle)
      ) {
        console.log(`🔄 [账户主页同步] 检测到正在查看该账户主页，刷新显示`); // 更新当前查看的账户数据
        currentViewingAccount.tweets = accountProfile.tweets; // 重新渲染
        renderAccountProfile(currentViewingAccount);
      }
    } catch (error) {
      console.error('❌ [账户主页同步] 添加推文到账户主页失败:', error);
    }
  }
  // 切换推进模式
  window.toggleProgressMode = function () {
    isProgressMode = !isProgressMode;
    updateRefreshButtonUI();
    if (isProgressMode) {
      showXToast('已切换到推进模式 - 将生成新内容并追加', 'success');
    } else {
      showXToast('已切换到重新生成模式 - 将覆盖现有内容', 'info');
    }
  }; // 更新刷新按钮UI
  function updateRefreshButtonUI() {
    const refreshBtn = document.querySelector('#account-profile-page [onclick="refreshAccountProfile()"]');
    if (!refreshBtn) return; // 获取当前主题的文本颜色
    const textColor =
      getComputedStyle(document.getElementById('x-social-screen')).getPropertyValue('--x-text-primary').trim() ||
      '#fff';
    if (isProgressMode) {
      // 推进模式 - 心电图图标
      refreshBtn.innerHTML = `
 <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="${textColor}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
 <path d="M3 12h4.5l1.5 -6l4 12l2 -9l1.5 3h4.5" />
 </svg>
 `;
      refreshBtn.setAttribute('title', '推进账户主页（生成新内容并追加）');
    } else {
      // 重新生成模式 - 刷新图标
      refreshBtn.innerHTML = `
 <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="${textColor}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
 <path d="M9 4.55a8 8 0 0 1 6 14.9m0 -4.45v5h5" />
 <path d="M5.63 7.16l0 .01" />
 <path d="M4.06 11l0 .01" />
 <path d="M4.63 15.1l0 .01" />
 <path d="M7.16 18.37l0 .01" />
 <path d="M11 19.94l0 .01" />
 </svg>
 `;
      refreshBtn.setAttribute('title', '重新生成账户主页');
    }
  }
  // 刷新按钮长按处理
  window.handleRefreshButtonMouseDown = function () {
    progressLongPressTimer = setTimeout(() => {
      toggleProgressMode();
    }, 800); // 长按800ms触发
  };
  window.handleRefreshButtonMouseUp = function () {
    if (progressLongPressTimer) {
      clearTimeout(progressLongPressTimer);
      progressLongPressTimer = null;
    }
  }; // 刷新账户主页（重新生成或推进）
  window.refreshAccountProfile = async function () {
    // 清除长按定时器
    if (progressLongPressTimer) {
      clearTimeout(progressLongPressTimer);
      progressLongPressTimer = null;
    }
    if (!currentViewingAccount) {
      showXToast('未找到当前账户信息', 'error');
      return;
    }
    try {
      if (isProgressMode) {
        // 推进模式：生成新内容并追加
        showXToast('正在推进账户主页...', 'info');
        await progressAccountProfile();
      } else {
        // 重新生成模式：覆盖现有内容
        showXToast('正在重新生成账户主页...', 'info'); // 从当前账户数据中提取基本信息
        const accountInfo = currentViewingAccount.accountInfo || currentViewingAccount; // 查询账户数据（重新判断账户类型）
        const accountData = await queryAccountData(accountInfo.name, accountInfo.handle, accountInfo.avatar);
        if (!accountData) {
          showXToast('无法加载账户信息', 'error');
          return;
        }
        // 调用AI重新生成账户主页内容
        const profileData = await generateAccountProfileContent(accountData);
        if (profileData) {
          // 更新账户数据
          currentViewingAccount = { ...accountData, ...profileData };
          console.log('📊 [账户主页] 重新生成数据统计:', {
            推文数: profileData.tweets?.length || 0,
            回复数: profileData.accountReplies?.length || 0,
            喜欢数: profileData.accountLikes?.length || 0,
          });
          renderAccountProfile(currentViewingAccount); // 保存到数据库（覆盖旧数据）
          await saveAccountProfile(currentViewingAccount);
          showXToast('账户主页已刷新', 'success');
        }
      }
    } catch (error) {
      console.error('刷新账户主页失败:', error);
      showXToast(`刷新失败: ${error.message}`, 'error');
    }
  }; // 推进账户主页（生成新内容并追加）
  async function progressAccountProfile() {
    try {
      const accountInfo = currentViewingAccount.accountInfo || currentViewingAccount; // 查询账户数据
      const accountData = await queryAccountData(accountInfo.name, accountInfo.handle, accountInfo.avatar);
      if (!accountData) {
        showXToast('无法加载账户信息', 'error');
        return;
      }
      // 调用AI生成新的推文和回复（传入现有内容作为上下文）
      const newProfileData = await generateAccountProfileContent(accountData, {
        isProgressMode: true,
        existingTweets: currentViewingAccount.tweets || [],
        existingReplies: currentViewingAccount.accountReplies || [],
      });
      if (newProfileData) {
        // 确保新推文没有置顶标记
        if (newProfileData.tweets) {
          newProfileData.tweets.forEach(tweet => {
            tweet.pinned = false;
          });
        }
        // 合并推文：置顶动态 → 新动态 → 旧动态
        const existingTweets = currentViewingAccount.tweets || [];
        const pinnedTweet = existingTweets.find(t => t.pinned);
        const unpinnedOldTweets = existingTweets.filter(t => !t.pinned);
        const newTweets = newProfileData.tweets || [];
        let updatedTweets;
        if (pinnedTweet) {
          // 如果有置顶：置顶 → 新推文 → 旧推文
          updatedTweets = [pinnedTweet, ...newTweets, ...unpinnedOldTweets];
        } else {
          // 如果没有置顶：新推文 → 旧推文
          updatedTweets = [...newTweets, ...unpinnedOldTweets];
        }
        // 合并回复：新回复 → 旧回复
        const updatedReplies = [
          ...(newProfileData.accountReplies || []),
          ...(currentViewingAccount.accountReplies || []),
        ]; // 合并喜欢：新喜欢 → 旧喜欢
        const updatedLikes = [...(newProfileData.accountLikes || []), ...(currentViewingAccount.accountLikes || [])];
        console.log('📊 [推进模式] 数据合并统计:', {
          新推文: newProfileData.tweets?.length || 0,
          旧推文: (currentViewingAccount.tweets || []).filter(t => !t.pinned).length,
          合并后推文: updatedTweets.length,
          新回复: newProfileData.accountReplies?.length || 0,
          旧回复: (currentViewingAccount.accountReplies || []).length,
          合并后回复: updatedReplies.length,
          新喜欢: newProfileData.accountLikes?.length || 0,
          旧喜欢: (currentViewingAccount.accountLikes || []).length,
          合并后喜欢: updatedLikes.length,
        }); // 更新账户数据
        currentViewingAccount = {
          ...currentViewingAccount,
          tweets: updatedTweets,
          accountReplies: updatedReplies,
          accountLikes: updatedLikes,
          // 保持 accountInfo 不变
          accountInfo: currentViewingAccount.accountInfo || accountInfo,
        };
        renderAccountProfile(currentViewingAccount); // 保存到数据库
        await saveAccountProfile(currentViewingAccount);
        showXToast(
          `已推进：新增 ${newProfileData.tweets?.length || 0} 条推文，${
            newProfileData.accountReplies?.length || 0
          } 条回复，${newProfileData.accountLikes?.length || 0} 条喜欢`,
          'success',
        );
      }
    } catch (error) {
      console.error('推进账户主页失败:', error);
      showXToast(`推进失败: ${error.message}`, 'error');
    }
  }
  // ▲▲▲ 【主要！！！】第七个情景：账户主页生成器 ▲▲▲
  // ============================================
  // 语言切换功能
  // ============================================
  // 语言配置对象
  const languageConfig = {
    zh: {
      // 底部导航栏
      navHome: '主页',
      navSearch: '搜索',
      navNotifications: '通知',
      navMessages: '消息',
      // 主页
      homeTitle: '主页',
      homeForYou: '为你推荐',
      homeFollowing: '正在关注',
      homeCompose: '有什么新鲜事?',
      homeNoTweets: '暂无推文',
      homeNoTweetsDesc: '开始关注一些人，或刷新查看推荐内容',
      // 搜索页面
      searchTitle: '搜索',
      searchPlaceholder: '搜索',
      searchTrending: '热门话题',
      searchNoResults: '无搜索结果',
      searchRefresh: '刷新热搜',
      // 通知页面
      notificationsTitle: '通知',
      notificationsTabAll: '全部',
      notificationsTabMentions: '提及',
      notificationsEmpty: '暂无通知',
      notificationsEmptyDesc: '当有人点赞、评论或关注你时，你会在这里看到通知',
      notificationsRecommended: '推荐关注',
      notificationsLiked: '喜欢了你的帖子',
      notificationsFollowed: '关注了你',
      notificationsReplied: '回复了你',
      notificationsMentioned: '提及了你',
      notificationsRetweeted: '转推了你的帖子',
      // 私信页面
      messagesTitle: '私信',
      messagesEmpty: '暂无私信',
      messagesEmptyDesc: '发送私信与朋友保持联系',
      messageFollowers: '位关注者',
      messageInputPlaceholder: '开始写私信',
      // 用户资料页面
      profileTitle: '个人资料',
      profileEditProfile: '编辑个人资料',
      profileFollowing: '正在关注',
      profileFollowers: '关注者',
      profilePosts: '帖子',
      profilePostsCount: '帖子',
      profileLikes: '喜欢',
      profileHighlights: '亮点',
      profileArticles: '文章',
      profileMedia: '媒体',
      profileNoLikes: '还没有喜欢的推文',
      profileNoLikesDesc: '当你喜欢一条推文时，它会显示在这里。',
      profileNoHighlights: '还没有收藏',
      profileNoHighlightsDesc: '点击推文下方的书签按钮来收藏喜欢的内容',
      profileNoArticles: '还没有文章',
      profileNoArticlesDesc: '发布的文章会显示在这里。',
      profileNoMedia: '还没有媒体',
      profileNoMediaDesc: '包含照片和视频的推文会显示在这里。',
      profileAccountManager: '账号管理',
      // 推文详情页
      tweetDetailTitle: '帖子',
      tweetDetailReply: '回复',
      tweetDetailReplyPlaceholder: '发布你的回复',
      tweetDetailRerollTooltip: '重新生成回复',
      tweetDetailRetweets: '转推',
      tweetDetailLikes: '喜欢',
      tweetDetailBookmarks: '书签',
      tweetDetailViews: '查看',
      // 评论页面
      commentsTitle: '发帖',
      commentsReply: '回复',
      commentsReplyPlaceholder: '发布你的回复',
      // 账户主页
      accountPostsCount: '个帖子',
      accountFollow: '关注',
      accountFollowing: '正在关注',
      accountFollowingLabel: '正在关注',
      accountFollowersLabel: '关注者',
      accountFollowsYou: '关注你',
      accountPostsTab: '帖子',
      accountRepliesTab: '回复',
      accountLikesTab: '喜欢',
      accountPinned: '已置顶',
      accountNoPosts: '还没有帖子',
      accountNoPostsDesc: '该账户的帖子会显示在这里。',
      accountNoReplies: '还没有回复',
      accountNoRepliesDesc: '该账户的回复会显示在这里。',
      accountNoLikes: '还没有喜欢',
      accountNoLikesDesc: '该账户喜欢的内容会显示在这里。',
      accountReplyTo: '回复',
      accountLiked: '已喜欢',
      // 设置页面
      settingsTitle: '设置',
      settingsPrompt: '提示词',
      settingsPromptPlaceholder: '输入系统提示词...',
      settingsWorldView: '世界观设定',
      settingsWorldViewPlaceholder: '描述角色所在的世界观、背景设定...',
      settingsCharacterBinding: '绑定角色',
      settingsCharacterBindingDesc: '开启后，绑定的角色可以在X上发布推文',
      settingsSelectCharacter: '选择要绑定的角色',
      settingsRelationship: '角色关系册',
      settingsRelationshipDesc: '开启后，可以为已绑定的角色建立关系网络，设置角色之间的双向关系',
      settingsRelationshipGraph: '角色关系图',
      settingsEditGraph: '编辑关系图',
      settingsNPCBinding: '绑定NPC',
      settingsNPCBindingDesc: '开启后，可以创建和管理自定义NPC，设置其人设、发帖习惯和绑定用户',
      settingsNPCList: 'NPC列表',
      settingsCreateNPC: '+ 创建NPC',
      settingsSave: '保存设置',
      settingsSavePreset: '保存为预设',
      settingsImport: '导入数据',
      settingsExport: '导出数据',
      settingsPresetManagement: '预设管理',
      settingsWorldBooks: '世界书管理',
      settingsWorldBooksDesc: '世界书可以为AI提供额外的知识库，支持绑定到不同场景和角色',
      settingsWorldBooksButton: '打开世界书管理面板',
      settingsAutoTweetDetection: '智能发推检测',
      settingsAutoTweetDetectionDesc: '开启后，每隔5分钟自动检测已绑定角色的聊天记忆，生成New Tweet通知',
      settingsAutoTweetDetectionNote: '仅对设置了"角色身份识别"和"专属用户人设"的角色生效',
      settingsDetectionRunning: '检测服务运行中',
      settingsNextDetectionTime: '下次检测时间',
      settingsAutoRefreshFeed: '智能刷新主页',
      settingsAutoRefreshFeedDesc: '开启后，每隔10分钟自动刷新主页推文',
      settingsRefreshRunning: '刷新服务运行中',
      settingsNextRefreshTime: '下次刷新时间',
      // 关系图相关
      relationshipNoData: '暂无关系数据',
      relationshipNoDataHint: '点击上方按钮开始创建角色关系',
      relationshipCharacterCount: '角色数',
      relationshipLinkCount: '关系数',
      relationshipAddCharacter: '+ 添加角色',
      relationshipSave: '保存关系图',
      relationshipClose: '关闭',
      relationshipEmptyState: '暂无角色',
      relationshipEmptyStateHint: '点击上方按钮添加角色',
      // 直播页面
      liveTitle: '直播',
      liveAudioTab: '语音直播',
      liveVideoTab: '视频直播',
      liveOnlineCount: '人在线',
      liveJoinStream: '加入直播',
      liveNoAudioStreams: '暂无语音直播',
      liveNoVideoStreams: '暂无视频直播',
      liveWaitingContent: '等待精彩内容上线',
      // Toast 提示
      toastThemeLight: '已切换到日间模式',
      toastThemeDark: '已切换到夜间模式',
      toastLanguageChinese: '已切换到中文',
      toastLanguageEnglish: '已切换到英文',
      // 通用按钮
      btnSave: '保存',
      btnCancel: '取消',
      btnEdit: '编辑',
      btnDelete: '删除',
      btnConfirm: '确认',
    },
    en: {
      // 底部导航栏
      navHome: 'Home',
      navSearch: 'Explore',
      navNotifications: 'Notifications',
      navMessages: 'Messages',
      // 主页
      homeTitle: 'Home',
      homeForYou: 'For you',
      homeFollowing: 'Following',
      homeCompose: "What's happening?",
      homeNoTweets: 'No posts yet',
      homeNoTweetsDesc: 'Follow people or refresh to see recommended content',
      // 搜索页面
      searchTitle: 'Explore',
      searchPlaceholder: 'Search',
      searchTrending: "What's happening",
      searchNoResults: 'No results found',
      searchRefresh: 'Refresh trends',
      // 通知页面
      notificationsTitle: 'Notifications',
      notificationsTabAll: 'All',
      notificationsTabMentions: 'Mentions',
      notificationsEmpty: 'No notifications yet',
      notificationsEmptyDesc: "When someone likes, comments, or follows you, you'll see it here",
      notificationsRecommended: 'Recommended',
      notificationsLiked: 'liked your post',
      notificationsFollowed: 'followed you',
      notificationsReplied: 'replied to you',
      notificationsMentioned: 'mentioned you',
      notificationsRetweeted: 'retweeted your post',
      // 私信页面
      messagesTitle: 'Messages',
      messagesEmpty: 'No messages yet',
      messagesEmptyDesc: 'Send a message to stay in touch with friends',
      messageFollowers: 'followers',
      messageInputPlaceholder: 'Start a message',
      // 用户资料页面
      profileTitle: 'Profile',
      profileEditProfile: 'Edit profile',
      profileFollowing: 'Following',
      profileFollowers: 'Followers',
      profilePosts: 'Posts',
      profilePostsCount: 'posts',
      profileLikes: 'Likes',
      profileHighlights: 'Highlights',
      profileArticles: 'Articles',
      profileMedia: 'Media',
      profileNoLikes: 'No liked posts yet',
      profileNoLikesDesc: 'When you like a post, it will show up here.',
      profileNoHighlights: 'No bookmarks yet',
      profileNoHighlightsDesc: 'Tap the bookmark button below posts to save your favorites',
      profileNoArticles: 'No articles yet',
      profileNoArticlesDesc: 'Published articles will show up here.',
      profileNoMedia: 'No media yet',
      profileNoMediaDesc: 'Posts with photos and videos will show up here.',
      profileAccountManager: 'Account Manager',
      // 推文详情页
      tweetDetailTitle: 'Post',
      tweetDetailReply: 'Reply',
      tweetDetailReplyPlaceholder: 'Post your reply',
      tweetDetailRerollTooltip: 'Regenerate replies',
      tweetDetailRetweets: 'Reposts',
      tweetDetailLikes: 'Likes',
      tweetDetailBookmarks: 'Bookmarks',
      tweetDetailViews: 'Views',
      // 评论页面
      commentsTitle: 'Post',
      commentsReply: 'Reply',
      commentsReplyPlaceholder: 'Post your reply',
      // 账户主页
      accountPostsCount: 'posts',
      accountFollow: 'Follow',
      accountFollowing: 'Following',
      accountFollowingLabel: 'Following',
      accountFollowersLabel: 'Followers',
      accountFollowsYou: 'Follows you',
      accountPostsTab: 'Posts',
      accountRepliesTab: 'Replies',
      accountLikesTab: 'Likes',
      accountPinned: 'Pinned',
      accountNoPosts: 'No posts yet',
      accountNoPostsDesc: 'Posts from this account will show up here.',
      accountNoReplies: 'No replies yet',
      accountNoRepliesDesc: 'Replies from this account will show up here.',
      accountNoLikes: 'No likes yet',
      accountNoLikesDesc: 'Liked posts will show up here.',
      accountReplyTo: 'Replying to',
      accountLiked: 'liked',
      // 设置页面
      settingsTitle: 'Settings',
      settingsPrompt: 'System Prompt',
      settingsPromptPlaceholder: 'Enter system prompt...',
      settingsWorldView: 'World Setting',
      settingsWorldViewPlaceholder: 'Describe the world setting and background...',
      settingsCharacterBinding: 'Character Binding',
      settingsCharacterBindingDesc: 'When enabled, bound characters can post on X',
      settingsSelectCharacter: 'Select Character to Bind',
      settingsRelationship: 'Character Relations',
      settingsRelationshipDesc: 'When enabled, create relationship networks for bound characters',
      settingsRelationshipGraph: 'Relationship Graph',
      settingsEditGraph: 'Edit Graph',
      settingsNPCBinding: 'NPC Binding',
      settingsNPCBindingDesc: 'When enabled, create and manage custom NPCs',
      settingsNPCList: 'NPC List',
      settingsCreateNPC: '+ Create NPC',
      settingsSave: 'Save Settings',
      settingsSavePreset: 'Save as Preset',
      settingsImport: 'Import Data',
      settingsExport: 'Export Data',
      settingsPresetManagement: 'Preset Management',
      settingsWorldBooks: 'World Books',
      settingsWorldBooksDesc:
        'World books provide additional knowledge base for AI, can be bound to different scenes and characters',
      settingsWorldBooksButton: 'Open World Books Panel',
      settingsAutoTweetDetection: 'Auto Tweet Detection',
      settingsAutoTweetDetectionDesc:
        'When enabled, automatically detect chat history of bound characters every 5 minutes and generate New Tweet notifications',
      settingsAutoTweetDetectionNote:
        'Only effective for characters with "Identity Recognition" and "Exclusive User Persona" settings',
      settingsDetectionRunning: 'Detection service running',
      settingsNextDetectionTime: 'Next detection time',
      settingsAutoRefreshFeed: 'Auto Refresh Feed',
      settingsAutoRefreshFeedDesc: 'When enabled, automatically refresh feed every 10 minutes',
      settingsRefreshRunning: 'Refresh service running',
      settingsNextRefreshTime: 'Next refresh time',
      // 关系图相关
      relationshipNoData: 'No relationship data',
      relationshipNoDataHint: 'Click button above to create character relationships',
      relationshipCharacterCount: 'Characters',
      relationshipLinkCount: 'Relations',
      relationshipAddCharacter: '+ Add Character',
      relationshipSave: 'Save Graph',
      relationshipClose: 'Close',
      relationshipEmptyState: 'No characters',
      relationshipEmptyStateHint: 'Click button above to add characters',
      // 直播页面
      liveTitle: 'Live',
      liveAudioTab: 'Audio Live',
      liveVideoTab: 'Video Live',
      liveOnlineCount: 'viewers',
      liveJoinStream: 'Join Live',
      liveNoAudioStreams: 'No audio streams',
      liveNoVideoStreams: 'No video streams',
      liveWaitingContent: 'Waiting for exciting content',
      // Toast 提示
      toastThemeLight: 'Switched to Light Mode',
      toastThemeDark: 'Switched to Dark Mode',
      toastLanguageChinese: 'Switched to Chinese',
      toastLanguageEnglish: 'Switched to English',
      // 通用按钮
      btnSave: 'Save',
      btnCancel: 'Cancel',
      btnEdit: 'Edit',
      btnDelete: 'Delete',
      btnConfirm: 'Confirm',
    },
  }; // 当前语言
  let currentLanguage = 'zh'; // 切换语言
  async function toggleXLanguage() {
    try {
      // 切换语言
      currentLanguage = currentLanguage === 'zh' ? 'en' : 'zh'; // 应用语言
      applyLanguage(currentLanguage); // 保存语言偏好到数据库
      const xDb = getXDB();
      const settingsId = `xLanguage_${currentAccountId || 'main'}`;
      await xDb.xSettings.put({
        id: settingsId,
        language: currentLanguage,
        updatedAt: new Date().toISOString(),
      });
      console.log(`🌐 语言已切换为: ${currentLanguage === 'zh' ? '中文' : 'English'}`);
      showXToast(
        currentLanguage === 'zh' ? languageConfig.zh.toastLanguageChinese : languageConfig.en.toastLanguageEnglish,
        'success',
      );
    } catch (error) {
      console.error('语言切换失败:', error);
      showXToast('Language switch failed', 'error');
    }
  }
  // 获取当前语言的翻译文本
  function getI18nText(key) {
    const config = languageConfig[currentLanguage] || languageConfig['zh'];
    return config[key] || key;
  }
  // 应用语言到界面
  function applyLanguage(lang) {
    const config = languageConfig[lang];
    if (!config) return;
    console.log(`🌐 正在应用语言: ${lang}`); // 更新语言按钮文本
    const languageText = document.getElementById('language-text');
    if (languageText) {
      languageText.textContent = lang === 'zh' ? '中文' : 'EN';
    }
    // 更新所有带 data-i18n 属性的元素
    document.querySelectorAll('[data-i18n]').forEach(el => {
      const key = el.getAttribute('data-i18n');
      if (config[key]) {
        if (el.tagName === 'INPUT' || el.tagName === 'TEXTAREA') {
          el.placeholder = config[key];
        } else {
          // 对于其他元素，更新文本内容
          el.textContent = config[key];
        }
      }
    }); // 更新用户主页顶部的帖子计数（需要动态生成）
    const profileHeaderCount = document.getElementById('x-profile-header-count');
    if (profileHeaderCount && profileHeaderCount.textContent) {
      const count = profileHeaderCount.textContent.match(/\d+/);
      if (count) {
        profileHeaderCount.textContent = `${count[0]} ${config.profilePostsCount}`;
      }
    }
    // 更新推文详情页的动态内容
    updateTweetDetailLanguage(config); // 更新账户主页的动态内容
    updateAccountProfileLanguage(config); // 保存当前语言
    console.log(`✅ 语言已应用: ${lang === 'zh' ? '中文' : 'English'}`);
  }
  // 更新账户主页的语言
  function updateAccountProfileLanguage(config) {
    // 更新帖子计数
    const accountNavCount = document.getElementById('account-profile-nav-count');
    if (accountNavCount && accountNavCount.textContent) {
      const count = accountNavCount.textContent.match(/\d+/);
      if (count) {
        accountNavCount.textContent = `${count[0]} ${config.accountPostsCount}`;
      }
    }
    // 更新关注按钮文本
    const followBtn = document.getElementById('account-follow-btn');
    if (followBtn) {
      if (followBtn.textContent.includes('Following') || followBtn.textContent.includes('正在关注')) {
        followBtn.textContent = config.accountFollowing;
      } else if (followBtn.textContent.includes('Follow') || followBtn.textContent.includes('关注')) {
        followBtn.textContent = config.accountFollow;
      }
    }
  }
  // 更新推文详情页的语言
  function updateTweetDetailLanguage(config) {
    // 更新互动数据标签
    const statsDiv = document.getElementById('tweet-detail-stats');
    if (statsDiv) {
      const spans = statsDiv.querySelectorAll('span[style*="color: #71767b"]');
      if (spans.length >= 3) {
        spans[0].textContent = config.tweetDetailRetweets;
        spans[1].textContent = config.tweetDetailLikes;
        spans[2].textContent = config.tweetDetailBookmarks;
      }
    }
    // 更新查看次数标签
    const viewsLabel = document.getElementById('tweet-detail-views-label');
    if (viewsLabel) {
      viewsLabel.textContent = config.tweetDetailViews;
    }
  }
  // 加载保存的语言偏好
  async function loadLanguagePreference() {
    try {
      const xDb = getXDB();
      const settingsId = `xLanguage_${currentAccountId || 'main'}`;
      const savedSettings = await xDb.xSettings.get(settingsId);
      if (savedSettings && savedSettings.language) {
        currentLanguage = savedSettings.language;
        applyLanguage(currentLanguage);
      }
    } catch (error) {
      console.error('加载语言偏好失败:', error);
    }
  }
  // ============================================
  // 主题切换功能
  // ============================================
  // 切换日间/夜间主题
  async function toggleXTheme() {
    try {
      const xSocialScreen = document.getElementById('x-social-screen');
      if (!xSocialScreen) return;
      const isLightMode = xSocialScreen.classList.contains('x-theme-light');
      const newTheme = isLightMode ? 'dark' : 'light'; // 切换主题类
      if (newTheme === 'light') {
        xSocialScreen.classList.add('x-theme-light');
      } else {
        xSocialScreen.classList.remove('x-theme-light');
      }
      // 更新图标显示
      const darkIcon = document.getElementById('theme-icon-dark');
      const lightIcon = document.getElementById('theme-icon-light');
      if (newTheme === 'light') {
        darkIcon.style.display = 'none';
        lightIcon.style.display = 'block';
      } else {
        darkIcon.style.display = 'block';
        lightIcon.style.display = 'none';
      }
      // 保存主题偏好到数据库
      const xDb = getXDB();
      const settingsId = `xTheme_${currentAccountId || 'main'}`;
      await xDb.xSettings.put({
        id: settingsId,
        theme: newTheme,
        updatedAt: new Date().toISOString(),
      }); // 应用主题到所有动态元素
      applyThemeToElements(newTheme); // 重新渲染关系图画布（如果当前打开）
      const relationshipModal = document.getElementById('character-relationship-graph-modal');
      if (relationshipModal && relationshipModal.style.display !== 'none') {
        renderRelationshipGraph();
      }
      // 重新渲染关系预览画布（如果关系册已开启）
      const relationshipArea = document.getElementById('relationship-binding-area');
      if (relationshipArea && relationshipArea.style.display !== 'none') {
        setTimeout(() => {
          updateRelationshipPreview();
        }, 100);
      }
      console.log(`🎨 主题已切换为: ${newTheme === 'light' ? '日间模式' : '夜间模式'}`);
      const config = languageConfig[currentLanguage] || languageConfig.zh;
      showXToast(newTheme === 'light' ? config.toastThemeLight : config.toastThemeDark, 'success');
    } catch (error) {
      console.error('主题切换失败:', error);
      showXToast('主题切换失败', 'error');
    }
  }
  // 应用主题到动态元素
  function applyThemeToElements(theme) {
    const xSocialScreen = document.getElementById('x-social-screen');
    if (!xSocialScreen) return;
    const isLight = theme === 'light'; // 更新所有需要动态更新的元素
    const elementsToUpdate = {
      // 背景色
      '.x-top-bar, .x-bottom-nav, .settings-header, .tweet-detail-header, .compose-header, .modal-header, .account-header':
        {
          backgroundColor: isLight ? '#fff' : '#000',
          borderBottomColor: isLight ? '#eff3f4' : '#2f3336',
        },
      // 文本色
      '.tweet-user-name, .tweet-content, .comment-content': {
        color: isLight ? '#0f1419' : '#fff',
      },
      // 次要文本色
      '.tweet-user-handle, .tweet-time, .comment-time': {
        color: isLight ? '#536471' : '#71767b',
      },
      // 边框色
      '.tweet-item, .comment-item, .settings-section': {
        borderBottomColor: isLight ? '#eff3f4' : '#2f3336',
      },
      // 输入框背景
      'textarea, input[type="text"]': {
        backgroundColor: isLight ? '#f7f9f9' : '#1a1a1a',
        borderColor: isLight ? '#eff3f4' : '#333',
        color: isLight ? '#0f1419' : '#fff',
      },
    }; // 应用样式（这些样式会在下次页面渲染时生效，当前页面的内联样式会覆盖）
    // 主要是为新生成的元素设置正确的主题
  }
  // 加载保存的主题偏好
  async function loadXThemePreference() {
    try {
      const xDb = getXDB();
      const settingsId = `xTheme_${currentAccountId || 'main'}`;
      const themeSettings = await xDb.xSettings.get(settingsId);
      if (themeSettings && themeSettings.theme) {
        const xSocialScreen = document.getElementById('x-social-screen');
        if (!xSocialScreen) return;
        if (themeSettings.theme === 'light') {
          xSocialScreen.classList.add('x-theme-light'); // 更新图标显示
          const darkIcon = document.getElementById('theme-icon-dark');
          const lightIcon = document.getElementById('theme-icon-light');
          if (darkIcon && lightIcon) {
            darkIcon.style.display = 'none';
            lightIcon.style.display = 'block';
          }
          applyThemeToElements('light');
        }
        console.log(`🎨 已加载主题偏好: ${themeSettings.theme === 'light' ? '日间模式' : '夜间模式'}`);
      }
    } catch (error) {
      console.error('加载主题偏好失败:', error);
    }
  }
  // ============================================
  // 直播功能
  // ============================================

  // 当前直播标签页
  let currentLiveTab = 'audio';

  // 自定义直播分类数据
  let liveCustomCategories = [];

  // 直播收纳按钮状态（使用全局变量）
  // let liveBtnExpanded = false; // 移至全局导出

  // 直播封面背景图片集合
  const liveBackgroundImages = [
    'https://i.postimg.cc/8PDPnVzb/00a041b0fad26d28187d01ff3beaa5bb.jpg',
    'https://i.postimg.cc/mDCB8dxy/01a0641ac6ccdd39d92c010c0de96081.jpg',
    'https://i.postimg.cc/BQMsYLyJ/09c6de67b73f8cb6c98df9c5e6de780b.jpg',
    'https://i.postimg.cc/HnTD3d4q/156e25617d2a3e905d2e5a7e1d489700.jpg',
    'https://i.postimg.cc/JncSsSV2/c05d136d6ab0836ba4a89cc58ac1a201.jpg',
    'https://i.postimg.cc/vHmCmPq8/f1ecc90ac9e91d2a968faead1464d0bc.jpg',
    'https://i.postimg.cc/RC1n0d3N/01f3e825a988ae3fa59d498217478964.jpg',
    'https://i.postimg.cc/7ZR5RQRc/72700355d3069eb2cea793d7b9d40ad4.jpg',
    'https://i.postimg.cc/5N7yHRfz/bea6a5355ed311f47a397d7bc0257865.jpg',
  ];

  // 获取随机背景图片
  function getRandomBackground() {
    const randomIndex = Math.floor(Math.random() * liveBackgroundImages.length);
    return liveBackgroundImages[randomIndex];
  }

  // 测试直播数据
  const liveStreamData = {
    audio: [
      {
        id: 'audio_1',
        title: '深夜聊天室 | 来聊聊最近的心情故事吧',
        streamerHandle: '@nighttalker',
        streamerName: '夜谈者',
        streamerAvatar: 'https://i.postimg.cc/pXxk1JXk/IMG-6442.jpg',
        description: '和大家聊聊生活中的点点滴滴，分享今天的心情和想法',
        onlineCount: 156,
        category: '生活分享',
        isLive: true,
        duration: '1h 23m',
        background: getRandomBackground(),
      },
    ],
    video: [
      {
        id: 'video_1',
        title: 'AI技术探讨 - 大语言模型的发展与未来',
        streamerHandle: '@techexplorer',
        streamerName: '科技探索者',
        streamerAvatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
        description: '探讨最新的人工智能技术趋势，欢迎大家一起交流学习',
        onlineCount: 892,
        category: '科技教育',
        isLive: true,
        duration: '2h 15m',
        background: getRandomBackground(),
      },
    ],
  };

  // 切换直播标签页
  function switchLiveTab(tabName) {
    currentLiveTab = tabName;

    // 更新标签样式
    const tabs = document.querySelectorAll('.live-tab');
    tabs.forEach(tab => {
      tab.classList.remove('live-tab-active');
      tab.style.color = '#71767b';
      tab.style.backgroundColor = 'rgba(255,255,255,0.1)';
    });

    // 激活当前标签
    let activeTab = null;
    if (tabName === 'audio') {
      activeTab = tabs[0];
    } else if (tabName === 'video') {
      activeTab = tabs[1];
    } else {
      // 自定义分类
      activeTab = Array.from(tabs).find(tab => tab.onclick && tab.onclick.toString().includes(tabName));
    }

    if (activeTab) {
      activeTab.classList.add('live-tab-active');
      activeTab.style.color = '#fff';
      activeTab.style.backgroundColor = 'var(--x-accent)';
    }

    // 切换内容显示（带淡出淡入动画）
    const allContents = document.querySelectorAll('.live-tab-content');

    // 淡出所有内容
    allContents.forEach(content => {
      content.style.opacity = '0';
      content.style.transition = 'opacity 0.2s ease-out';
    });

    setTimeout(() => {
      allContents.forEach(content => {
        content.style.display = 'none';
      });

      // 对于基础分类，显示对应的内容区域
      if (tabName === 'audio' || tabName === 'video') {
        const targetContent = document.getElementById(`live-${tabName}-content`);
        if (targetContent) {
          targetContent.style.display = 'block';
          // 淡入动画
          setTimeout(() => {
            targetContent.style.opacity = '1';
          }, 10);
        }
        // 重新渲染直播列表
        renderLiveStreams(tabName);
      } else {
        // 自定义分类：显示自定义内容
        const audioContent = document.getElementById('live-audio-content');
        if (audioContent) {
          audioContent.style.display = 'block';
          // 淡入动画
          setTimeout(() => {
            audioContent.style.opacity = '1';
          }, 10);
          const container = document.getElementById('live-audio-list');
          if (container) {
            const customStreams = liveStreamData[tabName] || [];
            const category = liveCustomCategories.find(cat => cat.id === tabName);
            const categoryName = category ? category.name : '自定义分类';

            if (customStreams.length === 0) {
              // 显示空状态
              container.innerHTML = `
                <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 60px 20px; color: #aaa; text-align: center;">
                  <svg viewBox="0 0 24 24" style="width: 48px; height: 48px; fill: currentColor; opacity: 0.5; margin-bottom: 16px;">
                    <path d="M10.5 20h-5.5a2 2 0 0 1 -2 -2v-9a2 2 0 0 1 2 -2h1a2 2 0 0 0 2 -2a1 1 0 0 1 1 -1h6a1 1 0 0 1 1 1a2 2 0 0 0 2 2h1a2 2 0 0 1 2 2v2.5" />
                    <path d="M14.569 11.45a3 3 0 1 0 -4.518 3.83" />
                  </svg>
                  <div style="font-size: 16px; font-weight: 600; margin-bottom: 8px;">${categoryName}直播</div>
                  <div style="font-size: 14px; opacity: 0.8;">该分类下暂无直播内容</div>
                </div>
              `;
            } else {
              // 渲染自定义分类的直播内容
              customStreams.forEach(stream => {
                if (!stream.background) {
                  stream.background = getRandomBackground();
                }
              });
              container.innerHTML = customStreams
                .map((stream, index) => createLiveStreamCard(stream, tabName, index))
                .join('');
            }
          }
        }
      }
    }, 200); // 等待淡出动画完成
  }

  // 渲染直播列表
  function renderLiveStreams(type) {
    const container = document.getElementById(`live-${type}-list`);
    if (!container) return;

    const streams = liveStreamData[type] || [];

    if (streams.length === 0) {
      const config = languageConfig[currentLanguage] || languageConfig['zh'];
      const noStreamsText = type === 'audio' ? config.liveNoAudioStreams : config.liveNoVideoStreams;

      container.innerHTML = `
        <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 60px 20px; color: #aaa; text-align: center;">
          <svg viewBox="0 0 24 24" style="width: 48px; height: 48px; fill: currentColor; opacity: 0.5; margin-bottom: 16px;">
            <path d="M10.5 20h-5.5a2 2 0 0 1 -2 -2v-9a2 2 0 0 1 2 -2h1a2 2 0 0 0 2 -2a1 1 0 0 1 1 -1h6a1 1 0 0 1 1 1a2 2 0 0 0 2 2h1a2 2 0 0 1 2 2v2.5" />
            <path d="M14.569 11.45a3 3 0 1 0 -4.518 3.83" />
          </svg>
          <div style="font-size: 16px; font-weight: 600; margin-bottom: 8px;">${noStreamsText}</div>
          <div style="font-size: 14px; opacity: 0.8;">${config.liveWaitingContent}</div>
        </div>
      `;
      return;
    }

    // 如果测试模式下需要添加随机背景，确保每个stream都有background
    streams.forEach(stream => {
      if (!stream.background) {
        stream.background = getRandomBackground();
      }
    });

    // 生成直播卡片HTML
    container.innerHTML = streams.map((stream, index) => createLiveStreamCard(stream, type, index)).join('');
  }

  // 创建直播卡片
  function createLiveStreamCard(stream, type, index = 0) {
    const config = languageConfig[currentLanguage] || languageConfig['zh'];
    const animationDelay = index * 0.05; // 每个卡片延迟50ms

    return `
      <div class="live-stream-card" onclick="joinLiveStream('${stream.id}')" 
        style="cursor: pointer; transition: all 0.2s ease; position: relative; margin-bottom: 16px; animation: liveCardFadeIn 0.4s ease-out ${animationDelay}s both; opacity: 0;"
        onmouseover="this.querySelector('.card-overlay').style.opacity='1'"
        onmouseout="this.querySelector('.card-overlay').style.opacity='0'">
        
        <!-- 缩略图容器 -->
        <div style="position: relative; width: 100%; aspect-ratio: 16/9; border-radius: 12px; overflow: hidden; margin-bottom: 12px; background-color: #1a1a1a;">
          <!-- 背景图片 -->
          <img src="${stream.background}" alt="${stream.title}" 
            style="width: 100%; height: 100%; object-fit: cover;">
          
          <!-- 在线人数指示器 -->
          <div style="position: absolute; top: 8px; left: 8px; display: flex; align-items: center; gap: 4px; background-color: rgba(0,0,0,0.7); padding: 3px 8px; border-radius: 4px;">
            <div style="width: 8px; height: 8px; background-color: var(--x-accent); border-radius: 50%; animation: pulse 2s infinite;"></div>
            <span style="color: #fff; font-size: 12px; font-weight: 500;">${stream.onlineCount.toLocaleString()}</span>
          </div>
          
          <!-- 持续时间 -->
          <div style="position: absolute; bottom: 8px; right: 8px; background-color: rgba(0,0,0,0.7); padding: 3px 8px; border-radius: 4px;">
            <span style="color: #fff; font-size: 12px; font-weight: 500;">${stream.duration}</span>
          </div>
          
          <!-- 悬停覆盖层 -->
          <div class="card-overlay" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); display: flex; justify-content: center; align-items: center; opacity: 0; transition: opacity 0.2s ease;">
            <div style="width: 48px; height: 48px; border-radius: 50%; background-color: var(--x-accent); display: flex; justify-content: center; align-items: center;">
              <svg viewBox="0 0 24 24" style="width: 24px; height: 24px; fill: #fff;">
                <path d="M8 5v14l11-7z"></path>
              </svg>
            </div>
          </div>
        </div>
        
        <!-- 内容区域 -->
        <div style="display: flex; gap: 12px;">
          <!-- 主播头像 -->
          <div style="width: 36px; height: 36px; border-radius: 50%; overflow: hidden; flex-shrink: 0;">
            <img src="${stream.streamerAvatar}" alt="${
      stream.streamerName
    }" style="width: 100%; height: 100%; object-fit: cover;">
          </div>
          
          <!-- 文本内容 -->
          <div style="flex: 1; min-width: 0;">
            <!-- 直播标题 -->
            <h3 style="color: #fff; font-size: 14px; font-weight: 500; margin: 0 0 6px 0; line-height: 1.3; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden;">${
              stream.title
            }</h3>
            
            <!-- 主播名和分类 -->
            <div style="display: flex; flex-direction: column;">
              <span style="color: #aaa; font-size: 12px; margin-bottom: 2px;">${stream.streamerName} ${
      stream.streamerHandle
    }</span>
              <div style="display: flex; align-items: center; gap: 8px;">
                <span style="color: #aaa; font-size: 12px;">${stream.category}</span>
              </div>
            </div>
          </div>
          
          <!-- 更多选项 -->
          <div style="width: 24px; display: flex; justify-content: center; cursor: pointer;" onclick="event.stopPropagation()">
            <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: #fff;">
              <path d="M12 16.5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5-1.5-.67-1.5-1.5.67-1.5 1.5-1.5zM10.5 12c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5-.67-1.5-1.5-1.5-1.5.67-1.5 1.5zm0-6c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5-.67-1.5-1.5-1.5-1.5.67-1.5 1.5z"></path>
            </svg>
          </div>
        </div>
      </div>
      
      <style>
        @keyframes pulse {
          0% { opacity: 1; }
          50% { opacity: 0.5; }
          100% { opacity: 1; }
        }
        
        @keyframes spin {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }
        
        @keyframes liveCardFadeIn {
          0% {
            opacity: 0;
            transform: translateY(20px);
          }
          100% {
            opacity: 1;
            transform: translateY(0);
          }
        }
      </style>
    `;
  }

  // 加入直播间
  function joinLiveStream(streamId) {
    // 这里将来可以实现实际的直播间功能
    console.log('正在加入直播间:', streamId);
    showXToast('直播功能开发中...', 'info');
  }

  // 初始化直播页面
  async function initLivePage() {
    try {
      // 默认显示语音直播
      currentLiveTab = 'audio';

      // 加载已保存的直播数据
      await loadSavedLiveData();

      // 加载已保存的直播状态
      const liveCharacters = await loadLiveCharacterStatus();

      // 渲染直播内容
      renderLiveStreams('audio');
      renderLiveStreams('video');

      // 同步用户头像
      syncLivePageAvatar();

      // 加载自定义直播分类
      await loadLiveCustomCategories();

      // 同步角色头像（使用已保存的直播状态）
      await syncLiveCharacterAvatars(liveCharacters);

      // 重置收纳按钮状态
      window.liveBtnExpanded = false;
      resetLiveActionButtons();

      console.log('✅ [直播页面] 初始化完成');
    } catch (error) {
      console.error('❌ [直播页面] 初始化失败:', error);
    }
  }

  // 重置收纳按钮状态
  function resetLiveActionButtons() {
    setTimeout(() => {
      const refreshBtn = document.getElementById('live-refresh-btn');
      const startBtn = document.getElementById('live-start-btn');
      const mainBtn = document.getElementById('live-main-btn');
      const mainIcon = document.getElementById('live-main-icon');

      if (refreshBtn && startBtn && mainBtn && mainIcon) {
        // 重置所有按钮到初始状态
        refreshBtn.style.transform = 'scale(0)';
        refreshBtn.style.opacity = '0';
        startBtn.style.transform = 'scale(0)';
        startBtn.style.opacity = '0';
        mainBtn.style.transform = 'scale(1)';
        mainIcon.style.transform = 'rotate(0deg)';
      }
    }, 100);
  }

  // 同步直播页面用户头像
  function syncLivePageAvatar() {
    const liveAvatar = document.getElementById('live-page-user-avatar');
    if (liveAvatar && window.userProfileData && window.userProfileData.avatar) {
      liveAvatar.src = window.userProfileData.avatar;
    }
  }

  // 同步角色头像和直播状态
  async function syncLiveCharacterAvatars(liveCharacters = []) {
    try {
      console.log('🎭 [角色头像] 开始同步角色头像和直播状态...');

      const xDb = getXDB();
      const allXProfiles = await xDb.xCharacterProfiles.toArray();

      // 获取绑定角色列表
      let boundCharacters = [];
      try {
        const { xSettings } = await APIUtils.loadConfigAndSettings();
        boundCharacters = xSettings.boundCharacters || [];
      } catch (error) {
        console.warn('⚠️ [角色头像] 获取绑定角色失败:', error);
        boundCharacters = [];
      }

      // 获取所有绑定角色的资料
      const characterAvatars = [];
      for (const charId of boundCharacters) {
        const xProfile = allXProfiles.find(p => p.characterId === charId);
        if (xProfile) {
          const isLive = liveCharacters.some(lc => lc.characterId === charId);
          characterAvatars.push({
            characterId: charId,
            name: xProfile.xName,
            handle: xProfile.xHandle,
            avatar: xProfile.xAvatar,
            isLive: isLive,
            xProfile: xProfile,
          });
        }
      }

      // 按直播状态排序：正在直播的在前面
      characterAvatars.sort((a, b) => {
        if (a.isLive && !b.isLive) return -1;
        if (!a.isLive && b.isLive) return 1;
        return 0;
      });

      // 更新顶部头像栏（用户频道栏是直播页面的第二个div）
      let avatarContainer = document.querySelector('#x-live-page > div:nth-child(2)');
      if (!avatarContainer) {
        console.warn('⚠️ [角色头像] 未找到头像容器，尝试备用选择器...');
        // 备用选择器：通过样式特征查找
        avatarContainer = document.querySelector(
          '#x-live-page div[style*="overflow-x: auto"][style*="padding: 8px 16px"]',
        );
        if (avatarContainer) {
          console.log('✅ [角色头像] 使用备用选择器找到容器');
        } else {
          console.error('❌ [角色头像] 完全未找到头像容器');
          return;
        }
      }

      // 构建头像HTML
      if (characterAvatars.length === 0) {
        // 如果没有绑定角色，显示默认提示
        avatarContainer.innerHTML = `
          <div style="display: flex; flex-direction: column; align-items: center; gap: 6px; min-width: 64px;">
            <div style="width: 56px; height: 56px; border-radius: 50%; overflow: hidden; position: relative; display: flex; align-items: center; justify-content: center; background-color: rgba(255,255,255,0.1);">
              <svg viewBox="0 0 24 24" style="width: 24px; height: 24px; fill: #71767b;">
                <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
              </svg>
            </div>
            <span style="color: #71767b; font-size: 12px; white-space: nowrap; text-overflow: ellipsis; overflow: hidden; max-width: 60px;">暂无角色</span>
          </div>
        `;
      } else {
        // 生成角色头像
        const avatarHTML = characterAvatars
          .map((char, index) => {
            const glowEffect = char.isLive
              ? `box-shadow: 0 0 0 3px var(--x-accent), 0 0 15px var(--x-accent); animation: liveGlow 2s ease-in-out infinite;`
              : '';

            return `
            <div style="display: flex; flex-direction: column; align-items: center; gap: 6px; min-width: 64px; margin-right: ${
              index < characterAvatars.length - 1 ? '12px' : '0'
            };">
              <div style="width: 56px; height: 56px; border-radius: 50%; overflow: hidden; position: relative; ${glowEffect}" 
                   title="${char.name} ${char.isLive ? '(正在直播)' : ''}"
                   onclick="handleLiveCharacterClick('${char.characterId}', ${char.isLive})">
                <img src="${char.avatar}" 
                     style="width: 100%; height: 100%; object-fit: cover; cursor: pointer;"
                     alt="${char.name}">
                ${
                  char.isLive
                    ? `
                  <div style="position: absolute; top: -2px; right: -2px; width: 20px; height: 20px; background-color: var(--x-accent); border-radius: 50%; display: flex; justify-content: center; align-items: center; border: 3px solid #0f0f0f;">
                    <div style="width: 8px; height: 8px; background-color: #fff; border-radius: 50%; animation: pulse 2s infinite;"></div>
                  </div>
                `
                    : ''
                }
              </div>
              <span style="color: ${
                char.isLive ? 'var(--x-accent)' : '#fff'
              }; font-size: 12px; white-space: nowrap; text-overflow: ellipsis; overflow: hidden; max-width: 60px; font-weight: ${
              char.isLive ? '600' : '400'
            };">
                ${char.name}
              </span>
            </div>
          `;
          })
          .join('');

        avatarContainer.innerHTML = avatarHTML;

        // 添加光晕动画样式
        if (liveCharacters.length > 0) {
          const style = document.getElementById('live-glow-style');
          if (!style) {
            const newStyle = document.createElement('style');
            newStyle.id = 'live-glow-style';
            newStyle.textContent = `
              @keyframes liveGlow {
                0% { box-shadow: 0 0 0 3px var(--x-accent), 0 0 15px var(--x-accent); }
                50% { box-shadow: 0 0 0 3px var(--x-accent), 0 0 25px var(--x-accent); }
                100% { box-shadow: 0 0 0 3px var(--x-accent), 0 0 15px var(--x-accent); }
              }
            `;
            document.head.appendChild(newStyle);
          }
        }
      }

      const liveCount = characterAvatars.filter(c => c.isLive).length;
      console.log(`✅ [角色头像] 同步完成，共${characterAvatars.length}个角色，${liveCount}个正在直播`);
    } catch (error) {
      console.error('❌ [角色头像] 同步失败:', error);
    }
  }

  // ============================================
  // 直播收纳按钮动画功能
  // ============================================

  // 切换收纳按钮展开状态
  function toggleLiveActionButtons() {
    const refreshBtn = document.getElementById('live-refresh-btn');
    const startBtn = document.getElementById('live-start-btn');
    const mainBtn = document.getElementById('live-main-btn');
    const mainIcon = document.getElementById('live-main-icon');

    if (!refreshBtn || !startBtn || !mainBtn || !mainIcon) return;

    window.liveBtnExpanded = !window.liveBtnExpanded;

    if (window.liveBtnExpanded) {
      // 展开动画
      // 主按钮旋转
      mainBtn.style.transform = 'rotate(45deg)';
      mainIcon.style.transform = 'rotate(-45deg)';

      // 左侧刷新按钮从右向左滑入
      setTimeout(() => {
        refreshBtn.style.transform = 'scale(1) translateX(0)';
        refreshBtn.style.opacity = '1';
      }, 50);

      // 右侧开启按钮从左向右滑入
      setTimeout(() => {
        startBtn.style.transform = 'scale(1) translateX(0)';
        startBtn.style.opacity = '1';
      }, 100);
    } else {
      // 收起动画
      // 主按钮恢复
      mainBtn.style.transform = 'scale(1)';
      mainIcon.style.transform = 'rotate(0deg)';

      // 按钮收起
      refreshBtn.style.transform = 'scale(0) translateX(15px)';
      refreshBtn.style.opacity = '0';

      startBtn.style.transform = 'scale(0) translateX(-15px)';
      startBtn.style.opacity = '0';
    }
  }

  // ▼▼▼ 【主要！！！】第十二个情景：直播刷新生成器 ▼▼▼
  // 刷新直播列表
  async function refreshLiveStreams() {
    console.log('🔴 [直播刷新] 开始刷新直播列表...');

    // 添加旋转动画效果
    const refreshBtn = document.getElementById('live-refresh-btn');
    if (refreshBtn) {
      const svg = refreshBtn.querySelector('svg');
      if (svg) {
        svg.style.animation = 'spin 1s linear';
      }
    }

    try {
      // 🔧 使用统一的API配置加载工具
      const { db, xDb, apiConfig, xSettings } = await APIUtils.loadConfigAndSettings();
      const { userPrompt, worldSetting, boundCharacters } = xSettings;

      // 使用工具函数构建用户X个人资料信息
      const userXProfileInfo = StringBuilders.buildUserXProfileInfo(window.userProfileData);

      // Token计数器
      let tokenCount = 0;

      // 1. 构建基础系统提示词
      let systemPrompt = StringBuilders.buildBaseSystemPrompt({
        userPrompt,
        worldSetting,
      });
      tokenCount = TokenUtils.logTokenUsage('直播刷新生成器', '基础系统提示词', systemPrompt, tokenCount);

      // 1.5. 获取适用的世界书内容
      const worldBooksContent = await StringBuilders.getApplicableWorldBooks('live', {
        boundCharacters,
      });
      if (worldBooksContent) {
        systemPrompt += worldBooksContent;
        tokenCount = TokenUtils.logTokenUsage('直播刷新生成器', '世界书内容', worldBooksContent, tokenCount);
      }

      // 2. 添加直播生成任务说明
      systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 核心任务说明 🎯
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
你是X社交平台的直播内容生成器。请生成当前的直播数据。

【生成要求】：
- 为"语音直播"和"视频直播"各生成3个直播间
- 如果有自定义直播分类，也为每个分类生成3个直播间
- 直播内容要多样化，符合分类特点
- 直播者可以是绑定角色、绑定NPC或虚构的普通用户
- 绑定角色是否正在直播由AI根据角色人设和兴趣决定

【直播数据格式】：
- 直播标题：简洁有趣，符合直播内容
- 直播者信息：姓名、句柄、头像、认证状态
- 直播时长：合理的时长（如 "1h 23m", "2h 15m", "35m"等）
- 在线人数：1-2000之间的合理数字
- 直播类别：符合分类的具体标签
- 直播间简介：可选，简短描述直播内容

🚨 **重要：你必须只返回有效的JSON格式数据，任何语法错误都会导致系统崩溃！** 🚨
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;

      const coreTaskSection = systemPrompt.substring(systemPrompt.lastIndexOf('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━'));
      tokenCount = TokenUtils.logTokenUsage('直播刷新生成器', '核心任务说明', coreTaskSection, tokenCount);

      // 3. 角色资料（直播生成场景）
      const charactersInfo = await StringBuilders.buildCompleteCharacterInfo(boundCharacters, userXProfileInfo, 'live');
      if (charactersInfo) {
        systemPrompt += charactersInfo;
        tokenCount = TokenUtils.logTokenUsage('直播刷新生成器', '角色资料信息', charactersInfo, tokenCount);
      }

      // 3.5. 加载绑定NPC信息
      const boundNPCs = await APIUtils.loadBoundNPCs();
      if (boundNPCs.length > 0) {
        const npcSectionStart = systemPrompt.length;
        systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📋 绑定NPC资料（可作为直播者）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
以下NPC可以作为直播者出现：
`;
        for (const npc of boundNPCs) {
          systemPrompt += `
【NPC信息】
- X姓名：${npc.name}
- X句柄：${npc.handle}
- X头像：${npc.avatar}
- 认证状态：false
【人设描述】
${npc.personality || '暂无人设描述'}
【发帖习惯/兴趣】
${npc.postingHabits || '暂无描述'}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
        }
        const npcSection = systemPrompt.substring(npcSectionStart);
        tokenCount = TokenUtils.logTokenUsage('直播刷新生成器', 'NPC资料信息', npcSection, tokenCount);
      }

      // 4. 获取自定义直播分类
      const enabledCustomCategories = liveCustomCategories.filter(cat => cat.enabled && cat.name.trim());

      // 5. 构建自定义分类信息
      if (enabledCustomCategories.length > 0) {
        systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📂 自定义直播分类
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
        enabledCustomCategories.forEach(category => {
          systemPrompt += `
【${category.name}】
- 分类描述：${category.description || '无描述'}
- 生成要求：为此分类生成3个相关的直播间
`;
        });
        systemPrompt += `━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
        tokenCount = TokenUtils.logTokenUsage(
          '直播刷新生成器',
          '自定义分类信息',
          systemPrompt.substring(systemPrompt.lastIndexOf('📂 自定义直播分类')),
          tokenCount,
        );
      }

      // 6. 用户约束信息
      const userConstraintsStart = systemPrompt.length;
      systemPrompt += StringBuilders.buildUniversalConstraints(userXProfileInfo);
      const userConstraints = systemPrompt.substring(userConstraintsStart);
      tokenCount = TokenUtils.logTokenUsage('直播刷新生成器', '用户约束信息', userConstraints, tokenCount);

      // 7. 构建JSON返回格式
      let jsonFormat = `{
  "audio": [
    {
      "title": "直播标题",
      "streamerName": "主播姓名",
      "streamerHandle": "@句柄",
      "streamerAvatar": "头像链接",
      "description": "直播间简介（可选）",
      "onlineCount": 数字,
      "category": "直播类别",
      "duration": "直播时长",
      "isLive": true
    }
  ],
  "video": [
    {
      "title": "直播标题", 
      "streamerName": "主播姓名",
      "streamerHandle": "@句柄",
      "streamerAvatar": "头像链接",
      "description": "直播间简介（可选）",
      "onlineCount": 数字,
      "category": "直播类别", 
      "duration": "直播时长",
      "isLive": true
    }
  ]`;

      // 添加自定义分类到JSON格式
      if (enabledCustomCategories.length > 0) {
        enabledCustomCategories.forEach(category => {
          jsonFormat += `,
  "${category.id}": [
    {
      "title": "直播标题",
      "streamerName": "主播姓名", 
      "streamerHandle": "@句柄",
      "streamerAvatar": "头像链接",
      "description": "直播间简介（可选）",
      "onlineCount": 数字,
      "category": "直播类别",
      "duration": "直播时长", 
      "isLive": true
    }
  ]`;
        });
      }

      jsonFormat += `
}`;

      systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📋 JSON返回格式 - 严格执行 📋
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
⚠️ 必须返回完全有效的JSON，任何语法错误都将导致解析失败！

${jsonFormat}

🚨 【JSON语法严格要求】🚨
1. **字符串值**：必须用双引号包围，内容中的引号必须转义为\\"
2. **数字值**：onlineCount直接写数字，不要加引号 ✅ "onlineCount": 156 ❌ "onlineCount": "156"
3. **布尔值**：isLive固定为true，不加引号 ✅ "isLive": true ❌ "isLive": "true"
4. **数组**：用[]包围，元素间用逗号分隔，最后一个元素后不要逗号
5. **对象**：用{}包围，键必须用双引号，最后一个元素后不要逗号

🔒 【必需字段检查】🔒
每个直播间必须包含：title, streamerName, streamerHandle, streamerAvatar, onlineCount, category, duration, isLive
其中 description 是可选字段

【直播者选择策略】：
1. 绑定角色：根据角色人设、兴趣、X资料等判断是否适合直播，如果适合则可作为主播
2. 绑定NPC：根据NPC人设和发帖习惯判断是否适合直播
3. 虚构用户：创建符合直播内容的虚构主播
4. 头像规则：
   - 绑定角色：使用角色的xAvatar
   - 绑定NPC：使用NPC的avatar
   - 虚构用户：使用默认头像 https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg
5. 认证状态：绑定角色根据xVerified，绑定NPC和虚构用户默认false

【内容质量要求】：
1. 直播标题要有趣吸引人，符合分类特点
2. 在线人数要合理（1-2000），热门内容人数可以多一些
3. 直播时长要现实合理（15分钟到8小时之间）
4. 直播类别要具体且符合内容（如"音乐分享"、"技术教程"、"游戏娱乐"等）
5. 直播间简介简洁明了，1-2句话描述直播内容

请直接返回JSON数据，不要添加任何解释文字或markdown标记。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━`;

      const formatSection = systemPrompt.substring(systemPrompt.lastIndexOf('📋 JSON返回格式'));
      tokenCount = TokenUtils.logTokenUsage('直播刷新生成器', 'JSON格式要求', formatSection, tokenCount);

      const messages = [
        {
          role: 'user',
          content: `请生成新的X直播平台直播数据。

⚠️ 关键要求：
1. 必须返回完全有效的JSON格式，不要有任何语法错误
2. 严格按照上述示例的格式和字段类型
3. 数字字段不要加引号，布尔值不要加引号
4. 字符串中的引号必须转义
5. 不要在对象或数组末尾添加多余的逗号

请直接返回JSON，不要添加任何解释文字。`,
        },
      ];

      // 最终统计
      const userMessage = messages[0].content;
      TokenUtils.logFinalPrompt('直播刷新生成器', systemPrompt, userMessage);

      // 🔧 使用统一的API请求工具
      const aiResponseContent = await APIUtils.sendAIRequest({
        apiConfig,
        systemPrompt,
        messages,
        temperature: 0.8,
      });

      // 🔧 使用统一的JSON解析工具
      let newLiveData = APIUtils.parseJSONResponse(aiResponseContent);

      // 🔧 使用统一的后处理工具
      newLiveData = await APIUtils.postProcessData(newLiveData, userXProfileInfo);

      // 验证数据格式
      if (!newLiveData.audio || !newLiveData.video) {
        throw new Error('AI返回的数据格式不正确，缺少必要字段');
      }

      // 为直播添加ID和随机背景
      const timestamp = Date.now();
      const processStreams = (streams, type) => {
        return streams.map((stream, index) => {
          return {
            ...stream,
            id: `${type}_${timestamp}_${index}`,
            background: getRandomBackground(), // 随机背景图
            createdAt: timestamp,
          };
        });
      };

      // 处理基础分类
      newLiveData.audio = processStreams(newLiveData.audio, 'audio');
      newLiveData.video = processStreams(newLiveData.video, 'video');

      // 处理自定义分类
      enabledCustomCategories.forEach(category => {
        if (newLiveData[category.id] && Array.isArray(newLiveData[category.id])) {
          newLiveData[category.id] = processStreams(newLiveData[category.id], category.id);
        }
      });

      // 更新全局直播数据
      liveStreamData.audio = newLiveData.audio;
      liveStreamData.video = newLiveData.video;

      // 更新自定义分类数据
      enabledCustomCategories.forEach(category => {
        if (newLiveData[category.id]) {
          liveStreamData[category.id] = newLiveData[category.id];
        }
      });

      // 保存到数据库
      try {
        const saveData = {
          id: 'liveStreams',
          audio: newLiveData.audio,
          video: newLiveData.video,
          lastUpdated: new Date().toISOString(),
        };

        // 添加自定义分类数据
        enabledCustomCategories.forEach(category => {
          if (newLiveData[category.id]) {
            saveData[category.id] = newLiveData[category.id];
          }
        });

        await xDb.xTweetsData.put(saveData);
        console.log('✅ 直播数据已保存到数据库');
      } catch (saveError) {
        console.error('⚠️ 保存直播数据失败:', saveError);
      }

      // 分析哪些绑定角色正在直播
      const liveCharacters = [];
      const allStreams = [
        ...newLiveData.audio,
        ...newLiveData.video,
        ...Object.keys(newLiveData)
          .filter(key => !['audio', 'video'].includes(key))
          .reduce((acc, key) => {
            if (Array.isArray(newLiveData[key])) {
              acc.push(...newLiveData[key]);
            }
            return acc;
          }, []),
      ];

      // 检查绑定角色是否在直播
      if (boundCharacters.length > 0) {
        const allXProfiles = await xDb.xCharacterProfiles.toArray();
        for (const charId of boundCharacters) {
          const xProfile = allXProfiles.find(p => p.characterId === charId);
          if (xProfile) {
            // 检查该角色是否在任何直播中出现
            const isStreaming = allStreams.some(
              stream => stream.streamerHandle === xProfile.xHandle || stream.streamerName === xProfile.xName,
            );
            if (isStreaming) {
              liveCharacters.push({
                characterId: charId,
                xProfile: xProfile,
                isLive: true,
              });
            }
          }
        }
      }

      // 保存直播角色状态
      await saveLiveCharacterStatus(liveCharacters);

      // 同步角色头像和直播状态
      await syncLiveCharacterAvatars(liveCharacters);

      // 重新渲染当前标签页的直播内容
      if (currentLiveTab === 'audio' || currentLiveTab === 'video') {
        renderLiveStreams(currentLiveTab);
      } else {
        // 自定义分类
        const targetContent = document.getElementById('live-audio-content');
        if (targetContent && targetContent.style.display !== 'none') {
          const container = document.getElementById('live-audio-list');
          if (container && liveStreamData[currentLiveTab]) {
            container.innerHTML = liveStreamData[currentLiveTab]
              .map((stream, index) => createLiveStreamCard(stream, currentLiveTab, index))
              .join('');
          }
        }
      }

      // 显示成功消息
      const liveCharacterCount = liveCharacters.length;
      const totalStreams = allStreams.length;

      // 显示手机样式通知
      const isEnglish = currentLanguage === 'en';
      const userAvatar = window.userProfileData?.avatar || 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg';

      if (liveCharacterCount > 0) {
        showPhoneNotification({
          title: 'X',
          message: isEnglish
            ? `Live list refreshed! ${liveCharacterCount} character${
                liveCharacterCount > 1 ? 's are' : ' is'
              } now streaming!`
            : `直播列表已刷新！${liveCharacterCount}个绑定角色正在直播`,
          avatar: userAvatar,
          leftIcon: 'x',
        });
      } else {
        showPhoneNotification({
          title: 'X',
          message: isEnglish
            ? `Live list refreshed! ${totalStreams} stream${totalStreams > 1 ? 's' : ''} available`
            : `直播列表已刷新！共${totalStreams}个直播间`,
          avatar: userAvatar,
          leftIcon: 'x',
        });
      }

      console.log('✅ [直播刷新] 刷新完成', {
        总直播间数: totalStreams,
        正在直播的角色: liveCharacterCount,
        自定义分类: enabledCustomCategories.length,
      });
    } catch (error) {
      console.error('❌ [直播刷新] 刷新失败:', error);
      showXToast(`直播刷新失败: ${error.message}`, 'error');
    } finally {
      // 停止旋转动画
      if (refreshBtn) {
        const svg = refreshBtn.querySelector('svg');
        if (svg) {
          svg.style.animation = '';
        }
      }
    }
  }
  // ▲▲▲ 【主要！！！】第十二个情景：直播刷新生成器 ▲▲▲

  // 开启直播
  function startLiveStream() {
    console.log('开启直播');
    showXToast('直播功能开发中...', 'info');
  }

  // 处理直播角色头像点击
  function handleLiveCharacterClick(characterId, isLive) {
    if (isLive) {
      // 如果角色正在直播，进入直播间（后续功能）
      console.log('进入角色直播间:', characterId);
      showXToast('直播间功能开发中...', 'info');
    } else {
      // 如果角色未直播，显示提示
      console.log('角色未在直播:', characterId);
      showXToast('该角色当前未在直播', 'info');
    }
  }

  // 按钮悬停事件处理函数
  function handleLiveMainBtnMouseOver() {
    const mainBtn = document.getElementById('live-main-btn');
    if (mainBtn) {
      mainBtn.style.transform = 'scale(1.1)';
    }
  }

  function handleLiveMainBtnMouseOut() {
    const mainBtn = document.getElementById('live-main-btn');
    if (mainBtn) {
      mainBtn.style.transform = window.liveBtnExpanded ? 'rotate(45deg)' : 'scale(1)';
    }
  }

  function handleLiveMainBtnTouchStart() {
    const mainBtn = document.getElementById('live-main-btn');
    if (mainBtn) {
      mainBtn.style.transform = 'scale(1.05)';
    }
  }

  function handleLiveMainBtnTouchEnd() {
    const mainBtn = document.getElementById('live-main-btn');
    if (mainBtn) {
      mainBtn.style.transform = window.liveBtnExpanded ? 'rotate(45deg)' : 'scale(1)';
    }
  }

  // 子按钮悬停事件处理函数
  function handleLiveSubBtnMouseOver(element) {
    if (element) {
      element.style.transform = 'scale(1.1)';
    }
  }

  function handleLiveSubBtnMouseOut(element) {
    if (element) {
      element.style.transform = 'scale(1)';
    }
  }

  function handleLiveSubBtnTouchStart(element) {
    if (element) {
      element.style.transform = 'scale(1.05)';
    }
  }

  function handleLiveSubBtnTouchEnd(element) {
    if (element) {
      element.style.transform = 'scale(1)';
    }
  }

  // ============================================
  // 直播自定义分类管理
  // ============================================

  // 打开直播分类管理模态框
  function openLiveCategoryModal() {
    const modal = document.getElementById('live-category-manager-modal');
    if (modal) {
      modal.style.display = 'block';
      document.body.style.overflow = 'hidden';
      renderLiveCustomCategoriesList();
    }
  }

  // 关闭直播分类管理模态框
  function closeLiveCategoryModal(event) {
    if (event && event.target !== event.currentTarget) {
      return;
    }
    const modal = document.getElementById('live-category-manager-modal');
    if (modal) {
      modal.style.display = 'none';
      document.body.style.overflow = 'auto';
    }
  }

  // 添加新的直播分类
  function addNewLiveCategory() {
    const newCategory = {
      id: `live_cat_${Date.now()}`,
      name: '',
      description: '',
      enabled: true,
    };
    liveCustomCategories.push(newCategory);
    renderLiveCustomCategoriesList();
  }

  // 删除直播分类
  function deleteLiveCategory(categoryId) {
    liveCustomCategories = liveCustomCategories.filter(cat => cat.id !== categoryId);
    renderLiveCustomCategoriesList();
    renderLiveCategoryTabs();
  }

  // 切换直播分类启用状态
  function toggleLiveCategory(categoryId) {
    const category = liveCustomCategories.find(cat => cat.id === categoryId);
    if (category) {
      category.enabled = !category.enabled;
      renderLiveCategoryTabs();
    }
  }

  // 更新直播分类名称
  function updateLiveCategoryName(categoryId, name) {
    const category = liveCustomCategories.find(cat => cat.id === categoryId);
    if (category) {
      category.name = name;
    }
  }

  // 更新直播分类描述
  function updateLiveCategoryDescription(categoryId, description) {
    const category = liveCustomCategories.find(cat => cat.id === categoryId);
    if (category) {
      category.description = description;
    }
  }

  // 渲染直播自定义分类列表
  function renderLiveCustomCategoriesList() {
    const container = document.getElementById('live-custom-categories-list');
    if (!container) return;

    if (liveCustomCategories.length === 0) {
      container.innerHTML = `
        <div style="text-align: center; padding: 40px 20px; color: #71767b;">
          <svg viewBox="0 0 24 24" style="width: 48px; height: 48px; fill: currentColor; margin-bottom: 16px; opacity: 0.5;">
            <path d="M19.5 12.75h-6.75V19.5h-1.5v-6.75H4.5v-1.5h6.75V4.5h1.5v6.75h6.75v1.5z"></path>
          </svg>
          <div style="font-size: 16px; font-weight: 600; margin-bottom: 8px;">暂无自定义分类</div>
          <div style="font-size: 14px;">点击"添加分类"开始创建</div>
        </div>
      `;
      return;
    }

    container.innerHTML = liveCustomCategories
      .map(
        category => `
      <div style="background-color: rgba(255,255,255,0.05); border-radius: 12px; padding: 16px; border: 1px solid rgba(255,255,255,0.1);">
        <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 12px;">
          <div style="display: flex; align-items: center; gap: 12px; flex: 1;">
            <label style="display: flex; align-items: center; cursor: pointer;">
              <input type="checkbox" ${category.enabled ? 'checked' : ''} 
                onchange="toggleLiveCategory('${category.id}')"
                style="width: 18px; height: 18px; accent-color: var(--x-accent);">
            </label>
            <input type="text" placeholder="分类名称" value="${category.name}" 
              onchange="updateLiveCategoryName('${category.id}', this.value)"
              style="flex: 1; background-color: rgba(255,255,255,0.1); border: 1px solid rgba(255,255,255,0.2); border-radius: 8px; color: #fff; padding: 8px 12px; font-size: 14px; outline: none;"
              onfocus="this.style.borderColor='var(--x-accent)'"
              onblur="this.style.borderColor='rgba(255,255,255,0.2)'">
          </div>
          <button onclick="deleteLiveCategory('${category.id}')" 
            style="background: transparent; border: 1px solid #f4212e; color: #f4212e; border-radius: 8px; padding: 6px 12px; font-size: 12px; cursor: pointer; transition: all 0.2s;"
            onmouseover="this.style.backgroundColor='rgba(244,33,46,0.1)'"
            onmouseout="this.style.backgroundColor='transparent'">
            删除
          </button>
        </div>
        <textarea placeholder="分类描述（可选）" 
          onchange="updateLiveCategoryDescription('${category.id}', this.value)"
          style="width: 100%; background-color: rgba(255,255,255,0.1); border: 1px solid rgba(255,255,255,0.2); border-radius: 8px; color: #fff; padding: 8px 12px; font-size: 14px; resize: vertical; min-height: 60px; outline: none; font-family: inherit;"
          onfocus="this.style.borderColor='var(--x-accent)'"
          onblur="this.style.borderColor='rgba(255,255,255,0.2)'">${category.description}</textarea>
      </div>
    `,
      )
      .join('');
  }

  // 保存直播自定义分类设置
  async function saveLiveCustomCategories() {
    try {
      // 验证分类名称
      const validCategories = liveCustomCategories.filter(cat => cat.name.trim());

      if (validCategories.length !== liveCustomCategories.length) {
        showXToast('请填写所有分类的名称', 'error');
        return;
      }

      // 保存到数据库
      const xDb = getXDB();
      const categoryDataId = `liveCategories_${currentAccountId || 'main'}`;
      await xDb.xSettings.put({
        id: categoryDataId,
        categories: liveCustomCategories,
        updatedAt: new Date().toISOString(),
      });

      // 重新渲染分类标签
      renderLiveCategoryTabs();

      showXToast('直播分类设置已保存', 'success');
      closeLiveCategoryModal();
    } catch (error) {
      console.error('保存直播分类失败:', error);
      showXToast('保存失败: ' + error.message, 'error');
    }
  }

  // 加载直播自定义分类
  async function loadLiveCustomCategories() {
    try {
      const xDb = getXDB();
      const categoryDataId = `liveCategories_${currentAccountId || 'main'}`;
      const savedData = await xDb.xSettings.get(categoryDataId);

      if (savedData && savedData.categories) {
        liveCustomCategories = savedData.categories;
        renderLiveCategoryTabs();
        console.log(`✅ [直播分类] 已加载 ${liveCustomCategories.length} 个自定义分类`);
      } else {
        console.log('ℹ️ [直播分类] 未找到保存的自定义分类');
      }
    } catch (error) {
      console.error('❌ [直播分类] 加载失败:', error);
    }
  }

  // 加载已保存的直播数据
  async function loadSavedLiveData() {
    try {
      const xDb = getXDB();
      const savedData = await xDb.xTweetsData.get('liveStreams');

      if (savedData) {
        // 检查数据是否过期（超过2小时自动清除）
        const lastUpdated = new Date(savedData.lastUpdated);
        const now = new Date();
        const diffHours = (now - lastUpdated) / (1000 * 60 * 60);

        if (diffHours > 2) {
          console.log('🕐 [直播数据] 数据已过期，使用默认数据');
          return;
        }

        // 恢复保存的直播数据
        if (savedData.audio) {
          liveStreamData.audio = savedData.audio;
        }
        if (savedData.video) {
          liveStreamData.video = savedData.video;
        }

        // 恢复自定义分类数据
        Object.keys(savedData).forEach(key => {
          if (key !== 'id' && key !== 'audio' && key !== 'video' && key !== 'lastUpdated') {
            liveStreamData[key] = savedData[key];
          }
        });

        console.log('✅ [直播数据] 已加载保存的直播数据');
      } else {
        console.log('ℹ️ [直播数据] 未找到保存的直播数据，使用默认数据');
      }
    } catch (error) {
      console.error('❌ [直播数据] 加载失败:', error);
    }
  }

  // 加载直播角色状态
  async function loadLiveCharacterStatus() {
    try {
      const xDb = getXDB();
      const statusDataId = `liveCharacterStatus_${currentAccountId || 'main'}`;
      const savedStatus = await xDb.xSettings.get(statusDataId);

      if (savedStatus && savedStatus.liveCharacters) {
        // 检查状态是否过期（超过2小时自动清除）
        const lastUpdated = new Date(savedStatus.lastUpdated);
        const now = new Date();
        const diffHours = (now - lastUpdated) / (1000 * 60 * 60);

        if (diffHours > 2) {
          console.log('🕐 [直播状态] 直播状态已过期，清除状态');
          // 清除过期状态
          await xDb.xSettings.delete(statusDataId);
          return [];
        }

        console.log(`✅ [直播状态] 已加载 ${savedStatus.liveCharacters.length} 个角色的直播状态`);
        return savedStatus.liveCharacters;
      } else {
        console.log('ℹ️ [直播状态] 未找到保存的直播状态');
        return [];
      }
    } catch (error) {
      console.error('❌ [直播状态] 加载失败:', error);
      return [];
    }
  }

  // 保存直播角色状态
  async function saveLiveCharacterStatus(liveCharacters) {
    try {
      const xDb = getXDB();
      const statusDataId = `liveCharacterStatus_${currentAccountId || 'main'}`;

      await xDb.xSettings.put({
        id: statusDataId,
        liveCharacters: liveCharacters,
        lastUpdated: new Date().toISOString(),
      });

      console.log(`✅ [直播状态] 已保存 ${liveCharacters.length} 个角色的直播状态`);
    } catch (error) {
      console.error('❌ [直播状态] 保存失败:', error);
    }
  }

  // 渲染直播分类标签到页面
  function renderLiveCategoryTabs() {
    const container = document.getElementById('live-categories-container');
    if (!container) return;

    // 移除现有的自定义分类标签
    const existingCustomTabs = container.querySelectorAll('.live-custom-tab');
    existingCustomTabs.forEach(tab => tab.remove());

    // 添加启用的自定义分类标签
    const enabledCategories = liveCustomCategories.filter(cat => cat.enabled && cat.name.trim());
    const addButton = container.querySelector('.live-add-category-btn');

    enabledCategories.forEach(category => {
      const tabElement = document.createElement('div');
      tabElement.className = 'live-tab live-custom-tab';
      tabElement.onclick = () => switchLiveTab(category.id);
      tabElement.style.cssText = `
        padding: 8px 12px; 
        background-color: rgba(255,255,255,0.1); 
        border-radius: 16px; 
        font-size: 14px; 
        font-weight: 500; 
        cursor: pointer; 
        color: #71767b;
        white-space: nowrap;
      `;
      tabElement.innerHTML = `<span>${category.name}</span>`;

      // 在添加按钮之前插入
      container.insertBefore(tabElement, addButton);
    });
  }

  // ============================================
  // 主题色自定义功能
  // ============================================
  // 预设主题色
  const presetAccentColors = [
    { name: 'Twitter蓝', color: '#1d9bf0' },
    { name: '薰衣草紫', color: '#7856ff' },
    { name: '玫瑰粉', color: '#f91880' },
    { name: '翡翠绿', color: '#00ba7c' },
    { name: '橙色', color: '#ff7a00' },
    { name: '红色', color: '#f4212e' },
    { name: '黄色', color: '#ffd400' },
    { name: '青色', color: '#00d4ff' },
  ]; // 打开主题色选择器
  function openAccentColorPicker() {
    // 创建弹窗
    const modal = document.createElement('div');
    modal.id = 'accent-color-picker-modal';
    modal.style.cssText = `
 position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.7); display: flex; align-items: center; justify-content: center; z-index: 10000; backdrop-filter: blur(4px);
`;
    const xSocialScreen = document.getElementById('x-social-screen');
    const currentAccent = getComputedStyle(xSocialScreen).getPropertyValue('--x-accent').trim();
    modal.innerHTML = `
 <div style="background-color:var(--x-bg-primary); border-radius: 16px; width: 90%; max-width: 400px; border: 1px solid var(--x-border-color); overflow: hidden; ">

 <div style="padding: 20px; border-bottom: 1px solid var(--x-border-color); display: flex; align-items: center; justify-content: space-between; ">
 <h3 style="margin: 0; color:var(--x-text-primary); font-size: 20px; font-weight: 700;">选择主题色</h3>
 <button onclick="closeAccentColorPicker()" style="background: transparent; border: none; color:var(--x-text-secondary); cursor: pointer; padding: 8px; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: currentColor;">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </button>
 </div>

 <div style="padding: 20px;">
 <div style="color:var(--x-text-primary); font-size: 15px; font-weight: 600; margin-bottom: 12px;">预设颜色</div>
 <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 12px; margin-bottom: 20px;">
 ${presetAccentColors
   .map(
     preset => `
 <div onclick="applyAccentColor('${
   preset.color
 }')" style="cursor: pointer; aspect-ratio: 1; border-radius: 8px; background-color: ${
       preset.color
     }; border: 3px solid ${
       preset.color === currentAccent ? 'var(--x-text-primary)' : 'transparent'
     }; transition: all 0.2s; position: relative; display: flex; align-items: center; justify-content: center; " onmouseover="this.style.transform='scale(1.05)'"
 onmouseout="this.style.transform='scale(1)'">
 ${
   preset.color === currentAccent
     ? '<svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: #fff;"><path d="M9 16.17L5.53 12.7l-1.06 1.06L9 18.3l9.54-9.54-1.06-1.06L9 16.17z"/></svg>'
     : ''
 }
 </div>
 `,
   )
   .join('')}
 </div>

 <div style="color:var(--x-text-primary); font-size: 15px; font-weight: 600; margin-bottom: 12px;">自定义颜色</div>
 <div style="display: flex; gap: 12px; align-items: center;">
 <input type="color" id="custom-accent-color" value="${currentAccent}" style="width: 60px; height: 40px; border: 2px solid var(--x-border-color); border-radius: 8px; cursor: pointer; background: transparent; ">
 <button onclick="applyAccentColor(document.getElementById('custom-accent-color').value)" style="flex: 1; background-color: var(--x-accent); color: #fff; border: none; border-radius: 20px; padding: 10px 20px; font-size: 15px; font-weight: 700; cursor: pointer; transition: opacity 0.2s; " onmouseover="this.style.opacity='0.9'"
 onmouseout="this.style.opacity='1'">
 应用
 </button>
 </div>

 <button onclick="applyAccentColor('#1d9bf0')" style="width: 100%; margin-top: 16px; background: transparent; color:var(--x-text-secondary); border: 1px solid var(--x-border-color); border-radius: 20px; padding: 10px 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 重置为默认色
 </button>
 </div>
 </div>
`;
    document.body.appendChild(modal); // 点击背景关闭
    modal.addEventListener('click', e => {
      if (e.target === modal) {
        closeAccentColorPicker();
      }
    });
  }
  // 关闭主题色选择器
  function closeAccentColorPicker() {
    const modal = document.getElementById('accent-color-picker-modal');
    if (modal) {
      modal.remove();
    }
  }
  // 应用主题色
  async function applyAccentColor(color) {
    try {
      const xSocialScreen = document.getElementById('x-social-screen');
      if (!xSocialScreen) return; // 更新CSS变量
      xSocialScreen.style.setProperty('--x-accent', color); // 保存到数据库
      const xDb = getXDB();
      const settingsId = `xAccentColor_${currentAccountId || 'main'}`;
      await xDb.xSettings.put({
        id: settingsId,
        accentColor: color,
        updatedAt: new Date().toISOString(),
      });
      showXToast('主题色已更新', 'success');
      closeAccentColorPicker();
      console.log('✅ 主题色已应用:', color);
    } catch (error) {
      console.error('应用主题色失败:', error);
      showXToast('应用主题色失败', 'error');
    }
  }
  // 加载保存的主题色
  async function loadAccentColorPreference() {
    try {
      const xDb = getXDB();
      const settingsId = `xAccentColor_${currentAccountId || 'main'}`;
      const savedSettings = await xDb.xSettings.get(settingsId);
      if (savedSettings && savedSettings.accentColor) {
        const xSocialScreen = document.getElementById('x-social-screen');
        if (xSocialScreen) {
          xSocialScreen.style.setProperty('--x-accent', savedSettings.accentColor);
          console.log('✅ 已加载主题色:', savedSettings.accentColor);
        }
      }
    } catch (error) {
      console.error('加载主题色偏好失败:', error);
    }
  }
  // ============================================
  // 账户提问箱功能
  // ============================================
  // 账户提问箱数据（临时存储）
  let accountAskboxData = {
    avatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
    nickname: '⩌⌯⩌',
    prompt: '在这里输入你的匿名提问，或点击下方按钮生成随机提问...',
    background: 'https://i.postimg.cc/tJvBC00j/mmexport1759642131681.jpg',
    answeredQuestions: [],
  }; // 🎯 用户当前输入的提问（临时存储，不保存到数据库）
  let currentUserQuestion = ''; // 账户提问箱多选删除相关变量
  let isAccountAskboxMultiSelectMode = false;
  let selectedAccountQuestions = new Set();
  let accountQuestionLongPressTimer = null; // 打开账户提问箱
  window.openAccountAskbox = async function () {
    if (!currentViewingAccount) {
      showXToast('未找到当前账户信息', 'error');
      return;
    }
    try {
      // 加载该账户的提问箱数据
      await loadAccountAskboxData(); // 隐藏账户主页，显示提问箱页面
      document.getElementById('account-profile-page').style.display = 'none';
      document.getElementById('account-askbox-page').style.display = 'flex';
    } catch (error) {
      console.error('打开账户提问箱失败:', error);
      showXToast('打开提问箱失败: ' + error.message, 'error');
    }
  }; // 关闭账户提问箱
  window.closeAccountAskbox = function () {
    // 退出多选模式
    if (isAccountAskboxMultiSelectMode) {
      exitAccountAskboxMultiSelectMode();
    }
    document.getElementById('account-askbox-page').style.display = 'none';
    document.getElementById('account-profile-page').style.display = 'flex';
  }; // 从数据库加载账户提问箱数据
  async function loadAccountAskboxDataFromDB() {
    try {
      const xDb = getXDB();
      const accountInfo = currentViewingAccount.accountInfo || currentViewingAccount;
      const accountHandle = accountInfo.handle.replace('@', '');
      const askboxId = `account_askbox_${accountHandle}`;
      const savedData = await xDb.xAccountAskbox.get(askboxId);
      if (savedData) {
        // 从数据库加载
        Object.assign(accountAskboxData, savedData);
        console.log('✅ 账户提问箱数据已从数据库加载:', accountHandle);
      } else {
        // 使用默认数据并保存到数据库
        accountAskboxData = {
          avatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
          nickname: '⩌⌯⩌',
          prompt: '在这里输入你的匿名提问，或点击下方按钮生成随机提问...',
          background: 'https://i.postimg.cc/tJvBC00j/mmexport1759642131681.jpg',
          answeredQuestions: [],
          id: askboxId,
        };
        await xDb.xAccountAskbox.put(accountAskboxData);
        console.log('✅ 已创建默认账户提问箱数据:', accountHandle);
      }
    } catch (error) {
      console.error('❌ 加载账户提问箱数据失败:', error);
    }
  }
  // 保存账户提问箱数据到数据库
  async function saveAccountAskboxDataToDB() {
    try {
      const xDb = getXDB();
      const accountInfo = currentViewingAccount.accountInfo || currentViewingAccount;
      const accountHandle = accountInfo.handle.replace('@', '');
      const askboxId = `account_askbox_${accountHandle}`;
      accountAskboxData.id = askboxId;
      await xDb.xAccountAskbox.put(accountAskboxData);
      console.log('✅ 账户提问箱数据已保存到数据库:', accountHandle);
    } catch (error) {
      console.error('❌ 保存账户提问箱数据失败:', error);
    }
  }
  // 加载账户提问箱数据到UI
  async function loadAccountAskboxData() {
    // 从数据库加载
    await loadAccountAskboxDataFromDB(); // 🎯 清空用户提问（每次进入都重置）
    currentUserQuestion = ''; // 更新UI
    const avatarEl = document.getElementById('account-askbox-avatar');
    const nicknameEl = document.getElementById('account-askbox-nickname');
    const promptEl = document.getElementById('account-askbox-prompt');
    const backgroundEl = document.getElementById('account-askbox-background');
    if (avatarEl) avatarEl.src = accountAskboxData.avatar;
    if (nicknameEl) nicknameEl.textContent = accountAskboxData.nickname;
    // 🎯 每次进入都恢复默认文字
    if (promptEl) promptEl.textContent = '在这里输入你的匿名提问，或点击下方按钮生成随机提问...';
    if (backgroundEl) backgroundEl.style.backgroundImage = `url('${accountAskboxData.background}')`; // 渲染已回答的提问列表
    renderAccountAnsweredQuestions();
  }
  // 修改账户提问箱头像
  window.changeAccountAskboxAvatar = async function () {
    const newAvatar = prompt('请输入新的头像URL:', accountAskboxData.avatar);
    if (newAvatar && newAvatar.trim()) {
      accountAskboxData.avatar = newAvatar.trim();
      const avatarEl = document.getElementById('account-askbox-avatar');
      if (avatarEl) avatarEl.src = accountAskboxData.avatar; // 保存到数据库
      await saveAccountAskboxDataToDB();
      showXToast('头像已更新并保存', 'success');
    }
  }; // 保存账户提问箱昵称（原处编辑）
  window.saveAccountAskboxNickname = async function () {
    const nicknameEl = document.getElementById('account-askbox-nickname');
    if (!nicknameEl) return;
    const newNickname = nicknameEl.textContent.trim();
    if (newNickname && newNickname !== accountAskboxData.nickname) {
      accountAskboxData.nickname = newNickname;
      await saveAccountAskboxDataToDB();
      console.log('✅ 昵称已自动保存:', newNickname);
    }
  }; // 保存账户提问卡片文字（用户提问输入）
  window.saveAccountAskboxPrompt = async function () {
    const promptEl = document.getElementById('account-askbox-prompt');
    if (!promptEl) return;
    const newText = promptEl.textContent.trim();
    const defaultPrompt = '在这里输入你的匿名提问，或点击下方按钮生成随机提问...'; // 🎯 如果不是默认文字，则视为用户输入的提问
    if (newText && newText !== defaultPrompt) {
      currentUserQuestion = newText;
      console.log('📝 [提问箱] 用户输入了提问:', currentUserQuestion);
    } else {
      currentUserQuestion = '';
      console.log('📝 [提问箱] 用户清空了提问');
    }
  }; // 打开账户提问箱设置
  window.openAccountAskboxSettings = function () {
    const newBackground = prompt('请输入新的背景图URL:', accountAskboxData.background);
    if (newBackground && newBackground.trim()) {
      accountAskboxData.background = newBackground.trim();
      const backgroundEl = document.getElementById('account-askbox-background');
      if (backgroundEl) backgroundEl.style.backgroundImage = `url('${accountAskboxData.background}')`; // 保存到数据库
      saveAccountAskboxDataToDB();
      showXToast('背景图已更新并保存', 'success');
    }
  }; // 获取新的提问（账户提问箱AI生成）
  window.getNewAccountQuestion = async function () {
    if (!currentViewingAccount) {
      showXToast('未找到当前账户信息', 'error');
      return;
    }
    try {
      // 🔍 检查是否有用户提问
      const isUserQuestion = currentUserQuestion && currentUserQuestion.trim().length > 0;
      if (isUserQuestion) {
        console.log('🎯 [提问箱] 检测到用户提问，准备生成回答:', currentUserQuestion);
        showXToast('正在生成回答...', 'info');
      } else {
        console.log('🎲 [提问箱] 没有用户提问，生成随机问答');
        showXToast('正在生成新的提问...', 'info');
      }
      // 从数据库读取API配置和X设置
      const db = getDB();
      const xDb = getXDB();
      const apiConfig = await db.apiConfig.get('main');
      if (!apiConfig || !apiConfig.proxyUrl || !apiConfig.apiKey || !apiConfig.model) {
        showXToast('请先配置API设置', 'error');
        return;
      }
      const { proxyUrl, apiKey, model } = apiConfig; // 从X设置中读取配置（按账号读取）
      const settingsId = `xSettings_${currentAccountId || 'main'}`;
      const xSettings = await xDb.xSettings.get(settingsId);
      const userPrompt = xSettings?.systemPrompt || '';
      const worldSetting = xSettings?.worldSetting || ''; // 获取账户信息
      const accountInfo = currentViewingAccount.accountInfo || currentViewingAccount;
      const accountHandle = accountInfo.handle.replace('@', ''); // 🎯 使用统一资料获取系统
      const accountProfile = await StringBuilders.getUnifiedProfile(accountInfo.handle);
      if (!accountProfile) {
        showXToast('无法获取账户资料', 'error');
        return;
      }
      console.log('📋 [提问箱] 账户类型:', accountProfile.type); // 使用工具函数格式化账户资料
      let accountDetailInfo = StringBuilders.formatProfileForPrompt(accountProfile, {
        includeType: true,
        includeTweets: false, // 推文信息单独处理
        includeRelationships: true,
      }); // 获取该账户已有的推文（最近5条）
      let accountTweetsInfo = '';
      if (currentViewingAccount.tweets && currentViewingAccount.tweets.length > 0) {
        accountTweetsInfo = `\n【该账户最近发布的推文】：\n`;
        currentViewingAccount.tweets.slice(0, 5).forEach((tweet, i) => {
          accountTweetsInfo += `${i + 1}. ${tweet.content}${tweet.time ? ` (${tweet.time})` : ''}`; // 添加图片信息
          if (tweet.image) {
            if (tweet.image.type === 'description') {
              accountTweetsInfo += `\n [图片描述: ${tweet.image.content}]`;
            } else if (tweet.image.type === 'upload') {
              accountTweetsInfo += `\n [包含上传的图片]`;
            }
          }
          // 添加媒体信息（如果使用media字段）
          if (tweet.media && tweet.media.length > 0) {
            tweet.media.forEach(m => {
              if (m.type === 'description' && m.description) {
                accountTweetsInfo += `\n [图片描述: ${m.description}]`;
              }
            });
          }
          accountTweetsInfo += '\n';
        });
      }
      // 获取用户的X资料（提问者的身份信息）
      const userXProfileInfo = StringBuilders.buildUserXProfileInfo(window.userProfileData); // 获取情侣角色的X资料（如果有的话）
      let coupleCharacterInfo = '';
      if (accountProfile.relationships && accountProfile.relationships.length > 0) {
        const coupleRelation = accountProfile.relationships.find(rel => rel.relationshipType === '恋人');
        if (coupleRelation) {
          coupleCharacterInfo = `\n【该账户的情侣关系】：\n与 ${coupleRelation.npcName}（${coupleRelation.npcHandle}）是恋人关系`;
          if (coupleRelation.description) {
            coupleCharacterInfo += `\n${coupleRelation.description}`;
          }
        }
      }
      // 收集已有的提问（如果要重新生成）
      let existingQuestionsContext = '';
      if (accountAskboxData.answeredQuestions.length > 0) {
        existingQuestionsContext = `\n【已有的提问列表（需要重新生成回答）】：\n`;
        accountAskboxData.answeredQuestions.forEach((q, i) => {
          existingQuestionsContext += `${i + 1}. ${q.question}\n`;
        });
      }
      // 构建系统提示词
      let systemPrompt = StringBuilders.buildBaseSystemPrompt({
        userPrompt,
        worldSetting,
      }); // 🎯 根据是否有用户提问，构建不同的提示词
      let userQuestionContext = '';
      if (isUserQuestion) {
        userQuestionContext = `\n【🔴 用户匿名提问（必须回答）】：\n"${currentUserQuestion}"\n`;
      }
      systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 核心任务说明 - 账户提问箱生成 🎯
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
你需要为该账户生成匿名提问，并以该账户的身份回答这些提问。
${accountDetailInfo}
${accountTweetsInfo}
${coupleCharacterInfo}
${userQuestionContext}
${existingQuestionsContext}
【生成要求】：
1. ${
        isUserQuestion
          ? `必须回答用户的匿名提问"${currentUserQuestion}"，同时额外生成2-5个随机问答`
          : existingQuestionsContext
          ? '如果有已有提问列表，请基于这些提问重新生成回答'
          : '生成3-10个适合该账户身份的匿名提问'
      }
2. ${isUserQuestion ? '用户提问是完全匿名的，不要在回答中假设提问者的身份' : '提问要自然、真实，符合匿名提问箱的风格'}
3. ${isUserQuestion ? '' : '提问内容要与账户的X平台公开信息相关（X姓名、简介、公开身份、最近推文）'}
4. ${
        accountProfile.type === 'character' || accountProfile.type === 'npc'
          ? '回答必须严格符合角色/NPC的人设和性格特点'
          : '回答要自然、真实'
      }
5. ${
        isUserQuestion
          ? '回答用户提问时要自然、真诚，体现账户的性格和口吻'
          : `提问可以是：
- 关于最近推文内容的追问或评论
- 关于生活经验、情感态度的询问
- 关于兴趣爱好、日常生活的好奇
- 轻松幽默或真诚的话题`
      }
6. ${isUserQuestion ? '' : '提问长度适中（10-50字）'}
7. 回答要体现该账户的性格和口吻，长度适中（20-100字）
8. ${isUserQuestion ? '' : '避免过于私密、冒犯或不适当的问题'}
${
  !isUserQuestion
    ? `【🔒 隐私保护规则 - 匿名提问限制】：
🚨 匿名提问者只能基于该账户的X平台公开信息：
✅ 可以基于：X姓名、X句柄、X简介、公开身份、公开的推文内容
❌ 禁止提及：真实姓名、真实职业、私密关系、未公开的身份信息
❌ 禁止使用：只有亲密关系才知道的称呼（如"老师"、"同学"等，除非是公开身份）
示例说明：
- ✅ 正确："姐姐你平时喜欢什么类型的音乐啊？"（基于公开称呼）
- ❌ 错误："张老师今天上课讲了什么内容？"（泄露了真实姓氏和职业）
- ❌ 错误："同学你这次考试考得怎么样？"（假装是同学关系）
⚠️ 回答也要注意：不要在回答中主动泄露私密信息，除非是角色本人想公开`
    : ''
}
【返回格式】：
返回JSON数组，每个对象包含question和answer字段：
\`\`\`json
[
{"question": "提问内容1", "answer": "该账户的回答1"},
{"question": "提问内容2", "answer": "该账户的回答2"},
{"question": "提问内容3", "answer": "该账户的回答3"}
]
\`\`\`
【重要】：
- 必须返回有效的JSON数组格式
- question是匿名提问的内容
- answer是该账户以自己的身份和人设回答的内容
- ${
        isUserQuestion
          ? `请务必包含用户提问"${currentUserQuestion}"的回答，并额外生成2-5组随机问答，将用户问答自然混入其中，不要特殊化`
          : existingQuestionsContext
          ? `请基于已有的${accountAskboxData.answeredQuestions.length}个提问重新生成回答`
          : '生成3-10组问答'
      }
现在，请生成JSON格式的问答内容：`;
      const messages = [
        {
          role: 'user',
          content: isUserQuestion
            ? `请回答用户的匿名提问"${currentUserQuestion}"，同时生成2-5组随机问答，将用户问答自然混入其中，返回JSON数组格式`
            : existingQuestionsContext
            ? `请基于已有的${accountAskboxData.answeredQuestions.length}个提问，以该账户的身份重新生成回答，返回JSON数组格式`
            : '请生成3-10组问答，返回JSON数组格式',
        },
      ]; // 判断API类型并发送请求
      let isGemini = proxyUrl.includes('generativelanguage');
      let response;
      if (isGemini) {
        const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models';
        const geminiConfig = {
          url: `${GEMINI_API_URL}/${model}:generateContent?key=${getRandomValue(apiKey)}`,
          data: {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              contents: [
                {
                  parts: [
                    {
                      text: systemPrompt + '\n\n' + messages.map(m => m.content).join('\n'),
                    },
                  ],
                },
              ],
              generationConfig: {
                temperature: 0.9,
              },
            }),
          },
        };
        response = await fetch(geminiConfig.url, geminiConfig.data);
      } else {
        const openAiPayload = {
          model: model,
          messages: [{ role: 'system', content: systemPrompt }, ...messages],
          temperature: 0.9,
          stream: false,
        };
        response = await fetch(`${proxyUrl}/v1/chat/completions`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${apiKey}`,
          },
          body: JSON.stringify(openAiPayload),
        });
      }
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`API错误: ${response.status} - ${errorData.error?.message || response.statusText}`);
      }
      const data = await response.json();
      let aiResponseContent;
      if (isGemini) {
        // Gemini格式
        if (data.candidates && data.candidates[0] && data.candidates[0].content && data.candidates[0].content.parts) {
          aiResponseContent = data.candidates[0].content.parts[0].text || '';
        }
      } else {
        // OpenAI格式
        aiResponseContent = data.choices?.[0]?.message?.content || '';
      }
      console.log('AI生成的问答:', aiResponseContent); // 解析JSON格式的回答
      let qaArray;
      try {
        // 提取JSON内容（可能被包裹在```json```中）
        let jsonText = aiResponseContent.trim();
        const jsonMatch = jsonText.match(/```(?:json)?\s*(\[\s*\{[\s\S]*?\}\s*\])\s*```/);
        if (jsonMatch) {
          jsonText = jsonMatch[1];
        } else if (jsonText.startsWith('[') && jsonText.endsWith(']')) {
          // 直接是JSON数组
          jsonText = jsonText;
        } else {
          throw new Error('未找到有效的JSON格式');
        }
        qaArray = JSON.parse(jsonText);
        if (!Array.isArray(qaArray) || qaArray.length === 0) {
          throw new Error('AI返回的不是有效的数组或数组为空');
        }
      } catch (parseError) {
        console.error('JSON解析失败:', parseError);
        throw new Error(`解析AI回答失败: ${parseError.message}`);
      }
      console.log(`✅ 解析到 ${qaArray.length} 组问答:`, qaArray); // 如果是重新生成，清空原有提问
      if (existingQuestionsContext) {
        accountAskboxData.answeredQuestions = [];
      }
      // 为每个问答创建对象并添加到数组
      const newQuestions = qaArray.map((qa, index) => ({
        id: `q_${Date.now()}_${index}_${Math.random().toString(36).substr(2, 9)}`,
        question: qa.question || '',
        answer: qa.answer || '',
        date: new Date().toISOString(),
      })); // 批量添加到最前面
      accountAskboxData.answeredQuestions.unshift(...newQuestions); // 保存到数据库
      await saveAccountAskboxDataToDB(); // 重新渲染提问列表
      renderAccountAnsweredQuestions(); // 🎯 如果是用户提问，清空提问并恢复默认文字
      if (isUserQuestion) {
        showXToast('已生成回答！', 'success');
        currentUserQuestion = ''; // 清空提问
        const promptEl = document.getElementById('account-askbox-prompt');
        if (promptEl) {
          promptEl.textContent = '在这里输入你的匿名提问，或点击下方按钮生成随机提问...';
        }
        console.log(`✅ [提问箱] 用户提问已回答，问题已混入${newQuestions.length}组问答中`);
      } else {
        showXToast(
          `${existingQuestionsContext ? '已重新生成回答' : `生成了 ${newQuestions.length} 组问答`}`,
          'success',
        );
      }
      // 检查是否是已绑定角色的提问箱，如果是则随机触发角色主动发消息
      if (accountProfile.type === 'character' && accountProfile.characterData) {
        // 🎲 随机概率触发（30%概率）
        const triggerProbability = 0.3;
        const shouldTrigger = Math.random() < triggerProbability;
        console.log('🔔 检测到角色提问箱');
        console.log(`🎲 触发概率: ${(triggerProbability * 100).toFixed(0)}%, 本次${shouldTrigger ? '触发' : '不触发'}`);
        if (!shouldTrigger) {
          console.log('⏭️ 本次未触发角色主动发消息');
          return; // 不触发，直接返回
        }
        console.log('✅ 准备触发角色主动发消息');
        console.log('📋 角色数据:', accountProfile.characterData.originalName, accountProfile.characterData.id); // 获取角色ID
        const characterId = accountProfile.characterData.id; // 构建提问箱内容摘要（最多3条最新问答）
        const askboxSummary = accountAskboxData.answeredQuestions
          .slice(0, 3)
          .map((qa, index) => `${index + 1}. Q: ${qa.question}\n A: ${qa.answer}`)
          .join('\n\n'); // 将函数暴露到全局
        window.openAccentColorPicker = openAccentColorPicker;
        window.closeAccentColorPicker = closeAccentColorPicker;
        window.applyAccentColor = applyAccentColor; // 延迟1秒后触发（让用户看到提问箱生成成功的提示）
        setTimeout(async () => {
          try {
            // 查找或创建与该角色的私信对话
            const messageId = `msg_${characterId}`; // 检查是否已存在该私信
            const messagesListId = `messagesList_${currentAccountId || 'main'}`;
            const messagesListData = await xDb.xAccountProfiles.get(messagesListId);
            let existingMessage = null;
            if (messagesListData && messagesListData.data) {
              existingMessage = messagesListData.data.find(msg => msg.id === messageId);
            }
            // 如果没有该私信，创建一个
            if (!existingMessage) {
              const newMessage = {
                id: messageId,
                user: {
                  name: accountData.name,
                  handle: accountData.handle,
                  avatar: accountData.avatar,
                  verified: accountData.verified || false,
                },
                preview: '发现你在看我的提问箱...',
                time: '刚刚',
                unread: true,
                unreadCount: 1,
              };
              if (messagesListData && messagesListData.data) {
                messagesListData.data.unshift(newMessage);
                await xDb.xAccountProfiles.put(messagesListData);
              } else {
                await xDb.xAccountProfiles.put({
                  handle: messagesListId,
                  name: 'messagesList',
                  data: [newMessage],
                  updatedAt: new Date().toISOString(),
                });
              }
              existingMessage = newMessage;
              sampleMessagesData.unshift(newMessage);
            }
            // 检查是否有现有对话记录
            // 🔧 多账户隔离：包含账户ID
            const conversationId = `messageConversation_${currentAccountId || 'main'}_${messageId}`;
            const existingConversation = await xDb.xAccountProfiles.get(conversationId);
            const hasHistory =
              existingConversation &&
              existingConversation.data &&
              existingConversation.data.messages &&
              existingConversation.data.messages.length > 0;
            console.log('🎯 触发角色主动发消息（提问箱查看）');
            console.log(
              `📖 现有对话记录: ${
                hasHistory ? existingConversation.data.messages.length + '条消息' : '无（首次对话）'
              }`,
            ); // 调用第九个情景生成器，使用特殊模式：askboxViewed
            const aiMessages = await generateMessageConversation(
              existingMessage,
              true, // 续写模式
              {
                isAskboxViewed: true, // 新增：提问箱查看模式
                askboxContent: askboxSummary, // 提问箱内容
                characterId: characterId,
              },
            );
            if (aiMessages && aiMessages.length > 0) {
              // 保存AI消息到数据库
              await saveAIMessagesToDB(aiMessages, existingMessage); // 更新私信列表（标记为未读）
              if (messagesListData && messagesListData.data) {
                const msgIndex = messagesListData.data.findIndex(msg => msg.id === messageId);
                if (msgIndex !== -1) {
                  messagesListData.data[msgIndex].preview =
                    aiMessages[0].content || aiMessages[0].voiceText || '[消息]';
                  messagesListData.data[msgIndex].time = aiMessages[0].time || '刚刚';
                  messagesListData.data[msgIndex].unread = true;
                  messagesListData.data[msgIndex].unreadCount =
                    (messagesListData.data[msgIndex].unreadCount || 0) + aiMessages.length;
                  await xDb.xAccountProfiles.put(messagesListData);
                  sampleMessagesData = messagesListData.data;
                }
              }
              console.log(`✅ 角色已发送 ${aiMessages.length} 条私信`);
              showXToast(`${accountProfile.name} 给你发来了新消息`, 'info');
            }
          } catch (error) {
            console.error('触发角色主动发消息失败:', error);
          }
        }, 1000);
      }
    } catch (error) {
      console.error('生成提问失败:', error);
      showXToast(`生成失败: ${error.message}`, 'error');
    }
  }; // 渲染账户已回答的提问列表
  function renderAccountAnsweredQuestions() {
    const container = document.getElementById('account-answered-questions-list');
    const titleEl = document.getElementById('account-answered-questions-title');
    if (!container) return;
    if (accountAskboxData.answeredQuestions.length === 0) {
      // 隐藏标题
      if (titleEl) titleEl.style.display = 'none';
      container.innerHTML = `
 <div style="text-align: center; color: rgba(255,255,255,0.6); font-size: 14px; padding: 40px 20px; ">
 暂无提问
 </div>
 `;
      return;
    }
    // 显示标题
    if (titleEl) titleEl.style.display = 'block';
    container.innerHTML = accountAskboxData.answeredQuestions
      .map((q, index) => {
        const date = new Date(q.date);
        const dateStr = date.toLocaleDateString('zh-CN', { month: 'short', day: 'numeric' });
        const isSelected = selectedAccountQuestions.has(q.id);
        return `
 <div
 class="account-askbox-question-item"
 data-question-id="${q.id}"
 style="background-color: rgba(255,255,255,0.9); backdrop-filter: blur(10px); border-radius: 16px; overflow: hidden; margin-bottom: 16px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); transition: all 0.2s; ${
   isSelected ? 'border: 3px solid var(--x-accent); background-color: color-mix(in srgb, var(--x-accent) , 0.1);' : ''
 }
 ${isAccountAskboxMultiSelectMode ? 'border-left: 3px solid var(--x-accent);' : ''}
 "
 onmouseover="if(!${isAccountAskboxMultiSelectMode}){this.style.transform='translateY(-2px)'; this.style.boxShadow='0 6px 16px rgba(0,0,0,0.2)';}"
 onmouseout="if(!${isAccountAskboxMultiSelectMode}){this.style.transform='translateY(0)'; this.style.boxShadow='0 4px 12px rgba(0,0,0,0.15)';}"
 onmousedown="startAccountQuestionLongPress('${q.id}')"
 onmouseup="endAccountQuestionLongPress()"
 onmouseleave="endAccountQuestionLongPress()"
 ontouchstart="handleAccountQuestionTouchStart(event, '${q.id}')"
 ontouchend="handleAccountQuestionTouchEnd(event, '${q.id}')"
 ontouchcancel="endAccountQuestionLongPress()"
 onclick="if(${isAccountAskboxMultiSelectMode}){toggleAccountQuestionSelection('${q.id}');event.stopPropagation();}"
 >

 <div style="background: linear-gradient(135deg, #3a3a3a 0%, #2a2a2a 100%); padding: 20px; color: #fff; ">
 <div style="font-size: 15px; line-height: 1.6; word-break: break-word;">
 ${q.question}
 </div>
 </div>

 <div style="background-color:#fff; padding: 20px; min-height: 60px; color: #333; ">
 <div id="account-answer-${q.id}"
 contenteditable="true"
 data-question-id="${q.id}"
 style="font-size: 14px; line-height: 1.6; word-break: break-word; outline: none; cursor: text; min-height: 20px; ${
   q.answer ? '' : 'color: #999; text-align: center;'
 }
 "
 onblur="saveAccountQuestionAnswer('${q.id}')"
 onkeydown="if(event.key==='Enter'&&!event.shiftKey){event.preventDefault();this.blur();}"
 onfocus="if(this.textContent==='点击此处回复...'){this.textContent='';this.style.color='#333';this.style.textAlign='left';}">${
   q.answer || '点击此处回复...'
 }</div>
 </div>

 <div style="background-color: #f5f5f5; padding: 8px 20px; color: #999; font-size: 12px; text-align: right; ">
 ${dateStr}
 </div>
 </div>
`;
      })
      .join('');
  }
  // 保存账户提问回复（原处编辑）
  window.saveAccountQuestionAnswer = async function (questionId) {
    const answerEl = document.getElementById(`account-answer-${questionId}`);
    if (!answerEl) return;
    const question = accountAskboxData.answeredQuestions.find(q => q.id === questionId);
    if (!question) return;
    let newAnswer = answerEl.textContent.trim(); // 如果是占位符文本，则清空
    if (newAnswer === '点击此处回复...') {
      newAnswer = '';
    }
    if (newAnswer !== question.answer) {
      question.answer = newAnswer;
      await saveAccountAskboxDataToDB();
      console.log('✅ 回复已自动保存:', questionId);
    }
  }; // ============================================
  // 账户提问箱多选删除功能
  // ============================================
  // 开始长按提问卡片
  window.startAccountQuestionLongPress = function (questionId) {
    if (isAccountAskboxMultiSelectMode) return;
    accountQuestionLongPressTimer = setTimeout(() => {
      enterAccountAskboxMultiSelectMode();
      toggleAccountQuestionSelection(questionId);
    }, 500);
  }; // 结束长按
  window.endAccountQuestionLongPress = function () {
    if (accountQuestionLongPressTimer) {
      clearTimeout(accountQuestionLongPressTimer);
      accountQuestionLongPressTimer = null;
    }
  }; // 处理触摸开始（移动端）
  window.handleAccountQuestionTouchStart = function (event, questionId) {
    // 如果已经在多选模式，不启动长按计时器
    if (isAccountAskboxMultiSelectMode) {
      return;
    }
    // 记录触摸开始时间和位置，用于判断是否是滑动
    window.accountQuestionTouchStartTime = Date.now();
    window.accountQuestionTouchStartY = event.touches[0].clientY; // 启动长按计时器
    accountQuestionLongPressTimer = setTimeout(() => {
      enterAccountAskboxMultiSelectMode();
      toggleAccountQuestionSelection(questionId);
    }, 500);
  }; // 处理触摸结束（移动端）
  window.handleAccountQuestionTouchEnd = function (event, questionId) {
    // 清除长按计时器
    if (accountQuestionLongPressTimer) {
      clearTimeout(accountQuestionLongPressTimer);
      accountQuestionLongPressTimer = null;
    }
    // 如果在多选模式下，触摸结束时切换选择状态
    if (isAccountAskboxMultiSelectMode) {
      // 检查是否是快速点击（不是滑动）
      const touchDuration = Date.now() - (window.accountQuestionTouchStartTime || 0);
      const touchMoveY = Math.abs(
        (event.changedTouches[0]?.clientY || window.accountQuestionTouchStartY || 0) -
          (window.accountQuestionTouchStartY || 0),
      ); // 如果触摸时间短且移动距离小，认为是点击
      if (touchDuration < 500 && touchMoveY < 10) {
        event.preventDefault(); // 阻止默认行为和后续的click事件
        toggleAccountQuestionSelection(questionId);
      }
    }
  }; // 切换提问选择状态
  window.toggleAccountQuestionSelection = function (questionId) {
    if (!isAccountAskboxMultiSelectMode) {
      enterAccountAskboxMultiSelectMode();
    }
    const questionEl = document.querySelector(`.account-askbox-question-item[data-question-id="${questionId}"]`);
    if (!questionEl) return;
    if (selectedAccountQuestions.has(questionId)) {
      selectedAccountQuestions.delete(questionId);
      questionEl.style.border = '';
      questionEl.style.backgroundColor = 'rgba(255,255,255,0.9)';
    } else {
      selectedAccountQuestions.add(questionId);
      questionEl.style.border = '3px solid var(--x-accent)';
      questionEl.style.backgroundColor = 'color-mix(in srgb, var(--x-accent) , 0.1)';
    }
    updateAccountAskboxDeleteUI();
  }; // 进入账户提问箱多选模式
  function enterAccountAskboxMultiSelectMode() {
    isAccountAskboxMultiSelectMode = true;
    showAccountAskboxDeleteToolbar();
    document.querySelectorAll('.account-askbox-question-item').forEach(item => {
      item.style.borderLeft = '3px solid var(--x-accent)';
    });
    console.log('✅ 已进入账户提问箱多选模式');
  }
  // 退出账户提问箱多选模式
  window.exitAccountAskboxMultiSelectMode = function () {
    isAccountAskboxMultiSelectMode = false;
    selectedAccountQuestions.clear();
    hideAccountAskboxDeleteToolbar(); // 清除长按相关的计时器和临时变量
    if (accountQuestionLongPressTimer) {
      clearTimeout(accountQuestionLongPressTimer);
      accountQuestionLongPressTimer = null;
    }
    window.accountQuestionTouchStartTime = null;
    window.accountQuestionTouchStartY = null;
    document.querySelectorAll('.account-askbox-question-item').forEach(item => {
      item.style.border = '';
      item.style.borderLeft = '';
      item.style.backgroundColor = 'rgba(255,255,255,0.9)';
    });
    console.log('✅ 已退出账户提问箱多选模式');
  }; // 显示账户提问箱删除工具栏
  function showAccountAskboxDeleteToolbar() {
    let toolbar = document.getElementById('account-askbox-delete-toolbar');
    if (!toolbar) {
      toolbar = document.createElement('div');
      toolbar.id = 'account-askbox-delete-toolbar';
      toolbar.style.cssText = `
 position: fixed; bottom: 80px; left: 50%; transform: translateX(-50%); background-color: rgba(0,0,0,0.95); backdrop-filter: blur(10px); border: 1px solid rgba(255,255,255,0.2); border-radius: 24px; padding: 12px 20px; display: flex; align-items: center; gap: 16px; z-index: 2000; box-shadow: 0 4px 20px rgba(0,0,0,0.5); `;
      toolbar.innerHTML = `
 <button onclick="selectAllAccountQuestions()" style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 20px; padding: 8px 16px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='#1a8cd8'" onmouseout="this.style.backgroundColor='var(--x-accent)'">
 全选
 </button>
 <span id="account-askbox-selected-count" style="color: #fff; font-size: 14px; font-weight: 500;">已选择 0 个</span>
 <button onclick="deleteSelectedAccountQuestions()" style="background-color: #f91880; color: #fff; border: none; border-radius: 20px; padding: 8px 16px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='#d0155f'" onmouseout="this.style.backgroundColor='#f91880'">
 删除
 </button>
 <button onclick="exitAccountAskboxMultiSelectMode()" style="background-color: rgba(255,255,255,0.15); color: #fff; border: none; border-radius: 20px; padding: 8px 16px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='rgba(255,255,255,0.25)'" onmouseout="this.style.backgroundColor='rgba(255,255,255,0.15)'">
 取消
 </button>
 `;
      document.body.appendChild(toolbar);
    }
    toolbar.style.display = 'flex';
  }
  // 隐藏账户提问箱删除工具栏
  function hideAccountAskboxDeleteToolbar() {
    const toolbar = document.getElementById('account-askbox-delete-toolbar');
    if (toolbar) {
      toolbar.style.display = 'none';
    }
  }
  // 更新账户提问箱删除UI
  function updateAccountAskboxDeleteUI() {
    const countEl = document.getElementById('account-askbox-selected-count');
    if (countEl) {
      countEl.textContent = `已选择 ${selectedAccountQuestions.size} 个`;
    }
  }
  // 全选账户提问
  window.selectAllAccountQuestions = function () {
    document.querySelectorAll('.account-askbox-question-item').forEach(item => {
      const questionId = item.dataset.questionId;
      if (!selectedAccountQuestions.has(questionId)) {
        selectedAccountQuestions.add(questionId);
        item.style.border = '3px solid var(--x-accent)';
        item.style.backgroundColor = 'color-mix(in srgb, var(--x-accent) , 0.1)';
      }
    });
    updateAccountAskboxDeleteUI();
  }; // 删除选中的账户提问
  window.deleteSelectedAccountQuestions = async function () {
    if (selectedAccountQuestions.size === 0) {
      showXToast('请先选择要删除的提问', 'warning');
      return;
    }
    const confirmDelete = confirm(`确定要删除选中的 ${selectedAccountQuestions.size} 个提问吗？删除后无法恢复。`);
    if (!confirmDelete) return;
    try {
      accountAskboxData.answeredQuestions = accountAskboxData.answeredQuestions.filter(
        q => !selectedAccountQuestions.has(q.id),
      );
      await saveAccountAskboxDataToDB();
      showXToast(`已删除 ${selectedAccountQuestions.size} 个提问`, 'success');
      window.exitAccountAskboxMultiSelectMode();
      renderAccountAnsweredQuestions();
    } catch (error) {
      console.error('删除提问失败:', error);
      showXToast('删除失败: ' + error.message, 'error');
    }
  }; // X设置页面相关功能
  let xSettingsData = {
    systemPrompt: '',
    worldSetting: '',
    characterBinding: false,
    boundCharacters: [],
    worldBooks: [], // 世界书数组
  }; // 用户资料数据 - 初始化全局变量（实际数据将在loadUserProfile时从数据库加载）
  if (!window.userProfileData) {
    window.userProfileData = {
      name: '我',
      handle: '@me',
      avatar: 'https://i.postimg.cc/pXxk1JXk/IMG-6442.jpg',
      coverImage: 'https://i.postimg.cc/qRzMB6nQ/default-cover.jpg',
      bio: '欢迎来到我的X主页！',
      verified: false,
      verificationType: 'none',
      coupleCharacterId: '',
      coupleCharacterName: '',
      customTag1: '科技爱好者',
      customTag1Icon: '✨',
      customTag1Color: '#71767b',
      customTag2: '2024年加入',
      customTag2Icon: '📅',
      customTag2Color: '#71767b',
      following: '156',
      followers: '89',
      knownIdentityCharacters: [],
      publicIdentity: '',
      showRealName: false,
      realName: '',
    };
  }
  // 创建局部引用指向全局变量（确保所有地方都访问同一个对象）
  let userProfileData = window.userProfileData; // 获取用户认证类型描述
  function getUserVerificationTypeDescription(userProfile) {
    const verificationType = userProfile.verificationType || 'none';
    const descriptions = {
      none: '无认证',
      verified: '已认证（蓝色勾标）',
      couple: '情侣认证（白色心形）',
      married: '已婚认证（白色圆环）',
      vip: 'VIP认证（白色菱形）',
    };
    return descriptions[verificationType] || '无认证';
  }
  // 初始化X设置
  async function initializeXSettings() {
    try {
      const db = getXDB(); // 先加载全局世界书（所有账户共享）
      await loadGlobalWorldBooks(); // 按账号加载设置
      const settingsId = `xSettings_${currentAccountId || 'main'}`;
      const savedSettings = await db.xSettings.get(settingsId);
      if (savedSettings) {
        // 🔧 保存全局世界书引用，避免被账户设置覆盖
        const globalWorldBooks = xSettingsData.worldBooks;
        xSettingsData = savedSettings; // 恢复全局世界书
        xSettingsData.worldBooks = globalWorldBooks;
      } else {
        // 如果当前账号没有设置，使用默认设置（worldBooks已经从全局加载）
        const globalWorldBooks = xSettingsData.worldBooks;
        xSettingsData = {
          systemPrompt: '',
          worldSetting: '',
          characterBinding: false,
          boundCharacters: [],
          npcBinding: false,
          worldBooks: globalWorldBooks,
        };
      }
      // 加载UI
      await loadXSettingsToUI(); // 加载预设列表
      loadXPresetsList();
      console.log('✅ X设置已加载 (账户:', currentAccountId || 'main', ')');
      console.log('📚 全局世界书:', xSettingsData.worldBooks?.length || 0, '个'); // 🔧 注意：已移除智能检测和刷新的自动恢复功能（改为用户手动开启）
    } catch (error) {
      console.error('初始化X设置失败:', error);
    }
  }
  // 将设置数据加载到UI
  async function loadXSettingsToUI() {
    document.getElementById('x-system-prompt').value = xSettingsData.systemPrompt || '';
    document.getElementById('x-world-setting').value = xSettingsData.worldSetting || ''; // 确保 boundCharacters 数组存在
    if (!xSettingsData.boundCharacters) {
      xSettingsData.boundCharacters = [];
    }
    // 确保 worldBooks 数组存在
    if (!xSettingsData.worldBooks) {
      xSettingsData.worldBooks = [];
    }
    updateCharacterToggleUI(); // 如果开启了角色绑定，显示角色选择区域
    const bindingArea = document.getElementById('character-binding-area');
    if (xSettingsData.characterBinding) {
      bindingArea.style.display = 'block';
      loadCharactersList();
    } else {
      bindingArea.style.display = 'none';
    }
    // 更新角色关系册UI
    updateRelationshipToggleUI(); // 如果开启了角色关系册，显示关系册管理区域并更新预览
    const relationshipArea = document.getElementById('relationship-binding-area');
    if (xSettingsData.characterRelationship?.enabled) {
      relationshipArea.style.display = 'block';
      await loadRelationshipData();
      setTimeout(() => {
        updateRelationshipPreview();
      }, 200);
    } else {
      relationshipArea.style.display = 'none';
    }
    // 更新NPC绑定UI
    updateNPCToggleUI(); // 如果开启了NPC绑定，显示NPC管理区域
    const npcArea = document.getElementById('npc-binding-area');
    if (xSettingsData.npcBinding) {
      npcArea.style.display = 'block';
      loadNPCsList();
    } else {
      npcArea.style.display = 'none';
    }
  }
  // 切换角色绑定 (已被新版本替换，在新位置)
  // 保存全局世界书（所有账户共享）
  async function saveGlobalWorldBooks() {
    try {
      const db = getXDB();
      await db.xSettings.put({
        id: 'globalWorldBooks',
        worldBooks: xSettingsData.worldBooks || [],
        lastUpdated: new Date().toISOString(),
      });
      console.log('✅ 全局世界书已保存');
    } catch (error) {
      console.error('保存全局世界书失败:', error);
      throw error;
    }
  }
  // 加载全局世界书（所有账户共享）
  async function loadGlobalWorldBooks() {
    try {
      const db = getXDB();
      const globalData = await db.xSettings.get('globalWorldBooks');
      if (globalData && globalData.worldBooks && globalData.worldBooks.length > 0) {
        xSettingsData.worldBooks = globalData.worldBooks;
        console.log('✅ 全局世界书已加载:', xSettingsData.worldBooks.length, '个');
      } else {
        // 🔧 数据迁移：如果全局世界书为空，尝试从当前账户设置中迁移
        console.log('📦 [世界书迁移] 全局世界书为空，尝试从账户设置迁移...');
        const settingsId = `xSettings_${currentAccountId || 'main'}`;
        const accountSettings = await db.xSettings.get(settingsId);
        if (accountSettings && accountSettings.worldBooks && accountSettings.worldBooks.length > 0) {
          console.log(
            `📦 [世界书迁移] 发现账户设置中有 ${accountSettings.worldBooks.length} 个世界书，正在迁移到全局设置...`,
          );
          xSettingsData.worldBooks = accountSettings.worldBooks; // 保存到全局设置
          await saveGlobalWorldBooks();
          console.log('✅ [世界书迁移] 迁移完成！');
        } else {
          xSettingsData.worldBooks = [];
          console.log('ℹ️ [世界书] 无世界书数据');
        }
      }
    } catch (error) {
      console.error('加载全局世界书失败:', error);
      xSettingsData.worldBooks = [];
    }
  }
  // 保存X设置（按账号存储）
  async function saveXSettings() {
    try {
      // 获取UI中的数据
      xSettingsData.systemPrompt = document.getElementById('x-system-prompt').value;
      xSettingsData.worldSetting = document.getElementById('x-world-setting').value;
      const db = getXDB();
      const settingsId = `xSettings_${currentAccountId || 'main'}`; // 创建设置数据副本，移除worldBooks（因为它是全局的）
      const settingsToSave = { ...xSettingsData };
      delete settingsToSave.worldBooks;
      await db.xSettings.put({
        id: settingsId,
        ...settingsToSave,
        lastUpdated: new Date().toISOString(),
      });
      console.log('✅ X设置已保存 (账户:', currentAccountId || 'main', ')');
      showXToast('设置已保存', 'success');
    } catch (error) {
      console.error('保存设置失败:', error);
      showXToast('保存失败: ' + error.message, 'error');
    }
  }
  // ============================================
  // 世界书管理功能
  // ============================================
  // 打开世界书管理弹窗
  window.openWorldBooksManageModal = async function () {
    // 🔧 先加载全局世界书数据，确保显示最新内容
    await loadGlobalWorldBooks();
    const modal = document.createElement('div');
    modal.id = 'world-books-manage-modal';
    modal.style.cssText = `
 position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.8); backdrop-filter: blur(4px); z-index: 10000; display: flex; align-items: center; justify-content: center; padding: 12px; box-sizing: border-box;
`;
    modal.innerHTML = `
 <div style="background-color:var(--x-bg-primary); border-radius: 16px; width: 100%; max-width: 700px; max-height: calc(100vh - 24px); display: flex; flex-direction: column; border: 1px solid var(--x-border-color); box-sizing: border-box; " onclick="event.stopPropagation()">

 <div style="display: flex; align-items: center; justify-content: space-between; padding: 16px 20px; border-bottom: 1px solid var(--x-border-color); flex-shrink: 0; ">
 <h2 style="color:var(--x-text-primary); font-size: 20px; font-weight: 700; margin: 0; ">世界书管理<span style="font-size: 14px; color:var(--x-text-secondary); font-weight: 400; margin-left: 8px;">(全局共享)</span></h2>
 <div style="display: flex; gap: 12px; align-items: center;">
 <button onclick="openCreateWorldBookModal()" style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 20px; padding: 8px 16px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.opacity='0.9'" onmouseout="this.style.opacity='1'">
 + 添加世界书
 </button>
 <div onclick="closeWorldBooksManageModal()" style="cursor: pointer; padding: 8px; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-text-primary);">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </div>
 </div>
 </div>

 <div id="world-books-manage-list" style="flex: 1; overflow-y: auto; padding: 16px 20px; ">

 </div>
 </div>
`; // 添加到 X 社交屏幕容器中以继承主题变量
    const xScreen = document.getElementById('x-social-screen');
    if (xScreen) {
      xScreen.appendChild(modal);
    } else {
      document.body.appendChild(modal);
    }
    // 渲染世界书列表
    renderWorldBooksManageList(); // 点击背景关闭
    modal.addEventListener('click', e => {
      if (e.target === modal) {
        closeWorldBooksManageModal();
      }
    });
  }; // 关闭世界书管理弹窗
  window.closeWorldBooksManageModal = function () {
    const modal = document.getElementById('world-books-manage-modal');
    if (modal) {
      modal.remove();
    }
  }; // 渲染世界书管理列表
  function renderWorldBooksManageList() {
    const container = document.getElementById('world-books-manage-list');
    if (!container) return;
    if (!xSettingsData.worldBooks || xSettingsData.worldBooks.length === 0) {
      container.innerHTML = `
 <div style="color:var(--x-text-secondary); font-size: 15px; text-align: center; padding: 60px 20px; background-color:var(--x-bg-secondary); border-radius: 16px; border: 2px dashed var(--x-border-color); ">
 <svg viewBox="0 0 24 24" style="width: 48px; height: 48px; fill: var(--x-text-secondary); margin-bottom: 16px;">
 <g><path d="M3 5.5C3 4.119 4.119 3 5.5 3h13C19.881 3 21 4.119 21 5.5v13c0 1.381-1.119 2.5-2.5 2.5h-13C4.119 21 3 19.881 3 18.5v-13zM5.5 5c-.276 0-.5.224-.5.5v13c0 .276.224.5.5.5h13c.276 0 .5-.224.5-.5v-13c0-.276-.224-.5-.5-.5h-13z"></path></g>
 </svg>
 <div style="font-weight: 600; margin-bottom: 8px; font-size: 16px;">暂无世界书</div>
 <div style="font-size: 13px;">点击右上角"添加世界书"按钮创建第一个世界书</div>
 </div>
 `;
      return;
    }
    const sceneLabels = {
      global: '全局',
      messages: '私信',
      search: '搜索',
      trending: '热搜',
      profile: '主页',
      feed: '首页',
      tweetDetail: '详情',
    };
    container.innerHTML = `
 <div style="display: flex; flex-direction: column; gap: 12px;">
 ${xSettingsData.worldBooks
   .map((wb, index) => {
     const sceneTags = wb.scenes?.map(s => sceneLabels[s] || s).join(', ') || '未绑定场景';
     let bindInfo = [];
     if (wb.bindToAll) bindInfo.push('全局对话');
     if (wb.bindToCharacterOnly) bindInfo.push('仅角色对话');
     if (wb.boundCharacters && wb.boundCharacters.length > 0) {
       bindInfo.push(`${wb.boundCharacters.length}个指定角色`);
     }
     const bindText = bindInfo.length > 0 ? bindInfo.join(' + ') : '未绑定目标'; // 判断是否为闲置状态
     const isIdle = wb.isIdle || (wb.targetType === 'none' && (!wb.scenes || wb.scenes.length === 0));
     return `
 <div style="background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 16px; padding: 16px; transition: all 0.2s; " onmouseover="this.style.borderColor='var(--x-accent)'"
 onmouseout="this.style.borderColor='var(--x-border-color)'">
 <div style="display: flex; align-items: start; justify-content: space-between; margin-bottom: 12px;">
 <div style="flex: 1; min-width: 0;">
 <div style="color:var(--x-text-primary); font-size: 17px; font-weight: 700; margin-bottom: 8px; ">${wb.name}</div>
 <div style="display: flex; flex-wrap: wrap; gap: 6px; margin-bottom: 8px; ">
 ${
   isIdle
     ? `
 <span style="display: inline-flex; align-items: center; background-color: rgba(113, 118, 123, 0.2); color:var(--x-text-secondary); padding: 4px 10px; border-radius: 12px; font-size: 12px; font-weight: 600; ">
 <svg viewBox="0 0 24 24" style="width: 14px; height: 14px; fill: var(--x-text-secondary); margin-right: 4px;">
 <g><path d="M8 7c0 2.21-1.79 4-4 4S0 9.21 0 7s1.79-4 4-4 4 1.79 4 4zm5-4c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm9 0c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4z"></path></g>
 </svg>
 闲置状态（暂未启用）
 </span>
 `
     : `
 <span style="display: inline-flex; align-items: center; background-color: #1d9bf0; color: #ffffff; padding: 4px 10px; border-radius: 12px; font-size: 12px; font-weight: 600; ">
 <svg viewBox="0 0 24 24" style="width: 14px; height: 14px; fill: #ffffff; margin-right: 4px;">
 <g><path d="M12 7c-1.93 0-3.5 1.57-3.5 3.5S10.07 14 12 14s3.5-1.57 3.5-3.5S13.93 7 12 7zm0 5c-.827 0-1.5-.673-1.5-1.5S11.173 9 12 9s1.5.673 1.5 1.5S12.827 12 12 12zm0-10c-4.687 0-8.5 3.813-8.5 8.5 0 5.967 7.621 11.116 7.945 11.332l.555.37.555-.37c.324-.216 7.945-5.365 7.945-11.332C20.5 5.813 16.687 2 12 2zm0 17.77c-1.665-1.241-6.5-5.196-6.5-9.27C5.5 6.916 8.416 4 12 4s6.5 2.916 6.5 6.5c0 4.073-4.835 8.028-6.5 9.27z"></path></g>
 </svg>
 ${sceneTags}
 </span>
 <span style="display: inline-flex; align-items: center; background-color: rgba(29, 155, 240, 0.15); color: #1d9bf0; padding: 4px 10px; border-radius: 12px; font-size: 12px; font-weight: 600; ">
 <svg viewBox="0 0 24 24" style="width: 14px; height: 14px; fill: #1d9bf0; margin-right: 4px;">
 <g><path d="M17.863 13.44c1.477 1.58 2.366 3.8 2.632 6.46l.11 1.1H3.395l.11-1.1c.266-2.66 1.155-4.88 2.632-6.46C7.627 11.85 9.648 11 12 11s4.373.85 5.863 2.44zM12 2C9.791 2 8 3.79 8 6s1.791 4 4 4 4-1.79 4-4-1.791-4-4-4z"></path></g>
 </svg>
 ${bindText}
 </span>
 `
 }
 </div>
 </div>
 <div style="display: flex; gap: 8px; flex-shrink: 0; margin-left: 12px;">
 <button onclick="editWorldBookInManage(${index})" style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 18px; padding: 8px 16px; font-size: 13px; font-weight: 600; cursor: pointer; transition: opacity 0.2s; " onmouseover="this.style.opacity='0.9'" onmouseout="this.style.opacity='1'">编辑</button>
 <button onclick="deleteWorldBookInManage(${index})" style="background-color: #f4212e; color: #fff; border: none; border-radius: 18px; padding: 8px 16px; font-size: 13px; font-weight: 600; cursor: pointer; transition: opacity 0.2s; " onmouseover="this.style.opacity='0.9'" onmouseout="this.style.opacity='1'">删除</button>
 </div>
 </div>
 <div style="color:var(--x-text-secondary); font-size: 14px; line-height: 1.6; max-height: 80px; overflow: hidden; text-overflow: ellipsis; background-color:var(--x-bg-primary); padding: 12px; border-radius: 8px; ">${wb.content.substring(
   0,
   150,
 )}${wb.content.length > 150 ? '...' : ''}</div>
 </div>
 `;
   })
   .join('')}
 </div>
`;
  }
  // 在管理面板中编辑世界书
  window.editWorldBookInManage = function (index) {
    const worldBook = xSettingsData.worldBooks[index];
    openWorldBookModal(worldBook, index);
  }; // 在管理面板中删除世界书
  window.deleteWorldBookInManage = async function (index) {
    if (!confirm('确定要删除这个世界书吗？')) return;
    xSettingsData.worldBooks.splice(index, 1);
    await saveGlobalWorldBooks();
    renderWorldBooksManageList();
    showXToast('世界书已删除', 'success');
  }; // 打开创建世界书弹窗
  window.openCreateWorldBookModal = function () {
    openWorldBookModal();
  }; // 打开世界书编辑弹窗
  function openWorldBookModal(worldBook = null, editIndex = null) {
    const isEdit = worldBook !== null; // 创建弹窗
    const modal = document.createElement('div');
    modal.id = 'world-book-modal';
    modal.style.cssText = `
 position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.8); backdrop-filter: blur(4px); z-index: 10000; display: flex; align-items: center; justify-content: center; padding: 12px; box-sizing: border-box;
`;
    modal.innerHTML = `
 <div style="background-color:var(--x-bg-primary); border-radius: 16px; width: 100%; max-width: 600px; max-height: calc(100vh - 24px); overflow-y: auto; border: 1px solid var(--x-border-color); box-sizing: border-box; " onclick="event.stopPropagation()">

 <div style="display: flex; align-items: center; justify-content: space-between; padding: 14px 16px; border-bottom: 1px solid var(--x-border-color); position: sticky; top: 0; background-color:var(--x-bg-primary); z-index: 1; ">
 <h2 style="color:var(--x-text-primary); font-size: 18px; font-weight: 700; margin: 0; ">${
   isEdit ? '编辑世界书' : '创建世界书'
 }</h2>
 <div onclick="closeWorldBookModal()" style="cursor: pointer; padding: 8px; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-text-primary);">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </div>
 </div>

 <div style="padding: 16px;">
 <form id="world-book-form" onsubmit="saveWorldBook(event)">

 <div style="margin-bottom: 16px;">
 <label style="display: block; color:var(--x-text-primary); font-size: 14px; font-weight: 600; margin-bottom: 6px; ">世界书名称 *</label>
 <input type="text" id="wb-name" required
 value="${worldBook?.name || ''}"
 placeholder="例如：表情包库、角色关系设定..."
 style="width: 100%; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 8px; color:var(--x-text-primary); padding: 10px 12px; font-size: 14px; outline: none; box-sizing: border-box; "
 onfocus="this.style.borderColor='var(--x-accent)'"
 onblur="this.style.borderColor='var(--x-border-color)'">
 </div>

 <div style="margin-bottom: 16px;">
 <label style="display: block; color:var(--x-text-primary); font-size: 14px; font-weight: 600; margin-bottom: 6px; ">世界书内容 *</label>
 <textarea id="wb-content" required rows="6"
 placeholder="输入世界书内容，例如：&#10;表情包链接：&#10;- 开心：https://example.com/happy.gif&#10;- 生气：https://example.com/angry.gif&#10;&#10;或其他设定内容..."
 style="width: 100%; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 8px; color:var(--x-text-primary); padding: 10px 12px; font-size: 14px; resize: vertical; outline: none; font-family: inherit; line-height: 1.5; box-sizing: border-box; "
 onfocus="this.style.borderColor='var(--x-accent)'"
 onblur="this.style.borderColor='var(--x-border-color)'">${worldBook?.content || ''}</textarea>
 </div>

 <div style="margin-bottom: 16px;">
 <label style="display: block; color:var(--x-text-primary); font-size: 14px; font-weight: 600; margin-bottom: 4px; ">绑定场景（可多选）</label>
 <div style="color:var(--x-text-secondary); font-size: 12px; margin-bottom: 8px; line-height: 1.4; ">💡 提示：如果不绑定任何场景和目标，世界书将处于闲置状态，不会被应用到任何场景</div>
 <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 6px; ">
 ${['global', 'messages', 'search', 'trending', 'profile', 'feed', 'tweetDetail']
   .map(scene => {
     const labels = {
       global: '全局',
       messages: '私信界面',
       search: '搜索界面',
       trending: '热搜界面',
       profile: '角色主页',
       feed: '首页推文',
       tweetDetail: '推文详情',
     };
     const checked = worldBook?.scenes?.includes(scene) || false;
     return `
 <label style="display: flex; align-items: center; padding: 8px 10px; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 8px; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='var(--x-bg-secondary)'">
 <input type="checkbox" name="wb-scenes" value="${scene}" ${checked ? 'checked' : ''}
 style="margin-right: 6px; cursor: pointer;">
 <span style="color:var(--x-text-primary); font-size: 13px;">${labels[scene]}</span>
 </label>
 `;
   })
   .join('')}
 </div>
 </div>

 <div style="margin-bottom: 16px;">
 <label style="display: block; color:var(--x-text-primary); font-size: 14px; font-weight: 600; margin-bottom: 8px; ">绑定目标（可选）</label>

 <label style="display: flex; align-items: center; padding: 8px 10px; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 8px; cursor: pointer; margin-bottom: 6px; ">
 <input type="checkbox" id="wb-bind-all" ${worldBook?.bindToAll ? 'checked' : ''}
 style="margin-right: 6px; cursor: pointer;">
 <span style="color:var(--x-text-primary); font-size: 13px;">绑定到全局对话</span>
 </label>

 <label style="display: flex; align-items: center; padding: 8px 10px; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 8px; cursor: pointer; margin-bottom: 6px; ">
 <input type="checkbox" id="wb-bind-character-only" ${worldBook?.bindToCharacterOnly ? 'checked' : ''}
 style="margin-right: 6px; cursor: pointer;">
 <span style="color:var(--x-text-primary); font-size: 13px;">绑定到仅角色对话</span>
 </label>

 <div style="margin-top: 6px;">
 <label style="display: block; color:var(--x-text-secondary); font-size: 12px; margin-bottom: 6px; ">绑定到指定角色（任何相关情景都会使用）：</label>
 <div id="wb-character-list" style="max-height: 160px; overflow-y: auto; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 8px; padding: 6px; ">

 </div>
 </div>
 </div>

 <div style="display: flex; gap: 10px; margin-top: 20px;">
 <button type="button" onclick="closeWorldBookModal()" style="flex: 1; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 20px; padding: 11px; color:var(--x-text-primary); font-size: 14px; font-weight: 600; cursor: pointer; box-sizing: border-box; ">取消</button>
 <button type="submit" style="flex: 1; background-color: var(--x-accent); border: none; border-radius: 20px; padding: 11px; color: #fff; font-size: 14px; font-weight: 600; cursor: pointer; box-sizing: border-box; ">${
   isEdit ? '保存修改' : '创建世界书'
 }</button>
 </div>
 </form>
 </div>
 </div>
`; // 添加到 X 社交屏幕容器中以继承主题变量
    const xScreen = document.getElementById('x-social-screen');
    if (xScreen) {
      xScreen.appendChild(modal);
    } else {
      document.body.appendChild(modal);
    }
    // 设置编辑索引
    if (isEdit) {
      modal.setAttribute('data-edit-index', editIndex);
    }
    // 加载角色列表
    loadWorldBookCharactersList(worldBook?.boundCharacters || []); // 点击背景关闭
    modal.addEventListener('click', e => {
      if (e.target === modal) {
        closeWorldBookModal();
      }
    });
  }
  // 加载世界书角色选择列表
  async function loadWorldBookCharactersList(selectedCharacters = []) {
    try {
      const db = getDB();
      const allChats = await db.chats.toArray();
      const characters = allChats.filter(chat => !chat.isGroup);
      const container = document.getElementById('wb-character-list');
      if (!container) return;
      if (characters.length === 0) {
        container.innerHTML = `
 <div style="color:var(--x-text-secondary); font-size: 12px; text-align: center; padding: 16px; ">暂无可绑定的角色</div>
 `;
        return;
      }
      container.innerHTML = characters
        .map(
          char => `
 <label style="display: flex; align-items: center; padding: 6px 8px; border-radius: 6px; cursor: pointer; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <input type="checkbox" name="wb-characters" value="${char.id}"
 ${selectedCharacters.includes(char.id) ? 'checked' : ''}
 style="margin-right: 6px; cursor: pointer;">
 <span style="color:var(--x-text-primary); font-size: 13px;">${char.name}</span>
 </label>
 `,
        )
        .join('');
    } catch (error) {
      console.error('加载角色列表失败:', error);
    }
  }
  // 关闭世界书弹窗
  window.closeWorldBookModal = function () {
    const modal = document.getElementById('world-book-modal');
    if (modal) {
      modal.remove();
    }
  }; // 保存世界书
  window.saveWorldBook = async function (event) {
    event.preventDefault();
    const name = document.getElementById('wb-name').value.trim();
    const content = document.getElementById('wb-content').value.trim();
    if (!name || !content) {
      showXToast('请填写完整信息', 'error');
      return;
    }
    // 获取选中的场景
    const sceneCheckboxes = document.querySelectorAll('input[name="wb-scenes"]:checked');
    const scenes = Array.from(sceneCheckboxes).map(cb => cb.value); // 获取绑定目标
    const bindToAll = document.getElementById('wb-bind-all').checked;
    const bindToCharacterOnly = document.getElementById('wb-bind-character-only').checked; // 获取选中的角色
    const characterCheckboxes = document.querySelectorAll('input[name="wb-characters"]:checked');
    const boundCharacters = Array.from(characterCheckboxes).map(cb => cb.value); // 确定目标类型和选择的角色列表
    let targetType = 'none'; // 'none' = 未绑定（闲置）, 'all' = 全局对话, 'characterOnly' = 仅角色对话, 'specific' = 指定角色
    let selectedCharacters = [];
    if (bindToAll) {
      targetType = 'all';
    } else if (bindToCharacterOnly) {
      targetType = 'characterOnly';
    } else if (boundCharacters.length > 0) {
      targetType = 'specific';
      selectedCharacters = [...boundCharacters];
    }
    // 如果都没有选择，targetType 保持为 'none'
    // 判断是否是闲置状态（没有任何绑定）
    const isIdle = targetType === 'none' && (!scenes || scenes.length === 0);
    const worldBook = {
      name,
      content,
      scenes,
      targetType, // 'none' | 'all' | 'characterOnly' | 'specific'
      selectedCharacters, // 角色ID数组
      bindToAll,
      bindToCharacterOnly,
      boundCharacters,
      isIdle, // 标记是否为闲置状态
      createdAt: new Date().toISOString(),
    }; // 检查是否是编辑模式
    const modal = document.getElementById('world-book-modal');
    const editIndex = modal?.getAttribute('data-edit-index');
    if (!xSettingsData.worldBooks) {
      xSettingsData.worldBooks = [];
    }
    if (editIndex !== null && editIndex !== undefined) {
      // 编辑模式
      xSettingsData.worldBooks[parseInt(editIndex)] = worldBook;
      showXToast('世界书已更新', 'success');
    } else {
      // 创建模式
      xSettingsData.worldBooks.push(worldBook);
      showXToast('世界书已创建', 'success');
    }
    // 保存全局世界书（不再保存到账户设置中）
    await saveGlobalWorldBooks(); // 如果管理面板打开，刷新管理面板的列表
    const manageModal = document.getElementById('world-books-manage-modal');
    if (manageModal) {
      renderWorldBooksManageList();
    }
    closeWorldBookModal();
  }; // 保存为预设
  async function saveXPreset() {
    const presetName = prompt('请输入预设名称:');
    if (!presetName || presetName.trim() === '') {
      showXToast('预设名称不能为空', 'error');
      return;
    }
    try {
      // 只保存提示词和世界观设定
      const presetData = {
        systemPrompt: document.getElementById('x-system-prompt').value,
        worldSetting: document.getElementById('x-world-setting').value,
        characterBinding: xSettingsData.characterBinding || false,
        boundCharacters: xSettingsData.boundCharacters || [],
      };
      const db = getXDB();
      await db.xPresets.add({
        name: presetName.trim(),
        ...presetData,
        createdAt: new Date().toISOString(),
      });
      showXToast(`预设"${presetName}"已保存`, 'success');
      loadXPresetsList(); // 刷新预设列表
    } catch (error) {
      console.error('保存预设失败:', error);
      showXToast('保存预设失败: ' + error.message, 'error');
    }
  }
  // 加载预设列表
  async function loadXPresetsList() {
    try {
      const db = getXDB();
      const presets = await db.xPresets.orderBy('createdAt').reverse().toArray();
      const presetsList = document.getElementById('x-presets-list');
      if (presets.length === 0) {
        presetsList.innerHTML =
          '<p style="color: #71767b; font-size: 14px; text-align: center; margin: 20px 0;">暂无保存的预设</p>';
        return;
      }
      presetsList.innerHTML = presets
        .map(
          preset => `
 <div class="preset-item" style="display: flex; align-items: center; justify-content: space-between; background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; padding: 12px; margin-bottom: 8px;">
 <div style="flex: 1; min-width: 0;">
 <div style="color: #fff; font-weight: 600; font-size: 15px; margin-bottom: 4px; word-wrap: break-word;">${
   preset.name
 }</div>
 <div style="color: #71767b; font-size: 13px;">${new Date(preset.createdAt).toLocaleString()}</div>
 </div>
 <div style="display: flex; gap: 8px; flex-shrink: 0;">
 <button onclick="loadXPreset(${preset.id})"
 style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 15px; padding: 6px 12px; font-size: 12px; cursor: pointer; white-space: nowrap;">
 加载
 </button>
 <button onclick="deleteXPreset(${preset.id})"
 style="background-color: #f4212e; color: #fff; border: none; border-radius: 15px; padding: 6px 12px; font-size: 12px; cursor: pointer; white-space: nowrap;">
 删除
 </button>
 </div>
 </div>
 `,
        )
        .join('');
    } catch (error) {
      console.error('加载预设列表失败:', error);
    }
  }
  // 加载预设
  async function loadXPreset(presetId) {
    try {
      const db = getXDB();
      const preset = await db.xPresets.get(presetId);
      if (preset) {
        // 先更新xSettingsData对象
        xSettingsData.systemPrompt = preset.systemPrompt || '';
        xSettingsData.worldSetting = preset.worldSetting || '';
        xSettingsData.characterBinding = preset.characterBinding || false;
        xSettingsData.boundCharacters = preset.boundCharacters || []; // 然后更新UI（会从xSettingsData读取数据）
        await loadXSettingsToUI();
        showXToast(`已加载预设"${preset.name}"`, 'success');
      }
    } catch (error) {
      console.error('加载预设失败:', error);
      showXToast('加载预设失败: ' + error.message, 'error');
    }
  }
  // 删除预设
  async function deleteXPreset(presetId) {
    if (!confirm('确定要删除这个预设吗？')) return;
    try {
      const db = getXDB();
      await db.xPresets.delete(presetId);
      showXToast('预设已删除', 'success');
      loadXPresetsList(); // 刷新预设列表
    } catch (error) {
      console.error('删除预设失败:', error);
      showXToast('删除预设失败: ' + error.message, 'error');
    }
  }
  // 导出所有X数据
  async function exportXData() {
    try {
      const xDb = getXDB(); // 导出所有X数据库内容
      const exportData = {
        // X设置（包含全局世界书）
        xSettings: await xDb.xSettings.toArray(),
        // 用户资料（所有账户）
        xUserProfile: await xDb.xUserProfile.toArray(),
        // 推文数据
        xTweetsData: await xDb.xTweetsData.toArray(),
        // 用户发布的推文（所有账户）
        xUserTweets: await xDb.xUserTweets.toArray(),
        // 角色X资料
        xCharacterProfiles: await xDb.xCharacterProfiles.toArray(),
        // 预设
        xPresets: await xDb.xPresets.toArray(),
        // 用户提问箱数据（所有账户）
        xAskbox: await xDb.xAskbox.toArray(),
        // 当前活跃账户
        xActiveAccount: await xDb.xActiveAccount.toArray(),
        // 账户列表
        xAccountList: await xDb.xAccountList.toArray(),
        // NPC设置（所有账户）
        xNPCs: await xDb.xNPCs.toArray(),
        // 账户主页数据（包含私信对话、陌生人消息、mentions通知等）
        xAccountProfiles: await xDb.xAccountProfiles.toArray(),
        // 账户提问箱数据
        xAccountAskbox: await xDb.xAccountAskbox.toArray(),
        // 书签数据（所有账户）
        xBookmarks: await xDb.xBookmarks.toArray(),
        // 角色关系册数据（所有账户）
        xCharacterRelationships: await xDb.xCharacterRelationships.toArray(),
        // 元数据
        exportTime: new Date().toISOString(),
        version: '2.1',
        dataType: 'x-social-full-backup',
      };
      const dataStr = JSON.stringify(exportData, null, 2);
      const dataBlob = new Blob([dataStr], { type: 'application/json' });
      const link = document.createElement('a');
      link.href = URL.createObjectURL(dataBlob);
      link.download = `x-data-backup-${new Date().toISOString().split('T')[0]}.json`;
      link.click();
      showXToast('所有数据已导出', 'success');
      console.log('✅ X数据导出成功，包含:', {
        设置数: exportData.xSettings.length,
        用户资料数: exportData.xUserProfile.length,
        推文数据数: exportData.xTweetsData.length,
        用户推文数: exportData.xUserTweets.length,
        角色X资料数: exportData.xCharacterProfiles.length,
        预设数: exportData.xPresets.length,
        用户提问箱数: exportData.xAskbox.length,
        活跃账户数: exportData.xActiveAccount.length,
        账户列表数: exportData.xAccountList.length,
        NPC设置数: exportData.xNPCs.length,
        账户主页数据数: exportData.xAccountProfiles.length,
        账户提问箱数: exportData.xAccountAskbox.length,
        书签数: exportData.xBookmarks.length,
        关系册数: exportData.xCharacterRelationships.length,
      });
    } catch (error) {
      console.error('❌ 导出数据失败:', error);
      showXToast('导出失败: ' + error.message, 'error');
    }
  }
  // 导入所有X数据
  function importXData() {
    if (
      !confirm(
        '⚠️ 警告：导入数据将完全替换当前所有X数据（包括用户资料、推文、帖子、设置等），此操作不可撤销！\n\n确定要继续吗？',
      )
    ) {
      return;
    }
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.json';
    input.onchange = async function (event) {
      const file = event.target.files[0];
      if (!file) return;
      const reader = new FileReader();
      reader.onload = async function (e) {
        try {
          const importData = JSON.parse(e.target.result); // 验证数据格式
          if (!importData || importData.dataType !== 'x-social-full-backup') {
            showXToast('导入失败: 不是有效的X数据备份文件', 'error');
            return;
          }
          showXToast('正在导入数据，请稍候...', 'info');
          const xDb = getXDB(); // 清空现有数据
          await xDb.xSettings.clear();
          await xDb.xUserProfile.clear();
          await xDb.xTweetsData.clear();
          await xDb.xUserTweets.clear();
          await xDb.xCharacterProfiles.clear();
          await xDb.xPresets.clear();
          await xDb.xAskbox.clear();
          await xDb.xActiveAccount.clear();
          await xDb.xAccountList.clear();
          await xDb.xNPCs.clear();
          await xDb.xAccountProfiles.clear();
          await xDb.xAccountAskbox.clear();
          await xDb.xBookmarks.clear();
          await xDb.xCharacterRelationships.clear();
          console.log('✅ 已清空旧数据'); // 导入新数据
          if (importData.xSettings && importData.xSettings.length > 0) {
            await xDb.xSettings.bulkAdd(importData.xSettings);
          }
          if (importData.xUserProfile && importData.xUserProfile.length > 0) {
            await xDb.xUserProfile.bulkAdd(importData.xUserProfile);
          }
          if (importData.xTweetsData && importData.xTweetsData.length > 0) {
            await xDb.xTweetsData.bulkAdd(importData.xTweetsData);
          }
          if (importData.xUserTweets && importData.xUserTweets.length > 0) {
            await xDb.xUserTweets.bulkAdd(importData.xUserTweets);
          }
          if (importData.xCharacterProfiles && importData.xCharacterProfiles.length > 0) {
            await xDb.xCharacterProfiles.bulkAdd(importData.xCharacterProfiles);
          }
          if (importData.xPresets && importData.xPresets.length > 0) {
            await xDb.xPresets.bulkAdd(importData.xPresets);
          }
          if (importData.xAskbox && importData.xAskbox.length > 0) {
            await xDb.xAskbox.bulkAdd(importData.xAskbox);
          }
          if (importData.xActiveAccount && importData.xActiveAccount.length > 0) {
            await xDb.xActiveAccount.bulkAdd(importData.xActiveAccount);
          }
          if (importData.xAccountList && importData.xAccountList.length > 0) {
            await xDb.xAccountList.bulkAdd(importData.xAccountList);
          }
          if (importData.xNPCs && importData.xNPCs.length > 0) {
            await xDb.xNPCs.bulkAdd(importData.xNPCs);
          }
          if (importData.xAccountProfiles && importData.xAccountProfiles.length > 0) {
            await xDb.xAccountProfiles.bulkAdd(importData.xAccountProfiles);
          }
          if (importData.xAccountAskbox && importData.xAccountAskbox.length > 0) {
            await xDb.xAccountAskbox.bulkAdd(importData.xAccountAskbox);
          }
          if (importData.xBookmarks && importData.xBookmarks.length > 0) {
            await xDb.xBookmarks.bulkAdd(importData.xBookmarks);
          }
          if (importData.xCharacterRelationships && importData.xCharacterRelationships.length > 0) {
            await xDb.xCharacterRelationships.bulkAdd(importData.xCharacterRelationships);
          }
          console.log('✅ X数据导入成功，包含:', {
            设置数: importData.xSettings?.length || 0,
            用户资料数: importData.xUserProfile?.length || 0,
            推文数据数: importData.xTweetsData?.length || 0,
            用户推文数: importData.xUserTweets?.length || 0,
            角色X资料数: importData.xCharacterProfiles?.length || 0,
            预设数: importData.xPresets?.length || 0,
            用户提问箱数: importData.xAskbox?.length || 0,
            活跃账户数: importData.xActiveAccount?.length || 0,
            账户列表数: importData.xAccountList?.length || 0,
            NPC设置数: importData.xNPCs?.length || 0,
            账户主页数据数: importData.xAccountProfiles?.length || 0,
            账户提问箱数: importData.xAccountAskbox?.length || 0,
            书签数: importData.xBookmarks?.length || 0,
            关系册数: importData.xCharacterRelationships?.length || 0,
          });
          showXToast('数据导入成功！页面即将刷新...', 'success'); // 延迟刷新，让用户看到成功提示
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } catch (error) {
          console.error('❌ 导入数据失败:', error);
          showXToast('导入失败: ' + error.message, 'error');
        }
      };
      reader.readAsText(file);
    };
    input.click();
  }
  // 切换角色绑定
  function toggleCharacterBinding() {
    xSettingsData.characterBinding = !xSettingsData.characterBinding;
    updateCharacterToggleUI();
    const bindingArea = document.getElementById('character-binding-area');
    if (xSettingsData.characterBinding) {
      bindingArea.style.display = 'block';
      loadCharactersList();
    } else {
      bindingArea.style.display = 'none'; // 清空绑定的角色
      if (!xSettingsData.boundCharacters) xSettingsData.boundCharacters = [];
    }
  }
  // 更新角色绑定切换按钮UI
  function updateCharacterToggleUI() {
    const toggle = document.getElementById('x-character-toggle');
    const circle = toggle.querySelector('.toggle-circle');
    if (xSettingsData.characterBinding) {
      toggle.style.backgroundColor = 'var(--x-accent)';
      circle.style.left = '22px';
    } else {
      toggle.style.backgroundColor = '#333';
      circle.style.left = '2px';
    }
  }
  // 加载角色列表
  async function loadCharactersList() {
    try {
      // 获取所有聊天中的非群组角色
      const db = getDB(); // 修正：chats表在全局数据库中
      const allChats = await db.chats.toArray();
      const characters = allChats.filter(chat => !chat.isGroup);
      const charactersList = document.getElementById('characters-list');
      if (characters.length === 0) {
        charactersList.innerHTML = TemplateBuilders.buildEmptyState('暂无可绑定的角色，请先创建角色聊天');
        return;
      }
      if (!xSettingsData.boundCharacters) xSettingsData.boundCharacters = [];
      charactersList.innerHTML = characters
        .map(character => {
          const isChecked = xSettingsData.boundCharacters.includes(character.id);
          return TemplateBuilders.buildCharacterItem(character, isChecked);
        })
        .join('');
    } catch (error) {
      ValidationUtils.handleError(error, '加载角色列表');
      document.getElementById('characters-list').innerHTML = TemplateBuilders.buildErrorState('加载角色列表失败');
    }
  }
  // 切换角色选择状态
  function toggleCharacterSelection(characterId) {
    if (!xSettingsData.boundCharacters) {
      xSettingsData.boundCharacters = [];
    }
    const index = xSettingsData.boundCharacters.indexOf(characterId);
    if (index > -1) {
      xSettingsData.boundCharacters.splice(index, 1);
    } else {
      xSettingsData.boundCharacters.push(characterId);
    }
    // 更新UI
    const checkbox = document.querySelector(`[data-character-id="${characterId}"]`);
    if (checkbox) {
      const isChecked = xSettingsData.boundCharacters.includes(characterId);
      checkbox.outerHTML = TemplateBuilders.buildCheckbox(characterId, isChecked);
    }
  }
  // 长按相关变量
  let longPressTimer = null;
  let longPressTarget = null; // 开始长按
  function startLongPress(characterId) {
    longPressTarget = characterId;
    longPressTimer = setTimeout(() => {
      if (longPressTarget === characterId) {
        openCharacterXProfile(characterId);
      }
    }, 500); // 500ms长按触发
  }
  // 结束长按
  function endLongPress() {
    if (longPressTimer) {
      clearTimeout(longPressTimer);
      longPressTimer = null;
    }
    longPressTarget = null;
  }
  // 打开角色X资料设置
  async function openCharacterXProfile(characterId) {
    try {
      // 首先检查弹窗元素是否存在
      const modalElement = document.getElementById('character-x-profile-modal');
      if (!modalElement) {
        console.error('❌ 角色X资料弹窗元素不存在于DOM中');
        showXToast('无法打开X资料设置，请先绑定角色', 'error');
        return;
      }
      const db = getDB(); // 修正：chats表在全局数据库中
      const xDb = getXDB(); // X专用数据库用于xCharacterProfiles
      const character = await db.chats.get(characterId);
      if (!character) {
        showXToast('未找到角色信息', 'error');
        return;
      }
      // 加载现有的X资料
      let xProfile = await xDb.xCharacterProfiles.get(characterId);
      if (!xProfile) {
        // 创建默认X资料
        xProfile = {
          characterId: characterId,
          xName: character.name,
          xHandle: character.name.toLowerCase().replace(/\s+/g, '_'),
          xAvatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
          xVerified: false,
          xBio: '',
          relationships: [],
        };
      }
      // 确保有relationships字段
      if (!xProfile.relationships) {
        xProfile.relationships = [];
      }
      // 检查表单元素是否存在
      const formElement = document.getElementById('character-x-profile-form');
      if (!formElement) {
        console.error('❌ 角色X资料表单不存在，弹窗可能未正确加载');
        showXToast('弹窗加载失败，请先勾选绑定该角色，然后刷新页面重试', 'error'); // 关闭弹窗
        const modal = document.getElementById('character-x-profile-modal');
        if (modal) modal.style.display = 'none';
        return;
      }
      // 填充弹窗内容
      const infoDisplay = document.getElementById('character-info-display');
      if (infoDisplay) {
        infoDisplay.innerHTML = TemplateBuilders.buildCharacterInfoDisplay(character);
      }
      // 获取所有表单元素（使用安全的方式）
      const avatarElement = document.getElementById('character-x-avatar');
      const avatarUrlElement = document.getElementById('character-x-avatar-url');
      const coverPreviewElement = document.getElementById('character-x-cover-preview');
      const coverUrlElement = document.getElementById('character-x-cover-url');
      const nameElement = document.getElementById('character-x-name');
      const handleElement = document.getElementById('character-x-handle');
      const verifiedElement = document.getElementById('character-x-verified');
      const tag1IconElement = document.getElementById('character-tag1-icon');
      const tag1TextElement = document.getElementById('character-custom-tag1');
      const tag1ColorElement = document.getElementById('character-tag1-color');
      const tag2IconElement = document.getElementById('character-tag2-icon');
      const tag2TextElement = document.getElementById('character-custom-tag2');
      const tag2ColorElement = document.getElementById('character-tag2-color');
      const followingCountElement = document.getElementById('character-following-count');
      const followersCountElement = document.getElementById('character-followers-count');
      const bioElement = document.getElementById('character-x-bio');
      const publicIdentityElement = document.getElementById('character-public-identity');
      const showRealNameElement = document.getElementById('character-show-real-name');
      const realNameElement = document.getElementById('character-real-name'); // 安全地设置元素值 - 统一使用默认头像
      const defaultAvatar = 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg';
      const defaultCover = 'https://i.postimg.cc/qRzMB6nQ/default-cover.jpg'; // 头像设置
      if (avatarElement) avatarElement.src = xProfile.xAvatar || defaultAvatar;
      if (avatarUrlElement) avatarUrlElement.value = xProfile.xAvatar || defaultAvatar; // 背景图设置
      if (coverPreviewElement) coverPreviewElement.src = xProfile.xCover || defaultCover;
      if (coverUrlElement) coverUrlElement.value = xProfile.xCover || ''; // 基本信息设置（必填字段提供默认值）
      if (nameElement) nameElement.value = xProfile.xName || character.name || '';
      if (handleElement) handleElement.value = xProfile.xHandle || '';
      if (verifiedElement) verifiedElement.checked = xProfile.xVerified || false; // 自定义标签设置
      if (tag1IconElement) tag1IconElement.value = xProfile.customTag1?.icon || '';
      if (tag1TextElement) tag1TextElement.value = xProfile.customTag1?.text || '';
      if (tag1ColorElement) tag1ColorElement.value = xProfile.customTag1?.color || '#71767b';
      if (tag2IconElement) tag2IconElement.value = xProfile.customTag2?.icon || '';
      if (tag2TextElement) tag2TextElement.value = xProfile.customTag2?.text || '';
      if (tag2ColorElement) tag2ColorElement.value = xProfile.customTag2?.color || '#71767b'; // 关注数量设置
      if (followingCountElement) followingCountElement.value = xProfile.followingCount || '';
      if (followersCountElement) followersCountElement.value = xProfile.followersCount || ''; // 简介和公众身份设置
      if (bioElement) bioElement.value = xProfile.xBio || '';
      if (publicIdentityElement) publicIdentityElement.value = xProfile.publicIdentity || ''; // 真名设置
      if (showRealNameElement) showRealNameElement.checked = xProfile.showRealName || false;
      if (realNameElement) realNameElement.value = xProfile.realName || ''; // 根据复选框状态显示/隐藏真名输入框
      toggleCharacterRealNameInput(); // 自动发消息设置
      const autoMessageEnabledElement = document.getElementById('character-auto-message-enabled');
      const autoMessageIntervalElement = document.getElementById('character-auto-message-interval');
      if (autoMessageEnabledElement) {
        autoMessageEnabledElement.checked = xProfile.autoMessageEnabled || false;
      }
      if (autoMessageIntervalElement) {
        autoMessageIntervalElement.value = xProfile.autoMessageInterval || 60;
      }
      // 根据复选框状态显示/隐藏时间设置
      window.toggleAutoMessageSettings(); // 更新字符计数
      updateCharacterXProfileCounts(); // 设置当前编辑的角色ID（formElement已在前面声明）
      formElement.setAttribute('data-character-id', characterId); // 渲染关系列表
      console.log('📖 [打开X资料] 加载关系数据，关系数:', (xProfile.relationships || []).length);
      renderRelationshipsList(xProfile.relationships || []); // 显示弹窗
      const modal = document.getElementById('character-x-profile-modal');
      if (modal) {
        modal.style.display = 'block';
      }
    } catch (error) {
      ValidationUtils.handleError(error, '打开角色X资料');
    }
  }
  // 关闭角色X资料设置弹窗
  function closeCharacterXProfileModal() {
    const modal = document.getElementById('character-x-profile-modal');
    if (modal) {
      modal.style.display = 'none';
    }
  }
  // 更新角色X头像
  function updateCharacterXAvatar(url) {
    const avatarImg = document.getElementById('character-x-avatar');
    if (!url || url.trim() === '') {
      // 如果URL为空，使用默认头像
      avatarImg.src = 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg';
      return;
    }
    // 验证URL格式
    try {
      new URL(url);
    } catch (e) {
      avatarImg.src = 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg';
      return;
    }
    // 验证是否为图片URL
    const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.bmp'];
    const isImageUrl = imageExtensions.some(ext => url.toLowerCase().includes(ext));
    if (!isImageUrl) {
      // 不是明显的图片URL，但仍然尝试加载
      avatarImg.onerror = function () {
        this.src = 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg';
        showXToast('头像链接无效，已使用默认头像', 'warning');
      };
    }
    avatarImg.src = url;
  }
  // 更新角色X背景图
  function updateCharacterXCover(url) {
    const coverImg = document.getElementById('character-x-cover-preview');
    if (!url || url.trim() === '') {
      coverImg.src = 'https://i.postimg.cc/qRzMB6nQ/default-cover.jpg';
      return;
    }
    try {
      new URL(url);
    } catch (e) {
      coverImg.src = 'https://i.postimg.cc/qRzMB6nQ/default-cover.jpg';
      return;
    }
    const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.bmp'];
    const isImageUrl = imageExtensions.some(ext => url.toLowerCase().includes(ext));
    if (!isImageUrl) {
      coverImg.onerror = function () {
        this.src = 'https://i.postimg.cc/qRzMB6nQ/default-cover.jpg';
        showXToast('背景图链接无效，已使用默认背景', 'warning');
      };
    }
    coverImg.src = url;
  }
  // 更新简介字符计数（保持兼容性）
  function updateCharacterBioCount() {
    updateCharacterXProfileCounts();
  }
  // 更新角色X资料所有字符计数
  function updateCharacterXProfileCounts() {
    // 更新简介计数
    const bioTextarea = document.getElementById('character-x-bio');
    const bioCountSpan = document.getElementById('character-bio-count');
    if (bioTextarea && bioCountSpan) {
      bioCountSpan.textContent = bioTextarea.value.length;
    }
    // 角色公众身份已移除字符限制，无需计数
    // 更新真实姓名计数
    const realNameInput = document.getElementById('character-real-name');
    const realNameCountSpan = document.getElementById('character-real-name-count');
    if (realNameInput && realNameCountSpan) {
      realNameCountSpan.textContent = realNameInput.value.length;
    }
  }
  // 保存角色X资料
  async function saveCharacterXProfile(event) {
    event.preventDefault();
    const formElement = document.getElementById('character-x-profile-form');
    if (!formElement) {
      showXToast('表单元素未找到', 'error');
      return;
    }
    const characterId = formElement.getAttribute('data-character-id');
    if (!characterId) {
      showXToast('角色ID未找到', 'error');
      return;
    }
    // 获取表单值，使用安全的访问方式
    const getElementValue = (id, defaultValue = '') => {
      const element = document.getElementById(id);
      return element ? element.value.trim() : defaultValue;
    };
    const getElementChecked = (id, defaultValue = false) => {
      const element = document.getElementById(id);
      return element ? element.checked : defaultValue;
    };
    const xName = getElementValue('character-x-name');
    const xHandle = getElementValue('character-x-handle');
    const xAvatarUrl = getElementValue('character-x-avatar-url');
    const xAvatar = xAvatarUrl || 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg';
    const xVerified = getElementChecked('character-x-verified');
    const xCoverUrl = getElementValue('character-x-cover-url');
    const xCover = xCoverUrl || 'https://i.postimg.cc/qRzMB6nQ/default-cover.jpg';
    const tag1Icon = getElementValue('character-tag1-icon');
    const tag1Text = getElementValue('character-custom-tag1');
    const tag1ColorElement = document.getElementById('character-tag1-color');
    const tag1Color = tag1ColorElement ? tag1ColorElement.value : '#71767b';
    const tag2Icon = getElementValue('character-tag2-icon');
    const tag2Text = getElementValue('character-custom-tag2');
    const tag2ColorElement = document.getElementById('character-tag2-color');
    const tag2Color = tag2ColorElement ? tag2ColorElement.value : '#71767b';
    const followingCount = getElementValue('character-following-count');
    const followersCount = getElementValue('character-followers-count');
    const xBio = getElementValue('character-x-bio');
    const publicIdentity = getElementValue('character-public-identity');
    const showRealName = getElementChecked('character-show-real-name');
    const realName = getElementValue('character-real-name');
    const autoMessageEnabled = getElementChecked('character-auto-message-enabled');
    const autoMessageInterval = parseInt(getElementValue('character-auto-message-interval')) || 60; // 仅验证必填字段（用户名和句柄）
    if (!xName) {
      showXToast('X用户名不能为空', 'error');
      return;
    }
    if (!xHandle) {
      showXToast('X句柄不能为空', 'error');
      return;
    }
    // 验证长度限制（仅对已填写的字段）
    if (xName.length > 50) {
      showXToast('X用户名不能超过50个字符', 'error');
      return;
    }
    if (xHandle.length > 15) {
      showXToast('X句柄不能超过15个字符', 'error');
      return;
    }
    if (xBio && xBio.length > 160) {
      showXToast('X简介不能超过160个字符', 'error');
      return;
    }
    if (showRealName && realName && realName.length > 50) {
      showXToast('真实姓名不能超过50个字符', 'error');
      return;
    }
    // 如果选择公开真名但未填写，给予警告但不阻止保存
    if (showRealName && !realName) {
      showXToast('建议填写真实姓名', 'warning');
    }
    // 验证自动发消息间隔
    if (autoMessageEnabled) {
      if (autoMessageInterval < 10) {
        showXToast('自动发消息间隔不能少于10秒', 'error');
        return;
      }
      if (autoMessageInterval > 3600) {
        showXToast('自动发消息间隔不能超过3600秒', 'error');
        return;
      }
    }
    // 验证头像URL（如果填写了）
    if (xAvatarUrl) {
      try {
        new URL(xAvatarUrl);
      } catch (e) {
        showXToast('头像URL格式无效，将使用默认头像', 'warning');
      }
    }
    try {
      const db = getXDB();
      console.log('💾 [保存X资料] 开始保存，当前关系数:', currentRelationships.length); // 🔧 修复：先读取现有的xProfile，保留userPersona字段
      const existingProfile = await db.xCharacterProfiles.get(characterId);
      const userPersona = existingProfile?.userPersona || ''; // 保留现有的用户人设
      console.log('💾 [保存X资料] 保留现有用户人设，长度:', userPersona.length, '字符'); // 保存X资料（使用全局的 currentRelationships，而不是重新从数据库读取）
      await db.xCharacterProfiles.put({
        characterId: characterId,
        xName: xName,
        xHandle: xHandle,
        xAvatar: xAvatar,
        xVerified: xVerified,
        xCover: xCover,
        customTag1: tag1Text ? { icon: tag1Icon, text: tag1Text, color: tag1Color } : null,
        customTag2: tag2Text ? { icon: tag2Icon, text: tag2Text, color: tag2Color } : null,
        followingCount: followingCount,
        followersCount: followersCount,
        xBio: xBio,
        publicIdentity: publicIdentity,
        showRealName: showRealName,
        realName: showRealName ? realName : '', // 只有选择公开时才保存真名
        relationships: JSON.parse(JSON.stringify(currentRelationships)), // 深拷贝避免引用问题
        autoMessageEnabled: autoMessageEnabled,
        autoMessageInterval: autoMessageInterval,
        userPersona: userPersona, // 🔧 保留用户人设字段
        lastUpdated: new Date().toISOString(),
      });
      console.log('✅ [保存X资料] X资料已保存，关系数:', currentRelationships.length);
      showXToast('X资料已保存', 'success'); // 重启自动发消息系统以应用新设置
      if (typeof stopAutoMessageSystem === 'function' && typeof startAutoMessageSystem === 'function') {
        stopAutoMessageSystem();
        setTimeout(() => {
          startAutoMessageSystem();
        }, 500);
      }
      closeCharacterXProfileModal();
    } catch (error) {
      console.error('❌ [保存X资料] 保存角色X资料失败:', error);
      showXToast('保存失败: ' + error.message, 'error');
    }
  }
  // NPC关系绑定功能
  // 当前编辑的关系ID（用于编辑模式）
  let currentEditingRelationshipId = null;
  // 当前关系列表
  let currentRelationships = []; // 渲染关系列表
  function renderRelationshipsList(relationships) {
    // 深拷贝数组，避免引用问题导致数据不同步
    currentRelationships = relationships ? JSON.parse(JSON.stringify(relationships)) : [];
    console.log('📋 [渲染关系列表] 当前关系数:', currentRelationships.length);
    const container = document.getElementById('character-relationships-list');
    if (currentRelationships.length === 0) {
      container.innerHTML = `
 <div style="text-align: center; color: #71767b; font-size: 13px; padding: 20px;">
 暂无绑定关系，点击上方"添加关系"按钮开始绑定NPC
 </div>
 `;
      return;
    }
    container.innerHTML = currentRelationships
      .map(
        rel => `
 <div style="background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; padding: 12px; margin-bottom: 8px;">
 <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 8px;">
 <div style="flex: 1;">
 <div style="color: #fff; font-weight: 600; font-size: 14px; margin-bottom: 4px;">
 ${rel.npcName} <span style="color: #71767b; font-weight: normal;">${rel.npcHandle}</span>
 </div>
 <div style="color: var(--x-accent); font-size: 12px; background-color: rgba(29,155,240,0.1); padding: 2px 8px; border-radius: 12px; display: inline-block; margin-bottom: 6px;">
 ${rel.relationshipType}
 </div>
 </div>
 <div style="display: flex; gap: 8px;">
 <button onclick="editRelationship('${rel.id}')"
 style="background: none; border: none; color: var(--x-accent); cursor: pointer; padding: 4px 8px; font-size: 12px;">
 编辑
 </button>
 <button onclick="deleteRelationship('${rel.id}')"
 style="background: none; border: none; color: #f4212e; cursor: pointer; padding: 4px 8px; font-size: 12px;">
 删除
 </button>
 </div>
 </div>
 ${rel.description ? `<div style="color: #71767b; font-size: 12px; line-height: 1.4;">${rel.description}</div>` : ''}
 </div>
 `,
      )
      .join('');
  }
  // 打开添加关系弹窗
  function openAddRelationshipModal() {
    currentEditingRelationshipId = null;
    document.getElementById('relationship-modal-title').textContent = '添加NPC关系'; // 清空表单
    document.getElementById('relationship-npc-name').value = '';
    document.getElementById('relationship-npc-handle').value = '';
    document.getElementById('relationship-type').value = '朋友';
    document.getElementById('relationship-description').value = '';
    updateRelationshipDescCount();
    document.getElementById('relationship-modal').style.display = 'block';
  }
  // 编辑关系
  function editRelationship(relationshipId) {
    const relationship = currentRelationships.find(rel => rel.id === relationshipId);
    if (!relationship) return;
    currentEditingRelationshipId = relationshipId;
    document.getElementById('relationship-modal-title').textContent = '编辑NPC关系'; // 填充表单
    document.getElementById('relationship-npc-name').value = relationship.npcName;
    document.getElementById('relationship-npc-handle').value = relationship.npcHandle;
    document.getElementById('relationship-type').value = relationship.relationshipType;
    document.getElementById('relationship-description').value = relationship.description || '';
    updateRelationshipDescCount();
    document.getElementById('relationship-modal').style.display = 'block';
  }
  // 删除关系
  async function deleteRelationship(relationshipId) {
    if (!confirm('确定要删除这个关系绑定吗？')) return;
    try {
      console.log('🗑️ [删除关系] 开始删除关系:', relationshipId);
      console.log('🗑️ [删除关系] 删除前关系数:', currentRelationships.length); // 从当前列表中移除
      const beforeLength = currentRelationships.length;
      currentRelationships = currentRelationships.filter(rel => rel.id !== relationshipId);
      const afterLength = currentRelationships.length;
      console.log('🗑️ [删除关系] 删除后关系数:', afterLength);
      if (beforeLength === afterLength) {
        console.warn('⚠️ [删除关系] 未找到要删除的关系');
        showXToast('未找到要删除的关系', 'warning');
        return;
      }
      // 保存到数据库
      await saveRelationshipsToDatabase(); // 更新界面
      renderRelationshipsList(currentRelationships);
      showXToast('关系已删除', 'success');
    } catch (error) {
      console.error('❌ [删除关系] 删除关系失败:', error);
      showXToast(`删除失败: ${error.message}`, 'error');
    }
  }
  // 关闭关系编辑弹窗
  function closeRelationshipModal() {
    document.getElementById('relationship-modal').style.display = 'none';
    currentEditingRelationshipId = null;
  }
  // 更新关系描述字符计数
  function updateRelationshipDescCount() {
    const descTextarea = document.getElementById('relationship-description');
    const countSpan = document.getElementById('relationship-desc-count');
    countSpan.textContent = descTextarea.value.length;
  }
  // 保存关系到数据库
  async function saveRelationshipsToDatabase() {
    const characterId = document.getElementById('character-x-profile-form').getAttribute('data-character-id');
    if (!characterId) {
      console.error('❌ [保存关系] 无法获取角色ID');
      throw new Error('无法获取角色ID，保存失败');
    }
    try {
      const db = getXDB(); // 获取当前X资料
      const currentProfile = await db.xCharacterProfiles.get(characterId);
      if (!currentProfile) {
        console.error('❌ [保存关系] 未找到角色资料:', characterId);
        throw new Error('未找到角色资料');
      }
      // 更新关系数据（深拷贝数组，避免引用问题）
      currentProfile.relationships = JSON.parse(JSON.stringify(currentRelationships));
      await db.xCharacterProfiles.put(currentProfile);
      console.log('✅ [保存关系] 关系已保存到数据库，当前关系数:', currentProfile.relationships.length);
    } catch (error) {
      console.error('❌ [保存关系] 保存关系到数据库失败:', error);
      throw error;
    }
  }
  // 保存关系表单
  async function saveRelationshipForm(event) {
    event.preventDefault();
    const npcName = document.getElementById('relationship-npc-name').value.trim();
    const npcHandle = document.getElementById('relationship-npc-handle').value.trim();
    const relationshipType = document.getElementById('relationship-type').value;
    const description = document.getElementById('relationship-description').value.trim(); // 验证数据
    if (!npcName) {
      showXToast('NPC名称不能为空', 'error');
      return;
    }
    if (!npcHandle) {
      showXToast('NPC句柄不能为空', 'error');
      return;
    }
    // 确保句柄格式正确
    const handleFormatted = npcHandle.startsWith('@') ? npcHandle : `@${npcHandle}`;
    try {
      if (currentEditingRelationshipId) {
        // 编辑模式
        const relationshipIndex = currentRelationships.findIndex(rel => rel.id === currentEditingRelationshipId);
        if (relationshipIndex !== -1) {
          currentRelationships[relationshipIndex] = {
            ...currentRelationships[relationshipIndex],
            npcName: npcName,
            npcHandle: handleFormatted,
            relationshipType: relationshipType,
            description: description,
            updatedAt: new Date().toISOString(),
          };
        }
      } else {
        // 添加模式
        const newRelationship = {
          id: 'rel_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
          npcName: npcName,
          npcHandle: handleFormatted,
          relationshipType: relationshipType,
          description: description,
          createdAt: new Date().toISOString(),
        };
        currentRelationships.push(newRelationship);
      }
      // 保存到数据库
      await saveRelationshipsToDatabase(); // 更新界面
      renderRelationshipsList(currentRelationships); // 关闭弹窗
      closeRelationshipModal();
      showXToast(currentEditingRelationshipId ? '关系已更新' : '关系已添加', 'success');
    } catch (error) {
      console.error('保存关系失败:', error);
      showXToast('保存失败', 'error');
    }
  }
  // ============================================
  // 角色关系册功能
  // ============================================
  // 角色关系册数据结构
  let characterRelationshipData = {
    characters: [], // 已绑定角色列表
    links: [], // 关系连线列表 { id, charA, charB, relationAtoB, relationBtoA }
  }; // 当前编辑的关系连线ID
  let currentEditingLinkId = null; // 切换角色关系册开关
  async function toggleCharacterRelationship() {
    if (!xSettingsData.characterRelationship) {
      xSettingsData.characterRelationship = {};
    }
    xSettingsData.characterRelationship.enabled = !xSettingsData.characterRelationship.enabled; // 更新UI
    updateRelationshipToggleUI(); // 显示/隐藏关系册管理区域
    const relationshipArea = document.getElementById('relationship-binding-area');
    if (xSettingsData.characterRelationship.enabled) {
      relationshipArea.style.display = 'block';
      await loadRelationshipData(); // 稍微延迟更新预览，确保画布已渲染
      setTimeout(() => {
        updateRelationshipPreview();
      }, 100);
    } else {
      relationshipArea.style.display = 'none';
    }
    // 自动保存设置
    await saveXSettings();
  }
  // 更新关系册切换按钮UI
  function updateRelationshipToggleUI() {
    const toggle = document.getElementById('x-relationship-toggle');
    const circle = toggle?.querySelector('.toggle-circle');
    if (!toggle || !circle) return;
    const enabled = xSettingsData.characterRelationship?.enabled || false;
    if (enabled) {
      toggle.style.backgroundColor = 'var(--x-accent)';
      circle.style.left = '22px';
    } else {
      toggle.style.backgroundColor = '#333';
      circle.style.left = '2px';
    }
  }
  // 加载关系册数据
  async function loadRelationshipData() {
    try {
      const db = getXDB();
      const currentAccount = currentAccountId || 'main';
      const dataId = `xCharacterRelationships_${currentAccount}`;
      const savedData = await db.xCharacterRelationships.get(dataId); // 获取当前绑定的所有角色
      const boundChars = xSettingsData.boundCharacters || [];
      const mainDB = getDB();
      const allChats = await mainDB.chats.toArray();
      const currentBoundCharacters = allChats
        .filter(chat => !chat.isGroup && boundChars.includes(chat.id))
        .map(chat => ({
          id: chat.id,
          name: chat.name,
          avatar: chat.settings?.aiAvatar || 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
        }));
      if (savedData && savedData.data) {
        // 已有保存数据：合并角色列表，保留关系连线
        characterRelationshipData = savedData.data; // 同步角色列表：添加新绑定的角色，移除已解绑的角色
        const existingCharIds = new Set(characterRelationshipData.characters.map(c => c.id));
        const currentCharIds = new Set(currentBoundCharacters.map(c => c.id)); // 添加新角色（保留位置信息）
        currentBoundCharacters.forEach(char => {
          if (!existingCharIds.has(char.id)) {
            characterRelationshipData.characters.push(char);
            console.log('➕ 新增角色到关系册:', char.name);
          }
        }); // 移除已解绑的角色，并删除相关的连线
        characterRelationshipData.characters = characterRelationshipData.characters.filter(char => {
          const isStillBound = currentCharIds.has(char.id);
          if (!isStillBound) {
            console.log('➖ 从关系册移除角色:', char.name); // 删除与该角色相关的所有连线
            characterRelationshipData.links = characterRelationshipData.links.filter(
              link => link.charA !== char.id && link.charB !== char.id,
            );
          }
          return isStillBound;
        }); // 更新现有角色的名称和头像（可能被修改过）
        characterRelationshipData.characters.forEach(char => {
          const updatedChar = currentBoundCharacters.find(c => c.id === char.id);
          if (updatedChar) {
            char.name = updatedChar.name;
            char.avatar = updatedChar.avatar;
          }
        });
      } else {
        // 无保存数据：初始化
        characterRelationshipData.characters = currentBoundCharacters;
        characterRelationshipData.links = [];
      }
      console.log('✅ 已加载角色关系数据:', {
        角色数: characterRelationshipData.characters.length,
        关系数: characterRelationshipData.links.length,
        角色列表: characterRelationshipData.characters.map(c => c.name),
      });
    } catch (error) {
      console.error('❌ 加载关系数据失败:', error);
    }
  }
  // 更新预览画布
  function updateRelationshipPreview() {
    const canvas = document.getElementById('relationship-preview-canvas');
    const placeholder = document.getElementById('relationship-preview-placeholder');
    const stats = document.getElementById('relationship-stats');
    if (!canvas) return;
    const linkCount = characterRelationshipData.links?.length || 0;
    const charCount = characterRelationshipData.characters?.length || 0;
    const chars = characterRelationshipData.characters || [];
    const links = characterRelationshipData.links || [];
    if (charCount > 0) {
      placeholder.style.display = 'none';
      stats.style.display = 'block';
      document.getElementById('relationship-character-count').textContent = charCount;
      document.getElementById('relationship-link-count').textContent = linkCount; // 绘制缩小版关系图预览
      const ctx = canvas.getContext('2d');
      ctx.clearRect(0, 0, canvas.width, canvas.height); // 读取当前主题的颜色
      const computedStyle = getComputedStyle(document.documentElement);
      const accentColor = computedStyle.getPropertyValue('--x-accent').trim() || '#1d9bf0';
      const bgColor = computedStyle.getPropertyValue('--x-bg-primary').trim() || '#000';
      const textColor = computedStyle.getPropertyValue('--x-text-primary').trim() || '#fff'; // 缩放比例
      const scale = 0.5;
      const centerX = canvas.width / 2;
      const centerY = canvas.height / 2;
      const radius = Math.min(canvas.width, canvas.height) / 2 - 20; // 计算角色位置
      chars.forEach((char, index) => {
        const angle = (index / chars.length) * Math.PI * 2 - Math.PI / 2;
        char.previewX = centerX + radius * Math.cos(angle);
        char.previewY = centerY + radius * Math.sin(angle);
      }); // 绘制连线
      ctx.strokeStyle = accentColor;
      ctx.lineWidth = 1.5;
      links.forEach(link => {
        const charA = chars.find(c => c.id === link.charA);
        const charB = chars.find(c => c.id === link.charB);
        if (charA && charB) {
          ctx.beginPath();
          ctx.moveTo(charA.previewX, charA.previewY);
          ctx.lineTo(charB.previewX, charB.previewY);
          ctx.stroke();
        }
      }); // 绘制角色节点
      chars.forEach(char => {
        ctx.beginPath();
        ctx.arc(char.previewX, char.previewY, 15, 0, Math.PI * 2);
        ctx.fillStyle = accentColor;
        ctx.fill();
        ctx.strokeStyle = bgColor;
        ctx.lineWidth = 2;
        ctx.stroke(); // 绘制首字母
        ctx.fillStyle = textColor;
        ctx.font = 'bold 10px sans-serif';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillText(char.name.charAt(0), char.previewX, char.previewY);
      });
    } else {
      placeholder.style.display = 'block';
      stats.style.display = 'none';
    }
  }
  // 窗口大小改变时重新渲染（用于处理设备旋转等情况）
  let resizeTimeout;
  function handleRelationshipCanvasResize() {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(() => {
      const modal = document.getElementById('character-relationship-graph-modal');
      if (modal && modal.style.display !== 'none') {
        initRelationshipCanvas();
        renderRelationshipGraph();
      }
    }, 300);
  }
  // ESC 键处理函数
  function handleRelationshipGraphKeyPress(event) {
    if (event.key === 'Escape' && isSelectingCharsForLink) {
      // 取消选择模式
      isSelectingCharsForLink = false;
      selectedCharForLink = null;
      renderRelationshipGraph();
      showXToast('已取消选择', 'info');
      console.log('📍 已退出角色选择模式');
    }
  }
  // 打开关系图编辑器
  async function openCharacterRelationshipGraph() {
    await loadRelationshipData();
    const modal = document.getElementById('character-relationship-graph-modal');
    if (modal) {
      modal.style.display = 'block';
      document.body.style.overflow = 'hidden'; // 初始化画布
      setTimeout(() => {
        initRelationshipCanvas();
        renderRelationshipGraph();
        renderRelationshipList();
      }, 100); // 监听窗口大小改变
      window.addEventListener('resize', handleRelationshipCanvasResize);
      window.addEventListener('orientationchange', handleRelationshipCanvasResize); // 监听键盘事件（用于 ESC 取消选择）
      window.addEventListener('keydown', handleRelationshipGraphKeyPress);
    }
  }
  // 关闭关系图编辑器
  function closeCharacterRelationshipGraph(event) {
    if (event && event.target !== event.currentTarget) return;
    const modal = document.getElementById('character-relationship-graph-modal');
    if (modal) {
      modal.style.display = 'none';
      document.body.style.overflow = 'auto'; // 重置选择状态
      isSelectingCharsForLink = false;
      selectedCharForLink = null; // 移除事件监听器
      window.removeEventListener('resize', handleRelationshipCanvasResize);
      window.removeEventListener('orientationchange', handleRelationshipCanvasResize);
      window.removeEventListener('keydown', handleRelationshipGraphKeyPress);
    }
  }
  // 拖拽状态
  let isDragging = false;
  let draggedCharId = null;
  let dragOffsetX = 0;
  let dragOffsetY = 0; // 角色选择状态（用于创建连线）
  let isSelectingCharsForLink = false;
  let selectedCharForLink = null; // 初始化关系图画布
  function initRelationshipCanvas() {
    const canvas = document.getElementById('relationship-graph-canvas');
    if (!canvas) return; // 设置画布实际大小
    const container = canvas.parentElement;
    canvas.width = container.clientWidth;
    canvas.height = container.clientHeight; // 绑定鼠标事件
    canvas.onmousedown = handleCanvasMouseDown;
    canvas.onmousemove = handleCanvasMouseMove;
    canvas.onmouseup = handleCanvasMouseUp;
    canvas.onclick = handleCanvasClick; // 绑定触摸事件（移动端支持）
    canvas.addEventListener('touchstart', handleCanvasTouchStart, { passive: false });
    canvas.addEventListener('touchmove', handleCanvasTouchMove, { passive: false });
    canvas.addEventListener('touchend', handleCanvasTouchEnd, { passive: false });
  }
  // 缓存加载的头像图片
  const avatarImageCache = {}; // 渲染关系图
  function renderRelationshipGraph() {
    const canvas = document.getElementById('relationship-graph-canvas');
    const emptyState = document.getElementById('graph-empty-state');
    if (!canvas) return;
    const ctx = canvas.getContext('2d');
    const chars = characterRelationshipData.characters || [];
    const links = characterRelationshipData.links || []; // 读取当前主题的颜色
    const computedStyle = getComputedStyle(document.documentElement);
    const accentColor = computedStyle.getPropertyValue('--x-accent').trim() || '#1d9bf0';
    const bgPrimary = computedStyle.getPropertyValue('--x-bg-primary').trim() || '#000';
    const bgSecondary = computedStyle.getPropertyValue('--x-bg-secondary').trim() || '#1a1a1a';
    const textPrimary = computedStyle.getPropertyValue('--x-text-primary').trim() || '#fff'; // 判断是否为暗色主题（用于设置半透明背景）
    const isDark = bgPrimary.includes('#000') || bgPrimary.includes('0, 0, 0');
    const textBgColor = isDark ? 'rgba(0, 0, 0, 0.7)' : 'rgba(255, 255, 255, 0.85)'; // 更新统计
    document.getElementById('graph-character-count').textContent = `${chars.length} 角色`;
    document.getElementById('graph-link-count').textContent = `${links.length} 关系`;
    if (chars.length === 0) {
      emptyState.style.display = 'block';
      return;
    }
    emptyState.style.display = 'none';
    ctx.clearRect(0, 0, canvas.width, canvas.height); // 绘制选择模式提示
    if (isSelectingCharsForLink) {
      const tipText = selectedCharForLink ? '请点击第二个角色' : '请点击第一个角色';
      ctx.fillStyle = accentColor;
      ctx.font = 'bold 16px sans-serif';
      ctx.textAlign = 'center';
      ctx.fillText(tipText, canvas.width / 2, 30); // 绘制取消按钮提示
      ctx.fillStyle = textPrimary;
      ctx.font = '12px sans-serif';
      ctx.fillText('(按 ESC 键取消)', canvas.width / 2, 50);
    }
    // 初始化位置（圆形布局）- 只在没有位置时设置
    const centerX = canvas.width / 2;
    const centerY = canvas.height / 2;
    const radius = Math.min(canvas.width, canvas.height) / 3;
    chars.forEach((char, index) => {
      if (char.x === undefined || char.y === undefined) {
        const angle = (index / chars.length) * Math.PI * 2 - Math.PI / 2;
        char.x = centerX + radius * Math.cos(angle);
        char.y = centerY + radius * Math.sin(angle);
      }
    }); // 绘制连线
    links.forEach(link => {
      const charA = chars.find(c => c.id === link.charA);
      const charB = chars.find(c => c.id === link.charB);
      if (charA && charB) {
        ctx.beginPath();
        ctx.moveTo(charA.x, charA.y);
        ctx.lineTo(charB.x, charB.y);
        ctx.strokeStyle = accentColor;
        ctx.lineWidth = 2;
        ctx.stroke(); // 绘制关系文本
        const midX = (charA.x + charB.x) / 2;
        const midY = (charA.y + charB.y) / 2; // 动态计算文本框大小
        const isMobile = window.innerWidth < 768;
        const textBoxWidth = isMobile ? 70 : 80;
        const textBoxHeight = isMobile ? 30 : 35;
        const fontSize = isMobile ? '10px' : '11px'; // 绘制文本背景
        ctx.fillStyle = textBgColor;
        ctx.fillRect(midX - textBoxWidth / 2, midY - textBoxHeight / 2, textBoxWidth, textBoxHeight);
        ctx.fillStyle = accentColor;
        ctx.font = fontSize + ' sans-serif';
        ctx.textAlign = 'center';
        const lineSpacing = isMobile ? 12 : 15;
        ctx.fillText(link.relationAtoB || '关系', midX, midY - lineSpacing / 2);
        ctx.fillText(link.relationBtoA || '关系', midX, midY + lineSpacing / 2);
      }
    }); // 动态计算头像大小（移动端缩小）
    const isMobile = window.innerWidth < 768;
    const avatarRadius = isMobile ? 25 : 35;
    const avatarInnerRadius = avatarRadius - 2; // 绘制角色头像和名称
    chars.forEach(char => {
      // 检查是否为选中的角色
      const isSelected = isSelectingCharsForLink && selectedCharForLink === char.id; // 绘制选中高亮圈（外圈）
      if (isSelected) {
        ctx.beginPath();
        ctx.arc(char.x, char.y, avatarRadius + 5, 0, Math.PI * 2);
        ctx.strokeStyle = accentColor;
        ctx.lineWidth = 3;
        ctx.stroke();
      }
      // 绘制圆形背景
      ctx.beginPath();
      ctx.arc(char.x, char.y, avatarRadius, 0, Math.PI * 2);
      ctx.fillStyle = isSelected ? '#FFA500' : accentColor; // 选中时使用橙色
      ctx.fill();
      ctx.strokeStyle = bgPrimary;
      ctx.lineWidth = 2;
      ctx.stroke(); // 绘制头像图片
      if (char.avatar) {
        if (avatarImageCache[char.avatar]) {
          // 使用缓存的图片
          const img = avatarImageCache[char.avatar];
          ctx.save();
          ctx.beginPath();
          ctx.arc(char.x, char.y, avatarInnerRadius, 0, Math.PI * 2);
          ctx.closePath();
          ctx.clip();
          ctx.drawImage(
            img,
            char.x - avatarInnerRadius,
            char.y - avatarInnerRadius,
            avatarInnerRadius * 2,
            avatarInnerRadius * 2,
          );
          ctx.restore();
        } else {
          // 加载图片
          const img = new Image();
          img.crossOrigin = 'anonymous';
          img.onload = () => {
            avatarImageCache[char.avatar] = img;
            renderRelationshipGraph(); // 重新渲染
          };
          img.onerror = () => {
            // 加载失败，显示默认文本
            ctx.fillStyle = textPrimary;
            ctx.font = 'bold 14px sans-serif';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText(char.name.charAt(0), char.x, char.y);
          };
          img.src = char.avatar; // 在图片加载前显示首字母
          ctx.fillStyle = textPrimary;
          ctx.font = 'bold 14px sans-serif';
          ctx.textAlign = 'center';
          ctx.textBaseline = 'middle';
          ctx.fillText(char.name.charAt(0), char.x, char.y);
        }
      } else {
        // 没有头像，显示首字母
        ctx.fillStyle = textPrimary;
        ctx.font = 'bold 14px sans-serif';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillText(char.name.charAt(0), char.x, char.y);
      }
      // 绘制名称
      ctx.fillStyle = textPrimary;
      ctx.font = isMobile ? 'bold 11px sans-serif' : 'bold 12px sans-serif';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'top';
      ctx.fillText(char.name, char.x, char.y + avatarRadius + 10); // 保存头像半径到角色数据，用于点击检测
      char.radius = avatarRadius;
    });
  }
  // 鼠标按下处理
  function handleCanvasMouseDown(event) {
    const canvas = event.target;
    const rect = canvas.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;
    const chars = characterRelationshipData.characters || []; // 检查是否点击了角色
    for (const char of chars) {
      const dx = x - char.x;
      const dy = y - char.y;
      const radius = char.radius || 35;
      if (Math.sqrt(dx * dx + dy * dy) < radius) {
        isDragging = true;
        draggedCharId = char.id;
        dragOffsetX = dx;
        dragOffsetY = dy;
        canvas.style.cursor = 'grabbing';
        return;
      }
    }
  }
  // 触摸开始处理（移动端）
  function handleCanvasTouchStart(event) {
    event.preventDefault();
    const canvas = event.target;
    const rect = canvas.getBoundingClientRect();
    const touch = event.touches[0];
    const x = touch.clientX - rect.left;
    const y = touch.clientY - rect.top; // 记录触摸开始信息
    touchStartTime = Date.now();
    touchStartX = x;
    touchStartY = y;
    const chars = characterRelationshipData.characters || []; // 检查是否触摸了角色（但不立即设置为拖拽状态）
    for (const char of chars) {
      const dx = x - char.x;
      const dy = y - char.y;
      const radius = char.radius || 35;
      if (Math.sqrt(dx * dx + dy * dy) < radius) {
        // 记录可能被拖拽的角色，但不立即设置为拖拽状态
        draggedCharId = char.id;
        dragOffsetX = dx;
        dragOffsetY = dy;
        return;
      }
    }
  }
  // 鼠标移动处理
  function handleCanvasMouseMove(event) {
    const canvas = event.target;
    const rect = canvas.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;
    const chars = characterRelationshipData.characters || [];
    if (isDragging && draggedCharId) {
      // 拖拽角色
      const char = chars.find(c => c.id === draggedCharId);
      if (char) {
        char.x = x - dragOffsetX;
        char.y = y - dragOffsetY;
        renderRelationshipGraph();
      }
    } else {
      // 检查是否悬停在角色上
      const hoveredChar = chars.find(char => {
        const dx = x - char.x;
        const dy = y - char.y;
        const radius = char.radius || 35;
        return Math.sqrt(dx * dx + dy * dy) < radius;
      });
      canvas.style.cursor = hoveredChar ? 'grab' : 'default';
    }
  }
  // 触摸移动处理（移动端）
  function handleCanvasTouchMove(event) {
    event.preventDefault();
    const canvas = event.target;
    const rect = canvas.getBoundingClientRect();
    const touch = event.touches[0];
    const x = touch.clientX - rect.left;
    const y = touch.clientY - rect.top;
    const chars = characterRelationshipData.characters || []; // 如果已记录了拖拽目标但还未进入拖拽状态，检查移动距离
    if (draggedCharId && !isDragging) {
      const dx = x - touchStartX;
      const dy = y - touchStartY;
      const distance = Math.sqrt(dx * dx + dy * dy); // 移动距离超过10px才认为是拖拽
      if (distance > 10) {
        isDragging = true;
        console.log('📍 开始拖拽角色');
      }
    }
    if (isDragging && draggedCharId) {
      // 拖拽角色
      const char = chars.find(c => c.id === draggedCharId);
      if (char) {
        char.x = x - dragOffsetX;
        char.y = y - dragOffsetY;
        renderRelationshipGraph();
      }
    }
  }
  // 鼠标释放处理
  function handleCanvasMouseUp(event) {
    if (isDragging) {
      isDragging = false;
      draggedCharId = null;
      event.target.style.cursor = 'default';
    }
  }
  // 触摸结束处理（移动端）
  let touchStartTime = 0;
  let touchStartX = 0;
  let touchStartY = 0;
  function handleCanvasTouchEnd(event) {
    event.preventDefault();
    const wasDragging = isDragging; // 重置拖拽状态
    if (isDragging) {
      isDragging = false;
      draggedCharId = null;
    } else if (draggedCharId) {
      // 即使没有进入拖拽状态，也要清除记录的角色ID
      draggedCharId = null;
    }
    // 如果没有拖拽，检测是否是点击
    if (!wasDragging && event.changedTouches && event.changedTouches.length > 0) {
      const canvas = event.target;
      const rect = canvas.getBoundingClientRect();
      const touch = event.changedTouches[0];
      const x = touch.clientX - rect.left;
      const y = touch.clientY - rect.top;
      const chars = characterRelationshipData.characters || [];
      const links = characterRelationshipData.links || []; // 优先处理选择模式
      if (isSelectingCharsForLink) {
        // 检查是否触摸了角色
        for (const char of chars) {
          const dx = x - char.x;
          const dy = y - char.y;
          const radius = char.radius || 35;
          if (Math.sqrt(dx * dx + dy * dy) < radius) {
            handleCharacterSelection(char);
            return;
          }
        }
        return; // 选择模式下不处理其他点击
      }
      // 检查是否点击了连线
      for (const link of links) {
        const charA = chars.find(c => c.id === link.charA);
        const charB = chars.find(c => c.id === link.charB);
        if (charA && charB) {
          const dist = distanceToLine(x, y, charA.x, charA.y, charB.x, charB.y); // 移动端增大点击区域
          if (dist < 20) {
            openEditRelationshipDetailModal(link);
            return;
          }
        }
      }
    }
  }
  // 画布点击处理
  function handleCanvasClick(event) {
    // 如果刚才在拖拽，不触发点击事件
    if (isDragging) return;
    const canvas = event.target;
    const rect = canvas.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;
    const chars = characterRelationshipData.characters || [];
    const links = characterRelationshipData.links || []; // 优先处理选择模式
    if (isSelectingCharsForLink) {
      // 检查是否点击了角色
      for (const char of chars) {
        const dx = x - char.x;
        const dy = y - char.y;
        const radius = char.radius || 35;
        if (Math.sqrt(dx * dx + dy * dy) < radius) {
          handleCharacterSelection(char);
          return;
        }
      }
      return; // 选择模式下不处理其他点击
    }
    // 检查是否点击了连线
    for (const link of links) {
      const charA = chars.find(c => c.id === link.charA);
      const charB = chars.find(c => c.id === link.charB);
      if (charA && charB) {
        const dist = distanceToLine(x, y, charA.x, charA.y, charB.x, charB.y);
        if (dist < 15) {
          openEditRelationshipDetailModal(link);
          return;
        }
      }
    }
  }
  // 处理角色选择（用于创建连线）
  function handleCharacterSelection(char) {
    if (!selectedCharForLink) {
      // 选择第一个角色
      selectedCharForLink = char.id;
      console.log('✅ 已选择第一个角色:', char.name);
      showXToast(`已选择 ${char.name}，请点击第二个角色`, 'info');
      renderRelationshipGraph(); // 重新渲染以高亮选中的角色
    } else {
      // 选择第二个角色
      if (selectedCharForLink === char.id) {
        showXToast('请选择不同的角色', 'error');
        return;
      }
      // 检查是否已存在这条关系
      const existingLink = characterRelationshipData.links.find(
        link =>
          (link.charA === selectedCharForLink && link.charB === char.id) ||
          (link.charA === char.id && link.charB === selectedCharForLink),
      );
      if (existingLink) {
        showXToast('这两个角色已存在关系，请直接点击连线编辑', 'error'); // 退出选择模式
        isSelectingCharsForLink = false;
        selectedCharForLink = null;
        renderRelationshipGraph();
        return;
      }
      console.log('✅ 已选择第二个角色:', char.name); // 创建新关系
      const newLink = {
        id: 'link_' + Date.now(),
        charA: selectedCharForLink,
        charB: char.id,
        relationAtoB: '',
        relationBtoA: '',
        story: '',
      };
      characterRelationshipData.links.push(newLink); // 退出选择模式
      isSelectingCharsForLink = false;
      selectedCharForLink = null; // 立即渲染
      renderRelationshipGraph();
      renderRelationshipList(); // 更新全局引用
      window.characterRelationshipData = characterRelationshipData; // 延迟打开编辑，确保渲染完成
      setTimeout(() => {
        openEditRelationshipDetailModal(newLink);
      }, 100);
    }
  }
  // 计算点到线段的距离
  function distanceToLine(px, py, x1, y1, x2, y2) {
    const A = px - x1;
    const B = py - y1;
    const C = x2 - x1;
    const D = y2 - y1;
    const dot = A * C + B * D;
    const lenSq = C * C + D * D;
    let param = -1;
    if (lenSq !== 0) param = dot / lenSq;
    let xx, yy;
    if (param < 0) {
      xx = x1;
      yy = y1;
    } else if (param > 1) {
      xx = x2;
      yy = y2;
    } else {
      xx = x1 + param * C;
      yy = y1 + param * D;
    }
    const dx = px - xx;
    const dy = py - yy;
    return Math.sqrt(dx * dx + dy * dy);
  }
  // 添加关系连线
  function addRelationshipLink() {
    const chars = characterRelationshipData.characters || [];
    if (chars.length < 2) {
      showXToast('至少需要2个已绑定角色才能创建关系', 'error');
      return;
    }
    // 进入选择模式
    isSelectingCharsForLink = true;
    selectedCharForLink = null;
    showXToast('请点击选择第一个角色', 'info');
    console.log('📍 进入角色选择模式'); // 重新渲染以显示选择提示
    renderRelationshipGraph();
  }
  // 打开编辑关系详情弹窗
  function openEditRelationshipDetailModal(link) {
    currentEditingLinkId = link.id;
    const chars = characterRelationshipData.characters || [];
    const charA = chars.find(c => c.id === link.charA);
    const charB = chars.find(c => c.id === link.charB);
    if (!charA || !charB) return;
    document.getElementById('char-a-name').textContent = charA.name;
    document.getElementById('char-b-name').textContent = charB.name;
    document.getElementById('char-a-to-b-label').textContent = `${charA.name} 是 ${charB.name} 的：`;
    document.getElementById('char-b-to-a-label').textContent = `${charB.name} 是 ${charA.name} 的：`;
    document.getElementById('relationship-a-to-b').value = link.relationAtoB || '';
    document.getElementById('relationship-b-to-a').value = link.relationBtoA || '';
    document.getElementById('relationship-story').value = link.story || '';
    const modal = document.getElementById('edit-relationship-detail-modal');
    if (modal) {
      modal.style.display = 'block';
    }
  }
  // 关闭编辑关系详情弹窗
  function closeEditRelationshipDetail(event) {
    if (event && event.target !== event.currentTarget) return;
    const modal = document.getElementById('edit-relationship-detail-modal');
    if (modal) {
      modal.style.display = 'none';
    }
    currentEditingLinkId = null;
  }
  // 保存关系详情
  async function saveRelationshipDetail() {
    if (!currentEditingLinkId) return;
    const link = characterRelationshipData.links.find(l => l.id === currentEditingLinkId);
    if (!link) return;
    link.relationAtoB = document.getElementById('relationship-a-to-b').value.trim();
    link.relationBtoA = document.getElementById('relationship-b-to-a').value.trim();
    link.story = document.getElementById('relationship-story').value.trim();
    renderRelationshipGraph();
    renderRelationshipList();
    closeEditRelationshipDetail(); // 自动保存到数据库
    try {
      const db = getXDB();
      const currentAccount = currentAccountId || 'main';
      const dataId = `xCharacterRelationships_${currentAccount}`;
      await db.xCharacterRelationships.put({
        id: dataId,
        accountId: currentAccount,
        data: characterRelationshipData,
        lastUpdated: new Date().toISOString(),
      });
      updateRelationshipPreview();
      showXToast('关系已更新并保存', 'success');
      console.log('✅ 关系已自动保存:', link);
    } catch (error) {
      console.error('❌ 保存关系失败:', error);
      showXToast('关系已更新但保存失败', 'error');
    }
  }
  // 删除关系连线
  async function deleteRelationshipLink() {
    if (!currentEditingLinkId) return;
    if (!confirm('确定要删除这条关系吗？')) return;
    characterRelationshipData.links = characterRelationshipData.links.filter(l => l.id !== currentEditingLinkId);
    renderRelationshipGraph();
    renderRelationshipList();
    closeEditRelationshipDetail(); // 自动保存到数据库
    try {
      const db = getXDB();
      const currentAccount = currentAccountId || 'main';
      const dataId = `xCharacterRelationships_${currentAccount}`;
      await db.xCharacterRelationships.put({
        id: dataId,
        accountId: currentAccount,
        data: characterRelationshipData,
        lastUpdated: new Date().toISOString(),
      });
      updateRelationshipPreview();
      showXToast('关系已删除', 'success');
    } catch (error) {
      console.error('❌ 删除关系失败:', error);
      showXToast('关系已删除但保存失败', 'error');
    }
  }
  // 清空所有关系
  async function clearAllRelationships() {
    if (!confirm('确定要清空所有关系吗？此操作不可恢复。')) return;
    characterRelationshipData.links = [];
    renderRelationshipGraph();
    renderRelationshipList(); // 自动保存到数据库
    try {
      const db = getXDB();
      const currentAccount = currentAccountId || 'main';
      const dataId = `xCharacterRelationships_${currentAccount}`;
      await db.xCharacterRelationships.put({
        id: dataId,
        accountId: currentAccount,
        data: characterRelationshipData,
        lastUpdated: new Date().toISOString(),
      });
      updateRelationshipPreview();
      showXToast('已清空所有关系', 'success');
    } catch (error) {
      console.error('❌ 清空关系失败:', error);
      showXToast('已清空但保存失败', 'error');
    }
  }
  // 渲染关系列表
  function renderRelationshipList() {
    const listContainer = document.getElementById('relationship-links-list');
    if (!listContainer) return;
    const links = characterRelationshipData.links || [];
    const chars = characterRelationshipData.characters || [];
    if (links.length === 0) {
      listContainer.innerHTML = '<div style="color: #71767b; text-align: center; padding: 20px;">暂无关系</div>';
      return;
    }
    listContainer.innerHTML = links
      .map(link => {
        const charA = chars.find(c => c.id === link.charA);
        const charB = chars.find(c => c.id === link.charB);
        if (!charA || !charB) return '';
        const storyPreview = link.story
          ? `
 <div style="color: #71767b; font-size: 11px; margin-top: 6px; padding-top: 6px; border-top: 1px solid #2f3336;">
 ${link.story.length > 50 ? link.story.substring(0, 50) + '...' : link.story}
 </div>
 `
          : '';
        return `
 <div style="background-color: #1a1a1a; border: 1px solid #333; border-radius: 8px; padding: 12px; margin-bottom: 8px; cursor: pointer; transition: background-color 0.2s; " onclick="openEditRelationshipDetailModal(window.characterRelationshipData.links.find(l => l.id === '${
   link.id
 }'))"
 onmouseover="this.style.backgroundColor='#2a2a2a'"
 onmouseout="this.style.backgroundColor='#1a1a1a'">
 <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 8px;">
 <div style="display: flex; align-items: center; gap: 8px;">
 <span style="color: #fff; font-weight: 600; font-size: 14px;">${charA.name}</span>
 <span style="color: #71767b;">⇆</span>
 <span style="color: #fff; font-weight: 600; font-size: 14px;">${charB.name}</span>
 </div>
 </div>
 <div style="display: flex; gap: 12px; font-size: 12px;">
 <div style="color: var(--x-accent);">${charA.name}: ${link.relationAtoB || '(未设置)'}</div>
 <div style="color: var(--x-accent);">${charB.name}: ${link.relationBtoA || '(未设置)'}</div>
 </div>
 ${storyPreview}
 </div>
 `;
      })
      .join('');
  }
  // 保存关系图
  async function saveRelationshipGraph() {
    try {
      const db = getXDB();
      const currentAccount = currentAccountId || 'main';
      const dataId = `xCharacterRelationships_${currentAccount}`;
      await db.xCharacterRelationships.put({
        id: dataId,
        accountId: currentAccount,
        data: characterRelationshipData,
        lastUpdated: new Date().toISOString(),
      });
      updateRelationshipPreview();
      closeCharacterRelationshipGraph();
      showXToast('关系图已保存', 'success');
      console.log('✅ 关系图已保存:', characterRelationshipData);
    } catch (error) {
      console.error('❌ 保存关系图失败:', error);
      showXToast('保存失败', 'error');
    }
  }
  // ============================================
  // NPC绑定功能
  // ============================================
  // 当前编辑的NPC ID
  let currentEditingNPCId = null; // 切换NPC绑定开关
  async function toggleNPCBinding() {
    xSettingsData.npcBinding = !xSettingsData.npcBinding; // 更新UI
    updateNPCToggleUI(); // 显示/隐藏NPC管理区域
    const npcArea = document.getElementById('npc-binding-area');
    if (xSettingsData.npcBinding) {
      npcArea.style.display = 'block';
      await loadNPCsList();
    } else {
      npcArea.style.display = 'none';
    }
    // 自动保存设置
    await saveXSettings();
  }
  // 更新NPC绑定切换按钮UI
  function updateNPCToggleUI() {
    const toggle = document.getElementById('x-npc-toggle');
    const circle = toggle.querySelector('.toggle-circle');
    if (xSettingsData.npcBinding) {
      toggle.style.backgroundColor = 'var(--x-accent)';
      circle.style.left = '22px';
    } else {
      toggle.style.backgroundColor = '#333';
      circle.style.left = '2px';
    }
  }
  // 加载NPC列表
  async function loadNPCsList() {
    try {
      const db = getXDB();
      const npcId = 'xNPCs_global'; // 全局存储，所有账号共享
      const npcData = await db.xNPCs.get(npcId);
      const allNPCs = npcData?.npcs || []; // 过滤出绑定了当前账号的NPC
      const currentAccount = currentAccountId || 'main';
      const npcs = allNPCs.filter(npc => npc.boundUsers && npc.boundUsers.includes(currentAccount));
      const npcsList = document.getElementById('npcs-list');
      if (npcs.length === 0) {
        npcsList.innerHTML =
          '<p style="color: #71767b; font-size: 14px; text-align: center; padding: 20px 0;">暂无绑定到此账号的NPC，点击上方按钮创建</p>';
        return;
      }
      npcsList.innerHTML = npcs
        .map(
          npc => `
 <div style="background-color: #0a0a0a; border: 1px solid #2f3336; border-radius: 8px; padding: 12px; margin-bottom: 8px; display: flex; align-items: center; gap: 12px; ">
 <img src="${npc.avatar || 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg'}"
 style="width: 48px; height: 48px; border-radius: 50%; flex-shrink: 0;"
 alt="${npc.name}">
 <div style="flex: 1; min-width: 0;">
 <div style="color: #fff; font-weight: 600; font-size: 15px; margin-bottom: 2px;">${npc.name}</div>
 <div style="color: #71767b; font-size: 14px;">${npc.handle}</div>
 <div style="color: #71767b; font-size: 13px; margin-top: 4px;">
 绑定用户: ${npc.boundUsers?.length || 0}个
 </div>
 </div>
 <div style="display: flex; gap: 8px; flex-shrink: 0;">
 <button onclick="editNPC('${
   npc.id
 }')" style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 15px; padding: 6px 12px; font-size: 13px; cursor: pointer; white-space: nowrap; transition: all 0.2s; " onmouseover="this.style.backgroundColor='#1a8cd8'" onmouseout="this.style.backgroundColor='var(--x-accent)'">
 编辑
 </button>
 <button onclick="deleteNPC('${
   npc.id
 }')" style="background-color: #f4212e; color: #fff; border: none; border-radius: 15px; padding: 6px 12px; font-size: 13px; cursor: pointer; white-space: nowrap; transition: all 0.2s; " onmouseover="this.style.backgroundColor='#d11a29'" onmouseout="this.style.backgroundColor='#f4212e'">
 删除
 </button>
 </div>
 </div>
 `,
        )
        .join('');
    } catch (error) {
      console.error('加载NPC列表失败:', error);
      document.getElementById('npcs-list').innerHTML =
        '<p style="color: #f4212e; font-size: 14px; text-align: center; padding: 20px 0;">加载失败，请重试</p>';
    }
  }
  // 打开创建NPC弹窗
  function openCreateNPCModal() {
    currentEditingNPCId = null; // 清空表单
    document.getElementById('npc-name').value = '';
    document.getElementById('npc-handle').value = '';
    document.getElementById('npc-avatar').value = '';
    document.getElementById('npc-personality').value = '';
    document.getElementById('npc-posting-habits').value = '';
    document.getElementById('npc-homepage').value = ''; // 更新标题
    document.getElementById('npc-modal-title').textContent = '创建NPC'; // 加载用户列表
    loadNPCBindUsersList(); // 显示弹窗
    document.getElementById('npc-edit-modal').style.display = 'block';
    document.body.style.overflow = 'hidden';
  }
  // 编辑NPC
  async function editNPC(npcId) {
    try {
      const db = getXDB();
      const npcDataId = 'xNPCs_global'; // 全局存储，所有账号共享
      const npcData = await db.xNPCs.get(npcDataId);
      const npcs = npcData?.npcs || [];
      const npc = npcs.find(n => n.id === npcId);
      if (!npc) {
        showXToast('NPC不存在', 'error');
        return;
      }
      currentEditingNPCId = npcId; // 填充表单
      document.getElementById('npc-name').value = npc.name || '';
      document.getElementById('npc-handle').value = npc.handle || '';
      document.getElementById('npc-avatar').value = npc.avatar || '';
      document.getElementById('npc-personality').value = npc.personality || '';
      document.getElementById('npc-posting-habits').value = npc.postingHabits || '';
      document.getElementById('npc-homepage').value = npc.homepage || ''; // 更新标题
      document.getElementById('npc-modal-title').textContent = '编辑NPC'; // 加载用户列表并选中已绑定的用户
      await loadNPCBindUsersList(npc.boundUsers || []); // 显示弹窗
      document.getElementById('npc-edit-modal').style.display = 'block';
      document.body.style.overflow = 'hidden';
    } catch (error) {
      console.error('加载NPC数据失败:', error);
      showXToast('加载失败', 'error');
    }
  }
  // 加载绑定用户列表
  async function loadNPCBindUsersList(selectedUsers = []) {
    try {
      const db = getXDB();
      const accounts = await db.xAccountList.toArray();
      const usersList = document.getElementById('npc-bind-users');
      if (accounts.length === 0) {
        usersList.innerHTML =
          '<p style="color: #71767b; font-size: 14px; text-align: center; padding: 10px 0;">暂无账号</p>';
        return;
      }
      usersList.innerHTML = accounts
        .map(account => {
          const isChecked = selectedUsers.includes(account.accountId);
          return `
 <label style="display: flex; align-items: center; gap: 12px; padding: 8px; cursor: pointer; border-radius: 6px; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(255,255,255,0.05)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <input
 type="checkbox"
 value="${account.accountId}"
 ${isChecked ? 'checked' : ''}
 style="width: 16px; height: 16px; accent-color: var(--x-accent); cursor: pointer;">
 <img src="${account.avatar}" style="width: 32px; height: 32px; border-radius: 50%;" alt="${account.name}">
 <div style="flex: 1;">
 <div style="color: #fff; font-size: 14px; font-weight: 600;">${account.name}</div>
 <div style="color: #71767b; font-size: 13px;">账号ID: ${account.accountId}</div>
 </div>
 </label>
 `;
        })
        .join('');
    } catch (error) {
      console.error('加载用户列表失败:', error);
    }
  }
  // 保存NPC
  async function saveNPC() {
    try {
      const name = document.getElementById('npc-name').value.trim();
      const handle = document.getElementById('npc-handle').value.trim();
      const avatar = document.getElementById('npc-avatar').value.trim();
      const personality = document.getElementById('npc-personality').value.trim();
      const postingHabits = document.getElementById('npc-posting-habits').value.trim();
      const homepage = document.getElementById('npc-homepage').value.trim(); // 获取选中的用户
      const boundUsers = Array.from(document.querySelectorAll('#npc-bind-users input[type="checkbox"]:checked')).map(
        input => input.value,
      ); // 验证数据
      if (!name) {
        showXToast('NPC姓名不能为空', 'error');
        return;
      }
      if (!handle) {
        showXToast('NPC句柄不能为空', 'error');
        return;
      }
      // 确保句柄格式正确
      const handleFormatted = handle.startsWith('@') ? handle : `@${handle}`;
      const db = getXDB();
      const npcDataId = 'xNPCs_global'; // 全局存储，所有账号共享
      const npcData = await db.xNPCs.get(npcDataId);
      let npcs = npcData?.npcs || [];
      if (currentEditingNPCId) {
        // 编辑模式
        const index = npcs.findIndex(n => n.id === currentEditingNPCId);
        if (index !== -1) {
          npcs[index] = {
            ...npcs[index],
            name,
            handle: handleFormatted,
            avatar: avatar || 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
            personality,
            postingHabits,
            homepage,
            boundUsers,
            updatedAt: new Date().toISOString(),
          };
        }
      } else {
        // 创建模式
        const newNPC = {
          id: 'npc_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
          name,
          handle: handleFormatted,
          avatar: avatar || 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
          personality,
          postingHabits,
          homepage,
          boundUsers,
          createdAt: new Date().toISOString(),
        };
        npcs.push(newNPC);
      }
      // 保存到数据库
      await db.xNPCs.put({
        id: npcDataId,
        npcs,
        lastUpdated: new Date().toISOString(),
      });
      console.log(`✅ NPC已${currentEditingNPCId ? '更新' : '创建'}:`, name, handle);
      console.log('📎 绑定账号数量:', boundUsers.length);
      console.log('📎 绑定账号列表:', boundUsers.length > 0 ? boundUsers : '无'); // 刷新列表
      await loadNPCsList(); // 关闭弹窗
      closeNPCEditModal();
      showXToast(currentEditingNPCId ? 'NPC已更新' : 'NPC已创建', 'success');
    } catch (error) {
      console.error('保存NPC失败:', error);
      showXToast('保存失败: ' + error.message, 'error');
    }
  }
  // 删除NPC
  async function deleteNPC(npcId) {
    if (!confirm('确定要删除这个NPC吗？\n此操作将影响所有绑定了此NPC的账号。')) return;
    try {
      const db = getXDB();
      const npcDataId = 'xNPCs_global'; // 全局存储，所有账号共享
      const npcData = await db.xNPCs.get(npcDataId);
      let npcs = npcData?.npcs || [];
      npcs = npcs.filter(n => n.id !== npcId);
      await db.xNPCs.put({
        id: npcDataId,
        npcs,
        lastUpdated: new Date().toISOString(),
      });
      await loadNPCsList();
      showXToast('NPC已删除', 'success');
    } catch (error) {
      console.error('删除NPC失败:', error);
      showXToast('删除失败', 'error');
    }
  }
  // 关闭NPC编辑弹窗
  function closeNPCEditModal(event) {
    if (event && event.target !== event.currentTarget) return;
    document.getElementById('npc-edit-modal').style.display = 'none';
    document.body.style.overflow = 'auto';
    currentEditingNPCId = null;
  }
  // 用户主页相关功能
  // 切换主页标签
  function switchProfileTab(tabName) {
    // 重置所有标签样式
    document.querySelectorAll('.profile-tab').forEach(tab => {
      tab.classList.remove('active');
      tab.style.color = '#71767b';
      tab.querySelector('.tab-indicator').style.display = 'none';
    }); // 隐藏所有内容区域
    document.querySelectorAll('.profile-tab-content').forEach(content => {
      content.style.display = 'none';
    }); // 激活选中的标签
    const activeTab = document.querySelector(`.profile-tab[onclick="switchProfileTab('${tabName}')"]`);
    if (activeTab) {
      activeTab.classList.add('active');
      activeTab.style.color = '#fff';
      activeTab.querySelector('.tab-indicator').style.display = 'block';
    }
    // 显示对应的内容区域
    const contentArea = document.getElementById(`profile-${tabName}-content`);
    if (contentArea) {
      contentArea.style.display = 'block';
    }
    // 根据标签加载相应内容
    if (tabName === 'posts') {
      loadUserProfileTweets();
    } else if (tabName === 'highlights') {
      loadHighlights();
    } else if (tabName === 'likes') {
      loadLikes();
    }
  }
  // 编辑个人资料
  function editProfile() {
    openEditProfileModal();
  }
  // 加载用户资料到UI
  function loadUserProfileToUI() {
    // 使用window.userProfileData确保读取最新数据
    const profile = window.userProfileData; // 更新顶栏头像
    const topBarAvatar = document.getElementById('top-bar-avatar');
    if (topBarAvatar) {
      topBarAvatar.src = profile.avatar;
    }
    // 更新主页信息
    const profileElements = {
      'x-profile-header-name': profile.name,
      'x-profile-user-name': profile.name,
      'x-profile-user-handle': profile.handle,
      'x-profile-bio': profile.bio,
      'x-profile-following-count': profile.following,
      'x-profile-followers-count': profile.followers,
    };
    Object.entries(profileElements).forEach(([id, value]) => {
      const element = document.getElementById(id);
      if (element) {
        element.textContent = value;
      }
    }); // 更新自定义标签内容、图标和颜色
    const tag1Element = document.getElementById('x-profile-tag1');
    const tag1IconElement = document.getElementById('x-profile-tag1-icon');
    const tag2Element = document.getElementById('x-profile-tag2');
    const tag2IconElement = document.getElementById('x-profile-tag2-icon');
    if (tag1Element) {
      tag1Element.textContent = profile.customTag1;
      tag1Element.style.color = profile.customTag1Color || '#71767b';
    }
    if (tag1IconElement) {
      tag1IconElement.textContent = profile.customTag1Icon || '✨';
    }
    if (tag2Element) {
      tag2Element.textContent = profile.customTag2;
      tag2Element.style.color = profile.customTag2Color || '#71767b';
    }
    if (tag2IconElement) {
      tag2IconElement.textContent = profile.customTag2Icon || '📅';
    }
    // 更新头像
    const mainAvatar = document.getElementById('x-profile-main-avatar');
    if (mainAvatar) {
      mainAvatar.src = profile.avatar;
    }
    // 更新封面图
    const coverImage = document.getElementById('x-profile-cover-image');
    if (coverImage) {
      coverImage.src = profile.coverImage;
    }
    // 更新认证徽章
    updateVerificationBadge(); // 更新评论输入区域的头像
    const commentInputAvatar = document.querySelector('#comment-input-area img, .comment-input-area img');
    if (commentInputAvatar) {
      commentInputAvatar.src = profile.avatar;
    }
    // 更新主页评论输入框头像
    const commentUserAvatar = document.getElementById('comment-user-avatar');
    if (commentUserAvatar) {
      commentUserAvatar.src = profile.avatar;
    }
    // 更新详情页评论输入框头像
    const detailCommentUserAvatar = document.getElementById('detail-comment-user-avatar');
    if (detailCommentUserAvatar) {
      detailCommentUserAvatar.src = profile.avatar;
    }
    // 更新所有回复输入框头像
    const replyUserAvatars = document.querySelectorAll('.reply-user-avatar');
    replyUserAvatars.forEach(avatar => {
      avatar.src = profile.avatar;
    }); // 更新发帖弹窗头像
    const composeUserAvatar = document.getElementById('compose-user-avatar');
    if (composeUserAvatar) {
      composeUserAvatar.src = profile.avatar;
    }
    console.log('✅ UI已更新，当前用户资料:', profile.name);
  }
  // 更新认证徽章显示
  function updateVerificationBadge() {
    const verifiedBadge = document.getElementById('x-profile-verified-badge');
    if (!verifiedBadge) return;
    const verificationType = userProfileData.verificationType || 'none'; // 如果是无认证，隐藏徽章
    if (verificationType === 'none') {
      verifiedBadge.style.display = 'none';
      return;
    }
    // 显示徽章
    verifiedBadge.style.display = 'inline-block'; // 根据认证类型设置不同的图标和颜色
    let badgeColor = '#1d9bf0'; // 默认蓝色
    let badgePath = ''; // SVG路径
    switch (verificationType) {
      case 'verified': // 蓝色勾 - 已认证（保持原样）
        badgeColor = '#1d9bf0';
        badgePath =
          'M22.25 12c0-1.43-.88-2.67-2.19-3.34.46-1.39.2-2.9-.81-3.91s-2.52-1.27-3.91-.81c-.66-1.31-1.91-2.19-3.34-2.19s-2.67.88-3.33 2.19c-1.4-.46-2.91-.2-3.92.81s-1.26 2.52-.8 3.91c-1.31.67-2.2 1.91-2.2 3.34s.89 2.67 2.2 3.34c-.46 1.39-.21 2.9.8 3.91s2.52 1.27 3.91.81c.67 1.31 1.91 2.19 3.34 2.19s2.68-.88 3.34-2.19c1.39.46 2.9.2 3.91-.81s1.27-2.52.81-3.91c1.31-.67 2.19-1.91 2.19-3.34zm-11.71 4.2L6.8 12.46l1.41-1.42 2.26 2.26 4.8-5.23 1.47 1.36-6.2 6.77z';
        break;
      case 'couple': // 心形 - 情侣认证（自适应主题颜色：日间黑色，夜间白色）
        badgeColor =
          getComputedStyle(document.getElementById('x-social-screen')).getPropertyValue('--x-text-primary').trim() ||
          '#fff';
        badgePath =
          'M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z';
        break;
      case 'married': // 圆环 - 已婚认证（自适应主题颜色：日间黑色，夜间白色）
        badgeColor =
          getComputedStyle(document.getElementById('x-social-screen')).getPropertyValue('--x-text-primary').trim() ||
          '#fff';
        badgePath =
          'M12 4c4.42 0 8 3.58 8 8s-3.58 8-8 8-8-3.58-8-8 3.58-8 8-8zm0 2c-3.31 0-6 2.69-6 6s2.69 6 6 6 6-2.69 6-6-2.69-6-6-6z';
        break;
      case 'vip': // 菱形 - VIP认证（自适应主题颜色：日间黑色，夜间白色）
        badgeColor =
          getComputedStyle(document.getElementById('x-social-screen')).getPropertyValue('--x-text-primary').trim() ||
          '#fff';
        badgePath = 'M12 3l6 6-6 6-6-6 6-6zm0 2.83L8.83 9 12 12.17 15.17 9 12 5.83z';
        break;
      default: // 默认蓝色勾
        badgeColor = '#1d9bf0';
        badgePath =
          'M22.25 12c0-1.43-.88-2.67-2.19-3.34.46-1.39.2-2.9-.81-3.91s-2.52-1.27-3.91-.81c-.66-1.31-1.91-2.19-3.34-2.19s-2.67.88-3.33 2.19c-1.4-.46-2.91-.2-3.92.81s-1.26 2.52-.8 3.91c-1.31.67-2.2 1.91-2.2 3.34s.89 2.67 2.2 3.34c-.46 1.39-.21 2.9.8 3.91s2.52 1.27 3.91.81c.67 1.31 1.91 2.19 3.34 2.19s2.68-.88 3.34-2.19c1.39.46 2.9.2 3.91-.81s1.27-2.52.81-3.91c1.31-.67 2.19-1.91 2.19-3.34zm-11.71 4.2L6.8 12.46l1.41-1.42 2.26 2.26 4.8-5.23 1.47 1.36-6.2 6.77z';
        break;
    }
    // 更新徽章颜色和图标
    verifiedBadge.style.fill = badgeColor; // 更新SVG路径
    const pathElement = verifiedBadge.querySelector('path');
    if (pathElement) {
      pathElement.setAttribute('d', badgePath);
    }
    // 添加情侣认证的特殊提示
    if (verificationType === 'couple' && userProfileData.coupleCharacterName) {
      verifiedBadge.setAttribute('title', `情侣认证 - 与${userProfileData.coupleCharacterName}是情侣关系`);
    } else {
      // 设置其他认证类型的提示
      const titles = {
        verified: '已认证账户',
        married: '已婚认证',
        vip: 'VIP认证',
        couple: '情侣认证',
      };
      verifiedBadge.setAttribute('title', titles[verificationType] || '已认证账户');
    }
  }
  // 为角色设置情侣认证
  async function setCoupleVerificationForCharacter(characterId, userNameAsCouple) {
    try {
      const db = getXDB(); // 获取角色的X资料
      let xProfile = await db.xCharacterProfiles.get(characterId);
      if (xProfile) {
        // 为角色设置情侣认证
        xProfile.xVerified = true;
        xProfile.verificationType = 'couple';
        xProfile.couplePartnerName = userNameAsCouple; // 保存更新
        await db.xCharacterProfiles.put(xProfile);
        console.log(`已为角色 ${xProfile.xName} 设置情侣认证，情侣对象: ${userNameAsCouple}`);
      }
    } catch (error) {
      console.error('为角色设置情侣认证失败:', error);
    }
  }
  // 同步用户头像到所有位置
  function syncUserAvatar(newAvatarUrl) {
    userProfileData.avatar = newAvatarUrl; // 更新所有头像位置
    const avatarSelectors = [
      '#top-bar-avatar',
      '#x-profile-main-avatar',
      '.comment-input-area img',
      '#comment-user-avatar',
      '#detail-comment-user-avatar',
      '#compose-user-avatar',
      '#live-page-user-avatar', // 添加直播页面头像
    ];
    avatarSelectors.forEach(selector => {
      const element = document.querySelector(selector);
      if (element) {
        element.src = newAvatarUrl;
      }
    }); // 更新所有回复输入框头像
    document.querySelectorAll('.reply-user-avatar').forEach(avatar => {
      avatar.src = newAvatarUrl;
    }); // 更新用户发布的评论中的头像
    document.querySelectorAll('.comment-item img[alt="我"], .comment-item img[alt="Your avatar"]').forEach(img => {
      img.src = newAvatarUrl;
    });
  }
  // 渲染用户的推文到主页
  function renderUserTweets() {
    const container = document.getElementById('x-profile-tweets-container');
    if (!container) return; // 获取用户发布的推文（这里简化为空，实际应该从数据中筛选）
    const userTweets = [];
    if (userTweets.length === 0) {
      container.innerHTML = `
 <div style="padding: 60px 32px; text-align: center;">
 <div style="color: #71767b; font-size: 31px; font-weight: 800; margin-bottom: 8px;">还没有发帖</div>
 <div style="color: #71767b; font-size: 15px;">当你发布推文时，它们会显示在这里。</div>
 </div>
 `;
    } else {
      container.innerHTML = '';
      userTweets.forEach(tweet => {
        const tweetElement = createTweetElement(tweet);
        container.appendChild(tweetElement);
      });
    }
    // 更新帖子数量
    const headerCount = document.getElementById('x-profile-header-count');
    if (headerCount) {
      headerCount.textContent = `${userTweets.length} 帖子`;
    }
  }
  // ============================================
  // 粉丝数动态浮动系统
  // ============================================
  let followersFluctuationTimer = null; // 启动粉丝数浮动系统
  function startFollowersFluctuationSystem() {
    if (followersFluctuationTimer) {
      clearInterval(followersFluctuationTimer);
    }
    console.log('📊 [粉丝数浮动] 系统已启动'); // 立即执行一次
    setTimeout(() => {
      triggerFollowersFluctuation();
    }, 5000); // 5秒后首次触发
    // 设置随机间隔触发（10-30分钟）
    const scheduleNext = () => {
      const randomInterval = (10 + Math.random() * 20) * 60 * 1000; // 10-30分钟
      console.log(`📊 [粉丝数浮动] 下次触发时间: ${(randomInterval / 60000).toFixed(1)}分钟后`);
      followersFluctuationTimer = setTimeout(() => {
        triggerFollowersFluctuation();
        scheduleNext(); // 递归调度下一次
      }, randomInterval);
    };
    scheduleNext();
  }
  // 停止粉丝数浮动系统
  function stopFollowersFluctuationSystem() {
    if (followersFluctuationTimer) {
      clearTimeout(followersFluctuationTimer);
      followersFluctuationTimer = null;
      console.log('📊 [粉丝数浮动] 系统已停止');
    }
  }
  // 触发粉丝数浮动
  async function triggerFollowersFluctuation() {
    try {
      console.log('📊 [粉丝数浮动] 开始检查所有账户...'); // 1. 更新用户主账户粉丝数
      await updateUserFollowersCount(); // 2. 更新所有已绑定角色的粉丝数
      await updateAllCharactersFollowersCount();
      console.log('✅ [粉丝数浮动] 所有账户粉丝数已更新');
    } catch (error) {
      console.error('❌ [粉丝数浮动] 触发失败:', error);
    }
  }
  // 更新用户主账户粉丝数
  async function updateUserFollowersCount() {
    try {
      const xDb = getXDB(); // 获取用户最近3条推文
      const userTweetsId = `userTweets_${currentAccountId || 'main'}`;
      const userTweetsData = await xDb.xUserTweets.get(userTweetsId);
      const recentTweets = userTweetsData?.tweets?.slice(0, 3) || []; // 解析当前粉丝数
      const originalFollowersStr = window.userProfileData.followers || '0';
      const currentFollowersNum = parseFollowersCount(originalFollowersStr); // 计算浮动
      const fluctuation = calculateFollowersFluctuation({
        publicIdentity: window.userProfileData.publicIdentity || '',
        bio: window.userProfileData.bio || '',
        recentTweets: recentTweets,
        currentFollowers: currentFollowersNum,
      });
      if (fluctuation === 0) {
        console.log('📊 [用户粉丝数] 本次无变化');
        return;
      }
      // 计算新粉丝数并格式化
      const newFollowersNum = Math.max(0, currentFollowersNum + fluctuation);
      const newFollowersStr = formatFollowersCount(newFollowersNum, originalFollowersStr);
      window.userProfileData.followers = newFollowersStr;
      window.userProfileData.followersCount = newFollowersStr; // 同步更新
      window.userProfileData.lastUpdated = new Date().toISOString(); // 保存到数据库
      await xDb.xUserProfile.put({
        id: currentAccountId || 'main',
        ...window.userProfileData,
      }); // 更新UI
      const followersElement = document.getElementById('x-profile-followers-count');
      if (followersElement) {
        followersElement.textContent = newFollowersStr;
      }
      console.log(
        `📊 [用户粉丝数] ${fluctuation > 0 ? '+' : ''}${fluctuation} (${originalFollowersStr} → ${newFollowersStr})`,
      ); // 显示通知（仅大幅变化时）
      if (Math.abs(fluctuation) >= 50) {
        const isEnglish = currentLanguage === 'en';
        showPhoneNotification({
          title: 'X',
          message: isEnglish
            ? `Followers ${fluctuation > 0 ? 'increased' : 'decreased'} by ${Math.abs(fluctuation)}`
            : `粉丝数${fluctuation > 0 ? '增加' : '减少'}了 ${Math.abs(fluctuation)}`,
          leftIcon: 'x',
          duration: 3000,
        });
      }
    } catch (error) {
      console.error('❌ [用户粉丝数] 更新失败:', error);
    }
  }
  // 更新所有已绑定角色的粉丝数
  async function updateAllCharactersFollowersCount() {
    try {
      const xDb = getXDB(); // 获取所有角色X资料
      const allCharacterProfiles = await xDb.xCharacterProfiles.toArray();
      if (allCharacterProfiles.length === 0) {
        console.log('📊 [角色粉丝数] 无已绑定角色');
        return;
      }
      console.log(`📊 [角色粉丝数] 检查 ${allCharacterProfiles.length} 个角色`);
      for (const xProfile of allCharacterProfiles) {
        // 跳过没有设置粉丝数的角色
        if (!xProfile.followersCount || xProfile.followersCount === '') {
          continue;
        }
        // 获取角色的账户主页数据（如果有）
        const cleanHandle = xProfile.xHandle.replace('@', '');
        const accountProfile = await xDb.xAccountProfiles.get(cleanHandle);
        const recentTweets = accountProfile?.tweets?.slice(0, 3) || []; // 解析当前粉丝数
        const originalFollowersStr = xProfile.followersCount;
        const currentFollowersNum = parseFollowersCount(originalFollowersStr); // 计算浮动
        const fluctuation = calculateFollowersFluctuation({
          publicIdentity: xProfile.publicIdentity || '',
          bio: xProfile.xBio || '',
          recentTweets: recentTweets,
          currentFollowers: currentFollowersNum,
        });
        if (fluctuation === 0) {
          continue;
        }
        // 计算新粉丝数并格式化
        const newFollowersNum = Math.max(0, currentFollowersNum + fluctuation);
        const newFollowersStr = formatFollowersCount(newFollowersNum, originalFollowersStr);
        xProfile.followersCount = newFollowersStr; // 保存到数据库
        await xDb.xCharacterProfiles.put(xProfile);
        console.log(
          `📊 [角色粉丝数] ${xProfile.xName}: ${
            fluctuation > 0 ? '+' : ''
          }${fluctuation} (${originalFollowersStr} → ${newFollowersStr})`,
        ); // 同步更新账户主页数据（如果存在）
        if (accountProfile) {
          accountProfile.accountInfo.followersCount = newFollowersStr;
          await xDb.xAccountProfiles.put(accountProfile);
          console.log(` └─ 已同步到账户主页 ${cleanHandle}`);
        }
      }
    } catch (error) {
      console.error('❌ [角色粉丝数] 更新失败:', error);
    }
  }
  // 解析粉丝数字符串为数字
  function parseFollowersCount(followersStr) {
    if (!followersStr || followersStr === '') return 0;
    const str = followersStr.toString().toLowerCase().trim(); // 处理 "k" 格式（千）
    if (str.includes('k')) {
      const num = parseFloat(str.replace('k', ''));
      return Math.round(num * 1000);
    }
    // 处理 "w" 格式（万）
    if (str.includes('w')) {
      const num = parseFloat(str.replace('w', ''));
      return Math.round(num * 10000);
    }
    // 处理 "m" 格式（百万）
    if (str.includes('m')) {
      const num = parseFloat(str.replace('m', ''));
      return Math.round(num * 1000000);
    }
    // 纯数字
    const num = parseInt(str);
    return isNaN(num) ? 0 : num;
  }
  // 格式化粉丝数为字符串（智能选择格式）
  function formatFollowersCount(count, originalFormat = '') {
    if (count === 0) return '0'; // 检测原始格式偏好
    const originalLower = originalFormat.toString().toLowerCase();
    const usesK = originalLower.includes('k');
    const usesW = originalLower.includes('w');
    const usesM = originalLower.includes('m'); // 如果原始是 "w" 格式，优先使用 "w"
    if (usesW) {
      if (count >= 10000) {
        const wValue = count / 10000; // 保留一位小数，但去掉不必要的 .0
        return wValue % 1 === 0 ? `${Math.round(wValue)}w` : `${wValue.toFixed(1)}w`;
      }
      // 小于1w的情况，显示纯数字
      return count.toString();
    }
    // 如果原始是 "m" 格式，优先使用 "m"
    if (usesM) {
      if (count >= 1000000) {
        const mValue = count / 1000000;
        return mValue % 1 === 0 ? `${Math.round(mValue)}m` : `${mValue.toFixed(1)}m`;
      } else if (count >= 1000) {
        const kValue = count / 1000;
        return kValue % 1 === 0 ? `${Math.round(kValue)}k` : `${kValue.toFixed(1)}k`;
      }
      return count.toString();
    }
    // 如果原始是 "k" 格式或没有特定格式，使用国际通用格式（k、m）
    if (usesK || !usesW) {
      if (count >= 1000000) {
        const mValue = count / 1000000;
        return mValue % 1 === 0 ? `${Math.round(mValue)}m` : `${mValue.toFixed(1)}m`;
      } else if (count >= 1000) {
        const kValue = count / 1000;
        return kValue % 1 === 0 ? `${Math.round(kValue)}k` : `${kValue.toFixed(1)}k`;
      }
    }
    // 小于1000，显示纯数字
    return count.toString();
  }
  // 计算粉丝数浮动
  function calculateFollowersFluctuation({ publicIdentity, bio, recentTweets, currentFollowers }) {
    // 1. 检测身份类型
    const isHighExposure =
      /明星|网红|博主|演员|歌手|艺人|主播|up主|偶像|导演|制片|编剧|作家|influencer|celebrity|singer|actor|artist|streamer|idol/i.test(
        publicIdentity + ' ' + bio,
      ); // 2. 分析最近推文质量
    let tweetQualityScore = 0; // -1到1之间
    if (recentTweets.length > 0) {
      let totalScore = 0;
      recentTweets.forEach(tweet => {
        const stats = tweet.stats || {};
        const likes = stats.likes || 0;
        const retweets = stats.retweets || 0;
        const comments = stats.comments || 0;
        const views = stats.views || 0; // 计算互动率（相对于浏览量）
        const engagementRate = views > 0 ? (likes + retweets * 2 + comments * 3) / views : 0; // 根据互动率评分
        if (engagementRate > 0.1) {
          totalScore += 1; // 高互动
        } else if (engagementRate > 0.05) {
          totalScore += 0.5; // 中等互动
        } else if (engagementRate > 0.02) {
          totalScore += 0; // 低互动，中性
        } else {
          totalScore -= 0.5; // 极低互动
        }
      });
      tweetQualityScore = totalScore / recentTweets.length;
    }
    console.log(` 📊 推文质量评分: ${tweetQualityScore.toFixed(2)} (${recentTweets.length}条推文)`); // 3. 确定浮动方向和幅度
    let baseFluctuation = 0;
    let direction = 1; // 1为增长，-1为下降
    // 根据推文质量决定方向概率
    if (tweetQualityScore > 0.5) {
      // 高质量推文：80%增长
      direction = Math.random() < 0.8 ? 1 : -1;
    } else if (tweetQualityScore > 0) {
      // 中等质量：70%增长
      direction = Math.random() < 0.7 ? 1 : -1;
    } else if (tweetQualityScore > -0.5) {
      // 低质量：50%增长（随机波动）
      direction = Math.random() < 0.5 ? 1 : -1;
    } else {
      // 极低质量：30%增长，70%下降
      direction = Math.random() < 0.3 ? 1 : -1;
    }
    // 4. 根据身份和推文情况确定浮动幅度
    if (isHighExposure) {
      // 高曝光身份：大幅浮动
      if (recentTweets.length > 0) {
        baseFluctuation = 100 + Math.random() * 400; // 100-500
      } else {
        baseFluctuation = 50 + Math.random() * 150; // 50-200（无推文时较小）
      }
    } else if (recentTweets.length > 0) {
      // 有推文的普通用户：中等浮动
      baseFluctuation = 20 + Math.random() * 80; // 20-100
    } else {
      // 无推文的普通用户：小幅浮动
      baseFluctuation = 5 + Math.random() * 25; // 5-30
    }
    // 5. 根据推文质量调整幅度
    const qualityMultiplier = 0.5 + Math.abs(tweetQualityScore) * 0.8; // 0.5-1.3倍
    baseFluctuation *= qualityMultiplier; // 6. 根据当前粉丝基数调整（粉丝越多，浮动越大）
    if (currentFollowers > 10000) {
      baseFluctuation *= 1.5;
    } else if (currentFollowers > 5000) {
      baseFluctuation *= 1.2;
    }
    // 7. 随机决定是否触发浮动（60%概率）
    if (Math.random() > 0.6) {
      console.log(' 📊 本次随机跳过浮动');
      return 0;
    }
    // 8. 计算最终浮动值
    const finalFluctuation = Math.round(baseFluctuation * direction);
    console.log(
      ` 📊 浮动计算: ${isHighExposure ? '高曝光' : '普通'}身份, 方向${direction > 0 ? '↑' : '↓'}, 幅度${Math.abs(
        finalFluctuation,
      )}`,
    );
    return finalFluctuation;
  }
  // ============================================
  // 离开后自动消息触发系统
  // ============================================
  // 触发离开后的自动消息（仅绑定角色）
  window.triggerAutoMessageAfterAway = async function (messageId) {
    try {
      console.log('⏰ [离开后自动消息] 开始触发，messageId:', messageId);
      const xDb = getXDB();
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${messageId}`;
      const savedConversation = await xDb.xAccountProfiles.get(conversationId);
      if (!savedConversation) {
        console.log('⚠️ [离开后自动消息] 未找到对话数据');
        return;
      }
      // 检查是否仍然处于离开状态
      if (!savedConversation.isAway) {
        console.log('⚠️ [离开后自动消息] 对话已不再处于离开状态');
        return;
      }
      // 检查离开时间是否已到
      const now = new Date();
      const awayUntil = new Date(savedConversation.awayUntil);
      if (now < awayUntil) {
        console.log('⚠️ [离开后自动消息] 离开时间尚未结束');
        return;
      }
      // 清除离开状态
      savedConversation.isAway = false;
      delete savedConversation.awayUntil;
      delete savedConversation.awayDuration;
      await xDb.xAccountProfiles.put(savedConversation);
      console.log('✅ [离开后自动消息] 已清除离开状态'); // 检查是否是绑定角色
      const isCharacterMessage = messageId && messageId.startsWith('msg_') && messageId !== 'msg_001';
      if (!isCharacterMessage) {
        console.log('⚠️ [离开后自动消息] 不是绑定角色，跳过');
        return;
      }
      // 🔍 获取角色信息（从xCharacterProfiles或从对话数据中）
      let userName = '未知';
      let userHandle = '@unknown';
      let userAvatar = '';
      try {
        const characterId = messageId.replace('msg_', '');
        const xProfile = await xDb.xCharacterProfiles.get(characterId);
        if (xProfile) {
          userName = xProfile.xName;
          userHandle = xProfile.xHandle;
          userAvatar = xProfile.xAvatar;
          console.log(`✅ [离开后自动消息] 从xCharacterProfiles获取角色信息: ${userName}`);
        } else if (savedConversation.data && savedConversation.data.senderProfile) {
          // 从对话数据中获取
          userName = savedConversation.data.senderProfile.name || '未知';
          userHandle = savedConversation.data.senderProfile.handle || '@unknown';
          userAvatar = savedConversation.data.senderProfile.avatar || '';
          console.log(`✅ [离开后自动消息] 从senderProfile获取角色信息: ${userName}`);
        } else if (savedConversation.data && savedConversation.data.user) {
          // 兼容旧格式
          userName = savedConversation.data.user.name || '未知';
          userHandle = savedConversation.data.user.handle || '@unknown';
          userAvatar = savedConversation.data.user.avatar || '';
          console.log(`✅ [离开后自动消息] 从user获取角色信息: ${userName}`);
        }
      } catch (error) {
        console.error('❌ [离开后自动消息] 获取角色信息失败:', error);
      }
      // 构建消息数据
      const messageData = {
        id: messageId,
        user: {
          name: userName,
          handle: userHandle,
          avatar: userAvatar,
        },
      }; // 调用AI生成离开后的主动消息
      console.log('📤 [离开后自动消息] 开始生成AI主动消息');
      const aiMessages = await generateMessageConversation(messageData, true, {
        isAutoMessage: true,
        timeSinceLastMessage: savedConversation.awayDuration * 60 || 3600, // 使用离开时长作为时间间隔
        isAwayReturn: true, // 标记为离开后返回
      });
      if (aiMessages && aiMessages.length > 0) {
        // 保存AI消息到数据库
        const updatedConversation = await xDb.xAccountProfiles.get(conversationId);
        if (updatedConversation && updatedConversation.data && updatedConversation.data.messages) {
          updatedConversation.data.messages.push(...aiMessages);
          await xDb.xAccountProfiles.put(updatedConversation);
          console.log('✅ [离开后自动消息] AI消息已保存');
        }
        // 标记为未读并显示通知
        const dataId = `messagesList_${currentAccountId || 'main'}`;
        const savedData = await xDb.xAccountProfiles.get(dataId);
        if (savedData && savedData.data) {
          const messagesList = savedData.data;
          const messageIndex = messagesList.findIndex(msg => msg.id === messageId);
          if (messageIndex !== -1) {
            messagesList[messageIndex].unread = true;
            messagesList[messageIndex].unreadCount = (messagesList[messageIndex].unreadCount || 0) + aiMessages.length;
            await xDb.xAccountProfiles.put({
              handle: dataId,
              name: 'messagesList',
              data: messagesList,
              updatedAt: new Date().toISOString(),
            }); // 同步更新全局数据
            sampleMessagesData = messagesList; // 显示手机样式通知
            showMessageNotification(messageData.user.name, messageData.user.avatar, aiMessages.length); // 显示私信提醒点
            showNavNotificationDot('messages');
            console.log('✅ [离开后自动消息] 已标记为未读并显示提醒');
          }
        }
      } else {
        console.log('⚠️ [离开后自动消息] AI未生成消息');
      }
    } catch (error) {
      console.error('❌ [离开后自动消息] 触发失败:', error);
    }
  }; // 多账户管理功能
  // 当前激活的账户ID - 使用全局变量确保所有地方都能访问
  window.currentAccountId = window.currentAccountId || 'main';
  let currentAccountId = window.currentAccountId; // 切换个人主页菜单
  function toggleProfileMenu() {
    const menu = document.getElementById('profile-dropdown-menu');
    const isVisible = menu.style.display !== 'none';
    if (isVisible) {
      menu.style.display = 'none';
    } else {
      menu.style.display = 'block';
    }
  }
  // 点击其他地方关闭菜单
  document.addEventListener('click', function (event) {
    const menuBtn = document.getElementById('profile-menu-btn');
    const menu = document.getElementById('profile-dropdown-menu');
    if (!menuBtn || !menu) return;
    if (!menuBtn.contains(event.target) && !menu.contains(event.target)) {
      menu.style.display = 'none';
    }
  }); // 打开账号管理弹窗
  async function openAccountManager() {
    // 关闭下拉菜单
    document.getElementById('profile-dropdown-menu').style.display = 'none'; // 显示账号管理弹窗
    showAccountManagerModal();
  }
  // 显示账号管理弹窗
  async function showAccountManagerModal() {
    // 获取所有账户
    const accounts = await getAllAccounts(); // 创建弹窗
    const modal = document.createElement('div');
    modal.id = 'account-manager-modal';
    modal.style.cssText = `
 position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.8); display: flex; align-items: center; justify-content: center; z-index: 10000; backdrop-filter: blur(4px); `;
    modal.innerHTML = `
 <div style="background-color: #1a1a1a; border-radius: 16px; width: 90%; max-width: 480px; max-height: 70vh; overflow-y: auto; border: 1px solid #333; position: relative; ">

 <div style="padding: 20px; border-bottom: 1px solid #333; display: flex; align-items: center; justify-content: space-between; position: sticky; top: 0; background-color: #1a1a1a; z-index: 10; ">
 <div>
 <h3 style="margin: 0; color: #fff; font-size: 20px; font-weight: 700;">账号管理</h3>
 <p style="margin: 4px 0 0; color: #71767b; font-size: 14px;">管理你的多个X账户</p>
 </div>
 <button onclick="closeAccountManager()" style="background: transparent; border: none; color: #71767b; cursor: pointer; padding: 8px; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(255,255,255,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: currentColor;">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </button>
 </div>

 <div style="padding: 20px;">
 <div id="accounts-list" style="margin-bottom: 20px;">
 ${await renderAccountsList(accounts)}
 </div>

 <button onclick="createNewAccount()" style="width: 100%; background-color: var(--x-accent); color: #fff; border: none; border-radius: 12px; padding: 16px; font-size: 16px; font-weight: 700; cursor: pointer; transition: all 0.2s; display: flex; align-items: center; justify-content: center; gap: 8px; " onmouseover="this.style.backgroundColor='#1a8cd8'"
 onmouseout="this.style.backgroundColor='var(--x-accent)'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: currentColor;">
 <g><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"></path></g>
 </svg>
 新建账户
 </button>
 </div>
 </div>
 `;
    document.body.appendChild(modal);
    document.body.style.overflow = 'hidden'; // 点击背景关闭弹窗
    modal.addEventListener('click', e => {
      if (e.target === modal) {
        closeAccountManager();
      }
    });
  }
  // 获取所有账户
  async function getAllAccounts() {
    try {
      const db = getXDB();
      const accounts = await db.xAccountList.orderBy('createdAt').toArray();
      const activeAccount = await db.xActiveAccount.get('current'); // 如果没有账户记录，创建默认账户
      if (accounts.length === 0) {
        const defaultAccount = {
          accountId: 'main',
          name: userProfileData.name || '我',
          avatar: userProfileData.avatar || 'https://i.postimg.cc/pXxk1JXk/IMG-6442.jpg',
          createdAt: new Date().toISOString(),
          isActive: true,
        };
        await db.xAccountList.put(defaultAccount);
        await db.xActiveAccount.put({ id: 'current', accountId: 'main' });
        return [defaultAccount];
      }
      // 标记当前激活的账户
      accounts.forEach(account => {
        account.isActive = activeAccount && activeAccount.accountId === account.accountId;
      });
      return accounts;
    } catch (error) {
      console.error('获取账户列表失败:', error);
      return [];
    }
  }
  // 渲染账户列表
  async function renderAccountsList(accounts) {
    if (accounts.length === 0) {
      return `
 <div style="text-align: center; color: #71767b; padding: 40px 20px;">
 <div style="font-size: 16px; margin-bottom: 8px;">暂无账户</div>
 <div style="font-size: 14px;">创建你的第一个账户</div>
 </div>
 `;
    }
    return accounts
      .map(
        account => `
 <div style="border: 2px solid ${
   account.isActive ? 'var(--x-accent)' : '#333'
 }; border-radius: 12px; padding: 16px; margin-bottom: 12px; cursor: pointer; transition: all 0.2s; background-color: ${
          account.isActive ? 'color-mix(in srgb, var(--x-accent) , 0.05)' : 'transparent'
        }; " onclick="switchAccount('${account.accountId}')"
 onmouseover="if (!${account.isActive}) this.style.borderColor='#536471'"
 onmouseout="if (!${account.isActive}) this.style.borderColor='#333'">
 <div style="display: flex; align-items: center; gap: 12px;">
 <img src="${account.avatar}" style="width: 48px; height: 48px; border-radius: 50%;" alt="${account.name}">
 <div style="flex: 1;">
 <div style="color: #fff; font-size: 16px; font-weight: 700; margin-bottom: 4px;">
 ${account.name}
 ${account.isActive ? '<span style="color: var(--x-accent); font-size: 12px; margin-left: 8px;">● 当前账户</span>' : ''}
 </div>
 <div style="color: #71767b; font-size: 14px;">
 创建于 ${new Date(account.createdAt).toLocaleDateString('zh-CN')}
 </div>
 </div>
 ${
   !account.isActive && account.accountId !== 'main'
     ? `
 <button onclick="event.stopPropagation(); deleteAccount('${account.accountId}')" style="background: transparent; border: 1px solid #ef4444; color: #ef4444; border-radius: 8px; padding: 6px 8px; font-size: 12px; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='rgba(239, 68, 68, 0.1)'"
 onmouseout="this.style.backgroundColor='transparent'">
 删除
 </button>
 `
     : ''
 }
 </div>
 </div>
 `,
      )
      .join('');
  }
  // 关闭账号管理弹窗
  function closeAccountManager() {
    const modal = document.getElementById('account-manager-modal');
    if (modal) {
      modal.remove();
    }
    document.body.style.overflow = 'auto';
  }
  // 切换账户
  async function switchAccount(accountId) {
    if (accountId === currentAccountId) {
      closeAccountManager();
      return;
    }
    try {
      // 先停止当前账户的聊天记忆检测服务
      if (chatHistoryDetectionTimer) {
        clearInterval(chatHistoryDetectionTimer);
        chatHistoryDetectionTimer = null;
        chatHistoryDetectionEnabled = false;
      }
      const db = getXDB(); // 更新激活账户记录
      await db.xActiveAccount.put({ id: 'current', accountId: accountId }); // 更新当前账户ID（同步到全局和局部）
      currentAccountId = accountId;
      window.currentAccountId = accountId; // 加载新账户的数据
      await loadUserProfileFromDB(accountId); // 重新加载 X 设置（按账号加载）
      await initializeXSettings(); // 更新UI显示
      loadUserProfileToUI(); // 同步头像到所有位置
      syncUserAvatar(userProfileData.avatar); // 重新加载个人主页推文（按账户隔离）
      if (document.getElementById('x-profile-page').style.display !== 'none') {
        loadUserProfileTweets();
      }
      // 重新加载提问箱数据（按账户隔离）- 无论是否在提问箱页面都要加载
      await loadAskboxDataFromDB(); // 如果当前正在提问箱页面，立即更新UI
      if (document.getElementById('x-askbox-page').style.display !== 'none') {
        await loadAskboxData();
      }
      // 更新发帖弹窗的用户信息
      const composeAvatar = document.getElementById('compose-user-avatar');
      if (composeAvatar) {
        composeAvatar.src = userProfileData.avatar;
      }
      // 重新加载主题色偏好（按账户隔离）
      await loadAccentColorPreference(); // 🔧 重新加载钱包数据（按账户隔离）
      await loadWalletData(); // 🔧 重新加载私信和通知数据（按账户隔离）
      // 如果当前在私信页面，重新加载私信列表
      const messagesPage = document.getElementById('x-messages-page');
      if (messagesPage && messagesPage.style.display === 'flex') {
        await loadMessagesList();
      }
      // 如果当前在通知页面，重新加载通知
      const notificationsPage = document.getElementById('x-notifications-page');
      if (notificationsPage && notificationsPage.style.display === 'flex') {
        await loadNotifications();
      }
      // 关闭弹窗
      closeAccountManager();
      showXToast(`已切换到账户：${userProfileData.name}`, 'success');
      console.log('✅ 已切换账户，绑定角色数:', xSettingsData.boundCharacters?.length || 0);
    } catch (error) {
      console.error('切换账户失败:', error);
      showXToast('切换账户失败', 'error');
    }
  }
  // 创建新账户
  async function createNewAccount() {
    try {
      const db = getXDB(); // 生成新的账户ID
      const newAccountId = 'account_' + Date.now(); // 使用统一的默认用户资料配置
      const defaultProfile = getDefaultUserProfile(newAccountId); // 保存新账户的用户资料
      await db.xUserProfile.put(defaultProfile); // 添加到账户列表
      const newAccount = {
        accountId: newAccountId,
        name: '新用户',
        avatar: 'https://i.postimg.cc/pXxk1JXk/IMG-6442.jpg',
        createdAt: new Date().toISOString(),
      };
      await db.xAccountList.put(newAccount); // 为新账户创建空的提问箱数据
      const askboxId = `askbox_${newAccountId}`;
      await db.xAskbox.put({
        id: askboxId,
        avatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
        nickname: '= =',
        prompt: '请向我匿名提问!waiting...',
        background: 'https://i.postimg.cc/7LqVqxt4/mmexport1759588659314.jpg',
        answeredQuestions: [], // 新账户必须从空列表开始
      });
      console.log('✅ 已为新账户创建空提问箱:', newAccountId); // 自动切换到新账户
      await switchAccount(newAccountId);
    } catch (error) {
      console.error('创建新账户失败:', error);
      showXToast('创建新账户失败', 'error');
    }
  }
  // 删除账户
  async function deleteAccount(accountId) {
    if (accountId === 'main') {
      showXToast('无法删除默认账户', 'error');
      return;
    }
    if (!confirm('确定要删除这个账户吗？此操作无法撤销。')) {
      return;
    }
    try {
      const db = getXDB(); // 删除账户的用户资料
      await db.xUserProfile.delete(accountId); // 从账户列表中删除
      await db.xAccountList.delete(accountId); // 删除账户的提问箱数据
      const askboxId = `askbox_${accountId}`;
      await db.xAskbox.delete(askboxId); // 🔧 删除账户的私信和通知数据
      // 删除私信列表
      const messagesListId = `messagesList_${accountId}`;
      await db.xAccountProfiles.delete(messagesListId); // 删除陌生人私信
      const strangerMessagesId = `strangerMessages_${accountId}`;
      await db.xAccountProfiles.delete(strangerMessagesId); // 删除Mentions通知
      const mentionsId = `mentions_${accountId}`;
      await db.xAccountProfiles.delete(mentionsId); // 删除所有该账户的私信对话数据
      const allConversations = await db.xAccountProfiles.where('name').equals('messageConversation').toArray();
      for (const conv of allConversations) {
        if (conv.accountId === accountId || conv.handle.startsWith(`messageConversation_${accountId}_`)) {
          await db.xAccountProfiles.delete(conv.handle);
        }
      }
      // 删除账户的X设置和用户推文
      await db.xSettings.delete(`xSettings_${accountId}`);
      await db.xUserTweets.delete(`userTweets_${accountId}`); // 删除账户的书签数据
      const bookmarks = await db.xBookmarks.where('accountId').equals(accountId).toArray();
      for (const bookmark of bookmarks) {
        await db.xBookmarks.delete(bookmark.id);
      }
      // 🔧 删除账户的钱包数据
      const walletId = `wallet_${accountId}`;
      await db.xAccountProfiles.delete(walletId);
      console.log(`✅ 已清理账户 ${accountId} 的所有相关数据`);
      showXToast('账户已删除', 'success'); // 重新显示账户管理弹窗
      closeAccountManager();
      setTimeout(() => {
        showAccountManagerModal();
      }, 300);
    } catch (error) {
      console.error('删除账户失败:', error);
      showXToast('删除账户失败', 'error');
    }
  }
  // 清空当前账户的提问箱数据（调试用）
  window.clearCurrentAskboxData = async function () {
    try {
      const xDb = getXDB();
      const accountId = currentAccountId || 'main';
      const askboxId = `askbox_${accountId}`;
      await xDb.xAskbox.put({
        id: askboxId,
        avatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
        nickname: '= =',
        prompt: '请向我匿名提问!waiting...',
        background: 'https://i.postimg.cc/7LqVqxt4/mmexport1759588659314.jpg',
        answeredQuestions: [],
      }); // 重新加载数据
      await loadAskboxDataFromDB(); // 如果在提问箱页面，刷新UI
      if (document.getElementById('x-askbox-page').style.display !== 'none') {
        renderAnsweredQuestions();
      }
      console.log('✅ 已清空账户提问箱数据:', accountId);
      showXToast('提问箱数据已清空', 'success');
    } catch (error) {
      console.error('❌ 清空提问箱数据失败:', error);
      showXToast('清空失败: ' + error.message, 'error');
    }
  }; // 初始化用户主页
  async function initializeUserProfile() {
    // 首先加载当前激活的账户
    await loadActiveAccount();
    await loadUserProfileFromDB();
    loadUserProfileToUI(); // 同步头像到所有位置
    syncUserAvatar(userProfileData.avatar); // 加载当前账户的推文
    loadUserProfileTweets(); // 🔧 加载钱包数据
    await loadWalletData();
  }
  // 加载当前激活的账户
  async function loadActiveAccount() {
    try {
      const db = getXDB(); // 初始化多账户系统
      await initializeMultiAccountSystem();
      const activeAccount = await db.xActiveAccount.get('current');
      if (activeAccount) {
        currentAccountId = activeAccount.accountId;
        window.currentAccountId = activeAccount.accountId; // 同步到全局
      } else {
        // 如果没有激活账户记录，使用默认账户
        currentAccountId = 'main';
        window.currentAccountId = 'main'; // 同步到全局
        await db.xActiveAccount.put({ id: 'current', accountId: 'main' });
      }
      console.log('✅ 已加载激活账户:', currentAccountId);
    } catch (error) {
      console.error('加载激活账户失败:', error);
      currentAccountId = 'main';
      window.currentAccountId = 'main'; // 同步到全局
    }
  }
  // 初始化多账户系统
  async function initializeMultiAccountSystem() {
    try {
      const db = getXDB(); // 检查是否存在默认账户记录
      const defaultAccount = await db.xAccountList.get('main');
      if (!defaultAccount) {
        // 从现有的用户资料创建默认账户记录
        const existingProfile = await db.xUserProfile.get('main');
        const defaultAccountData = {
          accountId: 'main',
          name: existingProfile?.name || '我',
          avatar: existingProfile?.avatar || 'https://i.postimg.cc/pXxk1JXk/IMG-6442.jpg',
          createdAt: existingProfile?.lastUpdated || new Date().toISOString(),
        };
        await db.xAccountList.put(defaultAccountData);
        console.log('已创建默认账户记录');
      }
      // 确保有激活账户记录
      const activeAccount = await db.xActiveAccount.get('current');
      if (!activeAccount) {
        await db.xActiveAccount.put({ id: 'current', accountId: 'main' });
        console.log('已设置默认激活账户');
      }
    } catch (error) {
      console.error('初始化多账户系统失败:', error);
    }
  }
  // 从数据库加载用户资料（多账户系统专用）
  async function loadUserProfileFromDB(accountId = null) {
    try {
      const db = getXDB();
      const targetAccountId = accountId || currentAccountId || 'main';
      const savedProfile = await db.xUserProfile.get(targetAccountId);
      if (savedProfile) {
        // 更新现有对象的属性（保持引用一致）
        Object.assign(window.userProfileData, savedProfile);
      } else {
        // 如果没有找到用户资料，使用默认值（新账户的情况）
        console.log('⚠️ 未找到账户资料，使用默认值:', targetAccountId);
        const defaultProfile = getDefaultUserProfile(targetAccountId);
        Object.assign(window.userProfileData, defaultProfile);
      }
      // 确保所有必要字段存在（使用统一的字段验证）
      ensureProfileFields(window.userProfileData);
      console.log('✅ 已加载用户资料数据:', targetAccountId);
      if (window.userProfileData.knownIdentityCharacters && window.userProfileData.knownIdentityCharacters.length > 0) {
        console.log('📌 已知身份角色数量:', window.userProfileData.knownIdentityCharacters.length);
      }
    } catch (error) {
      console.error('❌ 加载用户资料失败，使用默认数据:', error);
      const defaultProfile = getDefaultUserProfile('main');
      Object.assign(window.userProfileData, defaultProfile);
    }
  }
  // 保存用户资料到数据库
  async function saveUserProfileToDB() {
    try {
      const db = getXDB();
      const targetAccountId = currentAccountId || 'main';
      await db.xUserProfile.put({
        id: targetAccountId,
        ...window.userProfileData, // 使用window.userProfileData确保使用最新数据
        lastUpdated: new Date().toISOString(),
      }); // 同时更新账户列表中的基本信息
      const existingAccount = await db.xAccountList.get(targetAccountId);
      if (existingAccount) {
        existingAccount.name = window.userProfileData.name;
        existingAccount.avatar = window.userProfileData.avatar;
        await db.xAccountList.put(existingAccount);
      }
      console.log('用户资料已保存到数据库，账户ID:', targetAccountId);
      if (window.userProfileData.knownIdentityCharacters && window.userProfileData.knownIdentityCharacters.length > 0) {
        console.log('已知身份角色:', window.userProfileData.knownIdentityCharacters.length + '个');
      }
    } catch (error) {
      console.error('保存用户资料失败:', error);
      throw error;
    }
  }
  // ============================================
  // 账户钱包功能
  // ============================================
  // 钱包数据
  let walletData = {
    accountId: 'main',
    isActivated: false,
    balance: 0,
    currency: 'USD',
    transactions: [],
    activatedAt: null,
    initialAmount: 0,
    creditScore: 100, // 信用值，初始100，影响商业转账的接收和发起
  }; // 打开账户钱包
  async function openAccountWallet() {
    // 关闭下拉菜单
    document.getElementById('profile-dropdown-menu').style.display = 'none'; // 加载钱包数据
    await loadWalletData(); // 启动商业转账状态检查
    startBusinessTransferCheck(); // 显示钱包弹窗
    showWalletModal();
  }
  // 显示钱包弹窗
  function showWalletModal() {
    const xSocialScreen = document.getElementById('x-social-screen');
    const isLightMode = xSocialScreen && xSocialScreen.classList.contains('x-theme-light'); // 创建弹窗遮罩
    const modal = document.createElement('div');
    modal.id = 'wallet-modal';
    modal.style.cssText = `
 position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: ${
   isLightMode ? 'rgba(255, 255, 255, 0.85)' : 'rgba(0, 0, 0, 0.85)'
 }; display: flex; align-items: center; justify-content: center; z-index: 25; backdrop-filter: blur(12px); -webkit-backdrop-filter: blur(12px);
`; // 创建钱包界面
    modal.innerHTML = `
 <div style="background-color: ${
   isLightMode ? 'rgba(255, 255, 255, 0.95)' : 'rgba(0, 0, 0, 0.95)'
 }; backdrop-filter: blur(20px); -webkit-backdrop-filter: blur(20px); border-radius: 24px; width: 90%; max-width: 360px; position: relative; overflow: hidden; box-shadow: ${
      isLightMode
        ? '0 20px 60px rgba(0, 0, 0, 0.15), 0 8px 32px rgba(0, 0, 0, 0.1)'
        : '0 20px 60px rgba(0, 0, 0, 0.8), 0 8px 32px rgba(255, 255, 255, 0.05)'
    }; border: 2px solid ${
      isLightMode ? 'rgba(0, 0, 0, 0.1)' : 'rgba(255, 255, 255, 0.1)'
    }; " onclick="event.stopPropagation()">

 <div style="background: linear-gradient(135deg, ${
   isLightMode ? 'rgba(248, 250, 252, 0.8)' : 'rgba(22, 24, 28, 0.8)'
 } 0%, ${
      isLightMode ? 'rgba(255, 255, 255, 0.6)' : 'rgba(0, 0, 0, 0.6)'
    } 100%); padding: 24px; text-align: center; border-bottom: 2px solid ${
      isLightMode ? 'rgba(0, 0, 0, 0.08)' : 'rgba(255, 255, 255, 0.08)'
    }; position: relative; ">

 <button onclick="closeWalletModal()" style="position: absolute; top: 16px; right: 16px; background: transparent; border: none; color: ${
   isLightMode ? '#536471' : '#71767b'
 }; cursor: pointer; padding: 8px; border-radius: 50%; transition: all 0.2s; " onmouseover="this.style.backgroundColor='${
      isLightMode ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)'
    }';"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: currentColor;">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </button>

 <div style="margin-bottom: 16px;">
 <img src="${
   window.userProfileData?.avatar || userProfileData.avatar
 }" style="width: 64px; height: 64px; border-radius: 50%; border: 3px solid var(--x-accent); object-fit: cover; " alt="${
      window.userProfileData?.name || userProfileData.name
    }">
 </div>

 <div style="color: ${isLightMode ? '#0f1419' : '#ffffff'}; font-size: 18px; font-weight: 700; margin-bottom: 4px; ">${
      window.userProfileData?.name || userProfileData.name
    }</div>

 <div style="color: ${isLightMode ? '#536471' : '#71767b'}; font-size: 14px; margin-bottom: 16px; ">Digital Wallet</div>

 <div id="wallet-status" style="display: inline-block; padding: 8px 16px; border-radius: 20px; font-size: 12px; font-weight: 700; letter-spacing: 1px; ${
   walletData.isActivated
     ? 'background-color: rgba(34, 197, 94, 0.15); color: #22c55e; border: 2px solid rgba(34, 197, 94, 0.4);'
     : `background-color: ${isLightMode ? 'rgba(156, 163, 175, 0.15)' : 'rgba(156, 163, 175, 0.1)'}; color: ${
         isLightMode ? '#6b7280' : '#9ca3af'
       }; border: 2px solid ${isLightMode ? 'rgba(156, 163, 175, 0.3)' : 'rgba(156, 163, 175, 0.2)'};`
 }
 ">${walletData.isActivated ? 'ACTIVATED' : 'INACTIVE'}</div>
 </div>

 <div style="padding: 24px; background-color: ${isLightMode ? 'rgba(255, 255, 255, 0.3)' : 'rgba(0, 0, 0, 0.3)'}; ">
 ${walletData.isActivated ? renderActivatedWallet(isLightMode) : renderInactiveWallet(isLightMode)}
 </div>

 <div style="display: flex; justify-content: center; align-items: center; padding: 16px 24px; gap: 24px; border-top: 2px solid ${
   isLightMode ? 'rgba(0, 0, 0, 0.08)' : 'rgba(255, 255, 255, 0.08)'
 }; background-color: ${isLightMode ? 'rgba(248, 250, 252, 0.5)' : 'rgba(22, 24, 28, 0.5)'}; ">
 <div onclick="openBusinessTransferManager()" style="padding: 12px; border-radius: 50%; cursor: pointer; transition: all 0.2s; color: ${
   isLightMode ? '#536471' : '#71767b'
 }; " onmouseover="this.style.backgroundColor='${
      isLightMode ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)'
    }'; this.style.color='var(--x-accent)';"
 onmouseout="this.style.backgroundColor='transparent'; this.style.color='${
   isLightMode ? '#536471' : '#71767b'
 }';" title="商业转账管理">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: currentColor;">
 <g><path d="M20 6h-3V4c0-1.1-.9-2-2-2H9c-1.1 0-2 .9-2 2v2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zM9 4h6v2H9V4zm11 16H4V8h16v12z"></path><path d="M12 10L14.5 14L17 10L14.5 12L12 10ZM10 10L7.5 12L10 14L7.5 14L10 10Z"></path></g>
 </svg>
 </div>
 <div onclick="exportWallet()" style="padding: 12px; border-radius: 50%; cursor: pointer; transition: all 0.2s; color: ${
   isLightMode ? '#536471' : '#71767b'
 }; " onmouseover="this.style.backgroundColor='${
      isLightMode ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)'
    }'; this.style.color='var(--x-accent)';"
 onmouseout="this.style.backgroundColor='transparent'; this.style.color='${
   isLightMode ? '#536471' : '#71767b'
 }';" title="导出钱包">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: currentColor;">
 <g><path d="M19 12v7H5v-7H3v7c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zm-6 .67l2.59-2.58L17 11.5l-5 5-5-5 1.41-1.41L11 12.67V3h2v9.67z"></path></g>
 </svg>
 </div>
 <div onclick="copyWalletInfo()" style="padding: 12px; border-radius: 50%; cursor: pointer; transition: all 0.2s; color: ${
   isLightMode ? '#536471' : '#71767b'
 }; " onmouseover="this.style.backgroundColor='${
      isLightMode ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)'
    }'; this.style.color='var(--x-accent)';"
 onmouseout="this.style.backgroundColor='transparent'; this.style.color='${
   isLightMode ? '#536471' : '#71767b'
 }';" title="复制钱包信息">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: currentColor;">
 <g><path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"></path></g>
 </svg>
 </div>
 </div>
 </div>
`;
    document.body.appendChild(modal);
    document.body.style.overflow = 'hidden'; // 点击背景关闭弹窗
    modal.addEventListener('click', e => {
      if (e.target === modal) {
        closeWalletModal();
      }
    }); // 添加入场动画
    const walletCard = modal.querySelector('div');
    walletCard.style.transform = 'scale(0.8) translateY(20px)';
    walletCard.style.opacity = '0';
    requestAnimationFrame(() => {
      walletCard.style.transition = 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)';
      walletCard.style.transform = 'scale(1) translateY(0)';
      walletCard.style.opacity = '1';
    });
  }
  // 渲染未激活钱包界面
  function renderInactiveWallet(isLightMode = false) {
    return `
 <div style="text-align: center;">

 <div style="width: 80px; height: 80px; margin: 0 auto 20px; background: linear-gradient(135deg, ${
   isLightMode ? 'rgba(248, 250, 252, 0.8)' : 'rgba(22, 24, 28, 0.8)'
 } 0%, ${
      isLightMode ? 'rgba(229, 231, 235, 0.6)' : 'rgba(55, 65, 81, 0.6)'
    } 100%); border-radius: 16px; display: flex; align-items: center; justify-content: center; border: 2px solid ${
      isLightMode ? 'rgba(0, 0, 0, 0.1)' : 'rgba(255, 255, 255, 0.1)'
    }; ">
 <svg viewBox="0 0 24 24" style="width: 32px; height: 32px; fill: ${isLightMode ? '#6b7280' : '#9ca3af'};">
 <g><path d="M21 18v1c0 1.1-.9 2-2 2H5c-1.11 0-2-.9-2-2V5c0-1.1.89-2 2-2h14c1.1 0 2 .9 2 2v1h-9c-1.11 0-2 .9-2 2v8c0 1.1.89 2 2 2h9zm-9-2h10V8H12v8zm4-2.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"/></g>
 </svg>
 </div>

 <div style="color: ${
   isLightMode ? '#0f1419' : '#ffffff'
 }; font-size: 16px; font-weight: 600; margin-bottom: 8px; ">激活你的数字钱包</div>
 <div style="color: ${
   isLightMode ? '#536471' : '#71767b'
 }; font-size: 14px; line-height: 1.5; margin-bottom: 24px; ">点击下方按钮激活钱包<br>初始金额将根据你的公众身份随机生成</div>

 <button id="activate-wallet-btn" onclick="activateWallet()" style="width: 100%; background: linear-gradient(135deg, var(--x-accent) 0%, #1a8cd8 100%); color: #fff; border: none; border-radius: 12px; padding: 16px 24px; font-size: 16px; font-weight: 700; cursor: pointer; transition: all 0.3s; position: relative; overflow: hidden; " onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 8px 25px rgba(29, 155, 240, 0.3)'"
 onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='none'">
 <span id="activate-btn-text">🚀 激活钱包</span>
 <div id="activate-btn-loader" style="display: none;">
 <svg style="animation: spin 1s linear infinite; width: 20px; height: 20px;" viewBox="0 0 24 24">
 <circle cx="12" cy="12" r="10" stroke="rgba(255,255,255,0.3)" stroke-width="2" fill="none"/>
 <path d="M4,12a8,8 0 1,1 16,0" stroke="#fff" stroke-width="2" fill="none" stroke-linecap="round"/>
 </svg>
 </div>
 </button>
 </div>
`;
  }
  // 渲染已激活钱包界面
  function renderActivatedWallet(isLightMode = false) {
    return `
 <div>

 <div style="background: linear-gradient(135deg, ${
   isLightMode ? 'rgba(248, 250, 252, 0.8)' : 'rgba(22, 24, 28, 0.8)'
 } 0%, ${isLightMode ? 'rgba(229, 231, 235, 0.6)' : 'rgba(55, 65, 81, 0.6)'} 100%); border: 2px solid ${
      isLightMode ? 'rgba(0, 0, 0, 0.1)' : 'rgba(255, 255, 255, 0.1)'
    }; border-radius: 16px; padding: 20px; margin-bottom: 20px; text-align: center; ">
 <div style="color: ${
   isLightMode ? '#6b7280' : '#9ca3af'
 }; font-size: 12px; font-weight: 600; letter-spacing: 1px; margin-bottom: 8px; text-transform: uppercase; ">Balance</div>
 <div style="color: ${
   isLightMode ? '#0f1419' : '#ffffff'
 }; font-size: 32px; font-weight: 700; margin-bottom: 4px; ">$${walletData.balance.toFixed(2)}</div>
 <div style="color: ${isLightMode ? '#6b7280' : '#9ca3af'}; font-size: 13px; ">${walletData.currency}</div>
 </div>

 <div style="margin-bottom: 16px;">
 <div style="color: ${
   isLightMode ? '#6b7280' : '#9ca3af'
 }; font-size: 12px; font-weight: 600; letter-spacing: 1px; margin-bottom: 12px; text-transform: uppercase; ">Recent Activity</div>
 ${walletData.transactions.length > 0 ? renderTransactions(isLightMode) : renderNoTransactions(isLightMode)}
 </div>

 <div style="display: flex; gap: 12px;">
 <button onclick="showIncomeHistory()" style="flex: 1; background-color: var(--x-accent); color: ${
   isLightMode ? '#0f1419' : '#ffffff'
 }; border: none; border-radius: 12px; padding: 12px 16px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.2s; position: relative; " onmouseover="this.style.backgroundColor='#1a8cd8'"
 onmouseout="this.style.backgroundColor='var(--x-accent)'">
 + Add Funds
 ${
   getIncomeRecordsCount() > 0
     ? `<span style="position: absolute; top: -2px; right: -2px; background: #22c55e; color: white; border-radius: 50%; width: 16px; height: 16px; font-size: 10px; display: flex; align-items: center; justify-content: center; font-weight: 700; ">${getIncomeRecordsCount()}</span>`
     : ''
 }
 </button>
 <button onclick="showExpenseHistory()" style="flex: 1; background-color: transparent; color: ${
   isLightMode ? '#0f1419' : '#ffffff'
 }; border: none; border-radius: 12px; padding: 12px 16px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.2s; position: relative; " onmouseover="this.style.backgroundColor='${
      isLightMode ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)'
    }';"
 onmouseout="this.style.backgroundColor='transparent'">
 Send
 ${
   getExpenseRecordsCount() > 0
     ? `<span style="position: absolute; top: -2px; right: -2px; background: #ef4444; color: white; border-radius: 50%; width: 16px; height: 16px; font-size: 10px; display: flex; align-items: center; justify-content: center; font-weight: 700; ">${getExpenseRecordsCount()}</span>`
     : ''
 }
 </button>
 </div>
 </div>
`;
  }
  // 渲染交易记录
  function renderTransactions(isLightMode = false) {
    return walletData.transactions
      .slice(0, 2)
      .map(
        transaction => `
 <div style="display: flex; justify-content: space-between; align-items: center; padding: 12px 0; border-bottom: 2px solid ${
   isLightMode ? 'rgba(0, 0, 0, 0.08)' : 'rgba(255, 255, 255, 0.08)'
 }; ">
 <div>
 <div style="color: ${isLightMode ? '#0f1419' : '#ffffff'}; font-size: 14px; font-weight: 600; margin-bottom: 2px; ">${
          transaction.description
        }</div>
 <div style="color: ${isLightMode ? '#6b7280' : '#9ca3af'}; font-size: 12px; ">${new Date(
          transaction.timestamp,
        ).toLocaleDateString()}</div>
 </div>
 <div style="color: ${transaction.amount > 0 ? '#22c55e' : '#ef4444'}; font-size: 14px; font-weight: 700; ">${
          transaction.amount > 0 ? '+' : ''
        }$${Math.abs(transaction.amount).toFixed(2)}</div>
 </div>
`,
      )
      .join('');
  }
  // 渲染无交易记录
  function renderNoTransactions(isLightMode = false) {
    return `
 <div style="text-align: center; padding: 20px; color: ${isLightMode ? '#6b7280' : '#9ca3af'}; font-size: 14px; ">
 <div style="margin-bottom: 8px; opacity: 0.6;">📋</div>
 <div>No transactions yet</div>
 </div>
`;
  }
  // 激活钱包
  async function activateWallet() {
    const activateBtn = document.getElementById('activate-wallet-btn');
    const btnText = document.getElementById('activate-btn-text');
    const btnLoader = document.getElementById('activate-btn-loader'); // 显示加载状态
    btnText.style.display = 'none';
    btnLoader.style.display = 'block';
    activateBtn.disabled = true;
    activateBtn.style.cursor = 'not-allowed'; // 模拟激活过程
    await new Promise(resolve => setTimeout(resolve, 2000));
    try {
      // 根据公众身份生成初始金额
      const initialAmount = generateInitialAmount(); // 更新钱包数据
      walletData.isActivated = true;
      walletData.balance = initialAmount;
      walletData.initialAmount = initialAmount;
      walletData.activatedAt = new Date().toISOString();
      walletData.transactions = [
        {
          id: 'init_' + Date.now(),
          description: 'Initial Deposit',
          amount: initialAmount,
          timestamp: new Date().toISOString(),
          type: 'deposit',
        },
      ]; // 保存到数据库
      await saveWalletData(); // 显示成功动画
      showWalletActivationSuccess(initialAmount);
    } catch (error) {
      console.error('激活钱包失败:', error);
      showXToast('钱包激活失败', 'error'); // 恢复按钮状态
      btnText.style.display = 'block';
      btnLoader.style.display = 'none';
      activateBtn.disabled = false;
      activateBtn.style.cursor = 'pointer';
    }
  }
  // 根据公众身份生成初始金额
  function generateInitialAmount() {
    // 使用window.userProfileData确保获取最新数据
    const publicIdentity = window.userProfileData?.publicIdentity || '';
    const identityLower = publicIdentity.toLowerCase(); // 定义不同身份的金额范围
    const amountRanges = {
      // 超高知名度身份 (1000-5000)
      celebrity: {
        min: 1000,
        max: 5000,
        keywords: ['明星', '演员', '歌手', '导演', '艺人', 'celebrity', 'star', 'actor', 'singer'],
      },
      // 高知名度身份 (500-1500)
      influencer: {
        min: 500,
        max: 1500,
        keywords: ['网红', '博主', '主播', 'influencer', 'streamer', 'youtuber', 'blogger'],
      },
      // 专业身份 (200-800)
      professional: {
        min: 200,
        max: 800,
        keywords: ['专家', '教授', '医生', '律师', '工程师', 'expert', 'professor', 'doctor', 'lawyer', 'engineer'],
      },
      // 企业相关 (300-1000)
      business: {
        min: 300,
        max: 1000,
        keywords: ['企业家', 'CEO', '总裁', '创始人', 'entrepreneur', 'founder', 'executive'],
      },
      // 艺术创作者 (150-600)
      creator: {
        min: 150,
        max: 600,
        keywords: ['作家', '画家', '设计师', '摄影师', 'writer', 'artist', 'designer', 'photographer'],
      },
      // 普通用户 (50-200)
      regular: { min: 50, max: 200, keywords: [] },
    }; // 检查身份匹配
    for (const [category, config] of Object.entries(amountRanges)) {
      if (category === 'regular') continue; // 跳过普通用户，作为默认值
      const hasMatch = config.keywords.some(keyword => identityLower.includes(keyword));
      if (hasMatch) {
        const amount = Math.random() * (config.max - config.min) + config.min;
        console.log(`💰 根据身份类型 "${category}" 生成初始金额: $${amount.toFixed(2)}`);
        return Math.round(amount * 100) / 100; // 保留两位小数
      }
    }
    // 默认为普通用户
    const regularRange = amountRanges.regular;
    const amount = Math.random() * (regularRange.max - regularRange.min) + regularRange.min;
    console.log(`💰 默认身份生成初始金额: $${amount.toFixed(2)}`);
    return Math.round(amount * 100) / 100;
  }
  // 显示钱包激活成功动画
  function showWalletActivationSuccess(amount) {
    // 关闭当前钱包弹窗
    closeWalletModal(); // 显示成功弹窗
    const successModal = document.createElement('div');
    successModal.style.cssText = `
 position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.9); display: flex; align-items: center; justify-content: center; z-index: 30; backdrop-filter: blur(12px);
`;
    successModal.innerHTML = `
 <div style="background-color:var(--x-bg-primary); border-radius: 24px; padding: 40px; text-align: center; border: 1px solid var(--x-border-color); max-width: 320px; width: 90%; animation: walletSuccessIn 0.6s cubic-bezier(0.4, 0, 0.2, 1); ">

 <div style="width: 80px; height: 80px; margin: 0 auto 24px; background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%); border-radius: 50%; display: flex; align-items: center; justify-content: center; animation: walletSuccessCheck 0.8s ease-in-out 0.3s both; ">
 <svg viewBox="0 0 24 24" style="width: 32px; height: 32px; fill: white;">
 <g><path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z"/></g>
 </svg>
 </div>

 <div style="color:var(--x-text-primary); font-size: 20px; font-weight: 700; margin-bottom: 8px; ">钱包激活成功！</div>
 <div style="color: #22c55e; font-size: 24px; font-weight: 700; margin-bottom: 16px; ">+$${amount.toFixed(2)}</div>
 <div style="color:var(--x-text-secondary); font-size: 14px; line-height: 1.5; margin-bottom: 24px; ">恭喜！你的数字钱包已成功激活<br>初始资金已到账</div>

 <button onclick="this.parentElement.parentElement.remove(); document.body.style.overflow='auto'; openAccountWallet();" style="background: linear-gradient(135deg, var(--x-accent) 0%, #1a8cd8 100%); color: #fff; border: none; border-radius: 12px; padding: 12px 24px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.2s; ">查看钱包</button>
 </div>
`;
    document.body.appendChild(successModal); // 3秒后自动关闭
    setTimeout(() => {
      if (successModal.parentElement) {
        successModal.remove();
        document.body.style.overflow = 'auto';
      }
    }, 3000);
  }
  // 关闭钱包弹窗
  function closeWalletModal() {
    const modal = document.getElementById('wallet-modal');
    if (modal) {
      const walletCard = modal.querySelector('div');
      walletCard.style.transform = 'scale(0.9) translateY(20px)';
      walletCard.style.opacity = '0';
      setTimeout(() => {
        modal.remove();
        document.body.style.overflow = 'auto';
      }, 200);
    }
  }
  // 加载钱包数据
  async function loadWalletData() {
    try {
      const db = getXDB();
      const walletId = `wallet_${currentAccountId || 'main'}`;
      const savedWallet = await db.xAccountProfiles.get(walletId);
      if (savedWallet && savedWallet.data) {
        Object.assign(walletData, savedWallet.data);
        walletData.accountId = currentAccountId || 'main';
      } else {
        // 重置为默认状态
        walletData = {
          accountId: currentAccountId || 'main',
          isActivated: false,
          balance: 0,
          currency: 'USD',
          transactions: [],
          activatedAt: null,
          initialAmount: 0,
          creditScore: 100, // 信用值，初始100
        };
      }
      console.log('✅ 钱包数据已加载:', walletData.accountId, walletData.isActivated ? '已激活' : '未激活');
    } catch (error) {
      console.error('加载钱包数据失败:', error); // 使用默认数据
      walletData = {
        accountId: currentAccountId || 'main',
        isActivated: false,
        balance: 0,
        currency: 'USD',
        transactions: [],
        activatedAt: null,
        initialAmount: 0,
        creditScore: 100, // 信用值，初始100
      };
    }
  }
  // 保存钱包数据
  async function saveWalletData() {
    try {
      const db = getXDB();
      const walletId = `wallet_${currentAccountId || 'main'}`;
      await db.xAccountProfiles.put({
        handle: walletId,
        name: 'wallet',
        accountId: currentAccountId || 'main',
        data: { ...walletData },
        updatedAt: new Date().toISOString(),
      });
      console.log('✅ 钱包数据已保存');
    } catch (error) {
      console.error('保存钱包数据失败:', error);
      throw error;
    }
  }
  // 获取收款记录数量
  function getIncomeRecordsCount() {
    return walletData.transactions.filter(t => t.amount > 0).length;
  }
  // 获取付款记录数量
  function getExpenseRecordsCount() {
    return walletData.transactions.filter(t => t.amount < 0).length;
  }
  // 显示收款历史
  window.showIncomeHistory = function () {
    const incomeRecords = walletData.transactions.filter(t => t.amount > 0);
    showTransactionHistory('收款记录', incomeRecords, '#22c55e');
  }; // 显示付款历史
  window.showExpenseHistory = function () {
    const expenseRecords = walletData.transactions.filter(t => t.amount < 0);
    showTransactionHistory('付款记录', expenseRecords, '#ef4444');
  }; // 显示交易历史弹窗
  function showTransactionHistory(title, transactions, accentColor) {
    const xSocialScreen = document.getElementById('x-social-screen');
    const isLightMode = xSocialScreen && xSocialScreen.classList.contains('x-theme-light'); // 创建弹窗遮罩
    const modal = document.createElement('div');
    modal.id = 'transaction-history-modal';
    modal.style.cssText = `
 position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: ${
   isLightMode ? 'rgba(255, 255, 255, 0.85)' : 'rgba(0, 0, 0, 0.85)'
 }; display: flex; align-items: center; justify-content: center; z-index: 26; backdrop-filter: blur(12px); -webkit-backdrop-filter: blur(12px);
`;
    modal.innerHTML = `
 <div style="background-color: ${
   isLightMode ? 'rgba(255, 255, 255, 0.95)' : 'rgba(0, 0, 0, 0.95)'
 }; backdrop-filter: blur(20px); -webkit-backdrop-filter: blur(20px); border-radius: 24px; width: 90%; max-width: 400px; max-height: 80vh; position: relative; overflow: hidden; box-shadow: ${
      isLightMode
        ? '0 20px 60px rgba(0, 0, 0, 0.15), 0 8px 32px rgba(0, 0, 0, 0.1)'
        : '0 20px 60px rgba(0, 0, 0, 0.8), 0 8px 32px rgba(255, 255, 255, 0.05)'
    }; border: 2px solid ${
      isLightMode ? 'rgba(0, 0, 0, 0.1)' : 'rgba(255, 255, 255, 0.1)'
    }; " onclick="event.stopPropagation()">

 <div style="background: linear-gradient(135deg, ${
   isLightMode ? 'rgba(0, 0, 0, 0.03)' : 'rgba(255, 255, 255, 0.05)'
 } 0%, ${
      isLightMode ? 'rgba(0, 0, 0, 0.01)' : 'rgba(255, 255, 255, 0.02)'
    } 100%); padding: 24px; text-align: center; border-bottom: 1px dashed ${
      isLightMode ? 'rgba(0, 0, 0, 0.15)' : 'rgba(255, 255, 255, 0.15)'
    }; position: relative; ">

 <div style="position: absolute; left: -10px; bottom: -10px; width: 20px; height: 20px; border-radius: 50%; background-color: ${
   isLightMode ? 'rgba(255, 255, 255, 0.85)' : 'rgba(0, 0, 0, 0.85)'
 }; "></div>
 <div style="position: absolute; right: -10px; bottom: -10px; width: 20px; height: 20px; border-radius: 50%; background-color: ${
   isLightMode ? 'rgba(255, 255, 255, 0.85)' : 'rgba(0, 0, 0, 0.85)'
 }; "></div>

 <button onclick="closeTransactionHistoryModal()" style="position: absolute; top: 16px; right: 16px; background: transparent; border: none; color: ${
   isLightMode ? '#536471' : '#71767b'
 }; cursor: pointer; padding: 8px; border-radius: 50%; transition: all 0.2s; " onmouseover="this.style.backgroundColor='${
      isLightMode ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)'
    }';"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: currentColor;">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </button>

 <div style="color: ${
   isLightMode ? '#0f1419' : '#ffffff'
 }; font-size: 20px; font-weight: 700; margin-bottom: 8px; letter-spacing: 0.5px; ">${title}</div>
 <div style="color: ${
   isLightMode ? '#666666' : '#999999'
 }; font-size: 12px; font-weight: 600; font-family: monospace; letter-spacing: 1px; text-transform: uppercase; ">${
      transactions.length
    } Records</div>
 </div>

 <div style="max-height: 50vh; overflow-y: auto; padding: 16px 24px; ">
 ${transactions.length > 0 ? renderFullTransactionList(transactions, isLightMode) : renderNoRecords(isLightMode, title)}
 </div>
 </div>
`;
    document.body.appendChild(modal);
    document.body.style.overflow = 'hidden'; // 点击背景关闭弹窗
    modal.addEventListener('click', e => {
      if (e.target === modal) {
        closeTransactionHistoryModal();
      }
    }); // 添加入场动画
    const historyCard = modal.querySelector('div');
    historyCard.style.transform = 'scale(0.8) translateY(20px)';
    historyCard.style.opacity = '0';
    requestAnimationFrame(() => {
      historyCard.style.transition = 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)';
      historyCard.style.transform = 'scale(1) translateY(0)';
      historyCard.style.opacity = '1';
    });
  }
  // 渲染完整交易记录列表
  function renderFullTransactionList(transactions, isLightMode = false) {
    return transactions
      .map(
        transaction => `
 <div style="margin-bottom: 12px; background: linear-gradient(135deg, ${
   isLightMode ? 'rgba(0, 0, 0, 0.02)' : 'rgba(255, 255, 255, 0.03)'
 } 0%, ${isLightMode ? 'rgba(0, 0, 0, 0.01)' : 'rgba(255, 255, 255, 0.01)'} 100%); border: 1px solid ${
          isLightMode ? 'rgba(0, 0, 0, 0.08)' : 'rgba(255, 255, 255, 0.08)'
        }; border-radius: 10px; padding: 14px; position: relative; overflow: hidden; ">

 <div style="position: absolute; bottom: 0; left: 0; right: 0; height: 4px; background: repeating-linear-gradient(
 90deg,
 ${isLightMode ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)'} 0px,
 ${isLightMode ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)'} 4px,
 transparent 4px,
 transparent 8px
 ); "></div>
 <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 10px;">
 <div style="flex: 1; min-width: 0;">
 <div style="color: ${
   isLightMode ? '#0f1419' : '#ffffff'
 }; font-size: 14px; font-weight: 600; margin-bottom: 6px; word-wrap: break-word; ">${transaction.description}</div>
 <div style="color: ${
   isLightMode ? '#6b7280' : '#9ca3af'
 }; font-size: 11px; margin-bottom: 4px; font-family: monospace; letter-spacing: 0.3px; ">${new Date(
          transaction.timestamp,
        ).toLocaleDateString('zh-CN')} ${new Date(transaction.timestamp).toLocaleTimeString('zh-CN', {
          hour12: false,
        })}</div>
 </div>
 <div style="color: ${
   transaction.amount > 0 ? (isLightMode ? '#0f1419' : '#ffffff') : isLightMode ? '#666666' : '#999999'
 }; font-size: 16px; font-weight: 700; margin-left: 12px; flex-shrink: 0; font-family: monospace; ">${
          transaction.amount > 0 ? '+' : ''
        }$${Math.abs(transaction.amount).toFixed(2)}</div>
 </div>

 <div style="display: inline-block; padding: 3px 8px; background: ${
   isLightMode ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.08)'
 }; border: 1px solid ${
          isLightMode ? 'rgba(0, 0, 0, 0.1)' : 'rgba(255, 255, 255, 0.12)'
        }; border-radius: 6px; font-size: 10px; color: ${
          isLightMode ? '#666666' : '#999999'
        }; font-weight: 600; letter-spacing: 0.5px; ">${getTransactionTypeText(transaction.type)}</div>
 </div>
`,
      )
      .join('');
  }
  // 渲染无记录状态
  function renderNoRecords(isLightMode = false, title) {
    return `
 <div style="text-align: center; padding: 40px 20px; color: ${isLightMode ? '#6b7280' : '#9ca3af'}; font-size: 15px; ">
 <svg viewBox="0 0 24 24" style="width: 48px; height: 48px; fill: currentColor; opacity: 0.3; margin: 0 auto 12px;">
 <g><path d="M21 18v1c0 1.1-.9 2-2 2H5c-1.11 0-2-.9-2-2V5c0-1.1.89-2 2-2h14c1.1 0 2 .9 2 2v1h-9c-1.11 0-2 .9-2 2v8c0 1.1.89 2 2 2h9zm-9-2h10V8H12v8zm4-2.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"/></g>
 </svg>
 <div style="font-weight: 600; margin-bottom: 8px;">暂无${title}</div>
 <div style="font-size: 13px; opacity: 0.8;">
 ${title.includes('收款') ? '收到的资金会显示在这里' : '转出的资金会显示在这里'}
 </div>
 </div>
`;
  }
  // 获取交易类型文本
  function getTransactionTypeText(type) {
    const typeMap = {
      deposit: '充值',
      transfer_in: '收款',
      transfer_out: '转账',
      refund: '退款',
      init: '初始化',
      tip: '打赏',
      penalty: '违约费',
      fan_group_fee: '粉丝群入群费',
    };
    return typeMap[type] || type;
  }
  // 关闭交易历史弹窗
  window.closeTransactionHistoryModal = function () {
    const modal = document.getElementById('transaction-history-modal');
    if (modal) {
      const historyCard = modal.querySelector('div');
      historyCard.style.transform = 'scale(0.9) translateY(20px)';
      historyCard.style.opacity = '0';
      setTimeout(() => {
        modal.remove();
        document.body.style.overflow = 'auto';
      }, 200);
    }
  }; // 添加资金 (占位函数，保持兼容性)
  function addFunds() {
    showIncomeHistory();
  }
  // 发送金钱 (占位函数，保持兼容性)
  function sendMoney() {
    showExpenseHistory();
  }
  // 分享钱包 (占位函数)
  function shareWallet() {
    showXToast('分享功能开发中...', 'info');
  }
  // 导出钱包 (占位函数)
  function exportWallet() {
    showXToast('导出功能开发中...', 'info');
  }
  // 复制钱包信息 (占位函数)
  function copyWalletInfo() {
    const userName = window.userProfileData?.name || userProfileData.name || '用户';
    const info = `${userName}的数字钱包\n余额: $${walletData.balance.toFixed(2)}\n状态: ${
      walletData.isActivated ? '已激活' : '未激活'
    }`;
    if (navigator.clipboard) {
      navigator.clipboard
        .writeText(info)
        .then(() => {
          showXToast('钱包信息已复制', 'success');
        })
        .catch(() => {
          showXToast('复制失败', 'error');
        });
    } else {
      showXToast('复制功能不支持', 'error');
    }
  }
  // 编辑个人资料弹窗相关功能
  // 打开编辑个人资料弹窗
  function openEditProfileModal() {
    const modal = document.getElementById('edit-profile-modal');
    modal.style.display = 'flex'; // 禁止背景滚动
    document.body.style.overflow = 'hidden'; // 加载当前数据到编辑表单
    loadDataToEditForm();
  }
  // 关闭编辑个人资料弹窗
  function closeEditProfileModal(event) {
    // 如果有事件参数，检查是否点击的是背景区域
    if (event && event.target !== event.currentTarget) {
      return;
    }
    const modal = document.getElementById('edit-profile-modal');
    modal.style.display = 'none'; // 恢复背景滚动
    document.body.style.overflow = 'auto';
  }
  // 加载当前用户数据到编辑表单
  function loadDataToEditForm() {
    // 使用window.userProfileData确保读取最新数据
    const profile = window.userProfileData; // 加载基本信息
    document.getElementById('edit-user-name').value = profile.name;
    document.getElementById('edit-user-handle').value = profile.handle.replace('@', '');
    document.getElementById('edit-user-bio').value = profile.bio;
    document.getElementById('edit-custom-tag1').value = profile.customTag1;
    document.getElementById('edit-custom-tag2').value = profile.customTag2;
    document.getElementById('edit-following-count').value = profile.following;
    document.getElementById('edit-followers-count').value = profile.followers; // 加载标签图标和颜色
    document.getElementById('edit-tag1-icon').value = profile.customTag1Icon || '✨';
    document.getElementById('edit-tag2-icon').value = profile.customTag2Icon || '📅';
    document.getElementById('edit-tag1-color').value = profile.customTag1Color || '#71767b';
    document.getElementById('edit-tag2-color').value = profile.customTag2Color || '#71767b';
    document.getElementById('edit-tag1-color-text').value = profile.customTag1Color || '#71767b';
    document.getElementById('edit-tag2-color-text').value = profile.customTag2Color || '#71767b'; // 加载图片
    document.getElementById('edit-cover-image').src = profile.coverImage;
    document.getElementById('edit-main-avatar').src = profile.avatar; // 加载公众身份和真名设置
    document.getElementById('edit-public-identity').value = profile.publicIdentity || '';
    document.getElementById('edit-show-real-name').checked = profile.showRealName || false;
    document.getElementById('edit-real-name').value = profile.realName || ''; // 根据复选框状态显示/隐藏真名输入框
    toggleRealNameInput(); // 更新字符计数
    updateCharacterCounts(); // 加载认证类型设置
    loadVerificationTypeData(); // 加载角色身份识别设置
    loadIdentityCharactersList();
    console.log('✅ 已加载用户数据到编辑表单');
  }
  // 加载认证类型数据到编辑表单
  function loadVerificationTypeData() {
    // 使用window.userProfileData确保读取最新数据
    const profile = window.userProfileData; // 设置认证类型选择
    const verificationTypeSelect = document.getElementById('edit-verification-type');
    if (verificationTypeSelect) {
      verificationTypeSelect.value = profile.verificationType || 'none';
    }
    // 设置情侣绑定角色
    const coupleCharacterSelect = document.getElementById('edit-couple-character');
    if (coupleCharacterSelect) {
      coupleCharacterSelect.value = profile.coupleCharacterId || '';
    }
    // 加载可选择的角色到情侣绑定下拉框
    loadCoupleCharacterOptions(); // 更新UI显示
    updateVerificationTypeUI();
  }
  // 更新认证类型UI显示
  function updateVerificationTypeUI() {
    const verificationTypeSelect = document.getElementById('edit-verification-type');
    const coupleBindingSection = document.getElementById('couple-binding-section');
    if (!verificationTypeSelect || !coupleBindingSection) return;
    const selectedType = verificationTypeSelect.value; // 根据选择的认证类型显示/隐藏情侣绑定选项
    if (selectedType === 'couple') {
      coupleBindingSection.style.display = 'block';
    } else {
      coupleBindingSection.style.display = 'none';
    }
  }
  // 加载可选择的角色到情侣绑定下拉框
  async function loadCoupleCharacterOptions() {
    try {
      const db = getDB(); // chats表在主数据库中
      const xDb = getXDB(); // X资料在X专用数据库中
      // 获取所有聊天角色
      const allChats = await db.chats.toArray();
      const characters = allChats.filter(chat => !chat.isGroup);
      const coupleCharacterSelect = document.getElementById('edit-couple-character');
      if (!coupleCharacterSelect) return; // 清空现有选项（保留默认选项）
      coupleCharacterSelect.innerHTML =
        '<option value="" style="background-color:#000; color: #fff;">未选择角色</option>'; // 获取所有角色的X资料（从X专用数据库）
      const characterProfiles = await xDb.xCharacterProfiles.toArray();
      const profileMap = new Map();
      characterProfiles.forEach(profile => {
        profileMap.set(profile.characterId, profile);
      }); // 添加角色选项
      characters.forEach(character => {
        const option = document.createElement('option');
        option.value = character.id; // 优先使用X平台名称，如果没有设置则使用角色名
        const xProfile = profileMap.get(character.id);
        const displayName = xProfile?.xName || character.name;
        option.textContent = displayName;
        option.style.backgroundColor = '#000';
        option.style.color = '#fff';
        coupleCharacterSelect.appendChild(option);
      }); // 设置当前选中的角色
      if (userProfileData.coupleCharacterId) {
        coupleCharacterSelect.value = userProfileData.coupleCharacterId;
      }
    } catch (error) {
      console.error('加载情侣角色选项失败:', error);
    }
  }
  // 更新字符计数显示
  function updateCharacterCounts() {
    const nameInput = document.getElementById('edit-user-name');
    const handleInput = document.getElementById('edit-user-handle');
    const bioInput = document.getElementById('edit-user-bio');
    const tag1Input = document.getElementById('edit-custom-tag1');
    const tag2Input = document.getElementById('edit-custom-tag2'); // 更新名称计数
    if (nameInput) {
      const nameCount = nameInput.value.length;
      nameInput.parentNode.querySelector('div').textContent = `${nameCount} / 50`;
    }
    // 更新用户名计数
    if (handleInput) {
      const handleCount = handleInput.value.length;
      handleInput.parentNode.querySelector('div').textContent = `${handleCount} / 15`;
    }
    // 更新简介计数
    if (bioInput) {
      const bioCount = bioInput.value.length;
      bioInput.parentNode.querySelector('div').textContent = `${bioCount} / 160`;
    }
    // 更新标签1计数
    if (tag1Input) {
      const tag1Count = tag1Input.value.length;
      const tag1Container = tag1Input.closest('.form-group');
      const countDiv = tag1Container.querySelector('div:last-child');
      countDiv.textContent = `${tag1Count} / 30`;
    }
    // 更新标签2计数
    if (tag2Input) {
      const tag2Count = tag2Input.value.length;
      const tag2Container = tag2Input.closest('.form-group');
      const countDiv = tag2Container.querySelector('div:last-child');
      countDiv.textContent = `${tag2Count} / 30`;
    }
    // 公众身份已移除字符限制，无需计数
    // 更新真实姓名计数
    const realNameInput = document.getElementById('edit-real-name');
    if (realNameInput) {
      const realNameCount = realNameInput.value.length;
      realNameInput.parentNode.querySelector('div').textContent = `${realNameCount} / 50`;
    }
  }
  // 切换真名输入框显示
  function toggleRealNameInput() {
    const checkbox = document.getElementById('edit-show-real-name');
    const container = document.getElementById('real-name-input-container'); // 添加 null 检查，防止元素不存在时报错
    if (!checkbox || !container) {
      console.warn('用户真名相关元素未找到');
      return;
    }
    if (checkbox.checked) {
      container.style.display = 'block';
    } else {
      container.style.display = 'none'; // 清空真名输入框
      const realNameInput = document.getElementById('edit-real-name');
      if (realNameInput) {
        realNameInput.value = '';
        updateCharacterCounts();
      }
    }
  }
  // 切换角色真名输入框显示
  function toggleCharacterRealNameInput() {
    const checkbox = document.getElementById('character-show-real-name');
    const container = document.getElementById('character-real-name-input-container'); // 添加 null 检查，防止元素不存在时报错
    if (!checkbox || !container) {
      console.warn('角色真名相关元素未找到');
      return;
    }
    if (checkbox.checked) {
      container.style.display = 'block';
    } else {
      container.style.display = 'none'; // 清空真名输入框
      const realNameInput = document.getElementById('character-real-name');
      if (realNameInput) {
        realNameInput.value = '';
        updateCharacterXProfileCounts();
      }
    }
  }
  // 切换自动发消息设置显示
  window.toggleAutoMessageSettings = function () {
    const checkbox = document.getElementById('character-auto-message-enabled');
    const settingsContainer = document.getElementById('auto-message-time-settings');
    if (!checkbox || !settingsContainer) {
      return;
    }
    if (checkbox.checked) {
      settingsContainer.style.display = 'block';
    } else {
      settingsContainer.style.display = 'none';
    }
  }; // 标签1颜色同步功能
  function updateTag1ColorFromText() {
    const colorText = document.getElementById('edit-tag1-color-text');
    const colorPicker = document.getElementById('edit-tag1-color');
    if (colorText && colorPicker) {
      const colorValue = colorText.value.trim();
      if (colorValue.match(/^#[0-9A-Fa-f]{6}$/)) {
        colorPicker.value = colorValue;
      }
    }
  }
  function updateTag1ColorFromPicker() {
    const colorText = document.getElementById('edit-tag1-color-text');
    const colorPicker = document.getElementById('edit-tag1-color');
    if (colorText && colorPicker) {
      colorText.value = colorPicker.value;
    }
  }
  // 标签2颜色同步功能
  function updateTag2ColorFromText() {
    const colorText = document.getElementById('edit-tag2-color-text');
    const colorPicker = document.getElementById('edit-tag2-color');
    if (colorText && colorPicker) {
      const colorValue = colorText.value.trim();
      if (colorValue.match(/^#[0-9A-Fa-f]{6}$/)) {
        colorPicker.value = colorValue;
      }
    }
  }
  function updateTag2ColorFromPicker() {
    const colorText = document.getElementById('edit-tag2-color-text');
    const colorPicker = document.getElementById('edit-tag2-color');
    if (colorText && colorPicker) {
      colorText.value = colorPicker.value;
    }
  }
  // 简化的关注数处理 - 直接使用字符串
  function getFollowCountValue(input) {
    if (!input) return '';
    return input.toString().trim();
  }
  // 编辑封面图
  // 编辑封面图 - 使用链接上传
  function editCoverImage() {
    const currentCover = document.getElementById('edit-cover-image').src;
    const coverUrl = prompt('请输入封面图片链接：', currentCover);
    if (coverUrl === null) return; // 用户点击取消
    if (!coverUrl.trim()) {
      showXToast('请输入有效的图片链接', 'error');
      return;
    }
    // 验证是否为有效的URL
    try {
      new URL(coverUrl);
    } catch (e) {
      showXToast('请输入有效的图片链接', 'error');
      return;
    }
    // 测试图片是否可以加载
    const testImg = new Image();
    testImg.onload = function () {
      document.getElementById('edit-cover-image').src = coverUrl;
      showXToast('封面图已更新', 'success');
    };
    testImg.onerror = function () {
      showXToast('无法加载该图片，请检查链接是否正确', 'error');
    };
    testImg.src = coverUrl;
  }
  // 移除封面图
  function removeCoverImage() {
    const defaultCover = 'https://i.postimg.cc/qRzMB6nQ/default-cover.jpg';
    document.getElementById('edit-cover-image').src = defaultCover;
    showXToast('已移除封面图', 'success');
  }
  // 编辑头像 - 使用链接上传
  function editAvatarImage() {
    const currentAvatar = document.getElementById('edit-main-avatar').src;
    const avatarUrl = prompt('请输入头像图片链接：', currentAvatar);
    if (avatarUrl === null) return; // 用户点击取消
    if (!avatarUrl.trim()) {
      showXToast('请输入有效的图片链接', 'error');
      return;
    }
    // 验证是否为有效的URL
    try {
      new URL(avatarUrl);
    } catch (e) {
      showXToast('请输入有效的图片链接', 'error');
      return;
    }
    // 测试图片是否可以加载
    const testImg = new Image();
    testImg.onload = function () {
      document.getElementById('edit-main-avatar').src = avatarUrl;
      showXToast('头像已更新', 'success');
    };
    testImg.onerror = function () {
      showXToast('无法加载该图片，请检查链接是否正确', 'error');
    };
    testImg.src = avatarUrl;
  }
  // 角色身份识别管理函数
  // 加载已绑定X资料的角色列表
  async function loadIdentityCharactersList() {
    console.log(`🔄 [加载角色身份识别列表] 开始加载`);
    try {
      const db = getDB(); // 修正：chats表在全局数据库中
      const xDb = getXDB(); // X专用数据库用于其他数据
      // 获取X设置中的绑定角色（使用当前账号的设置）
      const settingsId = `xSettings_${currentAccountId || 'main'}`;
      const xSettings = await xDb.xSettings.get(settingsId);
      const boundCharacters = xSettings?.boundCharacters || [];
      console.log(`🔄 [加载角色身份识别列表] 绑定角色数: ${boundCharacters.length}`);
      if (boundCharacters.length === 0) {
        console.log(`⚠️ [加载角色身份识别列表] 无绑定角色`);
        renderIdentityCharactersList([]);
        return;
      }
      // 获取所有聊天角色
      const allChats = await db.chats.toArray();
      const characters = allChats.filter(chat => !chat.isGroup && boundCharacters.includes(chat.id));
      console.log(`🔄 [加载角色身份识别列表] 过滤后角色数: ${characters.length}`); // 筛选出已绑定X资料的角色
      const charactersWithXProfile = [];
      for (const character of characters) {
        const xProfile = await xDb.xCharacterProfiles.get(character.id);
        if (xProfile) {
          const personaLength = (xProfile.userPersona || '').length;
          console.log(`🔄 [加载角色身份识别列表] 角色 ${character.name} (${character.id})`);
          console.log(` - X名称: ${xProfile.xName}`);
          console.log(` - 用户人设长度: ${personaLength} 字符`);
          console.log(
            ` - 人设预览: "${(xProfile.userPersona || '').substring(0, 50)}${personaLength > 50 ? '...' : ''}"`,
          );
          charactersWithXProfile.push({
            id: character.id,
            name: character.name,
            originalName: character.originalName,
            xProfile: xProfile,
          });
        }
      }
      console.log(`✅ [加载角色身份识别列表] 最终角色数: ${charactersWithXProfile.length}`);
      renderIdentityCharactersList(charactersWithXProfile);
    } catch (error) {
      console.error('❌ [加载角色身份识别列表] 加载失败:', error);
      console.error('❌ [加载角色身份识别列表] 错误详情:', error.message, error.stack);
      renderIdentityCharactersList([]);
    }
  }
  // 渲染角色身份识别列表
  function renderIdentityCharactersList(characters) {
    const container = document.getElementById('identity-characters-list');
    if (characters.length === 0) {
      container.innerHTML = `
 <div style="text-align: center; color: #71767b; font-size: 13px; padding: 20px;">
 暂无已绑定X资料的角色<br>
 <span style="font-size: 12px; margin-top: 4px; display: block;">
 请先在X设置中绑定角色并设置X资料
 </span>
 </div>
 `;
      return;
    }
    // 确保knownIdentityCharacters数组存在
    if (!userProfileData.knownIdentityCharacters) {
      userProfileData.knownIdentityCharacters = [];
    }
    container.innerHTML = characters
      .map(character => {
        const isSelected = userProfileData.knownIdentityCharacters.includes(character.id);
        return `
 <div style="display: flex; align-items: center; gap: 12px; padding: 8px; border-radius: 6px; margin-bottom: 6px; cursor: pointer; transition: background-color 0.2s;"
 onmouseover="this.style.backgroundColor='rgba(255,255,255,0.05)'"
 onmouseout="this.style.backgroundColor='transparent'"
 onclick="toggleIdentityCharacter('${character.id}')">

 <div style="width: 18px; height: 18px; border: 2px solid ${
   isSelected ? 'var(--x-accent)' : '#71767b'
 }; border-radius: 3px; background-color: ${
          isSelected ? 'var(--x-accent)' : 'transparent'
        }; display: flex; align-items: center; justify-content: center; transition: all 0.2s; flex-shrink: 0; ">
 ${
   isSelected
     ? '<svg viewBox="0 0 24 24" style="width: 12px; height: 12px; fill: #fff;"><path d="M9 16.17L5.53 12.7l-1.06 1.06L9 18.3l9.54-9.54-1.06-1.06L9 16.17z"/></svg>'
     : ''
 }
 </div>

 <img src="${character.xProfile.xAvatar}" alt="${character.xProfile.xName}"
 style="width: 32px; height: 32px; border-radius: 50%; flex-shrink: 0;">

 <div style="flex: 1; min-width: 0;">
 <div style="color: #fff; font-weight: 600; font-size: 14px;">
 ${character.xProfile.xName}
 ${
   character.xProfile.xVerified
     ? '<svg viewBox="0 0 24 24" style="width: 14px; height: 14px; fill: var(--x-accent); margin-left: 4px; display: inline;"><path d="M22.5 12.5c0-1.58-.875-2.95-2.148-3.6.154-.435.238-.905.238-1.4 0-2.21-1.71-3.998-3.818-3.998-.47 0-.92.084-1.336.25C14.818 2.415 13.51 1.5 12 1.5s-2.816.917-3.437 2.25c-.415-.165-.866-.25-1.336-.25-2.11 0-3.818 1.79-3.818 4 0 .494.083.964.237 1.4-1.272.65-2.147 2.018-2.147 3.6 0 1.495.782 2.798 1.942 3.486-.02.17-.032.34-.032.514 0 2.21 1.708 4 3.818 4 .47 0 .92-.086 1.335-.25.62 1.334 1.926 2.25 3.437 2.25 1.512 0 2.818-.916 3.437-2.25.415.163.865.248 1.336.248 2.11 0 3.818-1.79 3.818-4 0-.174-.012-.344-.033-.513 1.158-.687 1.943-1.99 1.943-3.484zm-6.616-3.334l-4.334 6.5c-.145.217-.382.334-.625.334-.143 0-.288-.04-.416-.126l-2.5-1.668c-.326-.217-.413-.656-.196-.982.217-.326.656-.414.982-.196l1.875 1.25 3.75-5.625c.22-.33.66-.418.99-.196.33.22.418.66.196.99z"/></svg>'
     : ''
 }
 </div>
 <div style="color: #71767b; font-size: 12px;">
 ${character.xProfile.xHandle} • ${character.name}
 ${
   character.xProfile && character.xProfile.userPersona && character.xProfile.userPersona.trim()
     ? '<span style="color: #10b981; font-size: 11px; margin-left: 8px;">✓ 已设置人设</span>'
     : '<span style="color: #f59e0b; font-size: 11px; margin-left: 8px;">⚠ 未设置人设</span>'
 }
 </div>
 </div>

 <div class="persona-setting-btn" onclick="event.stopPropagation(); window.openUserPersonaEditor('${character.id}')"
 style="width: 32px; height: 32px; border-radius: 50%; background-color: ${
   character.xProfile && character.xProfile.userPersona && character.xProfile.userPersona.trim() ? '#10b981' : '#1d9bf0'
 }; color: #fff; display: flex; align-items: center; justify-content: center; cursor: pointer; flex-shrink: 0; transition: all 0.2s; margin-left: 8px; "
 onmouseover="this.style.backgroundColor='${
   character.xProfile && character.xProfile.userPersona && character.xProfile.userPersona.trim() ? '#059669' : '#1a8cd8'
 }'; this.style.transform='scale(1.05)'"
 onmouseout="this.style.backgroundColor='${
   character.xProfile && character.xProfile.userPersona && character.xProfile.userPersona.trim() ? '#10b981' : '#1d9bf0'
 }'; this.style.transform='scale(1)'"
 title="${
   character.xProfile && character.xProfile.userPersona && character.xProfile.userPersona.trim()
     ? '编辑用户人设'
     : '设置用户人设'
 }">
 ${
   character.xProfile && character.xProfile.userPersona && character.xProfile.userPersona.trim()
     ? '<svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: currentColor;"><g><path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"></path></g></svg>'
     : '<svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: currentColor;"><g><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"></path></g></svg>'
 }
 </div>
 </div>
 `;
      })
      .join('');
  }
  // 切换角色身份识别状态
  function toggleIdentityCharacter(characterId) {
    // 确保knownIdentityCharacters数组存在
    if (!userProfileData.knownIdentityCharacters) {
      userProfileData.knownIdentityCharacters = [];
    }
    const index = userProfileData.knownIdentityCharacters.indexOf(characterId);
    if (index === -1) {
      // 添加到已知身份列表
      userProfileData.knownIdentityCharacters.push(characterId);
    } else {
      // 从已知身份列表中移除
      userProfileData.knownIdentityCharacters.splice(index, 1);
    }
    // 重新渲染列表以更新UI
    loadIdentityCharactersList();
  }
  // 用户人设编辑功能 - 使用+按钮触发
  // 打开用户人设编辑器 - 全局函数
  window.openUserPersonaEditor = async function (characterId) {
    console.log(`📖 [打开用户人设编辑器] 角色ID: ${characterId}`);
    try {
      const mainDB = getDB(); // 用于访问 chats 表
      const xDB = getXDB(); // 用于访问 xCharacterProfiles 表
      const chat = await mainDB.chats.get(characterId);
      const xProfile = await xDB.xCharacterProfiles.get(characterId);
      console.log(`📖 [打开用户人设编辑器] 角色数据:`, chat ? '存在' : '不存在');
      console.log(`📖 [打开用户人设编辑器] X资料数据:`, xProfile ? '存在' : '不存在');
      if (!chat || !xProfile) {
        console.error(`❌ [打开用户人设编辑器] 无法获取角色信息`);
        showXToast('无法获取角色信息', 'error');
        return;
      }
      // 获取现有的用户人设（如果有的话）
      const existingPersona = xProfile.userPersona || '';
      console.log(`📖 [打开用户人设编辑器] 现有人设长度: ${existingPersona.length} 字符`);
      console.log(
        `📖 [打开用户人设编辑器] 人设内容预览: "${existingPersona.substring(0, 100)}${
          existingPersona.length > 100 ? '...' : ''
        }"`,
      ); // 显示编辑弹窗
      window.showUserPersonaModal(characterId, chat.name, xProfile.xName, existingPersona);
    } catch (error) {
      console.error('❌ [打开用户人设编辑器] 失败:', error);
      console.error('❌ [打开用户人设编辑器] 错误详情:', error.message, error.stack);
      showXToast('打开编辑器失败: ' + error.message, 'error');
    }
  }; // 显示用户人设编辑弹窗 - 全局函数
  window.showUserPersonaModal = function (characterId, characterName, xName, existingPersona) {
    console.log(`🖼️ [显示用户人设弹窗] 角色: ${xName} (${characterName})`);
    console.log(`🖼️ [显示用户人设弹窗] 角色ID: ${characterId}`);
    console.log(`🖼️ [显示用户人设弹窗] 传入的人设长度: ${existingPersona.length} 字符`);
    const modal = document.createElement('div');
    modal.id = 'user-persona-modal';
    modal.style.cssText = `
 position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.8); display: flex; align-items: center; justify-content: center; z-index: 10000; backdrop-filter: blur(4px); `;
    modal.innerHTML = `
 <div style="background-color: #1a1a1a; border-radius: 16px; width: 90%; max-width: 500px; max-height: 80vh; overflow-y: auto; position: relative; border: 1px solid #333; ">

 <div style="padding: 20px; border-bottom: 1px solid #333; display: flex; align-items: center; justify-content: space-between; ">
 <div>
 <h3 style="margin: 0; color: #fff; font-size: 18px; font-weight: 700;">
 编辑用户人设
 </h3>
 <p style="margin: 4px 0 0; color: #71767b; font-size: 14px;">
 为 ${xName} (${characterName}) 设置你的身份信息
 </p>
 </div>
 <button onclick="window.closeUserPersonaModal()" style="background: transparent; border: none; color: #71767b; cursor: pointer; padding: 8px; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(255,255,255,0.1)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: currentColor;">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </button>
 </div>

 <div style="padding: 20px;">

 <div style="background-color: #003d82; border: 1px solid var(--x-accent); border-radius: 8px; padding: 12px; margin-bottom: 20px; ">
 <div style="color: var(--x-accent); font-size: 14px; font-weight: 600; margin-bottom: 4px;">
 💡 如何设置用户人设
 </div>
 <div style="color: #e1e8ed; font-size: 13px; line-height: 1.4;">
 • 描述你希望这个角色了解的关于你的信息<br>
 • 例如：性格特点、兴趣爱好、职业背景等<br>
 • 这些信息将帮助角色更自然地与你互动
 </div>
 </div>

 <div style="margin-bottom: 20px;">
 <label style="display: block; color: #fff; font-size: 15px; font-weight: 600; margin-bottom: 8px; ">用户人设</label>
 <textarea id="user-persona-input" placeholder="请描述你希望${xName}了解的关于你的信息..." style="width: 100%; min-height: 120px; max-height: 300px; background-color: #0a0a0a; border: 1px solid #333; border-radius: 8px; color: #fff; font-size: 14px; padding: 12px; resize: vertical; outline: none; box-sizing: border-box; font-family: inherit; line-height: 1.4; " oninput="window.updatePersonaCharCount()">${existingPersona}</textarea>
 <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 8px; ">
 <div style="color: #71767b; font-size: 12px;">
 建议详细描述，帮助角色更好地理解你
 </div>
 <div id="persona-char-count" style="color: #71767b; font-size: 12px;">
 ${existingPersona.length} 字符
 </div>
 </div>
 </div>

 <div style="display: flex; gap: 12px; justify-content: flex-end;">
 <button onclick="window.closeUserPersonaModal()" style="background: transparent; color: #71767b; border: 1px solid #333; border-radius: 20px; padding: 8px 20px; font-size: 15px; font-weight: 700; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='rgba(255,255,255,0.05)'"
 onmouseout="this.style.backgroundColor='transparent'">
 取消
 </button>
 <button onclick="window.saveUserPersona('${characterId}')" style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 20px; padding: 8px 20px; font-size: 15px; font-weight: 700; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='#1a8cd8'"
 onmouseout="this.style.backgroundColor='var(--x-accent)'">
 保存
 </button>
 </div>
 </div>
 </div>
 `;
    document.body.appendChild(modal); // 点击背景关闭弹窗
    modal.addEventListener('click', e => {
      if (e.target === modal) {
        window.closeUserPersonaModal();
      }
    });
  }; // 更新字符计数 - 全局函数
  window.updatePersonaCharCount = function () {
    const textarea = document.getElementById('user-persona-input');
    const countEl = document.getElementById('persona-char-count');
    if (textarea && countEl) {
      countEl.textContent = `${textarea.value.length} 字符`;
    }
  }; // 关闭用户人设编辑弹窗 - 全局函数
  window.closeUserPersonaModal = function () {
    console.log(`🚪 [关闭用户人设弹窗] 关闭编辑弹窗`);
    const modal = document.getElementById('user-persona-modal');
    if (modal) {
      // 记录关闭时的数据状态
      const textarea = document.getElementById('user-persona-input');
      if (textarea) {
        console.log(`🚪 [关闭用户人设弹窗] 弹窗中当前内容长度: ${textarea.value.length} 字符`);
      }
      modal.remove();
      console.log(`✅ [关闭用户人设弹窗] 弹窗已移除`);
    }
  }; // 保存用户人设 - 全局函数
  window.saveUserPersona = async function (characterId) {
    const textarea = document.getElementById('user-persona-input');
    const persona = textarea.value.trim();
    console.log(`💾 [保存用户人设] 开始保存角色 ${characterId} 的用户人设`);
    console.log(`💾 [保存用户人设] 人设内容长度: ${persona.length} 字符`);
    try {
      const db = getXDB(); // 获取现有的角色X资料
      let xProfile = await db.xCharacterProfiles.get(characterId);
      console.log(`💾 [保存用户人设] 获取到的角色资料:`, xProfile ? '存在' : '不存在');
      if (xProfile) {
        // 保存前记录旧值
        const oldPersona = xProfile.userPersona || '';
        console.log(`💾 [保存用户人设] 旧人设长度: ${oldPersona.length} 字符`);
        console.log(`💾 [保存用户人设] 新人设长度: ${persona.length} 字符`); // 更新用户人设
        xProfile.userPersona = persona; // 确保数据被正确保存
        await db.xCharacterProfiles.put(xProfile); // 验证保存结果 - 重新读取确认
        const verifyProfile = await db.xCharacterProfiles.get(characterId);
        const savedPersona = verifyProfile?.userPersona || '';
        console.log(`✅ [保存用户人设] 验证保存结果 - 实际保存长度: ${savedPersona.length} 字符`);
        if (savedPersona === persona) {
          console.log(`✅ [保存用户人设] 数据验证成功，保存一致`);
        } else {
          console.warn(`⚠️ [保存用户人设] 数据验证失败！保存的内容与预期不一致`);
          console.warn(`⚠️ [保存用户人设] 预期: "${persona.substring(0, 50)}..."`);
          console.warn(`⚠️ [保存用户人设] 实际: "${savedPersona.substring(0, 50)}..."`);
        }
        showXToast(persona ? '用户人设已保存' : '用户人设已清空', 'success');
        window.closeUserPersonaModal(); // 重新加载角色列表以更新UI显示
        console.log(`🔄 [保存用户人设] 重新加载角色身份识别列表`);
        await loadIdentityCharactersList();
      } else {
        console.error(`❌ [保存用户人设] 无法找到角色资料，角色ID: ${characterId}`);
        showXToast('无法找到角色资料', 'error');
      }
    } catch (error) {
      console.error('❌ [保存用户人设] 保存失败:', error);
      console.error('❌ [保存用户人设] 错误详情:', error.message, error.stack);
      showXToast('保存失败: ' + error.message, 'error');
    }
  }; // 保存个人资料更改
  async function saveProfileChanges() {
    // 获取表单数据
    const newName = document.getElementById('edit-user-name').value.trim();
    const newHandle = document.getElementById('edit-user-handle').value.trim();
    const newBio = document.getElementById('edit-user-bio').value.trim();
    const newTag1 = document.getElementById('edit-custom-tag1').value.trim();
    const newTag2 = document.getElementById('edit-custom-tag2').value.trim();
    const newTag1Icon = document.getElementById('edit-tag1-icon').value.trim() || '✨';
    const newTag2Icon = document.getElementById('edit-tag2-icon').value.trim() || '📅';
    const newTag1Color = document.getElementById('edit-tag1-color').value || '#71767b';
    const newTag2Color = document.getElementById('edit-tag2-color').value || '#71767b';
    const newFollowing = getFollowCountValue(document.getElementById('edit-following-count').value);
    const newFollowers = getFollowCountValue(document.getElementById('edit-followers-count').value);
    const newCover = document.getElementById('edit-cover-image').src;
    const newAvatar = document.getElementById('edit-main-avatar').src; // 获取认证类型数据
    const newVerificationType = document.getElementById('edit-verification-type').value;
    const newCoupleCharacterId = document.getElementById('edit-couple-character').value; // 获取情侣角色的X平台身份信息（如果有选择）
    let newCoupleCharacterName = '';
    if (newCoupleCharacterId) {
      try {
        const db = getXDB();
        const coupleCharacterProfile = await db.xCharacterProfiles.get(newCoupleCharacterId);
        if (coupleCharacterProfile) {
          // 使用X平台的handle和name组合
          newCoupleCharacterName = `@${coupleCharacterProfile.xHandle}（${coupleCharacterProfile.xName}）`;
        } else {
          // 如果没有X资料，从选项中获取，并生成默认格式
          const coupleOption = document.querySelector(`#edit-couple-character option[value="${newCoupleCharacterId}"]`);
          const displayName = coupleOption ? coupleOption.textContent : '';
          if (displayName) {
            const defaultHandle = displayName.toLowerCase().replace(/\s+/g, '_');
            newCoupleCharacterName = `@${defaultHandle}（${displayName}）`;
          }
        }
      } catch (error) {
        console.error('获取情侣角色X资料失败:', error); // 备用方案：从选项中获取
        const coupleOption = document.querySelector(`#edit-couple-character option[value="${newCoupleCharacterId}"]`);
        const displayName = coupleOption ? coupleOption.textContent : '';
        if (displayName) {
          const defaultHandle = displayName.toLowerCase().replace(/\s+/g, '_');
          newCoupleCharacterName = `@${defaultHandle}（${displayName}）`;
        }
      }
    }
    // 获取公众身份和真名设置
    const newPublicIdentity = document.getElementById('edit-public-identity').value.trim();
    const newShowRealName = document.getElementById('edit-show-real-name').checked;
    const newRealName = document.getElementById('edit-real-name').value.trim(); // 验证数据
    if (!newName) {
      showXToast('名称不能为空', 'error');
      return;
    }
    if (!newHandle) {
      showXToast('用户名不能为空', 'error');
      return;
    }
    if (newName.length > 50) {
      showXToast('名称不能超过50个字符', 'error');
      return;
    }
    if (newHandle.length > 15) {
      showXToast('用户名不能超过15个字符', 'error');
      return;
    }
    if (newBio.length > 160) {
      showXToast('自我介绍不能超过160个字符', 'error');
      return;
    }
    if (newTag1.length > 30) {
      showXToast('自定义标签1不能超过30个字符', 'error');
      return;
    }
    if (newTag2.length > 30) {
      showXToast('自定义标签2不能超过30个字符', 'error');
      return;
    }
    if (newFollowing.length > 20) {
      showXToast('关注数量过长', 'error');
      return;
    }
    if (newFollowers.length > 20) {
      showXToast('关注者数量过长', 'error');
      return;
    }
    // 公众身份已移除字符限制
    if (newShowRealName && newRealName.length > 50) {
      showXToast('真实姓名不能超过50个字符', 'error');
      return;
    }
    if (newShowRealName && !newRealName) {
      showXToast('选择公开真名时必须填写真实姓名', 'error');
      return;
    }
    // 更新用户数据（使用window.userProfileData确保数据持久化）
    window.userProfileData.name = newName;
    window.userProfileData.handle = '@' + newHandle;
    window.userProfileData.bio = newBio;
    window.userProfileData.customTag1 = newTag1;
    window.userProfileData.customTag2 = newTag2;
    window.userProfileData.customTag1Icon = newTag1Icon;
    window.userProfileData.customTag2Icon = newTag2Icon;
    window.userProfileData.customTag1Color = newTag1Color;
    window.userProfileData.customTag2Color = newTag2Color;
    window.userProfileData.following = newFollowing;
    window.userProfileData.followers = newFollowers;
    window.userProfileData.coverImage = newCover;
    window.userProfileData.avatar = newAvatar; // 更新认证类型数据
    window.userProfileData.verificationType = newVerificationType;
    window.userProfileData.coupleCharacterId = newCoupleCharacterId;
    window.userProfileData.coupleCharacterName = newCoupleCharacterName; // 更新公众身份和真名设置
    window.userProfileData.publicIdentity = newPublicIdentity;
    window.userProfileData.showRealName = newShowRealName;
    window.userProfileData.realName = newShowRealName ? newRealName : ''; // 只有选择公开时才保存真名
    // 根据认证类型更新verified字段
    window.userProfileData.verified = newVerificationType !== 'none'; // ⚠️ 注意：knownIdentityCharacters已通过toggleIdentityCharacter函数实时更新到window.userProfileData
    // 这里不需要重新收集，直接保存即可
    // 确保字段存在
    if (!window.userProfileData.knownIdentityCharacters) {
      window.userProfileData.knownIdentityCharacters = [];
    }
    // 如果是情侣认证且绑定了角色，为该角色也设置情侣认证
    if (newVerificationType === 'couple' && newCoupleCharacterId) {
      setCoupleVerificationForCharacter(newCoupleCharacterId, window.userProfileData.name);
    }
    try {
      // 调试：保存前检查
      console.log('📝 准备保存用户资料...');
      console.log('👤 已知身份角色数:', window.userProfileData.knownIdentityCharacters?.length || 0);
      console.log('👤 已知身份角色列表:', window.userProfileData.knownIdentityCharacters || []); // 保存到数据库
      await saveUserProfileToDB(); // 更新UI显示
      loadUserProfileToUI(); // 更新认证徽章显示
      updateVerificationBadge(); // 同步头像到所有位置
      syncUserAvatar(newAvatar); // 关闭弹窗
      closeEditProfileModal();
      let successMessage = '个人资料已更新';
      if (window.userProfileData.knownIdentityCharacters && window.userProfileData.knownIdentityCharacters.length > 0) {
        successMessage += `，已设置 ${window.userProfileData.knownIdentityCharacters.length} 个角色知道您的身份`;
      }
      showXToast(successMessage, 'success'); // 调试：输出身份识别设置
      if (window.userProfileData.knownIdentityCharacters && window.userProfileData.knownIdentityCharacters.length > 0) {
        console.log('✅ 已保存的用户身份识别设置:', window.userProfileData.knownIdentityCharacters);
        console.log('✅ 这些角色现在知道您的身份，可以在X平台上与您自然互动');
      }
    } catch (error) {
      console.error('保存个人资料失败:', error);
      showXToast('保存失败: ' + error.message, 'error');
    }
  }
  // 发帖弹窗相关功能
  // 隐私设置状态：'public' = 所有人可见，'private' = 仅自己可见，'business' = 商业化推贴
  let tweetPrivacySetting = 'public';
  let selectedBusinessTransferId = null; // 选中的商业转账任务ID
  // 打开发帖弹窗
  function openComposeTweetModal() {
    const modal = document.getElementById('compose-tweet-modal');
    modal.style.display = 'flex';
    document.body.style.overflow = 'hidden'; // 重置弹窗内容
    resetComposeModal(); // 同步用户头像
    const avatar = document.querySelector('#compose-tweet-modal img[alt="用户头像"]');
    if (avatar) {
      avatar.src = userProfileData.avatar;
    }
  }
  // 关闭发帖弹窗
  function closeComposeTweetModal(event) {
    if (event && event.target !== event.currentTarget) {
      return;
    }
    const modal = document.getElementById('compose-tweet-modal');
    modal.style.display = 'none';
    document.body.style.overflow = 'auto'; // 清理引用内容
    if (typeof removeQuoteContent === 'function') {
      removeQuoteContent();
    }
    // 清理粉丝群引用
    const fanGroupQuoteSection = document.getElementById('compose-fangroup-quote-section');
    if (fanGroupQuoteSection) {
      fanGroupQuoteSection.remove();
    }
    window.currentQuoteFanGroup = null;
  }
  // 重置弹窗内容
  function resetComposeModal() {
    // 清空文本输入
    document.getElementById('compose-text-input').value = '';
    updateComposeCharCount();
    updateComposeTweetButton(); // 隐藏所有功能区域
    document.getElementById('compose-image-section').style.display = 'none';
    document.getElementById('compose-location-section').style.display = 'none';
    document.getElementById('compose-link-section').style.display = 'none'; // 重置功能按钮状态
    resetFunctionButtonStates(); // 清空各功能区域的内容
    clearImageSection();
    clearLocationSection();
    clearLinkSection(); // 重置隐私设置为默认值
    tweetPrivacySetting = 'public';
    selectedBusinessTransferId = null;
    const iconPath = document.getElementById('privacy-icon-path');
    const textElement = document.getElementById('privacy-text');
    iconPath.setAttribute(
      'd',
      'M12 1.75C6.34 1.75 1.75 6.34 1.75 12S6.34 22.25 12 22.25 22.25 17.66 22.25 12 17.66 1.75 12 1.75zm-.81 14.68l-4.1-3.27 1.25-1.57 2.47 1.98 3.97-5.47 1.62 1.18-5.21 7.15z',
    );
    textElement.textContent = '所有人可以回复';
    textElement.style.color = 'var(--x-accent)'; // 隐藏商业任务选择区域
    const businessSection = document.getElementById('business-task-selection');
    if (businessSection) businessSection.style.display = 'none'; // 清理引用内容
    if (typeof removeQuoteContent === 'function') {
      removeQuoteContent();
    }
    // 清理粉丝群引用
    const fanGroupQuoteSection = document.getElementById('compose-fangroup-quote-section');
    if (fanGroupQuoteSection) {
      fanGroupQuoteSection.remove();
    }
    window.currentQuoteFanGroup = null;
  }
  // 处理文本输入
  function handleComposeInput() {
    updateComposeCharCount();
    updateComposeTweetButton();
    processHashtagsAndMentions();
  }
  // 更新字符计数
  function updateComposeCharCount() {
    const textInput = document.getElementById('compose-text-input');
    const charCount = document.getElementById('compose-char-count');
    const length = textInput.value.length;
    charCount.textContent = `${length} / 280`; // 根据字符数更改颜色
    if (length > 260) {
      charCount.style.color = '#f4212e';
    } else if (length > 240) {
      charCount.style.color = '#ffad1f';
    } else {
      charCount.style.color = '#71767b';
    }
  }
  // 更新发帖按钮状态
  function updateComposeTweetButton() {
    const textInput = document.getElementById('compose-text-input');
    const tweetBtn = document.getElementById('compose-tweet-btn');
    const hasContent = textInput.value.trim().length > 0;
    if (hasContent) {
      tweetBtn.disabled = false;
      tweetBtn.style.opacity = '1';
      tweetBtn.style.cursor = 'pointer';
    } else {
      tweetBtn.disabled = true;
      tweetBtn.style.opacity = '0.5';
      tweetBtn.style.cursor = 'not-allowed';
    }
  }
  // 处理话题标签和提及
  function processHashtagsAndMentions() {
    const textInput = document.getElementById('compose-text-input');
    const text = textInput.value; // 这里可以添加实时高亮#和@的逻辑
    // 由于textarea的限制，我们暂时不实现实时高亮
    // 在实际发布时会处理这些标签
  }
  // 切换图片区域
  function toggleImageSection() {
    const section = document.getElementById('compose-image-section');
    const btn = document.getElementById('image-btn');
    if (section.style.display === 'none') {
      section.style.display = 'block';
      btn.style.backgroundColor = 'rgba(29,155,240,0.1)';
    } else {
      section.style.display = 'none';
      btn.style.backgroundColor = 'transparent';
      clearImageSection();
    }
  }
  // 选择图片添加方式
  function selectImageMethod(method) {
    const descBtn = document.getElementById('img-desc-btn');
    const uploadBtn = document.getElementById('img-upload-btn');
    const descInput = document.getElementById('image-description-input');
    const uploadArea = document.getElementById('image-upload-area'); // 重置按钮样式
    descBtn.style.backgroundColor = '#333';
    descBtn.style.borderColor = '#536471';
    uploadBtn.style.backgroundColor = '#333';
    uploadBtn.style.borderColor = '#536471'; // 隐藏所有区域
    descInput.style.display = 'none';
    uploadArea.style.display = 'none';
    if (method === 'description') {
      descBtn.style.backgroundColor = 'var(--x-accent)';
      descBtn.style.borderColor = 'var(--x-accent)';
      descInput.style.display = 'block';
    } else if (method === 'upload') {
      uploadBtn.style.backgroundColor = 'var(--x-accent)';
      uploadBtn.style.borderColor = 'var(--x-accent)';
      uploadArea.style.display = 'block';
    }
  }
  // 触发图片上传
  function triggerImageUpload() {
    document.getElementById('image-file-input').click();
  }
  // 存储上传的图片数据（支持多图）
  let uploadedImagesData = []; // 处理图片上传（支持多图）
  function handleImageUpload(event) {
    const files = event.target.files;
    if (!files || files.length === 0) return; // 验证图片数量（最多4张）
    if (uploadedImagesData.length + files.length > 4) {
      showXToast('最多只能上传4张图片', 'error');
      return;
    }
    const previewContainer = document.getElementById('preview-images-container');
    const previewArea = document.getElementById('uploaded-image-preview');
    let loadedCount = 0;
    const totalFiles = files.length;
    for (let i = 0; i < files.length; i++) {
      const file = files[i]; // 验证文件类型
      if (!file.type.startsWith('image/')) {
        showXToast('请选择图片文件', 'error');
        continue;
      }
      // 验证文件大小
      if (file.size > 5 * 1024 * 1024) {
        showXToast('图片文件不能超过5MB', 'error');
        continue;
      }
      const reader = new FileReader();
      reader.onload = function (e) {
        const imageData = e.target.result;
        uploadedImagesData.push(imageData); // 创建预览元素
        const previewItem = document.createElement('div');
        previewItem.style.cssText = 'position: relative; border-radius: 8px; overflow: hidden;';
        previewItem.innerHTML = `
 <img src="${imageData}" style="width: 100%; height: 150px; object-fit: cover; display: block;" alt="预览图片">
 <div onclick="removeUploadedImage(${
   uploadedImagesData.length - 1
 })" style="position: absolute; top: 4px; right: 4px; background-color: rgba(0,0,0,0.7); border-radius: 50%; width: 24px; height: 24px; display: flex; align-items: center; justify-content: center; cursor: pointer; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(0,0,0,0.9)'" onmouseout="this.style.backgroundColor='rgba(0,0,0,0.7)'">
 <svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: #fff;">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </div>
 `;
        previewContainer.appendChild(previewItem);
        previewArea.style.display = 'block';
        loadedCount++;
        if (loadedCount === totalFiles) {
          showXToast(`成功上传${totalFiles}张图片`, 'success');
        }
      };
      reader.readAsDataURL(file);
    }
  }
  // 移除单张上传的图片
  window.removeUploadedImage = function (index) {
    uploadedImagesData.splice(index, 1); // 重新渲染预览
    const previewContainer = document.getElementById('preview-images-container');
    const previewArea = document.getElementById('uploaded-image-preview');
    previewContainer.innerHTML = '';
    if (uploadedImagesData.length === 0) {
      previewArea.style.display = 'none';
    } else {
      uploadedImagesData.forEach((imageData, idx) => {
        const previewItem = document.createElement('div');
        previewItem.style.cssText = 'position: relative; border-radius: 8px; overflow: hidden;';
        previewItem.innerHTML = `
 <img src="${imageData}" style="width: 100%; height: 150px; object-fit: cover; display: block;" alt="预览图片">
 <div onclick="removeUploadedImage(${idx})" style="position: absolute; top: 4px; right: 4px; background-color: rgba(0,0,0,0.7); border-radius: 50%; width: 24px; height: 24px; display: flex; align-items: center; justify-content: center; cursor: pointer; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(0,0,0,0.9)'" onmouseout="this.style.backgroundColor='rgba(0,0,0,0.7)'">
 <svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: #fff;">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </div>
 `;
        previewContainer.appendChild(previewItem);
      });
    }
    showXToast('已移除图片', 'info');
  }; // 移除图片
  function removeImage() {
    clearImageSection();
    toggleImageSection(); // 关闭图片区域
  }
  // 清空图片区域
  function clearImageSection() {
    // 重置文件输入
    document.getElementById('image-file-input').value = ''; // 清空上传的图片数据
    uploadedImagesData = []; // 隐藏预览
    document.getElementById('uploaded-image-preview').style.display = 'none'; // 清空预览容器
    const previewContainer = document.getElementById('preview-images-container');
    if (previewContainer) {
      previewContainer.innerHTML = '';
    }
    // 清空描述文本
    const descTextarea = document.querySelector('#image-description-input textarea');
    if (descTextarea) {
      descTextarea.value = '';
    }
    // 重置按钮状态
    const descBtn = document.getElementById('img-desc-btn');
    const uploadBtn = document.getElementById('img-upload-btn');
    descBtn.style.backgroundColor = '#333';
    descBtn.style.borderColor = '#536471';
    uploadBtn.style.backgroundColor = '#333';
    uploadBtn.style.borderColor = '#536471'; // 隐藏输入区域
    document.getElementById('image-description-input').style.display = 'none';
    document.getElementById('image-upload-area').style.display = 'none';
  }
  // 切换位置区域
  function toggleLocationSection() {
    const section = document.getElementById('compose-location-section');
    const btn = document.getElementById('location-btn');
    if (section.style.display === 'none') {
      section.style.display = 'block';
      btn.style.backgroundColor = 'rgba(29,155,240,0.1)';
    } else {
      section.style.display = 'none';
      btn.style.backgroundColor = 'transparent';
      clearLocationSection();
    }
  }
  // 移除位置
  function removeLocation() {
    clearLocationSection();
    toggleLocationSection(); // 关闭位置区域
  }
  // 清空位置区域
  function clearLocationSection() {
    document.getElementById('location-input').value = '';
  }
  // 切换链接区域
  function toggleLinkSection() {
    const section = document.getElementById('compose-link-section');
    const btn = document.getElementById('attach-btn');
    if (section.style.display === 'none') {
      section.style.display = 'block';
      btn.style.backgroundColor = 'rgba(29,155,240,0.1)';
    } else {
      section.style.display = 'none';
      btn.style.backgroundColor = 'transparent';
      clearLinkSection();
    }
  }
  // 移除链接
  function removeLink() {
    clearLinkSection();
    toggleLinkSection(); // 关闭链接区域
  }
  // 清空链接区域
  function clearLinkSection() {
    document.getElementById('link-title-input').value = '';
    document.getElementById('link-url-input').value = '';
    document.getElementById('link-description-input').value = '';
  }
  // 重置功能按钮状态
  function resetFunctionButtonStates() {
    const buttons = ['image-btn', 'location-btn', 'attach-btn'];
    buttons.forEach(btnId => {
      const btn = document.getElementById(btnId);
      btn.style.backgroundColor = 'transparent';
    });
  }
  // 切换隐私设置
  async function togglePrivacySettings() {
    // 三种模式循环切换：public → private → business → public
    if (tweetPrivacySetting === 'public') {
      tweetPrivacySetting = 'private';
    } else if (tweetPrivacySetting === 'private') {
      // 检查是否有待完成的商业转账任务
      const hasBusinessTasks = await checkPendingBusinessTasks();
      if (hasBusinessTasks) {
        tweetPrivacySetting = 'business';
      } else {
        tweetPrivacySetting = 'public';
        showXToast('当前没有待完成的商业转账任务', 'info');
      }
    } else {
      tweetPrivacySetting = 'public';
    }
    updatePrivacySettingUI();
  }
  // 更新隐私设置UI
  function updatePrivacySettingUI() {
    const iconPath = document.getElementById('privacy-icon-path');
    const textElement = document.getElementById('privacy-text');
    if (tweetPrivacySetting === 'public') {
      // 所有人可见
      iconPath.setAttribute(
        'd',
        'M12 1.75C6.34 1.75 1.75 6.34 1.75 12S6.34 22.25 12 22.25 22.25 17.66 22.25 12 17.66 1.75 12 1.75zm-.81 14.68l-4.1-3.27 1.25-1.57 2.47 1.98 3.97-5.47 1.62 1.18-5.21 7.15z',
      );
      textElement.textContent = '所有人可以回复';
      textElement.style.color = 'var(--x-accent)'; // 隐藏商业任务选择区域
      const businessSection = document.getElementById('business-task-selection');
      if (businessSection) businessSection.style.display = 'none';
      showXToast('已切换为所有人可见', 'success');
    } else if (tweetPrivacySetting === 'private') {
      // 仅自己可见
      iconPath.setAttribute(
        'd',
        'M17.863 13.44c1.477 1.58 2.366 3.8 2.632 6.46l.11 1.1H3.395l.11-1.1c.266-2.66 1.155-4.88 2.632-6.46C7.627 11.85 9.648 11 12 11s4.373.85 5.863 2.44zM12 2C9.791 2 8 3.79 8 6s1.791 4 4 4 4-1.79 4-4-1.791-4-4-4z',
      );
      textElement.textContent = '仅自己可见';
      textElement.style.color = 'var(--x-accent)'; // 隐藏商业任务选择区域
      const businessSection = document.getElementById('business-task-selection');
      if (businessSection) businessSection.style.display = 'none';
      showXToast('已切换为仅自己可见', 'success');
    } else {
      // 商业化推贴
      iconPath.setAttribute(
        'd',
        'M20 6h-3V4c0-1.1-.9-2-2-2H9c-1.1 0-2 .9-2 2v2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zM9 4h6v2H9V4zm11 16H4V8h16v12z',
      );
      textElement.textContent = '商业化推贴';
      textElement.style.color = 'var(--x-accent)'; // 显示商业任务选择区域
      showBusinessTaskSelection();
      showXToast('已切换为商业化推贴', 'success');
    }
  }
  // 检查是否有待完成的商业转账任务
  async function checkPendingBusinessTasks() {
    try {
      const xDb = getXDB();
      const businessTransfersId = `businessTransfers_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(businessTransfersId);
      console.log('🔍 [检查商业任务] 数据:', savedData);
      if (!savedData || !savedData.data) {
        console.log('🔍 [检查商业任务] 没有保存的数据');
        return false;
      }
      console.log('🔍 [检查商业任务] 总任务数:', savedData.data.length); // 筛选接收的、进行中且未过期的商业转账
      const now = new Date();
      const pendingTasks = savedData.data.filter(t => {
        console.log('🔍 [检查任务]', {
          direction: t.direction,
          taskStatus: t.taskStatus,
          taskDeadline: t.taskDeadline,
          acceptedAt: t.acceptedAt,
          taskDeadlineHours: t.taskDeadlineHours,
        });
        if (t.direction !== 'received' || t.taskStatus !== 'in_progress') return false; // 检查是否有 taskDeadline 字段，如果没有则尝试动态计算
        let deadline;
        if (!t.taskDeadline) {
          if (t.acceptedAt && t.taskDeadlineHours) {
            // 动态计算截止时间
            const acceptedTime = new Date(t.acceptedAt);
            const deadlineHours = parseFloat(t.taskDeadlineHours) || 24;
            deadline = new Date(acceptedTime.getTime() + deadlineHours * 60 * 60 * 1000);
            console.log('⚠️ [检查任务] 动态计算截止时间:', deadline.toISOString());
          } else {
            console.warn('⚠️ [检查任务] 任务没有足够信息计算截止时间，仍然认为有效', t);
            return true; // 如果没有截止时间，认为任务有效
          }
        } else {
          deadline = new Date(t.taskDeadline);
        }
        const isValid = deadline.getTime() > now.getTime();
        console.log('🔍 [检查任务] 是否有效:', isValid, '截止时间:', deadline, '现在:', now);
        return isValid; // 只保留未过期的任务
      });
      console.log('🔍 [检查商业任务] 有效任务数:', pendingTasks.length);
      return pendingTasks.length > 0;
    } catch (error) {
      console.error('检查商业任务失败:', error);
      return false;
    }
  }
  // 显示商业任务选择区域
  async function showBusinessTaskSelection() {
    try {
      const xDb = getXDB();
      const businessTransfersId = `businessTransfers_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(businessTransfersId);
      const businessSection = document.getElementById('business-task-selection');
      const tasksList = document.getElementById('business-tasks-list');
      if (!businessSection || !tasksList) return;
      businessSection.style.display = 'block';
      tasksList.innerHTML = '';
      if (!savedData || !savedData.data) {
        tasksList.innerHTML = `
 <div style="text-align: center; padding: 24px 12px; color: #71767b; font-size: 13px; ">
 <svg viewBox="0 0 24 24" style="width: 40px; height: 40px; fill: currentColor; opacity: 0.3; margin: 0 auto 8px;">
 <g><path d="M20 6h-3V4c0-1.1-.9-2-2-2H9c-1.1 0-2 .9-2 2v2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zM9 4h6v2H9V4zm11 16H4V8h16v12z"></path></g>
 </svg>
 <div>没有待完成的任务</div>
 </div>
 `;
        return;
      }
      // 筛选接收的、进行中的商业转账，并排除已过期的任务
      const now = new Date();
      console.log('📋 [显示任务列表] 开始筛选，总数:', savedData.data.length);
      const pendingTasks = savedData.data.filter(t => {
        console.log('📋 [筛选任务]', {
          direction: t.direction,
          taskStatus: t.taskStatus,
          taskDeadline: t.taskDeadline,
          acceptedAt: t.acceptedAt,
          taskDeadlineHours: t.taskDeadlineHours,
        });
        if (t.direction !== 'received' || t.taskStatus !== 'in_progress') return false; // 如果没有截止时间，尝试动态计算
        let deadline;
        if (!t.taskDeadline) {
          if (t.acceptedAt && t.taskDeadlineHours) {
            // 动态计算截止时间
            const acceptedTime = new Date(t.acceptedAt);
            const deadlineHours = parseFloat(t.taskDeadlineHours) || 24;
            deadline = new Date(acceptedTime.getTime() + deadlineHours * 60 * 60 * 1000);
            console.log('⚠️ [筛选任务] 动态计算截止时间:', deadline.toISOString());
          } else {
            console.warn('⚠️ [筛选任务] 任务没有足够信息计算截止时间，仍然显示', t.transferId);
            return true;
          }
        } else {
          deadline = new Date(t.taskDeadline);
        }
        const isValid = deadline.getTime() > now.getTime();
        console.log('📋 [筛选任务] 是否有效:', isValid);
        return isValid; // 只保留未过期的任务
      });
      console.log('📋 [显示任务列表] 筛选后:', pendingTasks.length);
      if (pendingTasks.length === 0) {
        tasksList.innerHTML = `
 <div style="text-align: center; padding: 24px 12px; color: #71767b; font-size: 13px; ">
 <svg viewBox="0 0 24 24" style="width: 40px; height: 40px; fill: currentColor; opacity: 0.3; margin: 0 auto 8px;">
 <g><path d="M20 6h-3V4c0-1.1-.9-2-2-2H9c-1.1 0-2 .9-2 2v2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zM9 4h6v2H9V4zm11 16H4V8h16v12z"></path></g>
 </svg>
 <div>没有待完成的任务</div>
 </div>
 `;
        return;
      }
      // 渲染任务列表
      pendingTasks.forEach(task => {
        // 获取或计算截止时间
        let deadline;
        if (task.taskDeadline) {
          deadline = new Date(task.taskDeadline);
        } else if (task.acceptedAt && task.taskDeadlineHours) {
          const acceptedTime = new Date(task.acceptedAt);
          const deadlineHours = parseFloat(task.taskDeadlineHours) || 24;
          deadline = new Date(acceptedTime.getTime() + deadlineHours * 60 * 60 * 1000);
        } else {
          // 无法计算截止时间，使用默认24小时
          deadline = new Date(now.getTime() + 24 * 60 * 60 * 1000);
        }
        const remainingMs = deadline.getTime() - now.getTime(); // 计算剩余时间
        const hours = Math.floor(remainingMs / (1000 * 60 * 60));
        const minutes = Math.floor((remainingMs % (1000 * 60 * 60)) / (1000 * 60));
        const deadlineText = hours > 0 ? `剩余 ${hours}小时${minutes}分钟` : `剩余 ${minutes}分钟`;
        const isSelected = selectedBusinessTransferId === task.transferId;
        const taskCard = document.createElement('div');
        taskCard.style.cssText = `
 padding: 14px; margin-bottom: 10px; background: linear-gradient(135deg, ${
   isSelected ? 'rgba(255, 255, 255, 0.08)' : 'rgba(255, 255, 255, 0.03)'
 } 0%, ${isSelected ? 'rgba(255, 255, 255, 0.04)' : 'rgba(255, 255, 255, 0.01)'} 100%); border: 1px solid ${
          isSelected ? 'rgba(255, 255, 255, 0.25)' : 'rgba(255, 255, 255, 0.1)'
        }; border-radius: 10px; cursor: pointer; transition: all 0.2s; position: relative; overflow: hidden; `;
        taskCard.innerHTML = `

 <div style="position: absolute; top: 50%; right: -25px; transform: translateY(-50%) rotate(15deg); font-size: 28px; color: rgba(255, 255, 255, 0.02); font-weight: 700; pointer-events: none; ">TASK</div>
 <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 10px;">
 <div style="flex: 1;">
 <div style="color: #fff; font-size: 14px; font-weight: 600; margin-bottom: 4px;">
 来自 ${task.senderName}
 </div>
 <div style="color: #71767b; font-size: 11px; font-family: monospace; letter-spacing: 0.3px;">${task.senderHandle}</div>
 </div>
 <div style="padding: 4px 10px; background: linear-gradient(135deg, rgba(255, 255, 255, 0.12) 0%, rgba(255, 255, 255, 0.06) 100%); color: #e5e5e5; font-size: 10px; font-weight: 600; border-radius: 8px; border: 1px solid rgba(255, 255, 255, 0.15); letter-spacing: 0.5px; display: flex; align-items: center; gap: 4px; ">
 <svg viewBox="0 0 24 24" style="width: 10px; height: 10px; fill: currentColor;">
 <g><path d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm.5-13H11v6l5.2 3.2.8-1.3-4.5-2.7V7z"></path></g>
 </svg>
 ${deadlineText}
 </div>
 </div>

 <div style="color: #e5e5e5; font-size: 13px; line-height: 1.4; margin-bottom: 12px; padding: 10px; background: rgba(255, 255, 255, 0.02); border-left: 2px solid rgba(255, 255, 255, 0.15); border-radius: 4px; ">${
   task.taskDescription
 }</div>

 <div style="display: flex; justify-content: space-between; align-items: center; padding-top: 10px; border-top: 1px dashed rgba(255, 255, 255, 0.1); ">
 <div style="color: #71767b; font-size: 11px; font-family: monospace; ">$${
   task.amount
 } <span style="opacity: 0.6;">(定金 $${task.depositAmount})</span></div>
 ${
   isSelected
     ? `<div style="display: inline-flex; align-items: center; gap: 4px; padding: 3px 8px; background: linear-gradient(135deg, rgba(255, 255, 255, 0.12) 0%, rgba(255, 255, 255, 0.06) 100%); border: 1px solid rgba(255, 255, 255, 0.2); border-radius: 8px; font-size: 10px; font-weight: 600; color: #fff; letter-spacing: 0.5px; ">
 <svg viewBox="0 0 24 24" style="width: 10px; height: 10px; fill: currentColor;">
 <g><path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z"></path></g>
 </svg>
 已选择
 </div>`
     : ''
 }
 </div>
 `;
        taskCard.onclick = () => {
          selectedBusinessTransferId = task.transferId;
          showBusinessTaskSelection(); // 重新渲染以更新选中状态
        };
        taskCard.onmouseover = function () {
          if (!isSelected) {
            this.style.borderColor = 'rgba(255, 255, 255, 0.2)';
            this.style.background =
              'linear-gradient(135deg, rgba(255, 255, 255, 0.05) 0%, rgba(255, 255, 255, 0.02) 100%)';
          }
        };
        taskCard.onmouseout = function () {
          if (!isSelected) {
            this.style.borderColor = 'rgba(255, 255, 255, 0.1)';
            this.style.background =
              'linear-gradient(135deg, rgba(255, 255, 255, 0.03) 0%, rgba(255, 255, 255, 0.01) 100%)';
          }
        };
        tasksList.appendChild(taskCard);
      });
    } catch (error) {
      console.error('显示商业任务失败:', error);
    }
  }
  // 发布推文
  async function publishTweet() {
    const textInput = document.getElementById('compose-text-input');
    const content = textInput.value.trim();
    if (!content) {
      showXToast('请输入推文内容', 'error');
      return;
    }
    // 验证商业化推贴的必填项
    if (tweetPrivacySetting === 'business') {
      if (!selectedBusinessTransferId) {
        showXToast('请选择要完成的商业任务', 'error');
        return;
      }
    }
    // 获取附加内容（使用window.userProfileData确保获取最新账号数据）
    const tweetData = {
      id: 'user_' + Date.now(),
      content: content,
      image: getImageData(),
      location: getLocationData(),
      link: getLinkData(),
      timestamp: new Date(),
      user: {
        name: window.userProfileData.name,
        handle: window.userProfileData.handle,
        avatar: window.userProfileData.avatar,
        verified: window.userProfileData.verified,
      },
      stats: {
        comments: 0,
        retweets: 0,
        likes: 0,
        views: 0,
      },
      comments: [],
      privacy: tweetPrivacySetting,
    }; // 如果是商业化推贴，添加商业转账信息
    if (tweetPrivacySetting === 'business') {
      tweetData.businessTransferId = selectedBusinessTransferId;
      tweetData.isBusinessPost = true;
    }
    // 如果有引用内容，添加到推文中
    if (typeof currentQuoteData !== 'undefined' && currentQuoteData) {
      tweetData.quotedTweet = {
        type: currentQuoteData.type,
        user: {
          name: currentQuoteData.user.name,
          handle: currentQuoteData.user.handle,
          avatar: currentQuoteData.user.avatar,
          verified: currentQuoteData.user.verified,
        },
        content: currentQuoteData.content,
        time: currentQuoteData.time,
        image: currentQuoteData.image || null, // 保存图片数据
        link: currentQuoteData.link || null, // 保存链接数据
        location: currentQuoteData.location || null, // 保存位置数据
      };
    }
    // 如果有粉丝群引用，添加到推文中
    if (typeof window.currentQuoteFanGroup !== 'undefined' && window.currentQuoteFanGroup) {
      tweetData.quotedFanGroup = {
        id: window.currentQuoteFanGroup.id,
        name: window.currentQuoteFanGroup.name,
        avatar: window.currentQuoteFanGroup.avatar,
        memberCount: window.currentQuoteFanGroup.memberCount,
        threshold: window.currentQuoteFanGroup.threshold,
      };
      console.log('📤 [发帖] 已添加粉丝群引用到推文数据:', tweetData.quotedFanGroup);
    }
    console.log('推文数据:', tweetData); // 关闭弹窗
    closeComposeTweetModal(); // 保存用户发布的帖子到个人页面
    await saveUserTweet(tweetData); // 如果当前在个人主页，刷新推文显示
    if (document.getElementById('x-profile-page').style.display !== 'none') {
      loadUserProfileTweets();
    }
    // 显示推文详情页面
    showTweetDetail(tweetData);
    showXToast(currentQuoteData ? '引用转发已发布！' : '发帖成功！', 'success'); // 如果是商业化推贴，触发AI任务评估
    if (tweetPrivacySetting === 'business') {
      showXToast('正在提交任务成果...', 'info');
      await handleBusinessPostSubmission(tweetData, selectedBusinessTransferId);
    }
    // 如果设置为所有人可见，触发AI回复
    else if (tweetPrivacySetting === 'public') {
      showXToast('正在等待回复...', 'info');
      await generateAIResponseForTweet(tweetData); // 如果推文包含粉丝群引用，触发粉丝群申请生成器
      if (tweetData.quotedFanGroup) {
        console.log('📤 [粉丝群] 检测到粉丝群引用推文，准备触发申请生成器');
        setTimeout(async () => {
          await triggerFanGroupApplicationGenerator(tweetData);
        }, 2000); // 延迟2秒，让AI回复先完成渲染
      }
    }
  }
  // 获取图片数据（支持多图）
  function getImageData() {
    const imageSection = document.getElementById('compose-image-section');
    if (imageSection.style.display === 'none') return null;
    const descTextarea = document.querySelector('#image-description-input textarea'); // 文字描述类型（单图）
    if (descTextarea && descTextarea.style.display !== 'none' && descTextarea.value.trim()) {
      return {
        type: 'description',
        content: descTextarea.value.trim(),
      };
    }
    // 本地上传类型（多图）
    else if (uploadedImagesData && uploadedImagesData.length > 0) {
      return {
        type: 'uploads', // 注意：复数形式表示多图
        images: uploadedImagesData.map(data => ({ content: data })),
      };
    }
    return null;
  }
  // 获取位置数据
  function getLocationData() {
    const locationSection = document.getElementById('compose-location-section');
    if (locationSection.style.display === 'none') return null;
    const locationInput = document.getElementById('location-input');
    const location = locationInput.value.trim();
    return location ? location : null;
  }
  // 保存功能相关函数
  function saveImageData() {
    showXToast('图片数据已保存', 'success');
  }
  function saveLocationData() {
    const locationInput = document.getElementById('location-input');
    if (locationInput.value.trim()) {
      showXToast('位置信息已保存', 'success');
    } else {
      showXToast('请先输入位置信息', 'error');
    }
  }
  function saveLinkData() {
    const title = document.getElementById('link-title-input').value.trim();
    const url = document.getElementById('link-url-input').value.trim();
    const description = document.getElementById('link-description-input').value.trim();
    if (title || url || description) {
      showXToast('链接信息已保存', 'success');
    } else {
      showXToast('请先填写链接信息', 'error');
    }
  }
  // 处理链接首图上传
  function triggerLinkImageUpload() {
    document.getElementById('link-image-input').click();
  }
  function handleLinkImageUpload(event) {
    const file = event.target.files[0];
    if (!file) return; // 验证文件类型
    if (!file.type.startsWith('image/')) {
      showXToast('请选择图片文件', 'error');
      return;
    }
    // 验证文件大小
    if (file.size > 5 * 1024 * 1024) {
      showXToast('图片文件不能超过5MB', 'error');
      return;
    }
    const reader = new FileReader();
    reader.onload = function (e) {
      const previewArea = document.getElementById('link-image-preview');
      const previewImg = document.getElementById('link-preview-image');
      previewImg.src = e.target.result;
      previewArea.style.display = 'block';
      showXToast('链接首图上传成功', 'success');
    };
    reader.readAsDataURL(file);
  }
  // 更新获取链接数据函数
  function getLinkData() {
    const linkSection = document.getElementById('compose-link-section');
    if (linkSection.style.display === 'none') return null;
    const title = document.getElementById('link-title-input').value.trim();
    const url = document.getElementById('link-url-input').value.trim();
    const description = document.getElementById('link-description-input').value.trim();
    const previewImg = document.getElementById('link-preview-image');
    const thumbnail = previewImg && previewImg.src.startsWith('data:') ? previewImg.src : null;
    if (title || url || description || thumbnail) {
      return {
        title: title,
        url: url,
        description: description,
        thumbnail: thumbnail,
      };
    }
    return null;
  }
  // 清空链接区域
  function clearLinkSection() {
    document.getElementById('link-title-input').value = '';
    document.getElementById('link-url-input').value = '';
    document.getElementById('link-description-input').value = '';
    document.getElementById('link-image-input').value = '';
    document.getElementById('link-image-preview').style.display = 'none';
  }
  // 从推文详情返回
  window.goBackFromTweetDetail = function () {
    const currentTweetData = sessionStorage.getItem('currentTweetData');
    if (currentTweetData) {
      try {
        const tweet = JSON.parse(currentTweetData); // 根据推文来源返回到正确的页面
        if (tweet._source === 'account') {
          // 返回账户主页时，重置推进模式
          if (isTweetProgressMode) {
            isTweetProgressMode = false;
            updateTweetRerollButtonUI();
            console.log('📖 [返回] 已重置推进模式');
          }
          document.getElementById('x-tweet-detail-page').style.display = 'none';
          document.getElementById('account-profile-page').style.display = 'flex';
          return;
        } else if (tweet._source === 'search') {
          // 返回搜索页面时，重置推进模式
          if (isTweetProgressMode) {
            isTweetProgressMode = false;
            updateTweetRerollButtonUI();
            console.log('📖 [返回] 已重置推进模式');
          }
          document.getElementById('x-tweet-detail-page').style.display = 'none'; // 恢复搜索结果视图
          if (isInSearchResults && currentSearchQuery) {
            document.getElementById('trending-view').style.display = 'none';
            document.getElementById('search-results-view').style.display = 'flex'; // 显示返回按钮，隐藏刷新按钮
            const backBtn = document.getElementById('search-back-btn');
            if (backBtn) backBtn.style.display = 'flex';
            const refreshBtn = document.querySelector('.refresh-trends-btn');
            if (refreshBtn) refreshBtn.style.display = 'none';
          }
          switchXPage('search');
          return;
        }
      } catch (e) {
        console.warn('解析推文数据失败:', e);
      }
    }
    // 默认返回主页
    switchXPage('home');
  }; // 显示推文详情页面
  async function showTweetDetail(tweetData) {
    console.log('📖 [显示详情] 开始显示推文详情，推文ID:', tweetData.id); // 从数据库加载最新的推文数据（包括所有评论）
    let latestTweetData = tweetData;
    try {
      const xDb = getXDB();
      const isUserTweet = tweetData.id.startsWith('user_');
      if (isUserTweet) {
        console.log('📖 [显示详情] 从用户推文数据库加载');
        const userTweetsId = `userTweets_${currentAccountId || 'main'}`;
        const userTweetsData = await xDb.xUserTweets.get(userTweetsId);
        if (userTweetsData && userTweetsData.tweets) {
          const dbTweet = userTweetsData.tweets.find(t => t.id === tweetData.id);
          if (dbTweet) {
            latestTweetData = dbTweet;
            console.log('✅ [显示详情] 已加载最新用户推文数据，评论数:', dbTweet.comments?.length || 0);
          } else {
            console.warn('⚠️ [显示详情] 数据库中未找到该用户推文');
          }
        }
      } else {
        console.log('📖 [显示详情] 从主页推文数据库加载');
        const tweetsData = await xDb.xTweetsData.get('tweets');
        if (tweetsData) {
          let dbTweet = null;
          if (tweetsData.forYouTweets) {
            dbTweet = tweetsData.forYouTweets.find(t => t.id === tweetData.id);
          }
          if (!dbTweet && tweetsData.followingTweets) {
            dbTweet = tweetsData.followingTweets.find(t => t.id === tweetData.id);
          }
          if (dbTweet) {
            latestTweetData = dbTweet;
            console.log('✅ [显示详情] 已加载最新主页推文数据，评论数:', dbTweet.comments?.length || 0);
          } else {
            console.warn('⚠️ [显示详情] 数据库中未找到该主页推文');
          }
        }
      }
    } catch (loadError) {
      console.error('❌ [显示详情] 从数据库加载推文失败:', loadError);
    }
    // 保存最新推文数据到sessionStorage，供重回功能使用
    sessionStorage.setItem('currentTweetData', JSON.stringify(latestTweetData));
    console.log('📖 [显示详情] sessionStorage 已更新'); // 隐藏所有页面
    document.querySelectorAll('.x-page').forEach(page => {
      page.style.display = 'none';
    }); // 显示推文详情页面
    const detailPage = document.getElementById('x-tweet-detail-page');
    detailPage.style.display = 'flex'; // 判断是否为账户推文或搜索结果推文，如果是则强制进入推进模式
    const isAccountTweet = latestTweetData._source === 'account';
    const isSearchTweet = latestTweetData._source === 'search';
    const isUserTweet = latestTweetData.id && latestTweetData.id.startsWith('user_');
    if (isAccountTweet || isSearchTweet) {
      const sourceType = isAccountTweet ? '账户推文' : '搜索结果推文';
      console.log(`📖 [显示详情] 检测到${sourceType}，强制启用推进模式（该类型推文仅支持推进）`); // 强制设置为推进模式（账户推文/搜索推文只能推进，不能重回）
      if (!isTweetProgressMode) {
        isTweetProgressMode = true;
        updateTweetRerollButtonUI();
      }
    } else if (isUserTweet) {
      console.log(`📖 [显示详情] 检测到用户推文，支持重回+推进模式`); // 用户推文：保持当前模式设置，支持切换
      updateTweetRerollButtonUI();
    }
    // 渲染推文详情
    renderTweetDetail(latestTweetData);
    console.log('✅ [显示详情] 推文详情页面已显示'); // 确保用户资料头像正确显示
    setTimeout(() => {
      const detailCommentUserAvatar = document.getElementById('detail-comment-user-avatar');
      if (detailCommentUserAvatar) {
        detailCommentUserAvatar.src = userProfileData.avatar;
      }
      // 更新所有回复输入框头像
      const replyUserAvatars = document.querySelectorAll('.reply-user-avatar');
      replyUserAvatars.forEach(avatar => {
        avatar.src = userProfileData.avatar;
      });
    }, 100);
  }
  // 渲染推文详情
  function renderTweetDetail(tweet) {
    const container = document.getElementById('tweet-detail-container');
    container.setAttribute('data-tweet-id', tweet.id); // 创建详情HTML
    const detailHTML = `
 <div class="tweet-detail-item" style="padding: 16px 16px 4px 16px;">

 <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 16px;">
 <img src="${tweet.user.avatar}" alt="${tweet.user.name}"
 onclick="openAccountProfile('${tweet.user.name.replace(/'/g, "\\'")}', '${tweet.user.handle}', '${
      tweet.user.avatar
    }', {source: 'tweetDetail'});event.stopPropagation();"
 style="width: 48px; height: 48px; border-radius: 50%; cursor: pointer; transition: opacity 0.2s;"
 onmouseover="this.style.opacity='0.8'"
 onmouseout="this.style.opacity='1'">
 <div>
 <div style="display: flex; align-items: center; gap: 4px;">
 <span onclick="openAccountProfile('${tweet.user.name.replace(/'/g, "\\'")}', '${tweet.user.handle}', '${
      tweet.user.avatar
    }', {source: 'tweetDetail'});event.stopPropagation();" style="color: #fff; font-weight: 700; font-size: 17px; cursor: pointer;">${
      tweet.user.name
    }</span>
 ${
   tweet.user.verified
     ? '<svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-accent);"><g><path d="M22.25 12c0-1.43-.88-2.67-2.19-3.34.46-1.39.2-2.9-.81-3.91s-2.52-1.27-3.91-.81c-.66-1.31-1.91-2.19-3.34-2.19s-2.67.88-3.33 2.19c-1.4-.46-2.91-.2-3.92.81s-1.26 2.52-.8 3.91c-1.31.67-2.2 1.91-2.2 3.34s.89 2.67 2.2 3.34c-.46 1.39-.21 2.9.8 3.91s2.52 1.27 3.91.81c.67 1.31 1.91 2.19 3.34 2.19s2.68-.88 3.34-2.19c1.39.46 2.9.2 3.91-.81s1.27-2.52.81-3.91c1.31-.67 2.19-1.91 2.19-3.34zm-11.71 4.2L6.8 12.46l1.41-1.42 2.26 2.26 4.8-5.23 1.47 1.36-6.2 6.77z"></path></g></svg>'
     : ''
 }
 </div>
 <div style="color: #71767b; font-size: 15px;">${
   tweet.user.handle.startsWith('@') ? tweet.user.handle : '@' + tweet.user.handle
 }</div>
 </div>
 </div>

 <div style="color: #fff; font-size: 16px; line-height: 1.3; margin-bottom: 16px; word-wrap: break-word;">
 ${processContent(tweet.content)}
 </div>
 ${renderTweetMedia(tweet)}
 ${renderTweetLink(tweet)}
 ${renderQuotedTweet(tweet)}
 ${renderQuotedFanGroup(tweet)}

 <div style="display: flex; align-items: center; justify-content: space-between; margin: 12px 0 16px 0;">
 <div style="display: flex; align-items: center; gap: 16px;">
 <span style="color: #71767b; font-size: 15px;">${formatDetailTime(tweet.timestamp || tweet.createdAt)}</span>
 <span style="color: #71767b; font-size: 15px;">·</span>
 <span id="tweet-detail-views" style="color: #fff; font-weight: 700; font-size: 15px;">${formatNumber(
   tweet.stats.views,
 )}</span>
 <span id="tweet-detail-views-label" style="color: #71767b; font-size: 15px;">${getI18nText('tweetDetailViews')}</span>
 </div>
 ${
   tweet.location
     ? `
 <div style="display: flex; align-items: center; gap: 4px; color: var(--x-accent); font-size: 15px;">
 <svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: currentColor;">
 <g>
 <path d="M12 7c-1.93 0-3.5 1.57-3.5 3.5S10.07 14 12 14s3.5-1.57 3.5-3.5S13.93 7 12 7zm0 5c-.827 0-1.5-.673-1.5-1.5S11.173 9 12 9s1.5.673 1.5 1.5S12.827 12 12 12zm0-10c-4.687 0-8.5 3.813-8.5 8.5 0 5.967 7.621 11.116 7.945 11.332l.555.37.555-.37C12.879 21.616 20.5 16.467 20.5 10.5 20.5 5.813 16.687 2 12 2zm0 17.77c-1.665-1.241-6.5-5.196-6.5-9.27C5.5 6.916 8.416 4 12 4s6.5 2.916 6.5 6.5c0 4.073-4.835 8.028-6.5 9.27z"></path>
 </g>
 </svg>
 <span>${tweet.location}</span>
 </div>
 `
     : ''
 }
 </div>

 <div id="tweet-detail-stats" style="display: flex; align-items: center; gap: 32px; padding: 16px 0; border-top: 1px solid #2f3336; border-bottom: 1px solid #2f3336;">
 <div style="display: flex; align-items: center; gap: 4px;">
 <span style="color: #fff; font-weight: 700; font-size: 15px;">${formatNumber(tweet.stats.retweets)}</span>
 <span style="color: #71767b; font-size: 15px;">${getI18nText('tweetDetailRetweets')}</span>
 </div>
 <div style="display: flex; align-items: center; gap: 4px;">
 <span style="color: #fff; font-weight: 700; font-size: 15px;">${formatNumber(tweet.stats.likes)}</span>
 <span style="color: #71767b; font-size: 15px;">${getI18nText('tweetDetailLikes')}</span>
 </div>
 <div style="display: flex; align-items: center; gap: 4px;">
 <span style="color: #fff; font-weight: 700; font-size: 15px;">${formatNumber(tweet.stats.comments)}</span>
 <span style="color: #71767b; font-size: 15px;">${getI18nText('tweetDetailBookmarks')}</span>
 </div>
 </div>

 <div style="display: flex; justify-content: space-between; padding: 12px 0 0 0;">
 <div class="tweet-action comment" style="display: flex; align-items: center; gap: 8px; padding: 8px; border-radius: 50%; cursor: pointer; color: #71767b; transition: all 0.2s;" onmouseover="this.style.backgroundColor='rgba(29,155,240,0.1)'; this.style.color='#1d9bf0';" onmouseout="this.style.backgroundColor='transparent'; this.style.color='#71767b';">
 <svg class="action-icon" viewBox="0 0 24 24" fill="currentColor" style="width: 20px; height: 20px;">
 <g><path d="M1.751 10c0-4.42 3.584-8.005 8.005-8.005h4.366c4.49 0 8.129 3.64 8.129 8.13 0 2.96-1.607 5.68-4.196 7.11l-8.054 4.46v-3.69h-.067c-4.49.1-8.183-3.51-8.183-8.005zm8.005-6.005c-3.317 0-6.005 2.69-6.005 6.005 0 3.37 2.77 6.08 6.138 6.01l.351-.01h1.761v2.3l5.087-2.81c1.951-1.08 3.163-3.13 3.163-5.36 0-3.39-2.744-6.13-6.129-6.13H9.756z"></path></g>
 </svg>
 </div>
 <div class="tweet-action retweet" style="display: flex; align-items: center; gap: 8px; padding: 8px; border-radius: 50%; cursor: pointer; color: #71767b; transition: all 0.2s;" onmouseover="this.style.backgroundColor='rgba(0,186,124,0.1)'; this.style.color='#00ba7c';" onmouseout="this.style.backgroundColor='transparent'; this.style.color='#71767b';">
 <svg class="action-icon" viewBox="0 0 24 24" fill="currentColor" style="width: 20px; height: 20px;">
 <g><path d="M4.5 3.88l4.432 4.14-1.364 1.46L5.5 7.55V16c0 1.1.896 2 2 2H13v2H7.5c-2.209 0-4-1.791-4-4V7.55L1.432 9.48.068 8.02 4.5 3.88zM16.5 6H11V4h5.5c2.209 0 4 1.791 4 4v8.45l2.068-1.93 1.364 1.46-4.432 4.14-4.432-4.14 1.364-1.46 2.068 1.93V8c0-1.1-.896-2-2-2z"></path></g>
 </svg>
 </div>
 <div class="tweet-action like" onclick="toggleDetailLike('${tweet.id}', this)" data-liked="false" data-likes="${
      tweet.stats.likes
    }" style="display: flex; align-items: center; gap: 8px; padding: 8px; border-radius: 50%; cursor: pointer; color: #71767b; transition: all 0.2s;" onmouseover="this.style.backgroundColor='rgba(249,24,128,0.1)'; this.style.color='#f91880';" onmouseout="this.style.backgroundColor='transparent'; this.style.color='#71767b';">
 <svg class="action-icon like-icon" viewBox="0 0 24 24" fill="currentColor" style="width: 20px; height: 20px;">
 <g><path d="M16.697 5.5c-1.222-.06-2.679.51-3.89 2.16l-.805 1.09-.806-1.09C9.984 6.01 8.526 5.44 7.304 5.5c-1.243.07-2.349.78-2.91 1.91-.552 1.12-.633 2.78.479 4.82 1.074 1.97 3.257 4.27 7.129 6.61 3.87-2.34 6.052-4.64 7.126-6.61 1.111-2.04 1.03-3.7.477-4.82-.561-1.13-1.666-1.84-2.908-1.91zm4.187 7.69c-1.351 2.48-4.001 5.12-8.379 7.67l-.503.3-.504-.3c-4.379-2.55-7.029-5.19-8.382-7.67-1.36-2.5-1.41-4.86-.514-6.67.887-1.79 2.647-2.91 4.601-3.01 1.651-.09 3.368.56 4.798 2.01 1.429-1.45 3.146-2.1 4.796-2.01 1.954.1 3.714 1.22 4.601 3.01.896 1.81.846 4.17-.514 6.67z"></path></g>
 </svg>
 </div>
 <div class="tweet-action bookmark" style="display: flex; align-items: center; gap: 8px; padding: 8px; border-radius: 50%; cursor: pointer; color: #71767b; transition: all 0.2s;" onmouseover="this.style.backgroundColor='rgba(29,155,240,0.1)'; this.style.color='#1d9bf0';" onmouseout="this.style.backgroundColor='transparent'; this.style.color='#71767b';">
 <svg class="action-icon" viewBox="0 0 24 24" fill="currentColor" style="width: 20px; height: 20px;">
 <g><path d="M4 4.5C4 3.12 5.119 2 6.5 2h11C18.881 2 20 3.12 20 4.5v18.44l-8-5.71-8 5.71V4.5zM6.5 4c-.276 0-.5.22-.5.5v14.56l6-4.29 6 4.29V4.5c0-.28-.224-.5-.5-.5h-11z"></path></g>
 </svg>
 </div>
 <div class="tweet-action share" id="tweet-detail-share-btn" style="display: flex; align-items: center; gap: 8px; padding: 8px; border-radius: 50%; cursor: pointer; color: #71767b; transition: all 0.2s;" onmouseover="this.style.backgroundColor='rgba(29,155,240,0.1)'; this.style.color='#1d9bf0';" onmouseout="this.style.backgroundColor='transparent'; this.style.color='#71767b';">
 <svg class="action-icon" viewBox="0 0 24 24" fill="currentColor" style="width: 20px; height: 20px;">
 <g><path d="M12 2.59l5.7 5.7-1.41 1.42L13 6.41V16h-2V6.41l-3.29 3.3-1.42-1.42L12 2.59zM21 15l-.02 3.51c0 1.38-1.12 2.49-2.5 2.49H5.5C4.11 21 3 19.88 3 18.5V15h2v3.5c0 .28.22.5.5.5h12.98c.28 0 .5-.22.5-.5L19 15h2z"></path></g>
 </svg>
 </div>
 </div>
 </div>
 `;
    container.innerHTML = detailHTML; // 同步用户头像
    const commentInputAvatar = document.querySelector('#x-tweet-detail-page .detail-comment-input-area img');
    if (commentInputAvatar) {
      commentInputAvatar.src = userProfileData.avatar;
    }
    // 添加分享按钮点击事件
    const shareBtn = document.getElementById('tweet-detail-share-btn');
    if (shareBtn) {
      shareBtn.onclick = () => {
        showShareContentModal(
          {
            user: tweet.user,
            content: tweet.content,
            time: tweet.time || formatDetailTime(tweet.timestamp),
            image: tweet.image,
            // 包含完整推文和评论区数据
            fullTweet: tweet,
            comments: tweet.comments || [],
          },
          'tweet',
        );
      };
    }
    // 渲染评论（如果有）
    renderDetailComments(tweet.comments);
  }
  // 渲染推文媒体内容（支持多图）
  function renderTweetMedia(tweet) {
    // 支持两种格式：tweet.image（旧格式）和 tweet.media（账户推文格式）
    // 1. 处理账户推文的 media 数组格式
    if (tweet.media && Array.isArray(tweet.media) && tweet.media.length > 0) {
      const media = tweet.media[0];
      if (media.type === 'description' && media.description) {
        return `
 <div style="margin-bottom: 16px; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 16px; padding: 16px;">
 <div style="color:var(--x-text-primary); font-size: 15px; line-height: 20px;">${media.description}</div>
 </div>
 `;
      } else if (media.type === 'upload' && media.url) {
        return `
 <div style="margin-bottom: 16px; border-radius: 16px; overflow: hidden;">
 <img src="${media.url}" style="width: 100%; max-height: 400px; object-fit: cover; display: block;" alt="推文图片">
 </div>
 `;
      }
    }
    // 2. 处理旧的 image 格式（兼容性）
    if (!tweet.image) return ''; // 文字描述类型
    if (tweet.image.type === 'description') {
      return `
 <div style="margin-bottom: 16px; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 12px; padding: 16px; box-sizing: border-box;">
 <div style="color:var(--x-text-primary); font-size: 15px; line-height: 1.4; white-space: pre-wrap; word-wrap: break-word; overflow-wrap: break-word; width: 100%; box-sizing: border-box;">${tweet.image.content}</div>
 </div>
 `;
    }
    // 单图上传
    else if (tweet.image.type === 'upload') {
      return `
 <div style="margin-bottom: 16px; border-radius: 16px; overflow: hidden;">
 <img src="${tweet.image.content}" style="width: 100%; max-height: 400px; object-fit: cover; display: block;" alt="推文图片">
 </div>
 `;
    }
    // 多图上传
    else if (tweet.image.type === 'uploads' && tweet.image.images && tweet.image.images.length > 0) {
      const imageCount = tweet.image.images.length;
      let gridTemplate = '';
      if (imageCount === 1) {
        gridTemplate = 'grid-template-columns: 1fr;';
      } else if (imageCount === 2) {
        gridTemplate = 'grid-template-columns: repeat(2, 1fr);';
      } else if (imageCount === 3) {
        gridTemplate = 'grid-template-columns: repeat(2, 1fr);';
      } else {
        gridTemplate = 'grid-template-columns: repeat(2, 1fr);';
      }
      const imagesHtml = tweet.image.images
        .map((img, index) => {
          const spanStyle = imageCount === 3 && index === 0 ? 'grid-column: span 2;' : '';
          return `
 <div style="${spanStyle}border-radius: 12px; overflow: hidden;">
 <img src="${img.content}" style="width: 100%; height: ${
            imageCount === 1 ? '400px' : '280px'
          }; object-fit: cover; display: block;" alt="推文图片${index + 1}">
 </div>
 `;
        })
        .join('');
      return `
 <div style="margin-bottom: 16px; display: grid; ${gridTemplate} gap: 4px;">
 ${imagesHtml}
 </div>
 `;
    }
    return '';
  }
  // 渲染推文链接
  function renderTweetLink(tweet) {
    if (!tweet.link) return '';
    return `
 <div style="margin-bottom: 16px; border: 1px solid #333; border-radius: 12px; overflow: hidden; transition: background-color 0.2s;" onmouseover="this.style.backgroundColor='rgba(255,255,255,0.03)'" onmouseout="this.style.backgroundColor='transparent'">
 ${
   tweet.link.thumbnail
     ? `
 <div style="width: 100%; height: 200px; background-color: #333;">
 <img src="${tweet.link.thumbnail}" style="width: 100%; height: 100%; object-fit: cover;" alt="链接预览图">
 </div>
 `
     : ''
 }
 <div style="padding: 12px;">
 <div style="color: #71767b; font-size: 13px; margin-bottom: 4px;">${tweet.link.url || '链接'}</div>
 ${
   tweet.link.title
     ? `<div style="color: #fff; font-size: 15px; font-weight: 600; margin-bottom: 4px; line-height: 1.3;">${tweet.link.title}</div>`
     : ''
 }
 ${
   tweet.link.description
     ? `<div style="color: #71767b; font-size: 14px; line-height: 1.4;">${tweet.link.description}</div>`
     : ''
 }
 </div>
 </div>
 `;
  }
  // 渲染引用推文内容（详情页版本）
  function renderQuotedTweet(tweet) {
    if (!tweet.quotedTweet) return '';
    const quoted = tweet.quotedTweet;
    const typeText = quoted.type === 'tweet' ? '推文' : '评论';
    return `
 <div style="margin-bottom: 16px; border: 1px solid var(--x-border-color); border-radius: 16px; padding: 16px; background-color: var(--x-bg-hover); transition: background-color 0.2s;">
 <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 12px;">
 <img src="${quoted.user.avatar}"
 onclick="openAccountProfile('${quoted.user.name.replace(/'/g, "\\'")}', '${quoted.user.handle}', '${
      quoted.user.avatar
    }', {source: 'quotedTweet'});event.stopPropagation();"
 style="width: 24px; height: 24px; border-radius: 50%; cursor: pointer; transition: opacity 0.2s;"
 onmouseover="this.style.opacity='0.8'"
 onmouseout="this.style.opacity='1'"
 alt="${quoted.user.name}">
 <div style="display: flex; align-items: center; gap: 4px;">
 <span onclick="openAccountProfile('${quoted.user.name.replace(/'/g, "\\'")}', '${quoted.user.handle}', '${
      quoted.user.avatar
    }', {source: 'quotedTweet'});event.stopPropagation();" style="color:var(--x-text-primary); font-size: 15px; font-weight: 700; cursor: pointer;">${
      quoted.user.name
    }</span>
 ${
   quoted.user.verified
     ? '<svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: var(--x-accent);"><g><path d="M22.25 12c0-1.43-.88-2.67-2.19-3.34.46-1.39.2-2.9-.81-3.91s-2.52-1.27-3.91-.81c-.66-1.31-1.91-2.19-3.34-2.19s-2.67.88-3.33 2.19c-1.4-.46-2.91-.2-3.92.81s-1.26 2.52-.8 3.91c-1.31.67-2.2 1.91-2.2 3.34s.89 2.67 2.2 3.34c-.46 1.39-.21 2.9.8 3.91s2.52 1.27 3.91.81c.67 1.31 1.91 2.19 3.34 2.19s2.68-.88 3.34-2.19c1.39.46 2.9.2 3.91-.81s1.27-2.52.81-3.91c1.31-.67 2.19-1.91 2.19-3.34zm-11.71 4.2L6.8 12.46l1.41-1.42 2.26 2.26 4.8-5.23 1.47 1.36-6.2 6.77z"></path></g></svg>'
     : ''
 }
 <span style="color:var(--x-text-secondary); font-size: 15px;">${quoted.user.handle}</span>
 <span style="color:var(--x-text-secondary); font-size: 15px;">·${quoted.time}</span>
 </div>
 </div>
 <div style="color:var(--x-text-primary); font-size: 17px; line-height: 1.3; word-wrap: break-word;">${
   quoted.content
 }</div>
 ${renderQuotedTweetMedia(quoted)}
 <div style="color:var(--x-text-secondary); font-size: 13px; margin-top: 12px; font-style: italic;">引用${typeText}</div>
 </div>
 `;
  }
  // 渲染引用内容的媒体（图片）
  function renderQuotedTweetMedia(quoted) {
    if (!quoted.image) return '';
    if (quoted.image.type === 'description') {
      return `
 <div style="margin-top: 8px; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 8px; padding: 8px; box-sizing: border-box;">
 <div style="color:var(--x-text-primary); font-size: 13px; line-height: 1.4; white-space: pre-wrap; word-wrap: break-word; overflow-wrap: break-word; width: 100%; box-sizing: border-box;">${quoted.image.content}</div>
 </div>
 `;
    } else if (quoted.image.type === 'upload') {
      return `
 <div style="margin-top: 8px; border-radius: 8px; overflow: hidden;">
 <img src="${quoted.image.content}" style="width: 100%; max-height: 120px; object-fit: cover; display: block;" alt="引用图片">
 </div>
 `;
    }
    return '';
  }
  // 渲染引用的粉丝群（详情页版本）
  function renderQuotedFanGroup(tweet) {
    if (!tweet.quotedFanGroup) return '';
    const fanGroup = tweet.quotedFanGroup;
    return `
 <div style="margin-bottom: 16px; border: 1px solid var(--x-border-color); border-radius: 16px; padding: 16px; background-color: var(--x-bg-hover); transition: background-color 0.2s; cursor: pointer; " onclick="event.stopPropagation(); showXToast('粉丝群详情功能开发中', 'info');"
 onmouseover="this.style.backgroundColor='var(--x-bg-secondary)'"
 onmouseout="this.style.backgroundColor='var(--x-bg-hover)'">
 <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 12px;">
 <img src="${fanGroup.avatar}"
 style="width: 48px; height: 48px; border-radius: 50%; object-fit: cover;"
 alt="${fanGroup.name}">
 <div style="flex: 1; min-width: 0;">
 <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 4px;">
 <span style="color:var(--x-text-primary); font-size: 17px; font-weight: 700;">${fanGroup.name}</span>
 <span style="padding: 2px 8px; background-color:var(--x-bg-primary); color: var(--x-accent); font-size: 11px; border-radius: 4px; font-weight: 600; border: 1px solid var(--x-accent); ">粉丝群</span>
 </div>
 <div style="color:var(--x-text-secondary); font-size: 15px;">
 ${fanGroup.memberCount} 位成员
 </div>
 </div>
 </div>
 ${
   fanGroup.threshold
     ? `
 <div style="padding: 12px; background-color:var(--x-bg-primary); border-radius: 8px; border-left: 3px solid var(--x-accent); margin-bottom: 12px; ">
 <div style="color:var(--x-text-primary); font-weight: 600; font-size: 13px; margin-bottom: 6px;">
 入群门槛
 </div>
 <div style="color:var(--x-text-secondary); font-size: 15px; line-height: 1.4;">
 ${fanGroup.threshold}
 </div>
 </div>
 `
     : ''
 }
 <div style="display: flex; align-items: center; justify-content: space-between; padding-top: 12px; border-top: 1px solid var(--x-border-color); ">
 <div style="color:var(--x-text-secondary); font-size: 13px; font-style: italic;">
 引用粉丝群
 </div>
 <div style="display: flex; align-items: center; gap: 4px; color: var(--x-accent); font-size: 13px; font-weight: 600; ">
 <span>申请加入</span>
 <svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: currentColor;">
 <g><path d="M8.58 7.17l4.24 4.24-4.24 4.24 1.42 1.42 5.66-5.66-5.66-5.66z"></path></g>
 </svg>
 </div>
 </div>
 </div>
 `;
  }
  // 格式化详情页时间
  function formatDetailTime(timestamp) {
    // 如果没有timestamp，返回默认值
    if (!timestamp) {
      return '未知时间';
    }
    const date = new Date(timestamp); // 检查日期是否有效
    if (isNaN(date.getTime())) {
      return '未知时间';
    }
    const formatter = new Intl.DateTimeFormat('zh-CN', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
    return formatter.format(date);
  }
  // 详情页点赞功能
  function toggleDetailLike(tweetId, element) {
    const isLiked = element.dataset.liked === 'true';
    const currentLikes = parseInt(element.dataset.likes);
    if (isLiked) {
      element.dataset.liked = 'false';
      element.dataset.likes = (currentLikes - 1).toString();
      element.style.color = '#71767b';
    } else {
      element.dataset.liked = 'true';
      element.dataset.likes = (currentLikes + 1).toString();
      element.style.color = '#f91880';
    }
  }
  // 详情页评论相关功能
  function handleDetailCommentInput(event) {
    const textarea = event.target;
    updateDetailReplyButtonState();

    // 回车发送评论
    if (event.key === 'Enter' && !event.shiftKey) {
      event.preventDefault();
      const hasText = textarea.value.trim().length > 0;
      const hasSticker = window.getSelectedCommentSticker
        ? window.getSelectedCommentSticker() !== null
        : selectedCommentSticker !== null;
      if (hasText || hasSticker) {
        submitDetailComment();
      }
    }
  }
  // 更新回复按钮状态（支持表情包）
  function updateDetailReplyButtonState() {
    const textarea = document.getElementById('detail-comment-input');
    const replyBtn = document.getElementById('detail-reply-btn');
    if (!replyBtn) return;

    const hasText = textarea && textarea.value.trim().length > 0;
    const hasSticker = window.getSelectedCommentSticker
      ? window.getSelectedCommentSticker() !== null
      : selectedCommentSticker !== null;

    if (hasText || hasSticker) {
      replyBtn.style.opacity = '1';
      replyBtn.disabled = false;
    } else {
      replyBtn.style.opacity = '0.5';
      replyBtn.disabled = true;
    }
  }

  function autoResizeDetail(textarea) {
    textarea.style.height = '20px';
    textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';
    updateDetailReplyButtonState();
  }
  async function submitDetailComment() {
    const textarea = document.getElementById('detail-comment-input');
    const content = textarea.value.trim();

    // 获取当前选中的表情包
    const currentSticker = window.getSelectedCommentSticker
      ? window.getSelectedCommentSticker()
      : selectedCommentSticker;

    console.log('📝 [表情包调试] currentSticker:', currentSticker);

    // 检查是否有内容或表情包
    if (content.length === 0 && !currentSticker) return; // 获取当前推文数据
    const currentTweetData = sessionStorage.getItem('currentTweetData');
    if (!currentTweetData) {
      showXToast('无法获取推文信息', 'error');
      return;
    }
    let tweetData;
    try {
      tweetData = JSON.parse(currentTweetData);
    } catch (e) {
      showXToast('推文数据解析失败', 'error');
      return;
    }
    console.log('📝 [提交评论] 开始处理评论提交');
    console.log('📝 [提交评论] 推文ID:', tweetData.id);
    console.log('📝 [提交评论] 推文作者:', tweetData.user.handle);
    console.log('📝 [提交评论] 当前用户:', window.userProfileData.handle);
    console.log('📝 [提交评论] 是否为用户推文:', tweetData.id.startsWith('user_')); // 检查是否为仅自己可见的帖子
    if (tweetData.privacy === 'private') {
      showXToast('私有帖子不支持回复功能', 'error');
      return;
    }
    const newComment = {
      id: 'detail_' + Date.now(),
      user: {
        name: window.userProfileData.name,
        handle: window.userProfileData.handle,
        avatar: window.userProfileData.avatar,
        verified: window.userProfileData.verified,
      },
      content: content,
      time: '刚刚',
      replies: [],
    }; // 如果有图片，添加图片数据
    if (detailCommentImageData) {
      newComment.image = {
        type: 'upload',
        content: detailCommentImageData,
      };
    }

    // 如果有表情包，添加表情包数据
    if (currentSticker) {
      newComment.sticker = {
        url: currentSticker.url,
        description: currentSticker.description,
      };
      console.log('📝 [表情包调试] 表情包已添加到newComment:', newComment.sticker);
    } else {
      console.log('📝 [表情包调试] 没有表情包数据');
    }
    console.log('📝 [提交评论] 新评论数据:', {
      id: newComment.id,
      content: newComment.content.substring(0, 50) + '...',
      hasImage: !!newComment.image,
      hasSticker: !!newComment.sticker,
    }); // 将评论添加到推文数据中
    if (!tweetData.comments) {
      tweetData.comments = [];
    }
    tweetData.comments.push(newComment); // 更新评论数量统计
    if (!tweetData.stats) {
      tweetData.stats = { comments: 0, retweets: 0, likes: 0, views: 0 };
    }
    tweetData.stats.comments = tweetData.comments.length;
    console.log('📝 [提交评论] 评论已添加到推文数据，当前评论总数:', tweetData.stats.comments); // 保存到数据库
    try {
      const xDb = getXDB(); // 判断推文类型
      const isUserTweet = tweetData.id.startsWith('user_');
      const isRetweetMention = tweetData._source === 'retweet_mention';
      const isNewTweetMention = tweetData._source === 'newtweet_mention';
      if (isRetweetMention) {
        console.log('📝 [提交评论] 这是 Mentions 转帖，保存到 Mentions 数据');
        const mentionsId = `mentions_${currentAccountId || 'main'}`;
        const mentionsData = await xDb.xAccountProfiles.get(mentionsId);
        if (mentionsData && mentionsData.data) {
          const retweetIndex = mentionsData.data.findIndex(m => m.id === tweetData.id && m.type === 'retweet');
          if (retweetIndex !== -1) {
            // 更新评论数据
            mentionsData.data[retweetIndex].comments = tweetData.comments; // 同步更新 stats
            if (!mentionsData.data[retweetIndex].stats) {
              mentionsData.data[retweetIndex].stats = tweetData.stats;
            } else {
              mentionsData.data[retweetIndex].stats.comments = tweetData.stats.comments;
            }
            await xDb.xAccountProfiles.put(mentionsData);
            console.log('✅ [提交评论] Mentions 转帖通知已更新，评论总数:', tweetData.comments.length);
          } else {
            console.warn('⚠️ [提交评论] 未在 Mentions 数据中找到对应的转帖通知:', tweetData.id);
          }
        } else {
          console.warn('⚠️ [提交评论] 未找到 Mentions 数据:', mentionsId);
        }
      } else if (isNewTweetMention) {
        console.log('📝 [提交评论] 这是 Mentions New Tweet，保存到 Mentions 数据');
        const mentionsId = `mentions_${currentAccountId || 'main'}`;
        const mentionsData = await xDb.xAccountProfiles.get(mentionsId);
        if (mentionsData && mentionsData.data) {
          const newTweetIndex = mentionsData.data.findIndex(
            m => m.id === tweetData._mentionId && m.type === 'newTweet',
          );
          if (newTweetIndex !== -1) {
            // 更新推文的评论数据
            if (!mentionsData.data[newTweetIndex].tweet) {
              mentionsData.data[newTweetIndex].tweet = {};
            }
            mentionsData.data[newTweetIndex].tweet.comments = tweetData.comments; // 同步更新 stats
            if (!mentionsData.data[newTweetIndex].tweet.stats) {
              mentionsData.data[newTweetIndex].tweet.stats = tweetData.stats;
            } else {
              mentionsData.data[newTweetIndex].tweet.stats.comments = tweetData.stats.comments;
            }
            await xDb.xAccountProfiles.put(mentionsData);
            console.log('✅ [提交评论] Mentions New Tweet 通知已更新，评论总数:', tweetData.comments.length);
          } else {
            console.warn('⚠️ [提交评论] 未在 Mentions 数据中找到对应的 New Tweet 通知:', tweetData._mentionId);
          }
        } else {
          console.warn('⚠️ [提交评论] 未找到 Mentions 数据:', mentionsId);
        }
      } else if (isUserTweet) {
        console.log('📝 [提交评论] 这是用户自己的推文，保存到 xUserTweets'); // 获取用户推文数据ID（按账号隔离）
        const userTweetsId = `userTweets_${currentAccountId || 'main'}`;
        const userTweetsData = await xDb.xUserTweets.get(userTweetsId);
        if (userTweetsData && userTweetsData.tweets) {
          console.log('📝 [提交评论] 找到用户推文数据，推文总数:', userTweetsData.tweets.length);
          const tweetIndex = userTweetsData.tweets.findIndex(t => t.id === tweetData.id);
          if (tweetIndex !== -1) {
            console.log('📝 [提交评论] 找到目标推文，索引:', tweetIndex); // 更新推文数据
            userTweetsData.tweets[tweetIndex] = tweetData; // 保存到数据库
            await xDb.xUserTweets.put(userTweetsData);
            console.log('✅ [提交评论] 用户推文数据已保存到数据库');
          } else {
            console.warn('⚠️ [提交评论] 未找到目标推文，推文ID:', tweetData.id);
          }
        } else {
          console.warn('⚠️ [提交评论] 未找到用户推文数据');
        }
      } else {
        console.log('📝 [提交评论] 这是主页推文，保存到 xTweetsData'); // 这是主页推文，更新到主页数据
        const tweetsData = await xDb.xTweetsData.get('tweets');
        if (tweetsData) {
          let updated = false; // 更新 forYouTweets
          if (tweetsData.forYouTweets) {
            const index = tweetsData.forYouTweets.findIndex(t => t.id === tweetData.id);
            if (index !== -1) {
              tweetsData.forYouTweets[index] = tweetData;
              updated = true;
              console.log('📝 [提交评论] 已更新 forYouTweets');
            }
          }
          // 更新 followingTweets
          if (tweetsData.followingTweets && !updated) {
            const index = tweetsData.followingTweets.findIndex(t => t.id === tweetData.id);
            if (index !== -1) {
              tweetsData.followingTweets[index] = tweetData;
              updated = true;
              console.log('📝 [提交评论] 已更新 followingTweets');
            }
          }
          if (updated) {
            await xDb.xTweetsData.put(tweetsData);
            console.log('✅ [提交评论] 主页推文数据已保存到数据库');
          } else {
            console.warn('⚠️ [提交评论] 未在主页数据中找到目标推文');
          }
        }
      }
      // 更新 sessionStorage 中的数据
      sessionStorage.setItem('currentTweetData', JSON.stringify(tweetData));
      console.log('✅ [提交评论] sessionStorage 已更新');
    } catch (saveError) {
      console.error('❌ [提交评论] 保存评论到数据库失败:', saveError);
      showXToast('评论保存失败: ' + saveError.message, 'error');
    }
    // 渲染新评论
    const commentsContainer = document.getElementById('detail-comments-container');
    console.log('📝 [表情包调试] 渲染前的newComment:', JSON.stringify(newComment, null, 2));
    const commentElement = createCommentElement(newComment);
    commentsContainer.appendChild(commentElement);
    console.log('📝 [提交评论] 评论已渲染到页面'); // 更新新添加的回复输入框头像（使用window.userProfileData确保获取最新账号数据）
    const replyUserAvatars = document.querySelectorAll('.reply-user-avatar');
    replyUserAvatars.forEach(avatar => {
      avatar.src = window.userProfileData.avatar;
    }); // 清空输入框和所有附件（使用统一的清理函数）
    if (window.clearCommentInput) {
      window.clearCommentInput();
    } else {
      // 后备清理逻辑
      textarea.value = '';
      textarea.style.height = '20px';
      if (detailCommentImageData) {
        removeDetailCommentImage();
      }
      // 清除表情包预览
      const preview = document.getElementById('comment-sticker-preview');
      if (preview) {
        preview.remove();
      }
      // 重置表情包选择
      if (window.setSelectedCommentSticker) {
        window.setSelectedCommentSticker(null);
      } else {
        selectedCommentSticker = null;
      }

      const replyBtn = document.getElementById('detail-reply-btn');
      replyBtn.style.opacity = '0.5';
      replyBtn.disabled = true;
    }
    showXToast('你的评论等待回复中', 'info'); // 触发AI回复 - 判断是否为用户自己的帖子
    const isOwnPost =
      tweetData.user && (tweetData.user.handle === userProfileData.handle || tweetData.id.startsWith('user_'));
    console.log('📝 [提交评论] 准备触发AI回复，isOwnPost:', isOwnPost); // 🔧 使用异步非阻塞方式触发AI回复，避免用户离开页面时中断导致的问题
    setTimeout(async () => {
      try {
        await generateUnifiedAIResponse(tweetData, newComment, {
          isOwnPost,
          commentType: 'main_comment',
          pageType: 'detail',
          parentComment: null,
        });
        console.log('✅ [提交评论] AI回复生成完成');
      } catch (error) {
        console.error('❌ [提交评论] AI回复生成失败:', error);
      }
    }, 100);
    console.log('✅ [提交评论] 评论提交流程完成（AI回复已异步触发）');
  }
  function renderDetailComments(comments) {
    const container = document.getElementById('detail-comments-container');
    container.innerHTML = '';
    if (!comments || comments.length === 0) return;
    console.log('📋 [渲染评论] 开始渲染评论，主评论数:', comments.length);
    comments.forEach(comment => {
      // 渲染主评论
      const commentElement = createCommentElement(comment);
      container.appendChild(commentElement); // 如果有楼中楼回复，也渲染它们
      if (comment.replies && comment.replies.length > 0) {
        console.log('📋 [渲染评论] 评论', comment.id, '有', comment.replies.length, '条楼中楼回复');
        comment.replies.forEach(reply => {
          const replyElement = createCommentElement(reply, true);
          container.appendChild(replyElement);
        });
      }
    });
    console.log('✅ [渲染评论] 评论渲染完成'); // 更新所有回复输入框头像
    const replyUserAvatars = document.querySelectorAll('.reply-user-avatar');
    replyUserAvatars.forEach(avatar => {
      avatar.src = userProfileData.avatar;
    });
  }
  // ============================================
  // 商业推贴提交处理
  // ============================================
  // 处理商业推贴提交
  async function handleBusinessPostSubmission(tweetData, businessTransferId) {
    try {
      console.log('💼 [商业推贴] 开始处理任务提交'); // 获取商业转账信息
      const xDb = getXDB();
      const businessTransfersId = `businessTransfers_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(businessTransfersId);
      if (!savedData || !savedData.data) {
        console.error('❌ 未找到商业转账数据');
        return;
      }
      const businessTransfer = savedData.data.find(t => t.transferId === businessTransferId);
      if (!businessTransfer) {
        console.error('❌ 未找到对应的商业转账');
        return;
      }
      console.log('✅ [商业推贴] 找到商业转账:', businessTransfer); // 查找对应的AI对话
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${businessTransfer.conversationId}`;
      const conversation = await xDb.xAccountProfiles.get(conversationId);
      if (!conversation) {
        console.error('❌ 未找到对话信息');
        showXToast('无法找到对应的对话，请手动联系对方', 'error');
        return;
      }
      console.log('✅ [商业推贴] 找到对话:', conversation); // 构建正确的对话数据结构
      const conversationData = {
        id: businessTransfer.conversationId,
        user: {
          name: businessTransfer.senderName,
          handle: businessTransfer.senderHandle,
          avatar: businessTransfer.senderAvatar,
          verified: false,
        },
      }; // 触发AI评估并发送私信
      await triggerBusinessTaskEvaluation(tweetData, businessTransfer, conversationData);
    } catch (error) {
      console.error('❌ [商业推贴] 处理失败:', error);
      showXToast('提交失败: ' + error.message, 'error');
    }
  }
  // 触发商业任务评估（AI自动发送私信）
  async function triggerBusinessTaskEvaluation(tweetData, businessTransfer, conversationData) {
    try {
      console.log('🤖 [商业任务评估] 开始AI评估流程'); // 第一步：先触发AI评论生成（第二个情景）
      console.log('📝 [商业任务评估] 步骤1：生成AI评论...'); // 标记这是商业化推贴
      const businessTweetData = {
        ...tweetData,
        _isBusinessPost: true,
        _businessTransferId: businessTransfer.transferId,
        _taskDescription: businessTransfer.taskDescription,
      }; // 调用发帖生成器
      await generateAIResponseForTweet(businessTweetData); // 第二步：等待评论生成完成后，延迟3秒再发送评估私信
      setTimeout(async () => {
        console.log('💬 [商业任务评估] 步骤2：发送AI评估私信...');
        showPhoneNotification({
          title: 'X',
          message: `${conversationData.user.name} 正在评估你的任务完成情况...`,
          avatar: conversationData.user.avatar,
          leftIcon: 'x',
        }); // 调用第九个情景的AI私信评估
        await generateBusinessTaskEvaluationMessage(tweetData, businessTransfer, conversationData);
      }, 3000); // 等待3秒让用户看到评论
    } catch (error) {
      console.error('❌ [商业任务评估] 失败:', error);
      showXToast('任务评估失败: ' + error.message, 'error');
    }
  }
  // 生成商业任务评估私信（调用第九个情景）
  async function generateBusinessTaskEvaluationMessage(tweetData, businessTransfer, conversationData) {
    try {
      console.log('💼 [AI评估] 开始生成评估私信'); // 构建评估上下文
      const evaluationContext = {
        isBusinessTaskEvaluation: true,
        tweetData: tweetData,
        businessTransfer: businessTransfer,
      }; // 调用第九个情景的私信生成器（续写模式）
      const messageData = {
        id: conversationData.id,
        user: conversationData.user,
      };
      const aiMessages = await generateMessageConversation(messageData, true, {
        isAutoMessage: true,
        businessTaskEvaluation: evaluationContext,
      });
      if (!aiMessages || aiMessages.length === 0) {
        console.error('❌ [AI评估] 未生成评估消息');
        return;
      }
      console.log('✅ [AI评估] 生成了评估消息:', aiMessages); // 保存AI评估消息到私信数据库
      const xDb = getXDB();
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${conversationData.id}`;
      const savedConversation = await xDb.xAccountProfiles.get(conversationId);
      if (savedConversation && savedConversation.data) {
        // 添加AI消息到对话记录
        aiMessages.forEach(msg => {
          savedConversation.data.messages.push({
            ...msg,
            isOwn: false,
            timestamp: new Date().toISOString(),
          });
        });
        await xDb.xAccountProfiles.put(savedConversation);
        console.log('✅ [AI评估] 评估消息已保存到数据库'); // 检查是否有转账消息（支付尾款、扣款或额外奖励）
        const transferMessages = aiMessages.filter(msg => msg.type === 'transfer');
        if (transferMessages.length > 0) {
          // 处理AI发起的转账（尾款支付）
          for (const transferMsg of transferMessages) {
            await handleAIBusinessPayment(transferMsg, businessTransfer, conversationData);
          }
        }
        // 显示通知
        setTimeout(() => {
          showPhoneNotification({
            title: 'X',
            message: `${conversationData.user.name} 已完成任务评估`,
            avatar: conversationData.user.avatar,
            leftIcon: 'x',
          });
        }, 1000);
      }
    } catch (error) {
      console.error('❌ [AI评估] 生成评估私信失败:', error);
    }
  }
  // 处理AI商业任务付款
  async function handleAIBusinessPayment(transferMessage, businessTransfer, conversationData) {
    try {
      console.log('💰 [AI付款] 处理商业任务付款:', transferMessage);
      const amount = parseFloat(transferMessage.amount || 0);
      if (amount <= 0) return; // 更新钱包余额
      await loadWalletData();
      const currentBalance = parseFloat(walletData.balance) || 0;
      walletData.balance = currentBalance + amount; // 添加交易记录
      const senderName = conversationData.user?.name || '对方';
      let transactionDesc = '';
      if (transferMessage.note) {
        transactionDesc = `${senderName} - ${transferMessage.note}`;
      } else {
        transactionDesc = `商业转账尾款 - ${senderName}`;
      }
      const transaction = {
        id: 'business_payment_' + Date.now(),
        description: transactionDesc,
        amount: amount,
        timestamp: new Date().toISOString(),
        type: 'business_transfer_remaining_in',
      };
      walletData.transactions.unshift(transaction);
      await saveWalletData(); // 更新商业转账状态
      const xDb = getXDB();
      const businessTransfersId = `businessTransfers_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(businessTransfersId);
      if (savedData && savedData.data) {
        const transfer = savedData.data.find(t => t.transferId === businessTransfer.transferId);
        if (transfer) {
          transfer.taskStatus = 'completed';
          transfer.completedAt = new Date().toISOString();
          await xDb.xAccountProfiles.put(savedData);
          console.log('✅ [AI付款] 商业转账状态已更新为已完成');
        }
      }
      console.log('✅ [AI付款] 付款完成，金额:', amount, '新余额:', walletData.balance); // 显示收款通知
      setTimeout(() => {
        showPhoneNotification({
          title: 'X Wallet',
          message: `已收款 $${amount.toFixed(2)}, 当前余额 $${walletData.balance.toFixed(2)}`,
          avatar: window.userProfileData?.avatar,
          leftIcon: 'x',
        });
      }, 2000);
    } catch (error) {
      console.error('❌ [AI付款] 处理付款失败:', error);
    }
  }
  // ▼▼▼ 【主要！！！】第二个情景：发帖生成器▼▼▼
  // 推进模式状态（发帖生成器专用）
  let isTweetProgressMode = false;
  let tweetProgressLongPressTimer = null; // 计算两个字符串的相似度（0-1之间，1表示完全相同）
  function calculateSimilarity(str1, str2) {
    if (str1 === str2) return 1;
    if (str1.length === 0 || str2.length === 0) return 0; // 使用最长公共子序列（LCS）算法的简化版本
    const longer = str1.length > str2.length ? str1 : str2;
    const shorter = str1.length > str2.length ? str2 : str1; // 计算字符匹配度
    let matches = 0;
    const shorterChars = shorter.split('');
    const longerChars = longer.split('');
    shorterChars.forEach(char => {
      const index = longerChars.indexOf(char);
      if (index !== -1) {
        matches++;
        longerChars.splice(index, 1); // 移除已匹配的字符，避免重复计数
      }
    }); // 相似度 = 匹配字符数 / 较长字符串长度
    const similarity = matches / longer.length; // 额外检测：如果较短字符串完全包含在较长字符串中，提高相似度
    if (longer.includes(shorter)) {
      return Math.max(similarity, shorter.length / longer.length);
    }
    return similarity;
  }
  async function generateAIResponseForTweet(tweetData, isReroll = false, isProgressMode = false) {
    try {
      // 🔧 使用统一的API配置加载工具
      const { db, xDb, apiConfig, xSettings } = await APIUtils.loadConfigAndSettings();
      const { userPrompt, worldSetting, boundCharacters } = xSettings; // 检测推文类型
      const isAccountTweet = tweetData._source === 'account';
      const isUserTweet = tweetData.id && tweetData.id.startsWith('user_');
      const isBusinessPost = tweetData.isBusinessPost === true;
      let targetProfileInfo;
      let isBoundCharacterAccount = false; // 是否为绑定角色的账户
      let boundCharacterIdForAccount = null; // 绑定角色的ID
      let isUserOwnTweet = isUserTweet; // 是否为用户自己的推文
      console.log('🔍 [发帖生成器] 推文类型检测:', {
        isAccountTweet,
        isUserTweet,
        isBusinessPost,
        tweetId: tweetData.id,
      });
      if (isAccountTweet) {
        // 账户推文：构建账户资料信息
        console.log('🔍 [AI生成] 检测到账户推文，加载账户资料'); // 尝试从当前查看的账户获取资料
        let accountData = currentViewingAccount; // 如果没有，尝试从数据库加载
        if (!accountData && tweetData._accountHandle) {
          const cleanHandle = tweetData._accountHandle.replace('@', '');
          accountData = await xDb.xAccountProfiles.get(cleanHandle);
        }
        if (accountData) {
          const accountInfo = accountData.accountInfo || accountData;
          targetProfileInfo = {
            name: accountInfo.name,
            handle: accountInfo.handle,
            avatar: accountInfo.avatar,
            verified: accountInfo.verified || false,
            verificationType: accountInfo.verificationType || 'none',
            publicIdentity: accountInfo.publicIdentity || '',
            bio: accountInfo.bio || '',
            knownIdentityCharacters: [], // 账户没有已知身份角色概念
          };
          console.log('✅ [AI生成] 已加载账户资料:', targetProfileInfo.name); // 检查该账户是否为绑定角色
          if (boundCharacters && boundCharacters.length > 0) {
            const allXProfiles = await xDb.xCharacterProfiles.toArray();
            const cleanHandle = accountInfo.handle.replace('@', '');
            for (const charId of boundCharacters) {
              const xProfile = allXProfiles.find(p => p.characterId === charId);
              if (xProfile && xProfile.xHandle === cleanHandle) {
                isBoundCharacterAccount = true;
                boundCharacterIdForAccount = charId;
                console.log('🎭 [AI生成] 识别到绑定角色账户:', accountInfo.name, '(', charId, ')');
                break;
              }
            }
          }
        } else {
          // 如果找不到账户资料，使用推文中的用户信息
          console.warn('⚠️ [AI生成] 未找到账户资料，使用推文用户信息');
          targetProfileInfo = {
            name: tweetData.user.name,
            handle: tweetData.user.handle,
            avatar: tweetData.user.avatar,
            verified: tweetData.user.verified || false,
            verificationType: tweetData.user.verificationType || 'none',
            publicIdentity: '',
            bio: '',
            knownIdentityCharacters: [],
          };
        }
      } else if (isUserTweet) {
        // 用户自己的推文：使用用户X个人资料信息
        console.log('✅ [发帖生成器] 检测到用户推文，使用用户资料');
        targetProfileInfo = StringBuilders.buildUserXProfileInfo(window.userProfileData);
      } else {
        // 主页推文（其他人发的）：使用统一资料获取系统获取发帖人资料
        console.log('🔍 [发帖生成器] 检测到主页推文，查询发帖人资料:', tweetData.user.handle);
        try {
          const posterProfile = await StringBuilders.getUnifiedProfile(tweetData.user.handle, {
            userProfileInfo: window.userProfileData,
          });
          if (posterProfile) {
            console.log('✅ [发帖生成器] 已获取发帖人资料:', posterProfile.name); // 检查发帖人是否为绑定角色
            if (posterProfile.type === 'character' && boundCharacters.includes(posterProfile.characterId)) {
              isBoundCharacterAccount = true;
              boundCharacterIdForAccount = posterProfile.characterId;
              console.log('🎭 [发帖生成器] 发帖人是绑定角色:', posterProfile.name);
            }
            targetProfileInfo = {
              name: posterProfile.name,
              handle: posterProfile.handle,
              avatar: posterProfile.avatar,
              verified: posterProfile.verified || false,
              verificationType: posterProfile.xProfile?.xVerified ? 'verified' : 'none',
              publicIdentity: posterProfile.publicIdentity || '',
              bio: posterProfile.bio || '',
              knownIdentityCharacters: [], // 其他人的推文，不使用用户的已知身份角色
            };
            isUserOwnTweet = false; // 明确标记这不是用户自己的推文
          } else {
            console.warn('⚠️ [发帖生成器] 未找到发帖人资料，使用推文用户信息');
            targetProfileInfo = {
              name: tweetData.user.name,
              handle: tweetData.user.handle,
              avatar: tweetData.user.avatar,
              verified: tweetData.user.verified || false,
              verificationType: tweetData.user.verificationType || 'none',
              publicIdentity: '',
              bio: '',
              knownIdentityCharacters: [],
            };
            isUserOwnTweet = false;
          }
        } catch (error) {
          console.error('❌ [发帖生成器] 获取发帖人资料失败:', error); // 回退到使用推文中的用户信息
          targetProfileInfo = {
            name: tweetData.user.name,
            handle: tweetData.user.handle,
            avatar: tweetData.user.avatar,
            verified: tweetData.user.verified || false,
            verificationType: tweetData.user.verificationType || 'none',
            publicIdentity: '',
            bio: '',
            knownIdentityCharacters: [],
          };
          isUserOwnTweet = false;
        }
      }
      const userXProfileInfo = targetProfileInfo;
      console.log('📋 [发帖生成器] 最终资料信息:', {
        name: userXProfileInfo.name,
        handle: userXProfileInfo.handle,
        isUserOwnTweet,
        isBoundCharacterAccount,
        boundCharacterIdForAccount,
      }); // 获取知道用户身份的角色信息（仅用于用户自己的推文）
      let knownIdentityCharactersInfo = '';
      if (isUserOwnTweet && userXProfileInfo.knownIdentityCharacters.length > 0 && boundCharacters.length > 0) {
        const allChats = await db.chats.toArray();
        const knownCharacters = allChats.filter(
          chat => !chat.isGroup && userXProfileInfo.knownIdentityCharacters.includes(chat.id),
        );
        if (knownCharacters.length > 0) {
          knownIdentityCharactersInfo = '\n\n【知道用户身份的角色】：';
          for (const char of knownCharacters) {
            let xProfile = await xDb.xCharacterProfiles.get(char.id);
            if (xProfile) {
              knownIdentityCharactersInfo += `\n- ${xProfile.xName} (${xProfile.xHandle}): 知道用户身份，可能会对用户的帖子进行互动`;
              if (char.history && char.history.length > 0) {
                const recentHistory = char.history.slice(-5);
                knownIdentityCharactersInfo += '\n 最近互动记忆：';
                recentHistory.forEach(msg => {
                  if (msg.role === 'assistant' && msg.content) {
                    knownIdentityCharactersInfo += `\n - ${msg.content.substring(0, 80)}...`;
                  }
                });
              }
            }
          }
          knownIdentityCharactersInfo += '\n\n注意：这些角色可能会对用户的帖子进行评论，但概率不要太高，要自然。';
        }
      }
      // Token计数器
      let tokenCount = 0; // 1. 提示词 + 世界书
      let systemPrompt = StringBuilders.buildBaseSystemPrompt({
        userPrompt,
        worldSetting,
      });
      tokenCount = TokenUtils.logTokenUsage('发帖生成器', '基础系统提示词', systemPrompt, tokenCount); // 1.5. 获取适用的世界书内容
      const worldBooksOptions = { boundCharacters: [] };
      if (isBoundCharacterAccount && boundCharacterIdForAccount) {
        // 如果发帖人是绑定角色，只传入该角色ID
        worldBooksOptions.boundCharacters = [boundCharacterIdForAccount];
        console.log('📚 [发帖生成器] 加载绑定角色的世界书');
      } else if (isUserOwnTweet) {
        // 用户自己的推文：传入所有绑定角色
        worldBooksOptions.boundCharacters = boundCharacters;
        console.log('📚 [发帖生成器] 加载用户所有绑定角色的世界书');
      } else {
        // 其他人的推文：不加载世界书
        worldBooksOptions.boundCharacters = [];
        console.log('📚 [发帖生成器] 跳过世界书（非用户推文）');
      }
      const worldBooksContent = await StringBuilders.getApplicableWorldBooks('tweetDetail', worldBooksOptions);
      if (worldBooksContent) {
        systemPrompt += worldBooksContent;
        tokenCount = TokenUtils.logTokenUsage('发帖生成器', '世界书内容', worldBooksContent, tokenCount);
      }
      // 2. 核心任务说明（根据模式不同调整）
      const tweetAuthor = isUserOwnTweet ? '用户' : `${userXProfileInfo.name} (${userXProfileInfo.handle})`;
      if (isProgressMode) {
        // 计算时间流逝
        const tweetTimestamp = tweetData.timestamp || Date.now();
        const now = Date.now();
        const minutesPassed = Math.floor((now - tweetTimestamp) / (1000 * 60));
        const hoursPassed = Math.floor(minutesPassed / 60);
        const daysPassed = Math.floor(hoursPassed / 24);
        let timePassedDesc;
        if (daysPassed > 0) {
          timePassedDesc = `${daysPassed}天${hoursPassed % 24}小时`;
        } else if (hoursPassed > 0) {
          timePassedDesc = `${hoursPassed}小时${minutesPassed % 60}分钟`;
        } else {
          timePassedDesc = `${minutesPassed}分钟`;
        }
        systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 核心任务：推进帖子互动 🎯
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
你是X社交平台的互动生成器。${tweetAuthor}的帖子已发布一段时间，你的任务是：
✅ 生成**新的**评论和互动（在已有评论基础上继续）
✅ 更新互动数据（点赞、转发、浏览量应该增加）
❌ 绝对不能生成${tweetAuthor}本人发表的任何内容
❌ 绝对不能重复已有评论的内容或观点
**时间信息**：
- 帖子发布已过去：${timePassedDesc}
- 已有评论数量：${tweetData.comments?.length || 0} 条
**推进模式生成策略**：
1. **优先生成楼中楼回复**（70%）：
- 对已有评论进行回复、补充或讨论
- 使用 replyTo 字段指定回复对象
- 可以赞同、质疑、或提出新角度
2. **次要生成新顶层评论**（30%）：
- 必须带有明显的时间感（"刚看到"、"终于找到"、"现在才发现"等）
- 角度必须与所有已有评论完全不同
- 可以是迟到者的独特视角或冷静分析
3. **内容创新要求**：
- 不要重复任何已有的观点、表达或句式
- 提供新的信息、角度或情绪
- 互动数据应反映热度持续（点赞、转发、浏览量增加）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━`;
      } else {
        systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🚫 核心任务说明 🚫
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
你是X社交平台的互动生成器。${tweetAuthor}刚发布了一条新帖子，你的任务是：
✅ 生成其他X平台用户对这条帖子的评论和反应
❌ 绝对不能生成${tweetAuthor}本人发表的任何内容
**明确：${tweetAuthor}已经发布了推文，你只负责生成别人的回应！**
${
  !isUserOwnTweet && !isBoundCharacterAccount
    ? `⚠️ **特别注意**：这是${tweetAuthor}发布的推文，与当前用户无关。
- 应该生成普通路人用户的评论
- 评论者是看到这条推文的陌生网友
- 不要假设评论者与${tweetAuthor}有任何私人关系`
    : ''
}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━`;
      }
      const coreTaskSection = systemPrompt.substring(systemPrompt.lastIndexOf('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━'));
      tokenCount = TokenUtils.logTokenUsage('发帖生成器', '核心任务说明', coreTaskSection, tokenCount); // 3. 角色资料（互动反应场景）
      let charactersInfo = ''; // 🔧 确定传递给角色资料的用户信息
      // 如果是绑定角色的推文，需要传递真实的用户资料（用于判断身份识别）
      // 如果是用户自己的推文，传递用户资料
      // 如果是其他人的推文，不加载角色资料
      const userInfoForCharacter =
        isBoundCharacterAccount || isUserOwnTweet ? StringBuilders.buildUserXProfileInfo(window.userProfileData) : null;
      if (isBoundCharacterAccount && boundCharacterIdForAccount) {
        // 如果发帖人是绑定角色，只加载该角色的信息
        console.log('📋 [发帖生成器] 发帖人是绑定角色，只加载该角色信息（传递真实用户资料以判断身份识别）');
        charactersInfo = await StringBuilders.buildCompleteCharacterInfo(
          [boundCharacterIdForAccount],
          userInfoForCharacter, // 传递真实用户资料
          'reaction',
        );
      } else if (isUserOwnTweet) {
        // 用户自己的推文：加载所有绑定角色信息（这些角色可能会评论）
        console.log('📋 [发帖生成器] 用户推文，加载所有绑定角色信息');
        charactersInfo = await StringBuilders.buildCompleteCharacterInfo(
          boundCharacters,
          userInfoForCharacter,
          'reaction',
        );
      } else {
        // 其他人的推文（非绑定角色）：不加载任何角色信息，让AI生成路人评论
        console.log('📋 [发帖生成器] 其他人的推文，不加载用户角色（将生成路人评论）');
        charactersInfo = '';
      }
      if (charactersInfo) {
        systemPrompt += charactersInfo;
        tokenCount = TokenUtils.logTokenUsage('发帖生成器', '角色资料信息', charactersInfo, tokenCount);
      } else {
        console.log('ℹ️ [发帖生成器] 跳过角色资料（非用户推文或无绑定角色）');
      }
      // 添加角色关系册（仅在用户推文或绑定角色推文时）
      if ((isUserOwnTweet || isBoundCharacterAccount) && boundCharacters && boundCharacters.length > 0) {
        const relationshipsInfo = await StringBuilders.buildCharacterRelationships(boundCharacters, currentAccountId);
        if (relationshipsInfo) {
          systemPrompt += relationshipsInfo;
          tokenCount = TokenUtils.logTokenUsage('发帖生成器', '角色关系网络', relationshipsInfo, tokenCount);
        }
      }
      if (knownIdentityCharactersInfo) {
        systemPrompt += knownIdentityCharactersInfo;
        tokenCount = TokenUtils.logTokenUsage('发帖生成器', '已知身份角色', knownIdentityCharactersInfo, tokenCount);
      }
      // 3.5. 检测推文中的@提及，读取被提及账户的资料
      let mentionedAccountsInfo = '';
      const mentionRegex = /@(\w+)/g;
      const mentions = [...tweetData.content.matchAll(mentionRegex)];
      if (mentions.length > 0) {
        console.log(`📢 [发帖生成器] 检测到${mentions.length}个@提及`);
        const mentionHandles = [...new Set(mentions.map(m => m[1]))]; // 去重
        for (const handle of mentionHandles) {
          try {
            // 使用统一资料获取系统
            // 如果是用户自己的推文，传递用户资料；否则传递发帖人资料
            const mentionedProfile = await StringBuilders.getUnifiedProfile(`@${handle}`, {
              userProfileInfo: isUserOwnTweet ? window.userProfileData : null,
            });
            if (mentionedProfile) {
              const mentionStart = systemPrompt.length;
              systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📢 被@提及的账户资料 📢
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
推文中提到了 ${mentionedProfile.handle}，以下是该账户的详细信息：
`; // 格式化资料
              systemPrompt += StringBuilders.formatProfileForPrompt(mentionedProfile, {
                includeType: true,
                includeTweets: true,
                includeRelationships: true,
              });
              systemPrompt += `
⚠️ 被@提及的影响：
- 该账户看到自己被@提及后，可能会来评论区互动
- 出现概率根据以下因素决定：
* 与发帖者的关系（认识/陌生）
* 推文内容的相关性
* 该账户的活跃度和性格
- 如果该账户来评论，必须严格使用上述资料信息
- 评论内容要符合被@的情境（如被请教、被吐槽、被感谢等）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
              const mentionSection = systemPrompt.substring(mentionStart);
              tokenCount = TokenUtils.logTokenUsage(
                '发帖生成器',
                `@提及账户 ${mentionedProfile.handle}`,
                mentionSection,
                tokenCount,
              );
            }
          } catch (error) {
            console.error(`❌ [发帖生成器] 读取@${handle}资料失败:`, error);
          }
        }
      }
      // 4. 用户资料
      const userConstraintsStart = systemPrompt.length;
      systemPrompt += StringBuilders.buildUniversalConstraints(userXProfileInfo);
      const userConstraints = systemPrompt.substring(userConstraintsStart);
      tokenCount = TokenUtils.logTokenUsage('发帖生成器', '用户资料约束', userConstraints, tokenCount); // 4.5. 如果是推进模式，添加现有评论上下文
      if (isProgressMode && tweetData.comments && tweetData.comments.length > 0) {
        const existingCommentsStart = systemPrompt.length;
        systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
⚠️ 【已有评论上下文 - 严禁重复】⚠️
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
以下是该帖子**已存在**的所有评论（共${tweetData.comments.length}条），**绝对不能**生成与这些内容相似或重复的评论：
`;
        tweetData.comments.forEach((comment, index) => {
          systemPrompt += `${index + 1}. ${comment.user.name} (${comment.user.handle}): "${comment.content}"`;
          if (comment.sticker) {
            systemPrompt += ` [含表情包: ${comment.sticker.description}]`;
          }
          if (comment.image) {
            systemPrompt += ` [含图片]`;
          }
          systemPrompt += `\n`;
          if (comment.replies && comment.replies.length > 0) {
            comment.replies.forEach(reply => {
              systemPrompt += ` └─ ${reply.user.name} (${reply.user.handle}): "${reply.content}"`;
              if (reply.sticker) {
                systemPrompt += ` [含表情包: ${reply.sticker.description}]`;
              }
              if (reply.image) {
                systemPrompt += ` [含图片]`;
              }
              systemPrompt += `\n`;
            });
          }
        });
        systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🚫 【严格要求 - 必须遵守】🚫
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1. **绝对禁止**重复上述任何评论的观点、内容或表达方式
2. **绝对禁止**使用与上述评论相似的句式或措辞
3. **必须生成**全新的、不同角度的评论
4. 新评论应该：
- 提出完全不同的观点或看法
- 使用不同的表达方式和语气
- 可以是对已有评论的**补充回复**（楼中楼，使用replyTo字段）
- 可以从时间角度切入（如"刚看到"、"终于找到这个帖子"等）
- 可以是新角度的提问、质疑或讨论
5. 如果实在找不到新角度，优先生成楼中楼回复而非新评论
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
        const existingComments = systemPrompt.substring(existingCommentsStart);
        tokenCount = TokenUtils.logTokenUsage('发帖生成器', '已有评论上下文', existingComments, tokenCount);
      }
      systemPrompt += `
【生成要求】：
- 生成${isProgressMode ? '3-8' : '3-15'}条评论，内容多样化（简短/深度/表情符号），支持楼中楼回复，全年龄适宜
${
  isProgressMode
    ? `- ⚠️ **推进模式特殊要求**：
* 优先生成楼中楼回复（对已有评论的回复）而非新的顶层评论
* 新顶层评论必须有明显的时间感（如"刚看到"、"现在才发现"等）
* 新评论角度要与已有评论**完全不同**，不要重复任何观点
* 可以是后来者的补充、质疑、或从全新角度的讨论`
    : ''
}
${
  isBusinessPost
    ? `- 💼 **商业推文特殊要求**：
* 这是一条商业化推文（广告/推广性质），数据应该更高
* 互动数据（点赞、转发、浏览量）应该是普通推文的1.5-3倍
* 评论区应该有30-50%是正面支持性评论（"支持！"、"好棒"、"已下单"等）
* 20-30%是询问相关信息的评论（"在哪买"、"多少钱"、"怎么联系"等）
* 10-20%可以是中性或轻微质疑的评论（保持真实感）
* 评论风格应该更像粉丝/潜在客户，而非批评者
* 如果用户有较高知名度，应该体现出粉丝经济效应`
    : ''
}
- 引用转发处理：如帖子含引用内容，评论可涉及用户观点和被引用原内容
- 公众身份影响：知名度越高，讨论热度和互动数据越多
- 除了绑定角色外，其他用户头像统一：https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg
- 图片支持：评论可以包含文字图片（10-20%的评论带图），用于展示图片视频等媒体，图片描述应详细具体
【🔒 隐私保护规则 - 路人评论限制】：
🚨 路人评论者（非绑定角色/关系NPC的普通用户）只能基于X平台公开信息：
✅ 可以使用：X姓名、X句柄、X简介、公开身份
❌ 禁止提及：真实姓名、真实职业、私人关系、未公开的身份信息
❌ 禁止使用：只有亲密关系才知道的称呼（如"老师"、"同学"、"同事"等，除非是公开身份）
❌ 禁止提及：角色人设描述中的私密细节
示例说明：
- ✅ 正确："@handle 姐姐太美了"（基于公开身份"网红"）
- ❌ 错误："@handle 张老师这节课讲得真好"（泄露了真实职业"老师"和真实姓氏）
- ❌ 错误："@handle 李老师今天也这么漂亮"（泄露了真实姓名）
⚠️ 只有已绑定的关系NPC才能提及私密信息（因为他们是角色的私人关系）
【情侣角色回复规则】：
${
  userXProfileInfo.verificationType === 'couple' && userXProfileInfo.coupleCharacterName
    ? `- 用户的情侣是 ${userXProfileInfo.coupleCharacterName}（公开关系）
- 出现概率应很低（10-20%，与帖子无关时更低）
- 评论围绕帖子主题，自然体现亲密关系但不过分强调
- 粉丝群体限制：仅当双方为明星/网红/公众人物时才可能生成1-2条CP粉丝评论，普通情侣严禁生成"磕CP""嗑糖"等粉丝向评论`
    : ''
}
【JSON返回格式】：
\`\`\`json
{
"stats": {retweets, likes, views, comments},
"comments": [评论数组]
}
\`\`\`
评论对象结构：
- user: {name, handle, avatar, verified}
- content: 评论文本 (可与sticker同时存在)
- timeOffset: 相对推文发布的分钟数（负数，如-5表示推文发布后5分钟的评论）
- sticker: {url: "表情包链接", description: "表情包描述"} (可选，约10-15%评论使用)
- image: {type: "description", content: "图片文字描述"} (可选，10-20%的评论带图)
- replies: [回复数组] (可选，楼中楼回复，不超过3层)
- replyTo: "@被回复者句柄" (楼中楼回复时必填)
【表情包使用规则】：
- 表情包仅限使用世界书中提供的真实链接，严禁虚构或编造链接
- 表情包与文字内容可以同时存在，用于增强表达效果
- 使用频率控制在约10-15%的评论中，保持自然
- sticker对象包含url和description两个必需字段

关键规则：
1. verified字段必须是布尔值(true/false)
2. stats中所有数字必须是纯数字
3. timeOffset必须是负数，表示评论发布在推文之后多少分钟（如-5, -10, -30等）
4. 支持多层对话链：A评论 → B回复A(replyTo:"@A") → C回复B(replyTo:"@B")
5. sticker字段只能使用世界书中存在的真实链接，禁止虚构`;
      const formatSection = systemPrompt.substring(systemPrompt.lastIndexOf('【JSON返回格式】'));
      tokenCount = TokenUtils.logTokenUsage('发帖生成器', 'JSON格式要求', formatSection, tokenCount); // 构建消息内容，支持图片识别
      const messageContent = []; // 添加基础文本内容
      let contentText = `请为这条推文生成社交互动数据：
推文内容："${tweetData.content}"
${tweetData.location ? `位置：${tweetData.location}` : ''}`; // 如果有附带链接，添加完整链接信息
      if (tweetData.link) {
        contentText += '\n\n【附带链接】：';
        if (tweetData.link.title) contentText += `\n标题：${tweetData.link.title}`;
        if (tweetData.link.url) contentText += `\n地址：${tweetData.link.url}`;
        if (tweetData.link.description) contentText += `\n描述：${tweetData.link.description}`;
        if (tweetData.link.thumbnail) contentText += '\n[含链接首图]';
      }
      // 如果有引用内容，添加引用信息
      if (tweetData.quotedTweet) {
        const quoted = tweetData.quotedTweet;
        const quotedType = quoted.type === 'tweet' ? '推文' : '评论';
        contentText += `
【引用${quotedType}】：
原作者：${quoted.user.name} (${quoted.user.handle})${quoted.user.verified ? ' ✓已认证' : ''}
发布时间：${quoted.time}
原内容："${quoted.content}"`; // 如果引用内容包含图片，添加图片信息
        if (quoted.image) {
          if (quoted.image.type === 'description') {
            contentText += `
原图片描述：${quoted.image.content}`;
          } else if (quoted.image.type === 'upload') {
            contentText += `
原图片：包含上传的图片内容`;
          }
        }
        // 如果引用内容包含位置信息
        if (quoted.location) {
          contentText += `
原位置：${quoted.location}`;
        }
        contentText += `
注意：这是一条引用转发，用户对原${quotedType}进行了评论并转发。AI回复应该考虑到这个引用关系和上下文，生成的评论可能会同时涉及用户的评论和被引用的原内容。`;
      }
      // 如果有粉丝群引用，添加粉丝群信息
      if (tweetData.quotedFanGroup) {
        const fanGroup = tweetData.quotedFanGroup;
        contentText += `
【引用粉丝群】：
群名：${fanGroup.name}
当前成员数：${fanGroup.memberCount || 0} 位
入群门槛：${fanGroup.threshold || '无'}
注意：这是一条转发粉丝群链接的推文，用户在宣传/分享自己的粉丝群。AI回复应该：
1. 考虑粉丝群的主题和门槛要求
2. 评论者可能对加入粉丝群表示兴趣，询问详情
3. 评论者可能讨论入群门槛是否合理
4. 如果门槛涉及金钱，可能有人讨论价格
5. 真实粉丝会表示支持，普通路人会好奇询问，也可能有质疑的声音
6. 评论应该围绕"粉丝群招募"这个核心话题展开`;
      }
      messageContent.push({ type: 'text', text: contentText }); // 如果有上传的图片，添加图片内容
      if (tweetData.image) {
        if (tweetData.image.type === 'upload' && tweetData.image.content) {
          // 单图上传
          messageContent.push({
            type: 'image_url',
            image_url: { url: tweetData.image.content },
          });
        } else if (tweetData.image.type === 'uploads' && tweetData.image.images && tweetData.image.images.length > 0) {
          // 多图上传
          tweetData.image.images.forEach((img, index) => {
            if (img.content) {
              messageContent.push({
                type: 'image_url',
                image_url: { url: img.content },
              });
            }
          });
        } else if (tweetData.image.type === 'description') {
          // 文字描述
          messageContent.push({
            type: 'text',
            text: `图片描述：${tweetData.image.content}`,
          });
        }
      }
      const messages = [{ role: 'user', content: messageContent }]; // 记录上下文信息token
      const contextText = messageContent.map(c => c.text || '[图片]').join(' ');
      tokenCount = TokenUtils.logTokenUsage('发帖生成器', '上下文信息', contextText, tokenCount); // 最终统计
      TokenUtils.logFinalPrompt('发帖生成器', systemPrompt, contextText); // 🔧 使用统一的API请求工具
      const aiResponseContent = await APIUtils.sendAIRequest({
        apiConfig,
        systemPrompt,
        messages,
        temperature: 0.8,
      }); // 调试用户身份识别信息
      console.log('用户身份识别调试信息（发帖AI回复）:');
      console.log('- 用户X资料:', userXProfileInfo);
      console.log('- 知道用户身份的角色数量:', userXProfileInfo.knownIdentityCharacters.length);
      if (knownIdentityCharactersInfo) {
        console.log('- 知道用户身份的角色信息已添加到AI上下文');
      }
      // 🔧 使用统一的JSON解析工具
      let interactionData = APIUtils.parseJSONResponse(aiResponseContent); // 🔧 使用统一的后处理工具
      interactionData = await APIUtils.postProcessData(interactionData, userXProfileInfo); // 验证数据格式
      if (!interactionData.stats || !interactionData.comments) {
        throw new Error('AI返回的数据格式不正确');
      }
      // 如果是推进模式，检测并过滤重复评论
      if (isProgressMode && tweetData.comments && tweetData.comments.length > 0) {
        const existingComments = tweetData.comments;
        const newComments = interactionData.comments || []; // 过滤重复评论
        const filteredComments = newComments.filter(newComment => {
          const newContent = newComment.content.toLowerCase().trim(); // 检查是否与现有评论重复
          const isDuplicate = existingComments.some(existingComment => {
            const existingContent = existingComment.content.toLowerCase().trim(); // 相似度检测：完全相同或高度相似（超过70%相同）
            if (existingContent === newContent) return true; // 计算简单的相似度（基于公共子串）
            const similarity = calculateSimilarity(newContent, existingContent);
            if (similarity > 0.7) {
              console.log(`🔍 [重复检测] 发现相似评论 (${(similarity * 100).toFixed(0)}%):`, {
                existing: existingComment.content,
                new: newComment.content,
              });
              return true;
            }
            // 检查楼中楼回复是否重复
            if (existingComment.replies && existingComment.replies.length > 0) {
              return existingComment.replies.some(reply => {
                const replyContent = reply.content.toLowerCase().trim();
                if (replyContent === newContent) return true;
                const replySimilarity = calculateSimilarity(newContent, replyContent);
                if (replySimilarity > 0.7) {
                  console.log(`🔍 [重复检测] 发现与楼中楼回复相似的评论 (${(replySimilarity * 100).toFixed(0)}%)`);
                  return true;
                }
                return false;
              });
            }
            return false;
          });
          return !isDuplicate;
        });
        const removedCount = newComments.length - filteredComments.length;
        if (removedCount > 0) {
          console.log(`✅ [去重] 移除了 ${removedCount} 条重复评论，保留 ${filteredComments.length} 条新评论`);
          interactionData.comments = filteredComments;
        }
        // 如果所有新评论都被过滤掉了，提示用户
        if (filteredComments.length === 0) {
          showXToast('AI生成的评论与已有内容重复，已自动过滤', 'warning');
          return; // 不保存重复内容
        }
      }
      // 为评论分配ID和时间戳
      const timestamp = Date.now();
      let tweetTimestamp = tweetData.timestamp || timestamp; // 确保 tweetTimestamp 是数字格式（处理可能的Date对象或ISO字符串）
      if (typeof tweetTimestamp !== 'number') {
        if (tweetTimestamp instanceof Date) {
          tweetTimestamp = tweetTimestamp.getTime();
        } else if (typeof tweetTimestamp === 'string') {
          tweetTimestamp = new Date(tweetTimestamp).getTime();
        } else {
          tweetTimestamp = timestamp;
        }
      }
      // 验证转换后的时间戳有效性
      if (isNaN(tweetTimestamp) || tweetTimestamp <= 0) {
        console.warn('⚠️ [发帖生成器] 推文时间戳无效，使用当前时间');
        tweetTimestamp = timestamp;
      }
      interactionData.comments.forEach((comment, index) => {
        comment.id = `ai_${timestamp}_${index}`; // 将timeOffset转换为实际时间戳
        if (isProgressMode) {
          // 推进模式：新评论应该是最近发布的，使用当前时间附近
          // 忽略AI生成的timeOffset，因为它是相对于推文发布时间的
          const minutesAgo = Math.floor(Math.random() * 60); // 0-60分钟前
          comment.timestamp = timestamp - minutesAgo * 60 * 1000;
          delete comment.timeOffset;
        } else {
          // 正常模式：基于推文发布时间计算
          if (comment.timeOffset !== undefined) {
            // timeOffset是负数，表示推文发布后多少分钟
            comment.timestamp = tweetTimestamp + Math.abs(comment.timeOffset) * 60 * 1000;
            delete comment.timeOffset; // 删除临时字段
          } else if (!comment.timestamp) {
            // 如果没有timeOffset，随机生成一个时间戳
            comment.timestamp = tweetTimestamp + (5 + Math.random() * 30) * 60 * 1000;
          }
        }
        // 为回复分配ID和时间戳
        if (comment.replies && comment.replies.length > 0) {
          comment.replies.forEach((reply, replyIndex) => {
            reply.id = `ai_${timestamp}_${index}_${replyIndex}`;
            if (isProgressMode) {
              // 推进模式：回复时间应该在评论之后几分钟
              reply.timestamp = comment.timestamp + (1 + Math.random() * 10) * 60 * 1000;
              delete reply.timeOffset;
            } else {
              // 正常模式：基于推文发布时间计算
              if (reply.timeOffset !== undefined) {
                reply.timestamp = tweetTimestamp + Math.abs(reply.timeOffset) * 60 * 1000;
                delete reply.timeOffset;
              } else if (!reply.timestamp) {
                // 回复时间晚于评论
                reply.timestamp = comment.timestamp + (1 + Math.random() * 10) * 60 * 1000;
              }
            }
          });
        }
      }); // 更新推文详情页面的数据
      await updateTweetDetailWithAI(tweetData.id, interactionData, isReroll, isProgressMode); // 如果当前显示的是这条推文的详情页，重新加载完整数据并显示
      const detailPage = document.getElementById('x-tweet-detail-page');
      if (detailPage && detailPage.style.display === 'flex') {
        const currentTweetData = sessionStorage.getItem('currentTweetData');
        if (currentTweetData) {
          const currentTweet = JSON.parse(currentTweetData);
          if (currentTweet.id === tweetData.id) {
            // 从数据库重新加载最新的推文数据（包含AI反应）
            const db = getXDB();
            const accountTweetsId = `userTweets_${currentAccountId || 'main'}`;
            const userTweets = await db.xUserTweets.get(accountTweetsId);
            if (userTweets) {
              const updatedTweet = userTweets.tweets.find(t => t.id === tweetData.id);
              if (updatedTweet) {
                await showTweetDetail(updatedTweet);
                console.log('✅ 详情页已刷新，显示最新AI反应');
              }
            }
          }
        }
      }
      // 显示手机样式通知
      const isEnglish = currentLanguage === 'en';
      const userAvatar = window.userProfileData?.avatar || 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg';
      showPhoneNotification({
        title: 'X',
        message: isProgressMode
          ? isEnglish
            ? 'Your post interaction has been progressed!'
            : '帖子互动已推进！'
          : isEnglish
          ? 'Someone replied to your post!'
          : '你的帖子有人回复了哦！',
        avatar: userAvatar,
        leftIcon: 'x',
      }); // 🎁 如果是商业推文且不是重新生成/推进模式，触发打赏生成器
      if (isBusinessPost && !isReroll && !isProgressMode) {
        console.log('🎁 [打赏生成器] 检测到商业推文，开始生成打赏数据'); // 异步执行，不阻塞主流程
        generateTipsForBusinessPost(tweetData, interactionData).catch(err => {
          console.error('生成打赏失败（静默）:', err);
        });
      }
      // 🔓 检测拉黑解除触发（如果推文中@了某人）
      if (!isReroll && !isProgressMode) {
        const mentionRegex = /@(\w+)/g;
        const mentions = [...tweetData.content.matchAll(mentionRegex)];
        if (mentions.length > 0 && userXProfileInfo && userXProfileInfo.handle) {
          const userHandle = userXProfileInfo.handle; // 异步检测每个@提及
          mentions.forEach(match => {
            const targetHandle = `@${match[1]}`;
            checkUnblockTrigger(userHandle, targetHandle, 'mention', tweetData.content).catch(err => {
              console.error('拉黑解除检测失败（静默）:', err);
            });
          });
        }
      }
    } catch (error) {
      console.error('生成AI回复失败:', error);
      showXToast(`回复生成失败: ${error.message}`, 'error');
    }
  }
  // 切换推进模式（发帖生成器专用）
  window.toggleTweetProgressMode = function () {
    // 检查当前推文类型
    const currentTweetData = sessionStorage.getItem('currentTweetData');
    if (currentTweetData) {
      try {
        const tweet = JSON.parse(currentTweetData);
        const isAccountTweet = tweet._source === 'account';
        const isSearchTweet = tweet._source === 'search'; // 账户推文和搜索推文只能使用推进模式，不允许切换到重回
        if ((isAccountTweet || isSearchTweet) && isTweetProgressMode) {
          showXToast('该推文只支持推进模式', 'warning');
          return;
        }
      } catch (e) {
        console.warn('解析推文数据失败:', e);
      }
    }
    isTweetProgressMode = !isTweetProgressMode;
    updateTweetRerollButtonUI();
    if (isTweetProgressMode) {
      showXToast('已切换到推进模式 - 将追加新评论', 'success');
    } else {
      showXToast('已切换到重新生成模式 - 将覆盖现有评论', 'info');
    }
  }; // 更新重回按钮UI（发帖生成器专用）
  function updateTweetRerollButtonUI() {
    const rerollBtn = document.getElementById('reroll-replies-btn');
    if (!rerollBtn) return; // 获取当前主题的文本颜色
    const textColor =
      getComputedStyle(document.getElementById('x-social-screen')).getPropertyValue('--x-text-primary').trim() ||
      '#fff'; // 检查当前推文类型
    let isAccountOrSearchTweet = false;
    const currentTweetData = sessionStorage.getItem('currentTweetData');
    if (currentTweetData) {
      try {
        const tweet = JSON.parse(currentTweetData);
        isAccountOrSearchTweet = tweet._source === 'account' || tweet._source === 'search';
      } catch (e) {
        console.warn('解析推文数据失败:', e);
      }
    }
    if (isTweetProgressMode) {
      // 推进模式 - 心电图图标
      rerollBtn.innerHTML = `
 <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="${textColor}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
 <path d="M3 12h4l3 8l4 -16l3 8h4" />
 </svg>
 `;
      rerollBtn.setAttribute(
        'title',
        isAccountOrSearchTweet ? '推进帖子互动（追加新评论）' : '推进帖子互动（追加新评论）\n长按切换到重新生成模式',
      );
    } else {
      // 重新生成模式 - 星形图标（仅用户推文可用）
      rerollBtn.innerHTML = `
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: ${textColor};">
 <g>
 <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
 </g>
 </svg>
 `;
      rerollBtn.setAttribute('title', '重新生成回复\n长按切换到推进模式');
    }
  }
  // 长按事件处理（发帖生成器专用）
  window.handleTweetRerollButtonMouseDown = function () {
    tweetProgressLongPressTimer = setTimeout(() => {
      toggleTweetProgressMode();
    }, 800);
  };
  window.handleTweetRerollButtonMouseUp = function () {
    if (tweetProgressLongPressTimer) {
      clearTimeout(tweetProgressLongPressTimer);
      tweetProgressLongPressTimer = null;
    }
  }; // 重新生成AI回复或推进评论
  async function rerollAIReplies() {
    // 清除长按定时器
    if (tweetProgressLongPressTimer) {
      clearTimeout(tweetProgressLongPressTimer);
      tweetProgressLongPressTimer = null;
    }
    try {
      // 获取当前推文ID
      const currentTweetId = getCurrentTweetId();
      if (!currentTweetId) {
        showXToast('无法获取当前推文信息', 'error');
        return;
      }
      // 获取推文数据
      const xTweetsData = await getXTweetsData();
      const currentTweet = xTweetsData.find(tweet => tweet.id === currentTweetId);
      if (!currentTweet) {
        showXToast('未找到推文数据', 'error');
        return;
      }
      // 检查推文类型并记录日志
      const isAccountTweet = currentTweet._source === 'account';
      const isSearchTweet = currentTweet._source === 'search';
      const isUserTweet = currentTweet.id && currentTweet.id.startsWith('user_');
      console.log(`🔄 [重回/推进] 推文类型:`, {
        isAccountTweet,
        isSearchTweet,
        isUserTweet,
        currentMode: isTweetProgressMode ? '推进模式' : '重回模式',
        tweetId: currentTweetId,
      }); // 安全检查：账户推文和搜索推文只能使用推进模式
      if ((isAccountTweet || isSearchTweet) && !isTweetProgressMode) {
        console.warn('⚠️ [重回/推进] 账户/搜索推文不支持重回模式，自动切换到推进模式');
        isTweetProgressMode = true;
        updateTweetRerollButtonUI();
      }
      // 显示加载状态
      const rerollBtn = document.getElementById('reroll-replies-btn');
      const originalHTML = rerollBtn.innerHTML;
      const textColor =
        getComputedStyle(document.getElementById('x-social-screen')).getPropertyValue('--x-text-primary').trim() ||
        '#fff';
      rerollBtn.innerHTML = `
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: ${textColor}; animation: spin 1s linear infinite;">
 <g>
 <path d="M12 4V2A10 10 0 0 0 2 12h2a8 8 0 0 1 8-8z" />
 </g>
 </svg>
 `;
      rerollBtn.style.pointerEvents = 'none'; // 根据模式和推文类型显示不同提示
      let toastMessage = '正在推进帖子互动...';
      if (!isTweetProgressMode && isUserTweet) {
        toastMessage = '正在重新生成回复...';
      } else if (isAccountTweet) {
        toastMessage = '正在推进账户推文互动...';
      } else if (isSearchTweet) {
        toastMessage = '正在推进搜索推文互动...';
      }
      showXToast(toastMessage, 'info'); // 调用AI生成（传递推进模式参数）
      await generateAIResponseForTweet(currentTweet, !isTweetProgressMode, isTweetProgressMode); // 恢复按钮状态
      rerollBtn.innerHTML = originalHTML;
      rerollBtn.style.pointerEvents = 'auto';
    } catch (error) {
      console.error('AI回复操作失败:', error);
      showXToast(isTweetProgressMode ? '推进失败，请检查网络连接' : '重新生成失败，请检查网络连接', 'error'); // 恢复按钮状态
      const rerollBtn = document.getElementById('reroll-replies-btn');
      updateTweetRerollButtonUI();
      rerollBtn.style.pointerEvents = 'auto';
    }
  }
  // 获取当前显示的推文ID
  function getCurrentTweetId() {
    const tweetDetailContainer = document.getElementById('tweet-detail-container');
    return tweetDetailContainer ? tweetDetailContainer.getAttribute('data-tweet-id') : null;
  }
  // 获取推文数据 - 简化版本，直接返回当前推文数据
  async function getXTweetsData() {
    // 因为推文详情页面只显示单个推文，我们可以从DOM中重构数据
    const currentTweetId = getCurrentTweetId();
    if (!currentTweetId) return []; // 从sessionStorage获取推文数据（如果有）
    const tweetData = sessionStorage.getItem('currentTweetData');
    if (tweetData) {
      try {
        return [JSON.parse(tweetData)];
      } catch (e) {
        console.warn('无法解析推文数据:', e);
      }
    }
    return [];
  }
  // ▼▼▼ 【次要】打赏生成器：为商业推文生成随机打赏 ▼▼▼
  /**
   * 为商业推文生成打赏数据
   * @param {Object} tweetData - 推文数据
   * @param {Object} interactionData - AI生成的互动数据
   */
  async function generateTipsForBusinessPost(tweetData, interactionData) {
    try {
      console.log('🎁 [打赏生成器] 开始为商业推文生成打赏'); // 🔧 使用统一的API配置加载工具
      const { apiConfig } = await APIUtils.loadConfigAndSettings(); // 获取用户X资料
      const userXProfileInfo = StringBuilders.buildUserXProfileInfo(window.userProfileData); // 构建AI提示词
      let systemPrompt = `你是X社交平台的打赏生成器。用户刚发布了一条商业推文（广告/推广性质），现在需要生成粉丝/支持者的打赏记录。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 核心任务：生成打赏记录 🎯
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
**用户信息**：
- 用户名：${userXProfileInfo.name}
- 用户句柄：${userXProfileInfo.handle}
- 认证状态：${userXProfileInfo.verified ? '已认证' : '未认证'}
${userXProfileInfo.publicIdentity ? `- 公众身份：${userXProfileInfo.publicIdentity}` : ''}
- 粉丝影响力：${userXProfileInfo.publicIdentity ? '有一定影响力' : '普通用户'}
**商业推文内容**：
"${tweetData.content}"
**推文数据表现**：
- 👍 喜欢数：${interactionData.stats.likes}
- 🔄 转发数：${interactionData.stats.retweets}
- 💬 评论数：${interactionData.stats.comments}
- 👀 浏览量：${interactionData.stats.views}
**评论区反馈**（前5条）：
${
  interactionData.comments && interactionData.comments.length > 0
    ? interactionData.comments
        .slice(0, 5)
        .map((c, i) => `${i + 1}. ${c.user.name}: "${c.content}"`)
        .join('\n')
    : '暂无评论'
}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
💰 打赏生成规则 💰
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
**数量规则**：
根据推文数据表现和用户影响力生成3-8条打赏记录：
- 浏览量 < 1000：生成3-4条
- 浏览量 1000-5000：生成4-6条
- 浏览量 > 5000：生成6-8条
- 如果用户有公众身份，+1条
**金额规则**：
根据用户影响力和数据表现：
- 普通用户：每条 $5-$30
- 有公众身份：每条 $10-$50
- 认证用户：每条 $15-$80
- 如果推文数据特别好（点赞>500），可能出现1-2条大额打赏（$50-$150）
**打赏者信息**：
- name: 粉丝/支持者的名字（真实感，不要太夸张）
- handle: X平台句柄（格式：@username）
- note: 打赏备注（简短、真诚、与推文内容相关）
**备注示例**：
- "支持！"
- "很棒的产品！"
- "已下单~"
- "期待后续"
- "感谢分享"
- "继续加油！"
- "值得推荐"
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📋 JSON返回格式 📋
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
\`\`\`json
{
"tips": [
{
 "name": "打赏者姓名",
 "handle": "@username",
 "amount": 25.00,
 "note": "打赏备注"
}
]
}
\`\`\`
**重要规则**：
1. amount必须是数字类型，保留两位小数
2. handle必须以@开头
3. note要简短（不超过20字）、真诚、与推文内容相关
4. 打赏者不能是用户本人
5. 每条打赏记录独立，不要重复`;
      const messages = [
        {
          role: 'user',
          content: '请根据以上信息生成打赏记录。',
        },
      ]; // 🔧 使用统一的API请求工具
      const aiResponseContent = await APIUtils.sendAIRequest({
        apiConfig,
        systemPrompt,
        messages,
        temperature: 0.8,
      });
      console.log('🎁 [打赏生成器] AI原始响应:', aiResponseContent); // 🔧 使用统一的JSON解析工具
      const tipsData = APIUtils.parseJSONResponse(aiResponseContent);
      if (!tipsData.tips || !Array.isArray(tipsData.tips)) {
        throw new Error('AI返回的数据格式不正确');
      }
      console.log(`🎁 [打赏生成器] 成功生成${tipsData.tips.length}条打赏记录`); // 调度打赏通知（在5小时内随机时间触发）
      scheduleTipNotifications(tweetData.id, tipsData.tips);
    } catch (error) {
      console.error('🎁 [打赏生成器] 生成打赏失败:', error);
      throw error;
    }
  }
  /**
   * 调度打赏通知，在5小时内随机时间触发
   * @param {string} tweetId - 推文ID
   * @param {Array} tips - 打赏记录数组
   */
  function scheduleTipNotifications(tweetId, tips) {
    console.log(`🎁 [打赏调度] 开始调度${tips.length}条打赏通知`);
    const FIVE_HOURS_MS = 5 * 60 * 60 * 1000; // 5小时的毫秒数
    const now = Date.now();
    tips.forEach((tip, index) => {
      // 在5小时内随机生成一个触发时间
      const randomDelay = Math.random() * FIVE_HOURS_MS;
      console.log(`🎁 [打赏调度] 打赏 #${index + 1} 将在 ${Math.round(randomDelay / 1000 / 60)} 分钟后触发`); // 设置定时器
      setTimeout(() => {
        processTipNotification(tweetId, tip);
      }, randomDelay);
    });
  }
  /**
   * 处理单个打赏通知
   * @param {string} tweetId - 推文ID
   * @param {Object} tip - 打赏数据
   */
  async function processTipNotification(tweetId, tip) {
    try {
      console.log('🎁 [打赏通知] 触发打赏:', tip); // 1. 更新钱包余额
      await loadWalletData();
      if (!walletData.isActivated) {
        console.warn('🎁 [打赏通知] 钱包未激活，跳过打赏');
        return;
      }
      const amount = parseFloat(tip.amount);
      walletData.balance += amount; // 2. 添加交易记录
      const transaction = {
        id: 'tip_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
        description: `来自 ${tip.name} 的打赏`,
        amount: amount,
        timestamp: new Date().toISOString(),
        type: 'tip',
        note: tip.note,
        tipper: {
          name: tip.name,
          handle: tip.handle,
        },
        tweetId: tweetId,
      };
      walletData.transactions.unshift(transaction); // 3. 保存钱包数据
      await saveWalletData();
      console.log(`🎁 [打赏通知] 打赏已入账: +$${amount.toFixed(2)}`); // 4. 显示手机样式通知
      showPhoneNotification({
        title: `收到来自 ${tip.name} 的赠金`,
        message: `+$${amount.toFixed(2)} - ${tip.note}`,
        avatar: window.userProfileData?.avatar,
        leftIcon: 'custom',
        leftIconHtml: `
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: #22c55e;">
 <g><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm.31-8.86c-1.77-.45-2.34-.94-2.34-1.67 0-.84.79-1.43 2.1-1.43 1.38 0 1.9.66 1.94 1.64h1.71c-.05-1.34-.87-2.57-2.49-2.97V5H10.9v1.69c-1.51.32-2.72 1.3-2.72 2.81 0 1.79 1.49 2.69 3.66 3.21 1.95.46 2.34 1.15 2.34 1.87 0 .53-.39 1.39-2.1 1.39-1.6 0-2.23-.72-2.32-1.64H8.04c.1 1.7 1.36 2.66 2.86 2.97V19h2.34v-1.67c1.52-.29 2.72-1.16 2.73-2.77-.01-2.2-1.9-2.96-3.66-3.42z"></path></g>
 </svg>
 `,
        duration: 4000,
      }); // 5. 显示toast提示
      showXToast(`收到打赏 +$${amount.toFixed(2)}`, 'success');
    } catch (error) {
      console.error('🎁 [打赏通知] 处理打赏失败:', error);
    }
  }
  // ▲▲▲ 【次要】打赏生成器 ▲▲▲
  // ▲▲▲ 【主要！！！】第二个情景：发帖生成器 ▲▲▲
  // 保存用户发布的帖子
  async function saveUserTweet(tweetData) {
    try {
      const db = getXDB();
      const accountTweetsId = `userTweets_${currentAccountId || 'main'}`; // 获取当前账户的推文数据
      let userTweets = await db.xUserTweets.get(accountTweetsId);
      if (!userTweets) {
        userTweets = { id: accountTweetsId, tweets: [] };
      }
      // 为推文添加账户ID标识
      tweetData.accountId = currentAccountId || 'main'; // 添加新推文到开头（最新的在前面）
      userTweets.tweets.unshift(tweetData); // 保存更新后的数据
      await db.xUserTweets.put(userTweets);
      console.log('用户推文已保存到账户:', currentAccountId, tweetData); // 🔔 自动触发第十个情景：为最新推文生成 Mentions 通知
      // 异步执行，不阻塞主流程
      generateMentionsForLatestTweet(tweetData).catch(err => {
        console.error('生成Mentions通知失败（静默）:', err);
      });
    } catch (error) {
      console.error('保存用户推文失败:', error);
    }
  }
  // 获取当前账户发布的所有帖子
  async function getUserTweets() {
    try {
      const db = getXDB();
      const accountTweetsId = `userTweets_${currentAccountId || 'main'}`;
      const userTweets = await db.xUserTweets.get(accountTweetsId);
      return userTweets ? userTweets.tweets : [];
    } catch (error) {
      console.error('获取用户推文失败:', error);
      return [];
    }
  }
  // 多选删除相关变量
  let isMultiSelectMode = false;
  let selectedTweets = new Set(); // 显示推文操作菜单（置顶/删除）
  function showTweetActionMenu(tweetId, event) {
    // 阻止事件冒泡
    if (event) {
      event.preventDefault();
      event.stopPropagation();
    }
    // 移除已存在的菜单
    const existingMenu = document.getElementById('tweet-action-menu');
    if (existingMenu) {
      existingMenu.remove();
    }
    // 获取推文数据
    getUserTweets().then(userTweets => {
      const tweet = userTweets.find(t => t.id === tweetId);
      if (!tweet) return;
      const isPinned = tweet.pinned || false; // 创建菜单
      const menu = document.createElement('div');
      menu.id = 'tweet-action-menu';
      menu.style.cssText = `
 position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color:#000; border: 1px solid #2f3336; border-radius: 16px; min-width: 280px; z-index: 10000; box-shadow: 0 8px 24px rgba(0,0,0,0.5); `;
      menu.innerHTML = `
 <div style="padding: 12px 0;">
 <div onclick="toggleTweetPin('${tweetId}')" style="padding: 12px 16px; color: #fff; font-size: 15px; font-weight: 500; cursor: pointer; display: flex; align-items: center; gap: 12px; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(255,255,255,0.03)'" onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 32 32" style="width: 18px; height: 18px; fill: currentColor;">
 <path d="M20.743 14.815l-0.933-12.065h5.191c0.414 0 0.75-0.336 0.75-0.75s-0.336-0.75-0.75-0.75v0h-18c-0.414 0-0.75 0.336-0.75 0.75s0.336 0.75 0.75 0.75v0h5.432l-1.275 12.103c-3.213 0.959-5.574 3.738-5.904 7.113l-0.003 0.034c0 0.414 0.336 0.75 0.75 0.75h9.25v7.25c0 0.414 0.336 0.75 0.75 0.75s0.75-0.336 0.75-0.75v0-7.25h9.25c0.414-0 0.75-0.336 0.75-0.75v0c0-3.017-2.35-5.787-6.007-7.185zM12.104 16.081c0.096-0.035 0.179-0.085 0.249-0.148l-0.001 0.001 0.005-0.003c0.126-0.117 0.211-0.275 0.233-0.453l0-0.004 0.011-0.022 1.337-12.701h4.367l0.979 12.681c0.033 0.35 0.303 0.627 0.647 0.67l0.004 0c2.542 0.682 4.512 2.623 5.222 5.096l0.013 0.052h-18.341c0.729-2.54 2.714-4.49 5.222-5.157l0.052-0.012z"></path>
 </svg>
 <span>${isPinned ? '取消置顶' : '置顶到个人资料'}</span>
 </div>
 <div onclick="enterMultiSelectModeFromMenu('${tweetId}')" style="padding: 12px 16px; color: #fff; font-size: 15px; font-weight: 500; cursor: pointer; display: flex; align-items: center; gap: 12px; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(255,255,255,0.03)'" onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: currentColor;">
 <g><path d="M9 2C6.243 2 4 4.243 4 7v10c0 2.757 2.243 5 5 5h6c2.757 0 5-2.243 5-5V7c0-2.757-2.243-5-5-5H9zm0 2h6c1.654 0 3 1.346 3 3v10c0 1.654-1.346 3-3 3H9c-1.654 0-3-1.346-3-3V7c0-1.654 1.346-3 3-3zm6.207 3.793l-5.5 5.5-2.414-2.414-1.414 1.414 3.121 3.121.707.707.707-.707 6.207-6.207-1.414-1.414z"></path></g>
 </svg>
 <span>选择多条推文</span>
 </div>
 <div onclick="deleteSingleTweet('${tweetId}')" style="padding: 12px 16px; color: #f4212e; font-size: 15px; font-weight: 500; cursor: pointer; display: flex; align-items: center; gap: 12px; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(244,33,46,0.1)'" onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: currentColor;">
 <g><path d="M16 6V4.5C16 3.12 14.88 2 13.5 2h-3C9.11 2 8 3.12 8 4.5V6H3v2h1.06l.81 11.21C4.98 20.78 6.28 22 7.86 22h8.27c1.58 0 2.88-1.22 3-2.79L19.93 8H21V6h-5zm-6-1.5c0-.28.22-.5.5-.5h3c.27 0 .5.22.5.5V6h-4V4.5zm7.13 14.57c-.04.52-.47.93-1 .93H7.86c-.53 0-.96-.41-1-.93L6.07 8h11.85l-.79 11.07zM9 17v-6h2v6H9zm4 0v-6h2v6h-2z"></path></g>
 </svg>
 <span>删除</span>
 </div>
 </div>
 <div onclick="closeTweetActionMenu()" style="padding: 12px 16px; color: #71767b; font-size: 15px; font-weight: 500; cursor: pointer; text-align: center; border-top: 1px solid #2f3336; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='rgba(255,255,255,0.03)'" onmouseout="this.style.backgroundColor='transparent'">
 取消
 </div>
 `;
      document.body.appendChild(menu); // 点击菜单外部关闭
      setTimeout(() => {
        document.addEventListener('click', function closeMenuOnClickOutside(e) {
          if (!menu.contains(e.target)) {
            menu.remove();
            document.removeEventListener('click', closeMenuOnClickOutside);
          }
        });
      }, 100);
    });
  }
  // 关闭操作菜单
  window.closeTweetActionMenu = function () {
    const menu = document.getElementById('tweet-action-menu');
    if (menu) {
      menu.remove();
    }
  }; // 切换推文置顶状态
  window.toggleTweetPin = async function (tweetId) {
    try {
      const db = getXDB();
      const accountTweetsId = `userTweets_${currentAccountId || 'main'}`;
      const userTweets = await db.xUserTweets.get(accountTweetsId);
      if (userTweets && userTweets.tweets) {
        const tweet = userTweets.tweets.find(t => t.id === tweetId);
        if (tweet) {
          const wasPinned = tweet.pinned || false; // 如果要置顶，先取消其他推文的置顶
          if (!wasPinned) {
            userTweets.tweets.forEach(t => {
              if (t.pinned) {
                t.pinned = false;
              }
            });
          }
          // 切换当前推文的置顶状态
          tweet.pinned = !wasPinned; // 保存到数据库
          await db.xUserTweets.put(userTweets);
          showXToast(wasPinned ? '已取消置顶' : '推文已置顶', 'success'); // 关闭菜单并刷新显示
          closeTweetActionMenu();
          loadUserProfileTweets();
        }
      }
    } catch (error) {
      console.error('切换置顶状态失败:', error);
      showXToast('操作失败', 'error');
    }
  }; // 删除单条推文
  window.deleteSingleTweet = async function (tweetId) {
    const confirmDelete = confirm('确定要删除这条推文吗？删除后无法恢复。');
    if (!confirmDelete) return;
    try {
      const db = getXDB();
      const accountTweetsId = `userTweets_${currentAccountId || 'main'}`;
      const userTweets = await db.xUserTweets.get(accountTweetsId);
      if (userTweets && userTweets.tweets) {
        userTweets.tweets = userTweets.tweets.filter(tweet => tweet.id !== tweetId);
        await db.xUserTweets.put(userTweets); // 同时从主推文数据中删除
        const tweetsData = await db.xTweetsData.get('tweets');
        if (tweetsData) {
          let updated = false;
          if (tweetsData.forYouTweets) {
            const originalLength = tweetsData.forYouTweets.length;
            tweetsData.forYouTweets = tweetsData.forYouTweets.filter(tweet => tweet.id !== tweetId);
            if (tweetsData.forYouTweets.length !== originalLength) updated = true;
          }
          if (tweetsData.followingTweets) {
            const originalLength = tweetsData.followingTweets.length;
            tweetsData.followingTweets = tweetsData.followingTweets.filter(tweet => tweet.id !== tweetId);
            if (tweetsData.followingTweets.length !== originalLength) updated = true;
          }
          if (updated) {
            await db.xTweetsData.put(tweetsData);
          }
        }
        showXToast('推文已删除', 'success');
        closeTweetActionMenu();
        loadUserProfileTweets();
      }
    } catch (error) {
      console.error('删除推文失败:', error);
      showXToast('删除失败', 'error');
    }
  }; // 切换推文选择状态（用于多选模式）
  function toggleTweetSelection(tweetId) {
    if (!isMultiSelectMode) {
      enterMultiSelectMode();
    }
    const tweetEl = document.querySelector(`[data-tweet-id="${tweetId}"]`);
    if (!tweetEl) return;
    if (selectedTweets.has(tweetId)) {
      selectedTweets.delete(tweetId);
      tweetEl.classList.remove('selected');
      tweetEl.style.backgroundColor = '';
    } else {
      selectedTweets.add(tweetId);
      tweetEl.classList.add('selected');
      tweetEl.style.backgroundColor = 'color-mix(in srgb, var(--x-accent) , 0.1)';
    }
    updateDeleteUI();
  }
  // 从菜单进入多选模式并选中当前推文
  window.enterMultiSelectModeFromMenu = function (tweetId) {
    closeTweetActionMenu();
    enterMultiSelectMode();
    // 自动选中触发菜单的推文
    if (tweetId) {
      toggleTweetSelection(tweetId);
    }
  }; // 进入多选模式
  function enterMultiSelectMode() {
    isMultiSelectMode = true; // 显示删除工具栏
    showDeleteToolbar(); // 改变所有推文的样式
    document.querySelectorAll('.user-tweet-item').forEach(item => {
      item.style.borderLeft = '3px solid var(--x-accent)';
    });
  }
  // 退出多选模式
  window.exitMultiSelectMode = function () {
    isMultiSelectMode = false;
    selectedTweets.clear(); // 隐藏删除工具栏
    hideDeleteToolbar(); // 恢复所有推文的样式
    document.querySelectorAll('.user-tweet-item').forEach(item => {
      item.classList.remove('selected');
      item.style.backgroundColor = '';
      item.style.borderLeft = '';
    });
  }; // 显示删除工具栏
  function showDeleteToolbar() {
    let toolbar = document.getElementById('delete-toolbar');
    if (!toolbar) {
      toolbar = document.createElement('div');
      toolbar.id = 'delete-toolbar';
      toolbar.style.cssText = `
 position: fixed; bottom: 80px; left: 50%; transform: translateX(-50%); background-color:#000; border: 1px solid #333; border-radius: 20px; padding: 8px 16px; display: flex; align-items: center; gap: 12px; z-index: 1000; box-shadow: 0 4px 12px rgba(0,0,0,0.5); `;
      toolbar.innerHTML = `
 <button onclick="selectAllTweets()" style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 16px; padding: 6px 12px; font-size: 13px; cursor: pointer;">
 全选
 </button>
 <span id="selected-count" style="color: #fff; font-size: 14px;">已选择 0 条</span>
 <button onclick="deleteSelectedTweets()" style="background-color: #f91880; color: #fff; border: none; border-radius: 16px; padding: 6px 12px; font-size: 13px; cursor: pointer;">
 删除
 </button>
 <button onclick="exitMultiSelectMode()" style="background-color: #333; color: #fff; border: none; border-radius: 16px; padding: 6px 12px; font-size: 13px; cursor: pointer;">
 取消
 </button>
 `;
      document.body.appendChild(toolbar);
    }
    toolbar.style.display = 'flex';
  }
  // 隐藏删除工具栏
  function hideDeleteToolbar() {
    const toolbar = document.getElementById('delete-toolbar');
    if (toolbar) {
      toolbar.style.display = 'none';
    }
  }
  // 更新删除UI
  function updateDeleteUI() {
    const countEl = document.getElementById('selected-count');
    if (countEl) {
      countEl.textContent = `已选择 ${selectedTweets.size} 条`;
    }
  }
  // 全选推文
  window.selectAllTweets = function () {
    document.querySelectorAll('.user-tweet-item').forEach(item => {
      const tweetId = item.dataset.tweetId;
      if (!selectedTweets.has(tweetId)) {
        selectedTweets.add(tweetId);
        item.classList.add('selected');
        item.style.backgroundColor = 'color-mix(in srgb, var(--x-accent) , 0.1)';
      }
    });
    updateDeleteUI();
  }; // 删除选中的推文
  window.deleteSelectedTweets = async function () {
    if (selectedTweets.size === 0) return;
    const confirmDelete = confirm(`确定要删除选中的 ${selectedTweets.size} 条推文吗？删除后无法恢复。`);
    if (!confirmDelete) return;
    try {
      const db = getXDB(); // 获取当前账户的推文数据
      const accountTweetsId = `userTweets_${currentAccountId || 'main'}`;
      const userTweets = await db.xUserTweets.get(accountTweetsId);
      if (userTweets && userTweets.tweets) {
        // 过滤掉选中的推文
        userTweets.tweets = userTweets.tweets.filter(tweet => !selectedTweets.has(tweet.id)); // 保存更新后的数据
        await db.xUserTweets.put(userTweets); // 同时从主推文数据中删除（如果存在）
        const tweetsData = await db.xTweetsData.get('tweets');
        if (tweetsData) {
          let updated = false;
          if (tweetsData.forYouTweets) {
            const originalLength = tweetsData.forYouTweets.length;
            tweetsData.forYouTweets = tweetsData.forYouTweets.filter(tweet => !selectedTweets.has(tweet.id));
            if (tweetsData.forYouTweets.length !== originalLength) updated = true;
          }
          if (tweetsData.followingTweets) {
            const originalLength = tweetsData.followingTweets.length;
            tweetsData.followingTweets = tweetsData.followingTweets.filter(tweet => !selectedTweets.has(tweet.id));
            if (tweetsData.followingTweets.length !== originalLength) updated = true;
          }
          if (updated) {
            await db.xTweetsData.put(tweetsData);
          }
        }
        showXToast(`已删除 ${selectedTweets.size} 条推文`, 'success'); // 退出多选模式并刷新显示
        exitMultiSelectMode();
        loadUserProfileTweets();
      }
    } catch (error) {
      console.error('删除推文失败:', error);
      showXToast('删除失败', 'error');
    }
  }; // 加载用户个人页面的推文
  async function loadUserProfileTweets() {
    try {
      const userTweets = await getUserTweets();
      const container = document.getElementById('x-profile-tweets-container');
      if (userTweets.length === 0) {
        container.innerHTML = `
 <div style="padding: 60px 32px; text-align: center;">
 <div style="color: #71767b; font-size: 31px; font-weight: 800; margin-bottom: 8px;">还没有推文</div>
 <div style="color: #71767b; font-size: 15px;">当你发送第一条推文时，它会显示在这里。</div>
 </div>
 `;
      } else {
        // 将置顶推文排在最前面
        const sortedTweets = [...userTweets].sort((a, b) => {
          const aPinned = a.pinned || false;
          const bPinned = b.pinned || false;
          if (aPinned && !bPinned) return -1;
          if (!aPinned && bPinned) return 1;
          return 0; // 保持原有顺序
        });
        container.innerHTML = '';
        sortedTweets.forEach(tweet => {
          const tweetElement = createUserTweetElement(tweet);
          container.appendChild(tweetElement);
        });
      }
      // 更新帖子数量显示
      const headerCount = document.getElementById('x-profile-header-count');
      if (headerCount) {
        headerCount.textContent = `${userTweets.length} 帖子`;
      }
    } catch (error) {
      console.error('加载用户推文失败:', error);
    }
  }
  // 创建用户推文元素(个人页面版本)
  function createUserTweetElement(tweet) {
    const tweetEl = document.createElement('div');
    tweetEl.className = 'user-tweet-item';
    tweetEl.dataset.tweetId = tweet.id;
    tweetEl.style.cursor = 'pointer';
    tweetEl.style.position = 'relative';
    tweetEl.style.borderBottom = '1px solid var(--x-border-color)';
    tweetEl.style.display = 'block'; // 触摸事件处理变量
    let longPressTimer;
    let isLongPressed = false;
    let touchStartX = 0;
    let touchStartY = 0;
    let hasMoved = false;
    let lastTouchEndTime = 0; // 上次触摸结束时间，用于防抖
    const TOUCH_THRESHOLD = 15; // 滑动阈值（像素）
    const DEBOUNCE_TIME = 300; // 防抖时间（毫秒）
    tweetEl.addEventListener('touchstart', e => {
      // 记录初始触摸位置
      const touch = e.touches[0];
      touchStartX = touch.clientX;
      touchStartY = touch.clientY;
      hasMoved = false;
      longPressTimer = setTimeout(() => {
        if (!hasMoved) {
          // 只有没有移动时才触发长按
          isLongPressed = true; // 显示操作菜单（置顶/删除）
          showTweetActionMenu(tweet.id, e);
          e.preventDefault();
        }
      }, 800);
    });
    tweetEl.addEventListener('touchmove', e => {
      const touch = e.touches[0];
      const deltaX = Math.abs(touch.clientX - touchStartX);
      const deltaY = Math.abs(touch.clientY - touchStartY); // 如果移动距离超过阈值，标记为滑动
      if (deltaX > TOUCH_THRESHOLD || deltaY > TOUCH_THRESHOLD) {
        hasMoved = true;
        clearTimeout(longPressTimer); // 取消长按
      }
    });
    tweetEl.addEventListener('touchend', e => {
      clearTimeout(longPressTimer); // 防抖：防止快速重复触发
      const now = Date.now();
      if (now - lastTouchEndTime < DEBOUNCE_TIME) {
        console.log('🚫 [触摸] 防抖拦截，忽略重复触摸');
        e.preventDefault();
        return;
      }
      lastTouchEndTime = now; // 只有在没有滑动且没有长按的情况下才触发点击
      if (!isLongPressed && !hasMoved) {
        // 阻止后续的点击事件，防止移动端触发两次
        e.preventDefault();
        if (isMultiSelectMode) {
          toggleTweetSelection(tweet.id);
        } else {
          showTweetDetail(tweet);
        }
      } else if (isLongPressed) {
        // 长按后也要阻止点击事件
        e.preventDefault();
      }
      isLongPressed = false;
      hasMoved = false;
    }); // 桌面端鼠标事件保持原有逻辑
    let lastMouseUpTime = 0;
    tweetEl.addEventListener('mousedown', e => {
      // 只处理左键点击
      if (e.button !== 0) return;
      longPressTimer = setTimeout(() => {
        isLongPressed = true; // 显示操作菜单（置顶/删除）
        showTweetActionMenu(tweet.id, e);
        e.preventDefault();
      }, 800);
    });
    tweetEl.addEventListener('mouseup', e => {
      // 只处理左键点击
      if (e.button !== 0) return;
      clearTimeout(longPressTimer); // 防抖：防止快速重复点击
      const now = Date.now();
      if (now - lastMouseUpTime < DEBOUNCE_TIME) {
        console.log('🚫 [鼠标] 防抖拦截，忽略重复点击');
        return;
      }
      lastMouseUpTime = now;
      if (!isLongPressed) {
        if (isMultiSelectMode) {
          toggleTweetSelection(tweet.id);
        } else {
          showTweetDetail(tweet);
        }
      }
      isLongPressed = false;
    }); // 阻止默认的点击事件，防止与触摸/鼠标事件冲突
    tweetEl.addEventListener('click', e => {
      e.preventDefault();
      e.stopPropagation();
    }); // 格式化时间
    function formatTimeForProfile(timestamp) {
      const date = new Date(timestamp);
      const now = new Date();
      const diffInHours = Math.floor((now - date) / (1000 * 60 * 60));
      if (diffInHours < 1) {
        const diffInMinutes = Math.floor((now - date) / (1000 * 60));
        return diffInMinutes < 1 ? '刚刚' : `${diffInMinutes}分钟`;
      } else if (diffInHours < 24) {
        return `${diffInHours}小时`;
      } else {
        const diffInDays = Math.floor(diffInHours / 24);
        return diffInDays === 1 ? '1天' : `${diffInDays}天`;
      }
    }
    // 渲染媒体内容（支持多图）
    function renderProfileTweetMedia(tweet) {
      if (!tweet.image) return ''; // 文字描述类型
      if (tweet.image.type === 'description') {
        return `
 <div style="margin-top: 12px; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 12px; padding: 12px; box-sizing: border-box;">
 <div style="color:var(--x-text-primary); font-size: 14px; line-height: 1.4; white-space: pre-wrap; word-wrap: break-word; overflow-wrap: break-word; width: 100%; box-sizing: border-box;">${tweet.image.content}</div>
 </div>
 `;
      }
      // 单图上传
      else if (tweet.image.type === 'upload') {
        return `
 <div style="margin-top: 12px; border-radius: 12px; overflow: hidden;">
 <img src="${tweet.image.content}" style="width: 100%; max-height: 200px; object-fit: cover; display: block;" alt="推文图片">
 </div>
 `;
      }
      // 多图上传
      else if (tweet.image.type === 'uploads' && tweet.image.images && tweet.image.images.length > 0) {
        const imageCount = tweet.image.images.length;
        let gridTemplate = '';
        if (imageCount === 1) {
          gridTemplate = 'grid-template-columns: 1fr;';
        } else if (imageCount === 2) {
          gridTemplate = 'grid-template-columns: repeat(2, 1fr);';
        } else if (imageCount === 3) {
          gridTemplate = 'grid-template-columns: repeat(2, 1fr);';
        } else {
          gridTemplate = 'grid-template-columns: repeat(2, 1fr);';
        }
        const imagesHtml = tweet.image.images
          .map((img, index) => {
            const spanStyle = imageCount === 3 && index === 0 ? 'grid-column: span 2;' : '';
            return `
 <div style="${spanStyle}border-radius: 8px; overflow: hidden;">
 <img src="${img.content}" style="width: 100%; height: ${
              imageCount === 1 ? '200px' : '150px'
            }; object-fit: cover; display: block;" alt="推文图片${index + 1}">
 </div>
 `;
          })
          .join('');
        return `
 <div style="margin-top: 12px; display: grid; ${gridTemplate} gap: 4px;">
 ${imagesHtml}
 </div>
 `;
      }
      return '';
    }
    // 渲染链接内容
    function renderProfileTweetLink(tweet) {
      if (!tweet.link) return '';
      return `
 <div style="margin-top: 12px; border: 1px solid #333; border-radius: 12px; overflow: hidden;">
 ${
   tweet.link.thumbnail
     ? `
 <div style="width: 100%; height: 150px; background-color: #333;">
 <img src="${tweet.link.thumbnail}" style="width: 100%; height: 100%; object-fit: cover;" alt="链接预览图">
 </div>
 `
     : ''
 }
 <div style="padding: 12px;">
 <div style="color: #71767b; font-size: 13px; margin-bottom: 4px;">${tweet.link.url || '链接'}</div>
 ${
   tweet.link.title
     ? `<div style="color: #fff; font-size: 14px; font-weight: 600; margin-bottom: 4px;">${tweet.link.title}</div>`
     : ''
 }
 ${tweet.link.description ? `<div style="color: #71767b; font-size: 13px;">${tweet.link.description}</div>` : ''}
 </div>
 </div>
 `;
    }
    // 渲染个人主页引用内容的媒体（图片）
    function renderProfileQuotedTweetMedia(quoted) {
      if (!quoted.image) return '';
      if (quoted.image.type === 'description') {
        return `
 <div style="margin-top: 6px; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 6px; padding: 6px; box-sizing: border-box;">
 <div style="color:var(--x-text-primary); font-size: 12px; line-height: 1.4; white-space: pre-wrap; word-wrap: break-word; overflow-wrap: break-word; width: 100%; box-sizing: border-box;">${quoted.image.content}</div>
 </div>
 `;
      } else if (quoted.image.type === 'upload') {
        return `
 <div style="margin-top: 6px; border-radius: 6px; overflow: hidden;">
 <img src="${quoted.image.content}" style="width: 100%; max-height: 80px; object-fit: cover; display: block;" alt="引用图片">
 </div>
 `;
      }
      return '';
    }
    // 渲染引用推文内容
    function renderProfileQuotedTweet(tweet) {
      if (!tweet.quotedTweet) return '';
      const quoted = tweet.quotedTweet;
      const typeText = quoted.type === 'tweet' ? '推文' : '评论';
      return `
 <div style="margin-top: 12px; border: 1px solid var(--x-border-color); border-radius: 12px; padding: 12px; background-color: var(--x-bg-hover);">
 <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 8px;">
 <img src="${quoted.user.avatar}" style="width: 20px; height: 20px; border-radius: 50%;" alt="${quoted.user.name}">
 <span style="color:var(--x-text-primary); font-size: 13px; font-weight: 600;">${quoted.user.name}</span>
 ${
   quoted.user.verified
     ? '<svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: var(--x-accent);"><g><path d="M22.25 12c0-1.43-.88-2.67-2.19-3.34.46-1.39.2-2.9-.81-3.91s-2.52-1.27-3.91-.81c-.66-1.31-1.91-2.19-3.34-2.19s-2.67.88-3.33 2.19c-1.4-.46-2.91-.2-3.92.81s-1.26 2.52-.8 3.91c-1.31.67-2.2 1.91-2.2 3.34s.89 2.67 2.2 3.34c-.46 1.39-.21 2.9.8 3.91s2.52 1.27 3.91.81c.67 1.31 1.91 2.19 3.34 2.19s2.68-.88 3.34-2.19c1.39.46 2.9.2 3.91-.81s1.27-2.52.81-3.91c1.31-.67 2.19-1.91 2.19-3.34zm-11.71 4.2L6.8 12.46l1.41-1.42 2.26 2.26 4.8-5.23 1.47 1.36-6.2 6.77z"></path></g></svg>'
     : ''
 }
 <span style="color:var(--x-text-secondary); font-size: 13px;">${quoted.user.handle}</span>
 <span style="color:var(--x-text-secondary); font-size: 13px;">·${quoted.time}</span>
 </div>
 <div style="color:var(--x-text-primary); font-size: 14px; line-height: 1.4;">${quoted.content}</div>
 ${renderProfileQuotedTweetMedia(quoted)}
 <div style="color:var(--x-text-secondary); font-size: 12px; margin-top: 8px;">引用${typeText}</div>
 </div>
 `;
    }
    // 检查是否置顶
    const isPinned = tweet.pinned || false;
    tweetEl.innerHTML = `
 ${
   isPinned
     ? `
 <div style="padding: 12px 16px 0; display: flex; align-items: center; gap: 12px;">
 <div style="width: 40px; display: flex; justify-content: flex-end;">
 <svg viewBox="0 0 32 32" style="width: 16px; height: 16px; fill: #71767b;">
 <path d="M20.743 14.815l-0.933-12.065h5.191c0.414 0 0.75-0.336 0.75-0.75s-0.336-0.75-0.75-0.75v0h-18c-0.414 0-0.75 0.336-0.75 0.75s0.336 0.75 0.75 0.75v0h5.432l-1.275 12.103c-3.213 0.959-5.574 3.738-5.904 7.113l-0.003 0.034c0 0.414 0.336 0.75 0.75 0.75h9.25v7.25c0 0.414 0.336 0.75 0.75 0.75s0.75-0.336 0.75-0.75v0-7.25h9.25c0.414-0 0.75-0.336 0.75-0.75v0c0-3.017-2.35-5.787-6.007-7.185zM12.104 16.081c0.096-0.035 0.179-0.085 0.249-0.148l-0.001 0.001 0.005-0.003c0.126-0.117 0.211-0.275 0.233-0.453l0-0.004 0.011-0.022 1.337-12.701h4.367l0.979 12.681c0.033 0.35 0.303 0.627 0.647 0.67l0.004 0c2.542 0.682 4.512 2.623 5.222 5.096l0.013 0.052h-18.341c0.729-2.54 2.714-4.49 5.222-5.157l0.052-0.012z"></path>
 </svg>
 </div>
 <span style="color: #71767b; font-size: 13px; font-weight: 700;">已置顶</span>
 </div>
 `
     : ''
 }
 <div style="display: flex; gap: 12px; padding: 12px 16px;">
 <img src="${tweet.user.avatar}" alt="${
      tweet.user.name
    }" style="width: 40px; height: 40px; border-radius: 50%; flex-shrink: 0;">
 <div style="flex: 1; min-width: 0;" class="tweet-main">
 <div class="tweet-user-info">
 <span class="tweet-user-name">${tweet.user.name}</span>
 ${
   tweet.user.verified
     ? '<svg class="tweet-verified" viewBox="0 0 24 24"><g><path d="M22.25 12c0-1.43-.88-2.67-2.19-3.34.46-1.39.2-2.9-.81-3.91s-2.52-1.27-3.91-.81c-.66-1.31-1.91-2.19-3.34-2.19s-2.67.88-3.33 2.19c-1.4-.46-2.91-.2-3.92.81s-1.26 2.52-.8 3.91c-1.31.67-2.2 1.91-2.2 3.34s.89 2.67 2.2 3.34c-.46 1.39-.21 2.9.8 3.91s2.52 1.27 3.91.81c.67 1.31 1.91 2.19 3.34 2.19s2.68-.88 3.34-2.19c1.39.46 2.9.2 3.91-.81s1.27-2.52.81-3.91c1.31-.67 2.19-1.91 2.19-3.34zm-11.71 4.2L6.8 12.46l1.41-1.42 2.26 2.26 4.8-5.23 1.47 1.36-6.2 6.77z"></path></g></svg>'
     : ''
 }
 <span class="tweet-user-handle">${tweet.user.handle}</span>
 <span class="tweet-time" data-timestamp="${tweet.timestamp || Date.now()}">·${
      tweet.timestamp ? getRelativeTime(tweet.timestamp) : '刚刚'
    }</span>
 ${
   tweet.location
     ? `
 <div style="display: flex; align-items: center; gap: 4px; margin-left: 8px;">
 <svg viewBox="0 0 24 24" style="width: 14px; height: 14px; fill: var(--x-accent);">
 <g><path d="M12 7c-1.93 0-3.5 1.57-3.5 3.5S10.07 14 12 14s3.5-1.57 3.5-3.5S13.93 7 12 7zm0 5c-.827 0-1.5-.673-1.5-1.5S11.173 9 12 9s1.5.673 1.5 1.5S12.827 12 12 12zm0-10c-4.687 0-8.5 3.813-8.5 8.5 0 5.967 7.621 11.116 7.945 11.332l.555.37.555-.37C12.879 21.616 20.5 16.467 20.5 10.5 20.5 5.813 16.687 2 12 2zm0 17.77c-1.665-1.241-6.5-5.196-6.5-9.27C5.5 6.916 8.416 4 12 4s6.5 2.916 6.5 6.5c0 4.073-4.835 8.028-6.5 9.27z"></path></g>
 </svg>
 <span style="color: var(--x-accent); font-size: 13px;">${tweet.location}</span>
 </div>
 `
     : ''
 }
 </div>
 <div class="tweet-content">${processContent(tweet.content)}</div>
 ${renderProfileTweetMedia(tweet)}
 ${renderProfileTweetLink(tweet)}
 ${renderProfileQuotedTweet(tweet)}
 <div class="tweet-actions">
 <div class="tweet-action comment">
 <svg class="action-icon" viewBox="0 0 24 24" fill="currentColor">
 <g><path d="M1.751 10c0-4.42 3.584-8.005 8.005-8.005h4.366c4.49 0 8.129 3.64 8.129 8.13 0 2.96-1.607 5.68-4.196 7.11l-8.054 4.46v-3.69h-.067c-4.49.1-8.183-3.51-8.183-8.005zm8.005-6.005c-3.317 0-6.005 2.69-6.005 6.005 0 3.37 2.77 6.08 6.138 6.01l.351-.01h1.761v2.3l5.087-2.81c1.951-1.08 3.163-3.13 3.163-5.36 0-3.39-2.744-6.13-6.129-6.13H9.756z"></path></g>
 </svg>
 <span>${DataUtils.formatNumber(tweet.stats.comments)}</span>
 </div>
 <div class="tweet-action retweet" onclick="handleQuoteRetweetFromData('tweet', '${tweet.id}')">
 <svg class="action-icon" viewBox="0 0 24 24" fill="currentColor">
 <g><path d="M4.5 3.88l4.432 4.14-1.364 1.46L5.5 7.55V16c0 1.1.896 2 2 2H13v2H7.5c-2.209 0-4-1.791-4-4V7.55L1.432 9.48.068 8.02 4.5 3.88zM16.5 6H11V4h5.5c2.209 0 4 1.791 4 4v8.45l2.068-1.93 1.364 1.46-4.432 4.14-4.432-4.14 1.364-1.46 2.068 1.93V8c0-1.1-.896-2-2-2z"></path></g>
 </svg>
 <span>${DataUtils.formatNumber(tweet.stats.retweets)}</span>
 </div>
 <div class="tweet-action like" data-liked="false" data-likes="${tweet.stats.likes}">
 <svg class="action-icon like-icon" viewBox="0 0 24 24" fill="currentColor">
 <g><path d="M16.697 5.5c-1.222-.06-2.679.51-3.89 2.16l-.805 1.09-.806-1.09C9.984 6.01 8.526 5.44 7.304 5.5c-1.243.07-2.349.78-2.91 1.91-.552 1.12-.633 2.78.479 4.82 1.074 1.97 3.257 4.27 7.129 6.61 3.87-2.34 6.052-4.64 7.126-6.61 1.111-2.04 1.03-3.7.477-4.82-.561-1.13-1.666-1.84-2.908-1.91zm4.187 7.69c-1.351 2.48-4.001 5.12-8.379 7.67l-.503.3-.504-.3c-4.379-2.55-7.029-5.19-8.382-7.67-1.36-2.5-1.41-4.86-.514-6.67.887-1.79 2.647-2.91 4.601-3.01 1.651-.09 3.368.56 4.798 2.01 1.429-1.45 3.146-2.1 4.796-2.01 1.954.1 3.714 1.22 4.601 3.01.896 1.81.846 4.17-.514 6.67z"></path></g>
 </svg>
 <span class="like-count">${DataUtils.formatNumber(tweet.stats.likes)}</span>
 </div>
 <div class="tweet-action view">
 <svg class="action-icon" viewBox="0 0 24 24" fill="currentColor">
 <g><path d="M8.75 21V3h2v18h-2zM18 21V8.5h2V21h-2zM4 21l.004-10H6v10H4zm9.248 0v-7h2v7h-2z"></path></g>
 </svg>
 <span>${DataUtils.formatNumber(tweet.stats.views)}</span>
 </div>
 <div class="tweet-action bookmark">
 <svg class="action-icon" viewBox="0 0 24 24" fill="currentColor">
 <g><path d="M4 4.5C4 3.12 5.119 2 6.5 2h11C18.881 2 20 3.12 20 4.5v18.44l-8-5.71-8 5.71V4.5zM6.5 4c-.276 0-.5.22-.5.5v14.56l6-4.29 6 4.29V4.5c0-.28-.224-.5-.5-.5h-11z"></path></g>
 </svg>
 </div>
 <div class="tweet-action share">
 <svg class="action-icon" viewBox="0 0 24 24" fill="currentColor">
 <g><path d="M12 2.59l5.7 5.7-1.41 1.42L13 6.41V16h-2V6.41l-3.29 3.3-1.42-1.42L12 2.59zM21 15l-.02 3.51c0 1.38-1.12 2.49-2.5 2.49H5.5C4.11 21 3 19.88 3 18.5V15h2v3.5c0 .28.22.5.5.5h12.98c.28 0 .5-.22.5-.5L19 15h2z"></path></g>
 </svg>
 </div>
 </div>
 </div>
 </div>
 `;
    return tweetEl;
  }
  // 刷新个人页面的推文显示（用于AI回复后同步数据）
  function refreshUserProfileTweets() {
    const container = document.getElementById('x-profile-tweets-container');
    if (container && container.parentElement.style.display !== 'none') {
      loadUserProfileTweets();
    }
  }
  // 更新推文详情页面的AI数据
  async function updateTweetDetailWithAI(tweetId, interactionData, isReroll = false, isProgressMode = false) {
    // 使用ID精确更新元素
    // 更新互动数据显示区域
    const statsDiv = document.getElementById('tweet-detail-stats');
    if (statsDiv) {
      statsDiv.innerHTML = `
 <div style="display: flex; align-items: center; gap: 4px;">
 <span style="color: #fff; font-weight: 700; font-size: 15px;">${formatNumber(interactionData.stats.retweets)}</span>
 <span style="color: #71767b; font-size: 15px;">${getI18nText('tweetDetailRetweets')}</span>
 </div>
 <div style="display: flex; align-items: center; gap: 4px;">
 <span style="color: #fff; font-weight: 700; font-size: 15px;">${formatNumber(interactionData.stats.likes)}</span>
 <span style="color: #71767b; font-size: 15px;">${getI18nText('tweetDetailLikes')}</span>
 </div>
 <div style="display: flex; align-items: center; gap: 4px;">
 <span style="color: #fff; font-weight: 700; font-size: 15px;">${formatNumber(interactionData.stats.comments)}</span>
 <span style="color: #71767b; font-size: 15px;">${getI18nText('tweetDetailBookmarks')}</span>
 </div>
 `;
    }
    // 更新查看数据
    const viewElement = document.getElementById('tweet-detail-views');
    const viewLabelElement = document.getElementById('tweet-detail-views-label');
    if (viewElement) {
      viewElement.textContent = formatNumber(interactionData.stats.views);
    }
    if (viewLabelElement) {
      viewLabelElement.textContent = getI18nText('tweetDetailViews');
    }
    // 添加AI生成的评论
    const commentsContainer = document.getElementById('detail-comments-container'); // 如果是重回，清除现有评论；如果是推进，保留现有评论
    if (isReroll && !isProgressMode && commentsContainer) {
      commentsContainer.innerHTML = '';
    }
    if (commentsContainer && interactionData.comments.length > 0) {
      interactionData.comments.forEach(comment => {
        // 创建评论组容器
        const commentGroup = document.createElement('div');
        commentGroup.style.cssText = 'position: relative;'; // 添加主评论
        const commentElement = createCommentElement(comment); // 如果有回复，给主评论添加特殊类
        if (comment.replies && comment.replies.length > 0) {
          commentElement.classList.add('has-replies');
        }
        commentGroup.appendChild(commentElement); // 渲染回复
        if (comment.replies && comment.replies.length > 0) {
          comment.replies.forEach(reply => {
            const replyElement = createCommentElement(reply, true);
            commentGroup.appendChild(replyElement);
          });
        }
        commentsContainer.appendChild(commentGroup);
      });
    }
    // 更新存储的推文数据
    await updateStoredTweetData(tweetId, interactionData, isProgressMode);
  }
  // 更新存储的推文数据（包含AI生成的互动数据和评论）
  async function updateStoredTweetData(tweetId, interactionData, isProgressMode = false) {
    try {
      const db = getXDB(); // 检查推文类型
      const currentTweetData = sessionStorage.getItem('currentTweetData');
      let isAccountTweet = false;
      let isSearchTweet = false;
      let accountHandle = null;
      if (currentTweetData) {
        try {
          const tweet = JSON.parse(currentTweetData);
          isAccountTweet = tweet._source === 'account';
          isSearchTweet = tweet._source === 'search';
          accountHandle = tweet._accountHandle;
        } catch (e) {
          console.warn('解析推文数据失败:', e);
        }
      }
      // 处理搜索推文
      if (isSearchTweet) {
        console.log('📝 [更新数据] 检测到搜索结果推文，更新搜索数据');
        const tweetsData = await db.xTweetsData.get('tweets');
        if (tweetsData) {
          let updated = false; // 更新 forYouTweets
          if (tweetsData.forYouTweets) {
            const index = tweetsData.forYouTweets.findIndex(t => t.id === tweetId);
            if (index !== -1) {
              if (isProgressMode) {
                // 推进模式：累加互动数据，追加评论
                const currentStats = tweetsData.forYouTweets[index].stats;
                tweetsData.forYouTweets[index].stats = {
                  comments: Math.max(currentStats.comments, interactionData.stats.comments),
                  retweets: Math.max(currentStats.retweets, interactionData.stats.retweets),
                  likes: Math.max(currentStats.likes, interactionData.stats.likes),
                  views: Math.max(currentStats.views, interactionData.stats.views),
                };
                const existingComments = tweetsData.forYouTweets[index].comments || [];
                tweetsData.forYouTweets[index].comments = [...existingComments, ...(interactionData.comments || [])];
              } else {
                // 重新生成模式（搜索推文不应该使用，但防御性代码）
                tweetsData.forYouTweets[index].stats = {
                  ...tweetsData.forYouTweets[index].stats,
                  ...interactionData.stats,
                };
                tweetsData.forYouTweets[index].comments = interactionData.comments || [];
              }
              updated = true;
              console.log(`📈 [搜索推文] forYouTweets 新增 ${interactionData.comments?.length || 0} 条评论`);
            }
          }
          // 更新 followingTweets
          if (tweetsData.followingTweets && !updated) {
            const index = tweetsData.followingTweets.findIndex(t => t.id === tweetId);
            if (index !== -1) {
              if (isProgressMode) {
                const currentStats = tweetsData.followingTweets[index].stats;
                tweetsData.followingTweets[index].stats = {
                  comments: Math.max(currentStats.comments, interactionData.stats.comments),
                  retweets: Math.max(currentStats.retweets, interactionData.stats.retweets),
                  likes: Math.max(currentStats.likes, interactionData.stats.likes),
                  views: Math.max(currentStats.views, interactionData.stats.views),
                };
                const existingComments = tweetsData.followingTweets[index].comments || [];
                tweetsData.followingTweets[index].comments = [...existingComments, ...(interactionData.comments || [])];
              } else {
                tweetsData.followingTweets[index].stats = {
                  ...tweetsData.followingTweets[index].stats,
                  ...interactionData.stats,
                };
                tweetsData.followingTweets[index].comments = interactionData.comments || [];
              }
              updated = true;
              console.log(`📈 [搜索推文] followingTweets 新增 ${interactionData.comments?.length || 0} 条评论`);
            }
          }
          if (updated) {
            await db.xTweetsData.put(tweetsData); // 更新 sessionStorage
            if (currentTweetData) {
              try {
                const currentTweet = JSON.parse(currentTweetData);
                if (currentTweet.id === tweetId) {
                  currentTweet.stats = interactionData.stats;
                  currentTweet.comments = currentTweet.comments || [];
                  if (isProgressMode) {
                    currentTweet.comments = [...currentTweet.comments, ...(interactionData.comments || [])];
                  } else {
                    currentTweet.comments = interactionData.comments || [];
                  }
                  sessionStorage.setItem('currentTweetData', JSON.stringify(currentTweet));
                }
              } catch (e) {
                console.warn('更新 sessionStorage 失败:', e);
              }
            }
            console.log('✅ 搜索推文AI反应已保存:', tweetId, isProgressMode ? '(推进模式)' : '');
            return;
          }
        }
      }
      // 处理账户推文
      if (isAccountTweet && accountHandle) {
        // 更新账户主页数据
        console.log('📝 [更新数据] 检测到账户推文，更新账户主页数据');
        const cleanHandle = accountHandle.replace('@', '');
        const accountProfile = await db.xAccountProfiles.get(cleanHandle);
        if (accountProfile && accountProfile.tweets) {
          const tweetIndex = accountProfile.tweets.findIndex(t => t.id === tweetId);
          if (tweetIndex !== -1) {
            if (isProgressMode) {
              // 推进模式：累加互动数据，追加评论
              const currentStats = accountProfile.tweets[tweetIndex].stats;
              accountProfile.tweets[tweetIndex].stats = {
                comments: Math.max(currentStats.comments, interactionData.stats.comments),
                retweets: Math.max(currentStats.retweets, interactionData.stats.retweets),
                likes: Math.max(currentStats.likes, interactionData.stats.likes),
                views: Math.max(currentStats.views, interactionData.stats.views),
              }; // 追加新评论
              const existingComments = accountProfile.tweets[tweetIndex].comments || [];
              accountProfile.tweets[tweetIndex].comments = [...existingComments, ...(interactionData.comments || [])];
              console.log(`📈 [账户推文] 新增 ${interactionData.comments?.length || 0} 条评论`);
            } else {
              // 重新生成模式：覆盖互动数据和评论
              accountProfile.tweets[tweetIndex].stats = {
                ...accountProfile.tweets[tweetIndex].stats,
                ...interactionData.stats,
              };
              accountProfile.tweets[tweetIndex].comments = interactionData.comments || [];
            }
            // 保存到数据库
            await db.xAccountProfiles.put(accountProfile); // 更新 sessionStorage
            if (currentTweetData) {
              try {
                const currentTweet = JSON.parse(currentTweetData);
                if (currentTweet.id === tweetId) {
                  currentTweet.stats = accountProfile.tweets[tweetIndex].stats;
                  currentTweet.comments = accountProfile.tweets[tweetIndex].comments;
                  sessionStorage.setItem('currentTweetData', JSON.stringify(currentTweet));
                }
              } catch (e) {
                console.warn('更新 sessionStorage 失败:', e);
              }
            }
            console.log('✅ 账户推文AI反应已保存:', tweetId, isProgressMode ? '(推进模式)' : '');
            return;
          }
        }
      }
      // 检查是否为用户推文
      const isUserTweet = tweetId && tweetId.startsWith('user_');
      if (!isUserTweet) {
        // 非用户推文：尝试从主页推文数据中更新
        console.log('📝 [更新数据] 检测到主页推文，更新主页数据');
        const tweetsData = await db.xTweetsData.get('tweets');
        if (tweetsData) {
          let updated = false; // 更新 forYouTweets
          if (tweetsData.forYouTweets) {
            const index = tweetsData.forYouTweets.findIndex(t => t.id === tweetId);
            if (index !== -1) {
              if (isProgressMode) {
                // 推进模式：累加互动数据，追加评论
                const currentStats = tweetsData.forYouTweets[index].stats;
                tweetsData.forYouTweets[index].stats = {
                  comments: Math.max(currentStats.comments, interactionData.stats.comments),
                  retweets: Math.max(currentStats.retweets, interactionData.stats.retweets),
                  likes: Math.max(currentStats.likes, interactionData.stats.likes),
                  views: Math.max(currentStats.views, interactionData.stats.views),
                };
                const existingComments = tweetsData.forYouTweets[index].comments || [];
                tweetsData.forYouTweets[index].comments = [...existingComments, ...(interactionData.comments || [])];
              } else {
                // 重新生成模式
                tweetsData.forYouTweets[index].stats = {
                  ...tweetsData.forYouTweets[index].stats,
                  ...interactionData.stats,
                };
                tweetsData.forYouTweets[index].comments = interactionData.comments || [];
              }
              updated = true;
              console.log(`📈 [主页推文] forYouTweets 新增 ${interactionData.comments?.length || 0} 条评论`);
            }
          }
          // 更新 followingTweets
          if (tweetsData.followingTweets && !updated) {
            const index = tweetsData.followingTweets.findIndex(t => t.id === tweetId);
            if (index !== -1) {
              if (isProgressMode) {
                const currentStats = tweetsData.followingTweets[index].stats;
                tweetsData.followingTweets[index].stats = {
                  comments: Math.max(currentStats.comments, interactionData.stats.comments),
                  retweets: Math.max(currentStats.retweets, interactionData.stats.retweets),
                  likes: Math.max(currentStats.likes, interactionData.stats.likes),
                  views: Math.max(currentStats.views, interactionData.stats.views),
                };
                const existingComments = tweetsData.followingTweets[index].comments || [];
                tweetsData.followingTweets[index].comments = [...existingComments, ...(interactionData.comments || [])];
              } else {
                tweetsData.followingTweets[index].stats = {
                  ...tweetsData.followingTweets[index].stats,
                  ...interactionData.stats,
                };
                tweetsData.followingTweets[index].comments = interactionData.comments || [];
              }
              updated = true;
              console.log(`📈 [主页推文] followingTweets 新增 ${interactionData.comments?.length || 0} 条评论`);
            }
          }
          if (updated) {
            await db.xTweetsData.put(tweetsData); // 更新 sessionStorage
            if (currentTweetData) {
              try {
                const currentTweet = JSON.parse(currentTweetData);
                if (currentTweet.id === tweetId) {
                  currentTweet.stats = interactionData.stats;
                  currentTweet.comments = currentTweet.comments || [];
                  if (isProgressMode) {
                    currentTweet.comments = [...currentTweet.comments, ...(interactionData.comments || [])];
                  } else {
                    currentTweet.comments = interactionData.comments || [];
                  }
                  sessionStorage.setItem('currentTweetData', JSON.stringify(currentTweet));
                }
              } catch (e) {
                console.warn('更新 sessionStorage 失败:', e);
              }
            }
            console.log('✅ 主页推文AI反应已保存:', tweetId, isProgressMode ? '(推进模式)' : '');
            return;
          } else {
            console.warn('⚠️ 未在主页数据中找到要更新的推文:', tweetId);
          }
        }
        return; // 非用户推文处理结束
      }
      // 用户推文的处理逻辑
      // 使用正确的账户ID获取用户推文数据
      const accountTweetsId = `userTweets_${currentAccountId || 'main'}`;
      let userTweets = await db.xUserTweets.get(accountTweetsId);
      if (!userTweets) {
        console.warn('未找到用户推文数据，账户ID:', accountTweetsId);
        return;
      }
      // 查找并更新对应的推文
      const tweetIndex = userTweets.tweets.findIndex(tweet => tweet.id === tweetId);
      if (tweetIndex !== -1) {
        if (isProgressMode) {
          // 推进模式：累加互动数据，追加评论
          const currentStats = userTweets.tweets[tweetIndex].stats;
          userTweets.tweets[tweetIndex].stats = {
            comments: Math.max(currentStats.comments, interactionData.stats.comments),
            retweets: Math.max(currentStats.retweets, interactionData.stats.retweets),
            likes: Math.max(currentStats.likes, interactionData.stats.likes),
            views: Math.max(currentStats.views, interactionData.stats.views),
          }; // 追加新评论（保留旧评论）
          const existingComments = userTweets.tweets[tweetIndex].comments || [];
          userTweets.tweets[tweetIndex].comments = [...existingComments, ...(interactionData.comments || [])];
          console.log(`📈 [推进模式] 新增 ${interactionData.comments?.length || 0} 条评论`);
        } else {
          // 重新生成模式：覆盖互动数据和评论
          userTweets.tweets[tweetIndex].stats = {
            ...userTweets.tweets[tweetIndex].stats,
            ...interactionData.stats,
          }; // 更新评论数据
          userTweets.tweets[tweetIndex].comments = interactionData.comments || [];
        }
        // 保存更新后的数据
        await db.xUserTweets.put(userTweets); // 同时更新 sessionStorage 中的当前推文数据
        if (currentTweetData) {
          try {
            const currentTweet = JSON.parse(currentTweetData);
            if (currentTweet.id === tweetId) {
              currentTweet.stats = userTweets.tweets[tweetIndex].stats;
              currentTweet.comments = userTweets.tweets[tweetIndex].comments;
              sessionStorage.setItem('currentTweetData', JSON.stringify(currentTweet));
            }
          } catch (e) {
            console.warn('更新 sessionStorage 失败:', e);
          }
        }
        console.log(
          '✅ 推文AI反应已保存到数据库:',
          tweetId,
          '账户:',
          accountTweetsId,
          isProgressMode ? '(推进模式)' : '',
        ); // 刷新个人页面显示
        refreshUserProfileTweets();
      } else {
        console.warn('⚠️ 未找到要更新的推文:', tweetId);
      }
    } catch (error) {
      console.error('❌ 更新存储推文数据失败:', error);
    }
  }
  // ▼▼▼ 【主要！！！】第三个情景：统一AI回复生成器▼▼▼
  async function generateUnifiedAIResponse(tweetData, userComment, options = {}) {
    try {
      const {
        isOwnPost = false,
        commentType = 'main_comment', // 'main_comment' | 'reply_comment'
        pageType = 'detail', // 'detail' | 'main'
        parentComment = null,
        mainCommentId = null, // 用于楼中楼回复的主评论ID
      } = options; // 🔧 使用统一的API配置加载工具
      const { apiConfig, xSettings, xDb } = await APIUtils.loadConfigAndSettings();
      const { userPrompt, worldSetting, boundCharacters } = xSettings;
      // 🚨 关键修复：重新从数据库加载最新的推文数据，避免丢失用户刚发的评论
      console.log('🔄 [AI回复] 重新加载最新推文数据，避免覆盖用户评论');
      const tweetId = tweetData.id;
      const isUserTweet = tweetId.startsWith('user_');
      const isRetweetMention = tweetData._source === 'retweet_mention';
      let latestTweetData = null;
      if (isRetweetMention) {
        // 从 Mentions 数据库加载转帖通知
        console.log('🔄 [AI回复] 从 Mentions 数据库加载转帖通知');
        const mentionsId = `mentions_${currentAccountId || 'main'}`;
        const mentionsData = await xDb.xAccountProfiles.get(mentionsId);
        if (mentionsData && mentionsData.data) {
          const mention = mentionsData.data.find(m => m.id === tweetId && m.type === 'retweet');
          if (mention) {
            // 重新构建 tweetData 结构，使用最新的评论数据
            latestTweetData = {
              ...tweetData,
              comments: mention.comments || [],
              stats: mention.stats || tweetData.stats,
            };
            console.log('✅ [AI回复] 已从 Mentions 加载转帖数据，评论数:', latestTweetData.comments.length);
          }
        }
      } else if (isUserTweet) {
        const userTweetsId = `userTweets_${currentAccountId || 'main'}`;
        const userTweetsData = await xDb.xUserTweets.get(userTweetsId);
        if (userTweetsData && userTweetsData.tweets) {
          latestTweetData = userTweetsData.tweets.find(t => t.id === tweetId);
        }
      } else {
        const tweetsData = await xDb.xTweetsData.get('tweets');
        if (tweetsData) {
          latestTweetData =
            tweetsData.forYouTweets?.find(t => t.id === tweetId) ||
            tweetsData.followingTweets?.find(t => t.id === tweetId);
        }
      }
      // 如果成功加载到最新数据，使用最新数据；否则使用传入的数据
      if (latestTweetData) {
        console.log('✅ [AI回复] 已加载最新推文数据，评论数:', latestTweetData.comments?.length || 0);
        tweetData = latestTweetData;
      } else {
        console.warn('⚠️ [AI回复] 未能加载最新推文数据，使用传入数据');
      } // 使用工具函数构建用户X个人资料信息（使用window.userProfileData确保获取最新数据）
      const userXProfileInfo = StringBuilders.buildUserXProfileInfo(window.userProfileData); // Token计数器
      let tokenCount = 0; // 1. 提示词 + 世界书
      let systemPrompt = StringBuilders.buildBaseSystemPrompt({
        userPrompt,
        worldSetting,
      });
      tokenCount = TokenUtils.logTokenUsage('统一AI回复生成器', '基础系统提示词', systemPrompt, tokenCount); // 2. 角色定义（评论回复生成专用）
      systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🚫 核心任务说明 🚫
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
你是X社交平台的互动生成器。你的任务是：
✅ 为用户的评论生成其他人的回应/反应
❌ 绝对不能再生成用户本人的评论或回复
**明确：用户已经发表了评论，你只负责生成别人对这条评论的反应！**
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━`;
      const coreTaskSection = systemPrompt.substring(systemPrompt.lastIndexOf('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━'));
      tokenCount = TokenUtils.logTokenUsage('统一AI回复生成器', '核心任务说明', coreTaskSection, tokenCount); // 添加场景分支提示词（评论场景特有的详细逻辑）
      const scenarioPromptStart = systemPrompt.length;
      systemPrompt += StringBuilders.buildScenarioPrompt({
        isOwnPost,
        commentType,
        pageType,
        parentComment,
      });
      const scenarioPrompt = systemPrompt.substring(scenarioPromptStart);
      tokenCount = TokenUtils.logTokenUsage('统一AI回复生成器', '场景分支提示词', scenarioPrompt, tokenCount); // 3. 角色资料（回复场景）
      const charactersInfo = await StringBuilders.buildCompleteCharacterInfo(
        boundCharacters,
        userXProfileInfo,
        'reply',
      );
      if (charactersInfo) {
        systemPrompt += charactersInfo;
        tokenCount = TokenUtils.logTokenUsage('统一AI回复生成器', '角色资料信息', charactersInfo, tokenCount);
      }
      // 4. 用户资料
      const userConstraintsStart = systemPrompt.length;
      systemPrompt += StringBuilders.buildUniversalConstraints(userXProfileInfo);
      const userConstraints = systemPrompt.substring(userConstraintsStart);
      tokenCount = TokenUtils.logTokenUsage('统一AI回复生成器', '用户资料约束', userConstraints, tokenCount);
      systemPrompt += `
【评论回复要求】：
- 生成1-5条回复，内容多样化（简短/深度/表情符号）
- 环境贴合：参考评论区现有讨论，基于主题和氛围生成贴合回复
- 回复内容必须围绕推文主题和用户评论内容，不要偏离主题
- 除了绑定角色外，其他用户头像统一：https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg
${
  boundCharacters.length > 0
    ? `**角色回复要点**：根据设定判断是否适合发言，符合人设特点，可生成0-2个角色回复，严格使用角色X资料信息。`
    : '**当前状态**：无绑定角色，生成普通用户回复。'
}
【🔒 隐私保护规则 - 路人回复限制】：
🚨 路人回复者（非绑定角色/关系NPC的普通用户）只能基于X平台公开信息：
✅ 可以使用：X姓名、X句柄、X简介、公开身份
❌ 禁止提及：真实姓名、真实职业、私人关系、未公开的身份信息
❌ 禁止使用：只有亲密关系才知道的称呼（如"老师"、"同学"、"老板"等，除非是公开身份）
❌ 禁止提及：角色人设描述中的私密细节
示例说明：
- ✅ 正确："姐姐说得对"（基于公开的社交称呼）
- ❌ 错误："王老师说得好"（泄露了真实姓氏和职业）
- ❌ 错误："同学你好厉害"（假装是同学关系，路人不可能知道）
⚠️ 只有已绑定的关系NPC才能提及私密信息或使用私密称呼（因为他们是角色的私人关系）
【情侣角色回复规则】：
${
  userXProfileInfo.verificationType === 'couple' && userXProfileInfo.coupleCharacterName
    ? `- 用户的情侣是 ${userXProfileInfo.coupleCharacterName}
- **关键限制**：在他人帖子下回复用户评论时，出现概率极低（5-15%）
* 评论与情侣角色无关 → 不出现
* 话题普通/日常 → 很少出现
* 只有评论内容与情侣角色相关、或确有理由参与讨论时才可能出现
- 回复围绕帖子主题和讨论，不只是"秀恩爱"
- 粉丝群体严格限制：仅当双方为明星/网红/公众人物时才可能有1条CP粉丝评论（概率极低），普通情侣绝无"磕学家""CP粉"等粉丝群体`
    : ''
}
【JSON返回格式】：
\`\`\`json
{
"${commentType === 'reply_comment' && pageType === 'main' ? 'replies' : 'comments'}": [回复数组]
}
\`\`\`
回复对象结构：
- user: {name, handle, avatar, verified}
- content: 回复文本 (可与sticker同时存在)
- timeOffset: 相对推文发布的分钟数（负数，如-5表示推文发布后5分钟的回复）
- sticker: {url: "表情包链接", description: "表情包描述"} (可选，约10-15%回复使用)
- replyTo: "${userComment.user.handle}" (必须回复用户刚发表的评论)
- replies: []
【表情包使用规则】：
- 表情包仅限使用世界书中提供的真实链接，严禁虚构或编造链接
- 表情包与文字内容可以同时存在，用于增强表达效果
- 使用频率控制在约10-15%的回复中，保持自然
- sticker对象包含url和description两个必需字段

关键规则：
1. verified字段必须是布尔值(true/false)
1.5. timeOffset必须是负数，表示回复发布在推文之后多少分钟（如-2, -5, -15等）
2. replyTo字段必须是"${userComment.user.handle}"，表示回复用户的评论
3. ${
        boundCharacters.length > 0
          ? '生成角色回复时必须严格使用提供的角色X资料(xName、xHandle、xAvatar、xVerified)，不得使用默认值或自编信息'
          : '普通用户回复，自创用户名和句柄'
      }
4. sticker字段只能使用世界书中存在的真实链接，禁止虚构`;
      const formatSection = systemPrompt.substring(systemPrompt.lastIndexOf('【JSON返回格式】'));
      tokenCount = TokenUtils.logTokenUsage('统一AI回复生成器', 'JSON格式要求', formatSection, tokenCount); // 构建上下文信息
      let contextInfo = `【推文信息${pageType === 'detail' ? '（详情页）' : '（主页）'}】
标题：${isOwnPost ? '【用户的帖子】' : ''}${tweetData.content}
推文作者：${tweetData.user.name} (${tweetData.user.handle})
${tweetData.location ? `位置：${tweetData.location}` : ''}
${tweetData.link ? `链接：${tweetData.link.title || tweetData.link.url}` : ''}
${tweetData.media && tweetData.media.length > 0 ? `媒体：${tweetData.media[0].description}` : ''}`; // 如果推文包含引用内容，添加引用信息
      if (tweetData.quotedTweet) {
        const quoted = tweetData.quotedTweet;
        const quotedType = quoted.type === 'tweet' ? '推文' : '评论';
        contextInfo += `
【该推文引用了以下${quotedType}】
原作者：${quoted.user.name} (${quoted.user.handle})${quoted.user.verified ? ' ✓已认证' : ''}
发布时间：${quoted.time}
原内容："${quoted.content}"`; // 如果引用内容包含图片，添加图片信息
        if (quoted.image) {
          if (quoted.image.type === 'description') {
            contextInfo += `
原图片描述：${quoted.image.content}`;
          } else if (quoted.image.type === 'upload') {
            contextInfo += `
原图片：包含上传的图片内容`;
          }
        }
        // 如果引用内容包含位置信息
        if (quoted.location) {
          contextInfo += `
原位置：${quoted.location}`;
        }
        contextInfo += `
注意：这是引用转发，用户的评论是对上述${quotedType}的回应/评论。回复时可以同时考虑用户的评论和被引用的原内容，可以讨论引用关系、原作者观点，或用户的转发评论等。`;
      }
      contextInfo += `
【用户发表的${commentType === 'main_comment' ? '评论' : '回复'}】
用户名：${userComment.user.name}
用户句柄：${userComment.user.handle}
${commentType === 'main_comment' ? '评论' : '回复'}内容：${userComment.content}`;
      if (commentType === 'reply_comment' && parentComment) {
        contextInfo += `
【用户回复的对象（楼中楼场景）】
被回复者姓名：${parentComment.user.name}
被回复者句柄：${parentComment.user.handle}
被回复的评论：${parentComment.content}
⚠️ 重要说明：
- 用户 ${userComment.user.name} (${userComment.user.handle}) 刚刚回复了 ${parentComment.user.name} (${parentComment.user.handle}) 的评论
- 你生成的回复必须是对用户 ${userComment.user.name} (${userComment.user.handle}) 的回复
- 所有回复的 replyTo 字段必须是 "${userComment.user.handle}"`;
      }
      // 添加已有评论区内容到上下文
      if (tweetData.comments && tweetData.comments.length > 0) {
        contextInfo += `
【当前评论区内容】（共${tweetData.comments.length}条评论，帮助理解讨论主题和氛围）`; // 显示最多前10条评论，避免上下文过长
        const displayComments = tweetData.comments.slice(0, 10);
        displayComments.forEach((comment, index) => {
          contextInfo += `
${index + 1}. ${comment.user.name} (${comment.user.handle}): ${comment.content}`;
          if (comment.sticker) {
            contextInfo += ` [含表情包: ${comment.sticker.description}]`;
          }
          // 如果有回复，也显示前3条
          if (comment.replies && comment.replies.length > 0) {
            const displayReplies = comment.replies.slice(0, 3);
            displayReplies.forEach((reply, replyIndex) => {
              contextInfo += `
└─ ${reply.user.name} (${reply.user.handle}): ${reply.content}`;
              if (reply.sticker) {
                contextInfo += ` [含表情包: ${reply.sticker.description}]`;
              }
            });
            if (comment.replies.length > 3) {
              contextInfo += `
└─ ...还有${comment.replies.length - 3}条回复`;
            }
          }
        });
        if (tweetData.comments.length > 10) {
          contextInfo += `
...还有${tweetData.comments.length - 10}条评论未显示`;
        }
      }
      // 读取推文作者的完整资料（使用统一资料获取系统）
      if (tweetData.user && tweetData.user.handle) {
        try {
          console.log(`📝 [统一AI回复] 读取推文作者资料: ${tweetData.user.handle}`); // 使用统一资料获取系统
          const tweetAuthorProfile = await StringBuilders.getUnifiedProfile(tweetData.user.handle, {
            userProfileInfo: userXProfileInfo,
          });
          if (tweetAuthorProfile) {
            contextInfo += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📝 推文作者完整资料 📝
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`; // 格式化资料
            contextInfo += StringBuilders.formatProfileForPrompt(tweetAuthorProfile, {
              includeType: true,
              includeTweets: true,
              includeRelationships: true,
            });
            contextInfo += `
⚠️ 推文作者资料使用说明：
- 如果推文作者是角色/NPC，回复时可能会来评论区互动
- 推文作者的关系NPC如果看到这条推文，可能会来评论
- 回复要符合推文作者的身份和背景
- 如果推文作者与用户有聊天记忆，可以自然体现在互动中
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
            tokenCount = TokenUtils.logTokenUsage(
              '统一AI回复生成器',
              '推文作者资料',
              contextInfo.substring(contextInfo.lastIndexOf('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━')),
              tokenCount,
            );
          }
        } catch (error) {
          console.error(`❌ [统一AI回复] 读取推文作者资料失败:`, error);
        }
      }
      // 记录上下文信息token
      TokenUtils.logTokenUsage('统一AI回复生成器', '上下文信息', contextInfo, tokenCount); // 构建消息内容，支持图片识别
      const messageContent = [];
      messageContent.push({ type: 'text', text: contextInfo }); // 如果用户评论包含上传的图片，添加图片内容
      if (userComment.image && userComment.image.type === 'upload' && userComment.image.content) {
        messageContent.push({
          type: 'image_url',
          image_url: { url: userComment.image.content },
        });
      } else if (userComment.image && userComment.image.type === 'description') {
        messageContent.push({
          type: 'text',
          text: `用户评论附带的图片描述：${userComment.image.content}`,
        });
      }
      const messages = [{ role: 'user', content: messageContent }]; // 最终统计
      const contextText = messageContent.map(c => c.text || '[图片]').join(' ');
      TokenUtils.logFinalPrompt('统一AI回复生成器', systemPrompt, contextText); // 🔧 使用统一的API请求工具
      const aiResponseContent = await APIUtils.sendAIRequest({
        apiConfig,
        systemPrompt,
        messages,
        temperature: 0.8,
      });
      console.log('绑定角色数量:', boundCharacters.length);
      console.log('评论区上下文:', tweetData.comments ? `${tweetData.comments.length}条评论` : '无评论');
      if (tweetData.comments && tweetData.comments.length > 0) {
        console.log(
          '评论示例:',
          tweetData.comments.slice(0, 3).map(c => `${c.user.name}: ${c.content.substring(0, 50)}...`),
        );
      }
      // 🔧 使用统一的JSON解析工具
      let replyData = APIUtils.parseJSONResponse(aiResponseContent); // 🔧 使用统一的后处理工具
      replyData = await APIUtils.postProcessData(replyData, userXProfileInfo); // 统一数据处理
      const timestamp = Date.now();
      const repliesKey = commentType === 'reply_comment' && pageType === 'main' ? 'replies' : 'comments';
      const replies = replyData[repliesKey] || [];
      if (!Array.isArray(replies)) {
        throw new Error('AI返回的数据格式不正确');
      }
      // 根据页面类型和评论类型处理渲染
      if (pageType === 'detail') {
        console.log('🤖 [AI回复] 详情页模式 - 生成了', replies.length, '条回复'); // 详情页面：先更新数据，再渲染到页面
        // 将AI回复添加到推文数据中
        let tweetTimestamp = tweetData.timestamp || tweetData.createdAt || Date.now(); // 确保时间戳是数字格式（处理可能的Date对象或字符串）
        if (typeof tweetTimestamp !== 'number') {
          if (tweetTimestamp instanceof Date) {
            tweetTimestamp = tweetTimestamp.getTime();
          } else if (typeof tweetTimestamp === 'string') {
            tweetTimestamp = new Date(tweetTimestamp).getTime();
          } else {
            tweetTimestamp = Date.now();
          }
        }
        // 验证推文时间戳有效性
        if (isNaN(tweetTimestamp) || tweetTimestamp <= 0) {
          console.warn('⚠️ [AI回复] 推文时间戳无效，使用当前时间');
          tweetTimestamp = Date.now();
        }
        if (commentType === 'main_comment') {
          // 主评论回复
          replies.forEach((comment, index) => {
            comment.id = `ai_unified_${timestamp}_${index}`; // 转换timeOffset为实际时间戳
            if (comment.timeOffset !== undefined && !isNaN(comment.timeOffset)) {
              comment.timestamp = tweetTimestamp + Math.abs(comment.timeOffset) * 60 * 1000;
              delete comment.timeOffset;
            } else if (!comment.timestamp || isNaN(comment.timestamp)) {
              comment.timestamp = tweetTimestamp + (2 + Math.random() * 20) * 60 * 1000;
            }
            // 最终验证
            if (isNaN(comment.timestamp) || comment.timestamp <= 0) {
              console.warn('⚠️ [AI回复] 评论时间戳无效，使用推文时间');
              comment.timestamp = tweetTimestamp;
            }
            tweetData.comments.push(comment);
          });
          tweetData.stats.comments += replies.length;
          console.log('🤖 [AI回复] AI回复已添加到推文数据，新评论总数:', tweetData.stats.comments);
        } else if (commentType === 'reply_comment' && parentComment) {
          // 楼中楼回复
          const targetComment = tweetData.comments.find(c => c.id === parentComment.id);
          if (targetComment) {
            if (!targetComment.replies) targetComment.replies = [];
            replies.forEach((reply, index) => {
              reply.id = `ai_unified_${timestamp}_${index}`; // 转换timeOffset为实际时间戳
              if (reply.timeOffset !== undefined && !isNaN(reply.timeOffset)) {
                reply.timestamp = tweetTimestamp + Math.abs(reply.timeOffset) * 60 * 1000;
                delete reply.timeOffset;
              } else if (!reply.timestamp || isNaN(reply.timestamp)) {
                // 回复时间应该比父评论晚
                let parentTimestamp = targetComment.timestamp || targetComment.createdAt || tweetTimestamp; // 确保 parentTimestamp 是数字
                if (typeof parentTimestamp !== 'number') {
                  parentTimestamp =
                    parentTimestamp instanceof Date
                      ? parentTimestamp.getTime()
                      : typeof parentTimestamp === 'string'
                      ? new Date(parentTimestamp).getTime()
                      : tweetTimestamp;
                }
                reply.timestamp = parentTimestamp + (1 + Math.random() * 10) * 60 * 1000;
              }
              // 最终验证
              if (isNaN(reply.timestamp) || reply.timestamp <= 0) {
                console.warn('⚠️ [AI回复] 楼中楼回复时间戳无效，使用推文时间');
                reply.timestamp = tweetTimestamp;
              }
              targetComment.replies.push(reply);
            });
            console.log(
              '🤖 [AI回复] 楼中楼回复已添加，目标评论:',
              parentComment.id,
              '，当前回复总数:',
              targetComment.replies.length,
            );
          } else {
            console.error('❌ [AI回复] 未找到目标评论:', parentComment.id);
          }
        }
        // 保存到数据库
        try {
          const xDb = getXDB();
          const isUserTweet = tweetData.id.startsWith('user_');
          const isAccountTweet = tweetData._source === 'account';
          const isRetweetMention = tweetData._source === 'retweet_mention';
          const isNewTweetMention = tweetData._source === 'newtweet_mention';
          if (isRetweetMention) {
            console.log('🤖 [AI回复] 保存到 Mentions 转帖通知数据');
            const mentionsId = `mentions_${currentAccountId || 'main'}`;
            const mentionsData = await xDb.xAccountProfiles.get(mentionsId);
            if (mentionsData && mentionsData.data) {
              // 找到对应的转帖通知并更新其评论
              const retweetIndex = mentionsData.data.findIndex(m => m.id === tweetData.id && m.type === 'retweet');
              if (retweetIndex !== -1) {
                // 更新评论数据
                mentionsData.data[retweetIndex].comments = tweetData.comments; // 同步更新 stats
                if (!mentionsData.data[retweetIndex].stats) {
                  mentionsData.data[retweetIndex].stats = tweetData.stats;
                } else {
                  mentionsData.data[retweetIndex].stats.comments = tweetData.stats.comments;
                }
                await xDb.xAccountProfiles.put(mentionsData);
                console.log('✅ [AI回复] Mentions 转帖通知已更新，评论总数:', tweetData.comments.length);
              } else {
                console.warn('⚠️ [AI回复] 未在 Mentions 数据中找到对应的转帖通知:', tweetData.id);
              }
            } else {
              console.warn('⚠️ [AI回复] 未找到 Mentions 数据:', mentionsId);
            }
          } else if (isNewTweetMention) {
            console.log('🤖 [AI回复] 保存到 Mentions New Tweet 通知数据');
            const mentionsId = `mentions_${currentAccountId || 'main'}`;
            const mentionsData = await xDb.xAccountProfiles.get(mentionsId);
            if (mentionsData && mentionsData.data) {
              // 找到对应的 New Tweet 通知并更新其推文评论
              const newTweetIndex = mentionsData.data.findIndex(
                m => m.id === tweetData._mentionId && m.type === 'newTweet',
              );
              if (newTweetIndex !== -1) {
                // 更新推文的评论数据
                if (!mentionsData.data[newTweetIndex].tweet) {
                  mentionsData.data[newTweetIndex].tweet = {};
                }
                mentionsData.data[newTweetIndex].tweet.comments = tweetData.comments; // 同步更新 stats
                if (!mentionsData.data[newTweetIndex].tweet.stats) {
                  mentionsData.data[newTweetIndex].tweet.stats = tweetData.stats;
                } else {
                  mentionsData.data[newTweetIndex].tweet.stats.comments = tweetData.stats.comments;
                }
                await xDb.xAccountProfiles.put(mentionsData);
                console.log('✅ [AI回复] Mentions New Tweet 通知已更新，评论总数:', tweetData.comments.length);
              } else {
                console.warn('⚠️ [AI回复] 未在 Mentions 数据中找到对应的 New Tweet 通知:', tweetData._mentionId);
              }
            } else {
              console.warn('⚠️ [AI回复] 未找到 Mentions 数据:', mentionsId);
            }
          } else if (isAccountTweet) {
            console.log('🤖 [AI回复] 保存到账户推文数据');
            const accountHandle =
              tweetData._accountHandle || (currentViewingAccount.accountInfo || currentViewingAccount).handle;
            const cleanHandle = accountHandle.replace('@', '');
            if (currentViewingAccount && currentViewingAccount.tweets) {
              const tweetIndex = currentViewingAccount.tweets.findIndex(t => t.id === tweetData.id);
              if (tweetIndex !== -1) {
                currentViewingAccount.tweets[tweetIndex] = tweetData;
                await xDb.xAccountProfiles.put({
                  handle: cleanHandle,
                  name: (currentViewingAccount.accountInfo || currentViewingAccount).name,
                  accountInfo: currentViewingAccount.accountInfo || currentViewingAccount,
                  tweets: currentViewingAccount.tweets,
                  accountReplies: currentViewingAccount.accountReplies || [],
                  updatedAt: new Date().toISOString(),
                });
                console.log('✅ [AI回复] 账户推文已保存，账户:', cleanHandle);
              }
            }
          } else if (isUserTweet) {
            console.log('🤖 [AI回复] 保存到用户推文数据');
            const userTweetsId = `userTweets_${currentAccountId || 'main'}`;
            const userTweetsData = await xDb.xUserTweets.get(userTweetsId);
            if (userTweetsData && userTweetsData.tweets) {
              const tweetIndex = userTweetsData.tweets.findIndex(t => t.id === tweetData.id);
              if (tweetIndex !== -1) {
                userTweetsData.tweets[tweetIndex] = tweetData;
                await xDb.xUserTweets.put(userTweetsData);
                console.log(
                  '✅ [AI回复] 用户推文AI回复已保存，评论总数:',
                  tweetData.comments.length,
                  '，主评论',
                  tweetData.comments.length,
                  '条',
                );
              } else {
                console.error('❌ [AI回复] 未在数据库中找到目标推文');
              }
            }
          } else {
            console.log('🤖 [AI回复] 保存到主页推文数据');
            const tweetsData = await xDb.xTweetsData.get('tweets');
            if (tweetsData) {
              let updated = false;
              if (tweetsData.forYouTweets) {
                const index = tweetsData.forYouTweets.findIndex(t => t.id === tweetData.id);
                if (index !== -1) {
                  tweetsData.forYouTweets[index] = tweetData;
                  updated = true;
                }
              }
              if (tweetsData.followingTweets && !updated) {
                const index = tweetsData.followingTweets.findIndex(t => t.id === tweetData.id);
                if (index !== -1) {
                  tweetsData.followingTweets[index] = tweetData;
                  updated = true;
                }
              }
              if (updated) {
                await xDb.xTweetsData.put(tweetsData);
                console.log(
                  '✅ [AI回复] 主页推文AI回复已保存，评论总数:',
                  tweetData.comments.length,
                  '，主评论',
                  tweetData.comments.length,
                  '条',
                );
              } else {
                console.error('❌ [AI回复] 未在数据库中找到目标推文');
              }
            }
          }
          // 更新 sessionStorage
          sessionStorage.setItem('currentTweetData', JSON.stringify(tweetData));
          console.log('✅ [AI回复] sessionStorage 已更新');
        } catch (saveError) {
          console.error('❌ [AI回复] 保存AI回复到数据库失败:', saveError);
        }
        // 渲染到页面
        replies.forEach((comment, index) => {
          const commentElement = createCommentElement(comment, commentType === 'reply_comment');
          const commentsContainer = document.getElementById('detail-comments-container');
          if (commentType === 'reply_comment' && parentComment) {
            // 对于楼中楼回复，找到被回复评论的位置，插入为平级
            const allComments = commentsContainer.querySelectorAll('.comment-item');
            let insertPosition = null;
            let insertAfter = null; // 找到被回复评论的位置
            allComments.forEach(commentEl => {
              if (commentEl.dataset.commentId === parentComment.id) {
                insertPosition = commentEl; // 如果被回复的是楼中楼评论，找到这个评论组的最后一个评论
                if (commentEl.classList.contains('reply-item')) {
                  let nextSibling = commentEl.nextElementSibling;
                  insertAfter = commentEl; // 找到当前评论组的最后一条评论
                  while (nextSibling && nextSibling.classList.contains('reply-item')) {
                    insertAfter = nextSibling;
                    nextSibling = nextSibling.nextElementSibling;
                  }
                } else {
                  // 如果被回复的是主评论，找到这个评论组的最后一条评论（包括所有楼中楼）
                  let nextSibling = commentEl.nextElementSibling;
                  insertAfter = commentEl;
                  while (nextSibling && nextSibling.classList.contains('reply-item')) {
                    insertAfter = nextSibling;
                    nextSibling = nextSibling.nextElementSibling;
                  }
                }
              }
            });
            if (insertAfter) {
              // 插入到评论组的最后位置
              if (insertAfter.nextSibling) {
                insertAfter.parentNode.insertBefore(commentElement, insertAfter.nextSibling);
              } else {
                insertAfter.parentNode.appendChild(commentElement);
              }
            } else {
              // 如果没找到位置，就添加到末尾
              commentsContainer.appendChild(commentElement);
            }
          } else {
            // 主评论回复或找不到特定位置时，添加到末尾
            commentsContainer.appendChild(commentElement);
          }
        });
        console.log('✅ [AI回复] AI回复已渲染到页面'); // 更新回复输入框头像
        const replyUserAvatars = document.querySelectorAll('.reply-user-avatar');
        replyUserAvatars.forEach(avatar => {
          avatar.src = userProfileData.avatar;
        });
      } else {
        // 主页：更新数据并重新渲染
        console.log('🤖 [AI回复] 主页模式 - 开始处理');
        let tweetTimestamp = tweetData.timestamp || tweetData.createdAt || Date.now(); // 确保时间戳是数字格式（处理可能的Date对象或字符串）
        if (typeof tweetTimestamp !== 'number') {
          if (tweetTimestamp instanceof Date) {
            tweetTimestamp = tweetTimestamp.getTime();
          } else if (typeof tweetTimestamp === 'string') {
            tweetTimestamp = new Date(tweetTimestamp).getTime();
          } else {
            tweetTimestamp = Date.now();
          }
        }
        // 验证推文时间戳有效性
        if (isNaN(tweetTimestamp) || tweetTimestamp <= 0) {
          console.warn('⚠️ [AI回复] 主页模式：推文时间戳无效，使用当前时间');
          tweetTimestamp = Date.now();
        }
        if (commentType === 'main_comment') {
          // 主评论：添加到推文评论列表
          replies.forEach((comment, index) => {
            comment.id = `ai_main_unified_${timestamp}_${index}`; // 转换timeOffset为实际时间戳
            if (comment.timeOffset !== undefined && !isNaN(comment.timeOffset)) {
              comment.timestamp = tweetTimestamp + Math.abs(comment.timeOffset) * 60 * 1000;
              delete comment.timeOffset;
            } else if (!comment.timestamp || isNaN(comment.timestamp)) {
              comment.timestamp = tweetTimestamp + (2 + Math.random() * 20) * 60 * 1000;
            }
            // 最终验证
            if (isNaN(comment.timestamp) || comment.timestamp <= 0) {
              console.warn('⚠️ [AI回复] 主页模式：评论时间戳无效，使用推文时间');
              comment.timestamp = tweetTimestamp;
            }
            tweetData.comments.push(comment);
          });
          tweetData.stats.comments += replies.length;
          console.log('🤖 [AI回复] 已添加主评论，新增:', replies.length, '条，总计:', tweetData.comments.length);
        } else {
          // 楼中楼回复：添加到主评论的replies（平级显示）
          const targetCommentId = mainCommentId || parentComment.id;
          const mainCommentObj = tweetData.comments.find(c => c.id === targetCommentId);
          if (mainCommentObj) {
            replies.forEach((reply, index) => {
              reply.id = `ai_main_sub_unified_${timestamp}_${index}`; // 转换timeOffset为实际时间戳
              if (reply.timeOffset !== undefined && !isNaN(reply.timeOffset)) {
                reply.timestamp = tweetTimestamp + Math.abs(reply.timeOffset) * 60 * 1000;
                delete reply.timeOffset;
              } else if (!reply.timestamp || isNaN(reply.timestamp)) {
                let parentTimestamp = mainCommentObj.timestamp || mainCommentObj.createdAt || tweetTimestamp; // 确保 parentTimestamp 是数字
                if (typeof parentTimestamp !== 'number') {
                  parentTimestamp =
                    parentTimestamp instanceof Date
                      ? parentTimestamp.getTime()
                      : typeof parentTimestamp === 'string'
                      ? new Date(parentTimestamp).getTime()
                      : tweetTimestamp;
                }
                reply.timestamp = parentTimestamp + (1 + Math.random() * 10) * 60 * 1000;
              }
              // 最终验证
              if (isNaN(reply.timestamp) || reply.timestamp <= 0) {
                console.warn('⚠️ [AI回复] 主页模式：楼中楼回复时间戳无效，使用推文时间');
                reply.timestamp = tweetTimestamp;
              }
              if (!mainCommentObj.replies) mainCommentObj.replies = [];
              mainCommentObj.replies.push(reply);
            });
            console.log('🤖 [AI回复] 已添加楼中楼回复到主评论:', targetCommentId, '，新增:', replies.length, '条');
          } else {
            console.warn('⚠️ [AI回复] 无法找到主评论，mainCommentId:', targetCommentId);
          }
        }
        // 保存数据并重新渲染
        try {
          // 先更新全局数组中的推文数据
          let updated = false;
          const tweetIndex = forYouTweets.findIndex(t => t.id === tweetData.id);
          if (tweetIndex !== -1) {
            forYouTweets[tweetIndex] = tweetData;
            updated = true;
            console.log('🤖 [AI回复] 已更新forYouTweets中的推文');
          } else {
            const followingIndex = followingTweets.findIndex(t => t.id === tweetData.id);
            if (followingIndex !== -1) {
              followingTweets[followingIndex] = tweetData;
              updated = true;
              console.log('🤖 [AI回复] 已更新followingTweets中的推文');
            }
          }
          if (!updated) {
            console.warn('⚠️ [AI回复] 未在全局数组中找到推文:', tweetData.id);
          }
          // 保存到数据库
          const existingData = await xDb.xTweetsData.get('tweets');
          if (existingData) {
            existingData.forYouTweets = forYouTweets;
            existingData.followingTweets = followingTweets;
            existingData.lastUpdated = new Date().toISOString();
            await xDb.xTweetsData.put(existingData);
            console.log('✅ [AI回复] 数据已保存到数据库');
          } else {
            await xDb.xTweetsData.put({
              id: 'tweets',
              forYouTweets: forYouTweets,
              followingTweets: followingTweets,
              lastUpdated: new Date().toISOString(),
            });
            console.log('✅ [AI回复] 数据已创建并保存');
          }
        } catch (saveError) {
          console.error('❌ [AI回复] 保存统一AI回复数据失败:', saveError);
        }
        // 重新渲染评论区
        console.log('🤖 [AI回复] 开始重新渲染评论区，推文ID:', currentTweetId);
        renderComments(currentTweetId); // 滚动到底部
        const commentsContainer = document.querySelector('.comments-container');
        setTimeout(() => {
          if (commentsContainer) {
            commentsContainer.scrollTop = commentsContainer.scrollHeight;
            console.log('✅ [AI回复] 评论区已滚动到底部');
          }
        }, 100);
      }
      // 显示手机样式通知
      const isEnglish = currentLanguage === 'en';
      const userAvatar = window.userProfileData?.avatar || 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg';
      showPhoneNotification({
        title: 'X',
        message: isEnglish ? 'Your comment received a reply!' : '你的评论已经收到回复！',
        avatar: userAvatar,
        leftIcon: 'x',
      }); // 🔓 检测拉黑解除触发（如果用户评论了某人的推文）
      if (
        tweetData &&
        tweetData.user &&
        tweetData.user.handle &&
        userComment &&
        userComment.user &&
        userComment.user.handle
      ) {
        const userHandle = userComment.user.handle; // 用户的句柄
        const tweetAuthorHandle = tweetData.user.handle; // 推文作者的句柄
        const commentContent = userComment.content; // 评论内容
        // 异步检测拉黑解除
        checkUnblockTrigger(userHandle, tweetAuthorHandle, 'comment', commentContent).catch(err => {
          console.error('拉黑解除检测失败（静默）:', err);
        });
      }
    } catch (error) {
      console.error('生成统一AI回复失败:', error);
      showXToast(`回复生成失败: ${error.message}`, 'error');
    }
  }
  // 注意：已删除重复的API辅助函数定义，使用文件开头的健壮版本
  // ▲▲▲ 【主要！！！】第三个情景：统一AI回复生成器 ▲▲▲
  // ▲▲▲！！！三个情景综合如上！！！▲▲▲
  //▼▼▼ 引用转发功能JavaScript▼▼▼
  // 全局变量存储当前引用内容
  let currentQuoteData = null; // 处理账户主页推文的引用转发
  window.handleQuoteRetweetFromAccountTweet = async function (tweetId) {
    if (!currentViewingAccount || !currentViewingAccount.tweets) {
      showXToast('无法找到推文数据', 'error');
      return;
    }
    // 从当前查看的账户数据中查找推文
    const tweet = currentViewingAccount.tweets.find(t => t.id === tweetId);
    if (!tweet) {
      showXToast('未找到该推文', 'error');
      return;
    }
    // 处理图片数据（从media字段转换为image格式）
    let imageData = null;
    if (tweet.media && tweet.media.length > 0) {
      if (tweet.media[0].type === 'description') {
        imageData = {
          type: 'description',
          content: tweet.media[0].description,
        };
      }
    } else if (tweet.image) {
      // 兼容已有的image字段格式
      imageData = tweet.image;
    }
    // 调用引用处理函数
    handleQuoteRetweet(
      'tweet',
      tweet.id,
      tweet.user.name,
      tweet.user.handle,
      tweet.user.avatar,
      tweet.user.verified,
      tweet.content || '',
      tweet.time,
      imageData,
      null, // 账户推文暂不支持链接
      null, // 账户推文暂不支持位置
    );
  }; // 从数据源获取引用信息并处理转发
  async function handleQuoteRetweetFromData(type, id) {
    let sourceData = null;
    if (type === 'tweet') {
      // 从主页推文数据中查找
      const allTweets = [...forYouTweets, ...followingTweets];
      sourceData = allTweets.find(tweet => tweet.id === id); // 如果在主页没找到，查找用户推文
      if (!sourceData) {
        try {
          const db = getXDB(); // 🔧 多账户隔离：使用账户ID
          const userTweetsId = `userTweets_${currentAccountId || 'main'}`;
          const userTweets = await db.xUserTweets.get(userTweetsId);
          if (userTweets && userTweets.tweets) {
            sourceData = userTweets.tweets.find(tweet => tweet.id === id);
          }
        } catch (error) {
          console.error('查找用户推文失败:', error);
        }
      }
      // 如果还没找到，尝试从详情页当前推文中查找
      if (!sourceData) {
        const currentTweetData = sessionStorage.getItem('currentTweetData');
        if (currentTweetData) {
          try {
            const tweetData = JSON.parse(currentTweetData);
            if (tweetData.id === id) {
              sourceData = tweetData;
            }
          } catch (error) {
            console.error('解析详情页推文数据失败:', error);
          }
        }
      }
    } else if (type === 'comment') {
      // 从评论数据中查找
      sourceData = await findCommentById(id);
    }
    if (!sourceData) {
      showXToast('无法找到要引用的内容', 'error');
      return;
    }
    // 处理图片数据（从media字段转换为image格式）
    let imageData = null;
    if (sourceData.media && sourceData.media.length > 0) {
      // AI生成的推文使用media数组，第一个元素包含图片信息
      if (sourceData.media[0].type === 'description') {
        // 图片描述类型（AI生成的文字描述）
        imageData = {
          type: 'description',
          content: sourceData.media[0].description,
        };
      } else if (sourceData.media[0].type === 'image') {
        // 实际图片类型（虽然目前不常用，但保持兼容）
        imageData = {
          type: 'description',
          content: sourceData.media[0].description,
        };
      }
    } else if (sourceData.image) {
      // 兼容已有的image字段格式（用户上传的图片）
      imageData = sourceData.image;
    }
    // 调用引用处理函数
    handleQuoteRetweet(
      type,
      id,
      sourceData.user.name,
      sourceData.user.handle,
      sourceData.user.avatar,
      sourceData.user.verified,
      sourceData.content || '',
      sourceData.time,
      imageData, // 传递图片数据
      sourceData.link || null, // 传递链接数据
      sourceData.location || null, // 传递位置数据
    );
  }
  // 根据ID查找评论 - 修复楼中楼查找逻辑
  async function findCommentById(commentId) {
    // 首先尝试直接从DOM中找到对应的评论元素并提取数据
    // 这样可以确保引用的是用户实际点击的评论，避免数据结构和DOM结构不匹配
    const commentElement = document.querySelector(`[data-comment-id="${commentId}"]`);
    if (commentElement) {
      try {
        const userName = commentElement.querySelector('.tweet-user-name').textContent;
        const userHandle = commentElement.querySelector('.tweet-user-handle').textContent;
        const userAvatar = commentElement.querySelector('.tweet-avatar').src;
        const verified = commentElement.querySelector('.tweet-verified') !== null;
        const contentElement = commentElement.querySelector('.comment-content'); // 获取评论内容，过滤掉回复标记
        let content = '';
        if (contentElement) {
          // 克隆节点以避免修改原DOM
          const contentClone = contentElement.cloneNode(true); // 移除回复标记
          const replyTo = contentClone.querySelector('.reply-to');
          if (replyTo) {
            replyTo.remove();
          }
          content = contentClone.textContent.trim();
        }
        const timeElement = commentElement.querySelector('.tweet-time');
        const time = timeElement ? timeElement.textContent.replace('·', '').trim() : '刚刚';
        return {
          id: commentId,
          user: {
            name: userName,
            handle: userHandle,
            avatar: userAvatar,
            verified: verified,
          },
          content: content,
          time: time,
        };
      } catch (error) {
        console.error('从DOM提取评论信息失败:', error);
      }
    }
    // 如果从DOM提取失败，回退到数据查找
    // 在主页推文中查找
    const allTweets = [...forYouTweets, ...followingTweets];
    for (const tweet of allTweets) {
      if (tweet.comments) {
        for (const comment of tweet.comments) {
          if (comment.id === commentId) {
            return comment;
          }
          // 检查回复
          if (comment.replies) {
            for (const reply of comment.replies) {
              if (reply.id === commentId) {
                return reply;
              }
            }
          }
        }
      }
    }
    // 在详情页面当前推文中查找
    const currentTweetData = sessionStorage.getItem('currentTweetData');
    if (currentTweetData) {
      const tweetData = ValidationUtils.safeParseJSON(currentTweetData);
      if (tweetData && tweetData.comments) {
        for (const comment of tweetData.comments) {
          if (comment.id === commentId) {
            return comment;
          }
          // 检查回复
          if (comment.replies) {
            for (const reply of comment.replies) {
              if (reply.id === commentId) {
                return reply;
              }
            }
          }
        }
      }
    }
    // 在用户推文中查找
    try {
      const db = getXDB();
      const userTweets = await db.xUserTweets.get('userTweets');
      if (userTweets && userTweets.tweets) {
        for (const tweet of userTweets.tweets) {
          if (tweet.comments) {
            for (const comment of tweet.comments) {
              if (comment.id === commentId) {
                return comment;
              }
              // 检查回复
              if (comment.replies) {
                for (const reply of comment.replies) {
                  if (reply.id === commentId) {
                    return reply;
                  }
                }
              }
            }
          }
        }
      }
    } catch (error) {
      ValidationUtils.handleError(error, '查找用户推文评论');
    }
    return null;
  }
  // 处理引用转发
  function handleQuoteRetweet(
    type,
    id,
    userName,
    userHandle,
    userAvatar,
    verified,
    content,
    time,
    imageData = null,
    linkData = null,
    location = null,
  ) {
    // 打开发帖弹窗
    openComposeTweetModal(); // 存储引用数据
    currentQuoteData = {
      type: type, // 'tweet' 或 'comment'
      id: id,
      user: {
        name: userName,
        handle: userHandle,
        avatar: userAvatar,
        verified: verified,
      },
      content: content,
      time: time,
      image: imageData, // 图片数据
      link: linkData, // 链接数据
      location: location, // 位置数据
    }; // 显示引用内容预览
    showQuotePreview(); // 更新文本输入框占位符
    const textInput = document.getElementById('compose-text-input');
    if (textInput) {
      textInput.placeholder = type === 'tweet' ? '添加你的评论来引用这条推文' : '添加你的评论来引用这条评论';
      textInput.focus();
    }
  }
  // 显示引用内容预览
  function showQuotePreview() {
    if (!currentQuoteData) return;
    const preview = document.getElementById('quote-content-preview');
    const typeText = document.getElementById('quote-type-text');
    const userAvatar = document.getElementById('quote-user-avatar');
    const userName = document.getElementById('quote-user-name');
    const userVerified = document.getElementById('quote-user-verified');
    const userHandle = document.getElementById('quote-user-handle');
    const userTime = document.getElementById('quote-user-time');
    const contentText = document.getElementById('quote-content-text');
    if (!preview) return; // 显示预览区域
    preview.style.display = 'block'; // 设置引用类型
    if (typeText) {
      typeText.textContent = currentQuoteData.type === 'tweet' ? '引用推文' : '引用评论';
    }
    // 设置用户信息
    if (userAvatar) userAvatar.src = currentQuoteData.user.avatar;
    if (userName) userName.textContent = currentQuoteData.user.name;
    if (userHandle) userHandle.textContent = currentQuoteData.user.handle;
    if (userTime) userTime.textContent = '·' + currentQuoteData.time; // 显示/隐藏认证图标
    if (userVerified) {
      userVerified.style.display = currentQuoteData.user.verified ? 'inline' : 'none';
    }
    // 设置内容
    if (contentText) {
      // 处理内容中的HTML转义
      const processedContent = currentQuoteData.content
        .replace(/&quot;/g, '"')
        .replace(/&#x27;/g, "'")
        .replace(/&amp;/g, '&');
      contentText.textContent = processedContent;
    }
    // 处理图片内容（支持多图）
    const imageContainer = document.getElementById('quote-image-container');
    if (imageContainer) {
      if (currentQuoteData.image) {
        imageContainer.style.display = 'block'; // 文字描述类型
        if (currentQuoteData.image.type === 'description') {
          imageContainer.innerHTML = `
 <div style="margin-top: 8px; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 8px; padding: 8px; box-sizing: border-box;">
 <div style="color:var(--x-text-primary); font-size: 13px; line-height: 1.4; white-space: pre-wrap; word-wrap: break-word; overflow-wrap: break-word; width: 100%; box-sizing: border-box;">${currentQuoteData.image.content}</div>
 </div>
 `;
        }
        // 单图上传
        else if (currentQuoteData.image.type === 'upload') {
          imageContainer.innerHTML = `
 <div style="margin-top: 8px; border-radius: 8px; overflow: hidden;">
 <img src="${currentQuoteData.image.content}" style="width: 100%; max-height: 120px; object-fit: cover; display: block;" alt="引用图片">
 </div>
 `;
        }
        // 多图上传
        else if (
          currentQuoteData.image.type === 'uploads' &&
          currentQuoteData.image.images &&
          currentQuoteData.image.images.length > 0
        ) {
          const imageCount = currentQuoteData.image.images.length;
          let gridTemplate =
            imageCount <= 2 ? 'grid-template-columns: repeat(2, 1fr);' : 'grid-template-columns: repeat(2, 1fr);';
          const imagesHtml = currentQuoteData.image.images
            .map((img, index) => {
              return `
 <div style="border-radius: 6px; overflow: hidden;">
 <img src="${img.content}" style="width: 100%; height: 80px; object-fit: cover; display: block;" alt="引用图片${
                index + 1
              }">
 </div>
 `;
            })
            .join('');
          imageContainer.innerHTML = `
 <div style="margin-top: 8px; display: grid; ${gridTemplate} gap: 4px;">
 ${imagesHtml}
 </div>
 `;
        }
      } else {
        imageContainer.style.display = 'none';
        imageContainer.innerHTML = '';
      }
    }
  }
  // 移除引用内容
  function removeQuoteContent() {
    currentQuoteData = null;
    const preview = document.getElementById('quote-content-preview');
    if (preview) {
      preview.style.display = 'none';
    }
    // 清理图片容器
    const imageContainer = document.getElementById('quote-image-container');
    if (imageContainer) {
      imageContainer.style.display = 'none';
      imageContainer.innerHTML = '';
    }
    // 恢复原始占位符
    const textInput = document.getElementById('compose-text-input');
    if (textInput) {
      textInput.placeholder = '有什么新鲜事？';
    }
  }
  // ▲▲▲ 引用转发功能JavaScript ▲▲▲

  // ============================================
  // 推文详情页评论表情包功能
  // ============================================

  // 评论模式标识变量
  let isCommentStickerMode = false;
  let selectedCommentSticker = null;

  // 将变量暴露到全局以便其他模块访问
  window.isCommentStickerMode = isCommentStickerMode;

  // 暴露获取和设置isCommentStickerMode的函数
  window.getCommentStickerMode = () => isCommentStickerMode;
  window.setCommentStickerMode = value => {
    isCommentStickerMode = value;
    window.isCommentStickerMode = value;
  };

  // 暴露获取和设置selectedCommentSticker的函数
  window.getSelectedCommentSticker = () => selectedCommentSticker;
  window.setSelectedCommentSticker = value => {
    selectedCommentSticker = value;
  };

  // 重置选中的评论表情包
  window.resetSelectedCommentSticker = () => {
    selectedCommentSticker = null;
  };

  // 打开评论表情包选择器 (已移动到全局作用域)

  // 为评论选择表情包
  window.selectCommentSticker = function (sticker) {
    if (!window.getCommentStickerMode()) return;

    // 保存选中的表情包
    selectedCommentSticker = sticker;

    // 更新使用统计
    if (window.userStickers && Array.isArray(window.userStickers)) {
      const stickerIndex = window.userStickers.findIndex(
        s => s.url === sticker.url && s.description === sticker.description,
      );

      if (stickerIndex !== -1) {
        window.userStickers[stickerIndex].useCount = (window.userStickers[stickerIndex].useCount || 0) + 1;
        window.userStickers[stickerIndex].lastUsedAt = new Date().toISOString();

        // 保存使用统计
        if (window.saveUserStickers) {
          window.saveUserStickers();
        }
      }
    }

    // 显示表情包预览
    showCommentStickerPreview(sticker);

    // 关闭选择器
    if (window.closeStickerPicker) {
      window.closeStickerPicker();
    }

    // 重置模式标识
    window.setCommentStickerMode(false);
  };

  // 显示评论表情包预览
  function showCommentStickerPreview(sticker) {
    const inputArea = document.querySelector('.detail-comment-input-area');
    if (!inputArea) return;

    // 移除现有预览
    removeCommentStickerPreview();

    // 创建预览容器
    const previewContainer = document.createElement('div');
    previewContainer.id = 'comment-sticker-preview';
    previewContainer.style.cssText = `
      margin-top: 10px;
      padding: 12px;
      background-color: var(--x-bg-secondary);
      border: 1px solid var(--x-border-color);
      border-radius: 12px;
      display: flex;
      align-items: center;
      gap: 12px;
      position: relative;
    `;

    // 表情包图片
    const stickerImg = document.createElement('img');
    stickerImg.src = sticker.url;
    stickerImg.alt = sticker.description;
    stickerImg.style.cssText = `
      width: 60px;
      height: 60px;
      object-fit: contain;
      border-radius: 8px;
    `;

    // 表情包描述
    const stickerInfo = document.createElement('div');
    stickerInfo.style.cssText = `
      flex: 1;
      color: var(--x-text-primary);
    `;
    stickerInfo.innerHTML = `
      <div style="font-size: 13px; font-weight: 600; margin-bottom: 2px;">选中的表情包</div>
      <div style="font-size: 12px; color: var(--x-text-secondary);">${sticker.description || '表情包'}</div>
    `;

    // 移除按钮
    const removeBtn = document.createElement('button');
    removeBtn.innerHTML = `
      <svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: currentColor;">
        <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
      </svg>
    `;
    removeBtn.style.cssText = `
      background: none;
      border: none;
      color: var(--x-text-secondary);
      cursor: pointer;
      padding: 4px;
      border-radius: 50%;
      transition: all 0.2s;
      display: flex;
      align-items: center;
      justify-content: center;
    `;
    removeBtn.onmouseover = () => {
      removeBtn.style.backgroundColor = 'var(--x-bg-hover)';
      removeBtn.style.color = 'var(--x-text-primary)';
    };
    removeBtn.onmouseout = () => {
      removeBtn.style.backgroundColor = 'transparent';
      removeBtn.style.color = 'var(--x-text-secondary)';
    };
    removeBtn.onclick = () => {
      // 用户手动删除表情包预览时，重置选择
      const preview = document.getElementById('comment-sticker-preview');
      if (preview) {
        preview.remove();
      }
      if (window.setSelectedCommentSticker) {
        window.setSelectedCommentSticker(null);
      } else {
        selectedCommentSticker = null;
      }
      updateDetailReplyButtonState();
    };

    // 组装预览
    previewContainer.appendChild(stickerImg);
    previewContainer.appendChild(stickerInfo);
    previewContainer.appendChild(removeBtn);

    // 插入到输入区域
    inputArea.appendChild(previewContainer);

    // 更新回复按钮状态
    updateDetailReplyButtonState();
  }

  // 移除评论表情包预览
  function removeCommentStickerPreview() {
    const preview = document.getElementById('comment-sticker-preview');
    if (preview) {
      preview.remove();
    }
    // 只在用户手动删除时重置表情包选择，不在自动清理时重置
    // selectedCommentSticker = null;  // 移除这行，由其他函数管理
    updateDetailReplyButtonState();
  }

  // 获取评论内容（包括表情包）
  window.getCommentContent = function () {
    const textInput = document.getElementById('detail-comment-input');
    const textContent = textInput ? textInput.value.trim() : '';

    return {
      text: textContent,
      sticker: window.getSelectedCommentSticker ? window.getSelectedCommentSticker() : selectedCommentSticker,
    };
  };

  // 清理评论输入（在发送评论后调用）
  window.clearCommentInput = function () {
    console.log('📝 [清理调试] 开始清理评论输入');

    const textInput = document.getElementById('detail-comment-input');
    if (textInput) {
      textInput.value = '';
      textInput.style.height = '20px';
    }

    // 清除表情包预览
    const preview = document.getElementById('comment-sticker-preview');
    if (preview) {
      preview.remove();
      console.log('📝 [清理调试] 表情包预览已移除');
    }

    // 重置表情包选择
    if (window.setSelectedCommentSticker) {
      window.setSelectedCommentSticker(null);
      console.log('📝 [清理调试] 表情包选择已重置（通过全局函数）');
    } else {
      selectedCommentSticker = null;
      console.log('📝 [清理调试] 表情包选择已重置（直接赋值）');
    }

    // 清除图片预览
    const imagePreview = document.getElementById('detail-comment-image-preview');
    if (imagePreview) {
      imagePreview.style.display = 'none';
    }

    updateDetailReplyButtonState();
    console.log('📝 [清理调试] 评论输入清理完成');
  };

  // 暴露评论表情包函数到全局作用域
  window.openCommentStickers = openCommentStickers;

  // 修改现有的表情包选择逻辑（需要拦截点击事件）
  // 这将在 x-init.js 的表情包渲染代码中处理

  // ▲▲▲ 推文详情页评论表情包功能JavaScript ▲▲▲

  // ============================================
  // 答疑页面跳转功能
  // ============================================
  window.openHelpPage = function () {
    // 检测当前语言
    const isEnglish = currentLanguage === 'en';

    // 显示确认弹窗
    if (confirm(isEnglish ? 'Are you ready to navigate to the Help & FAQ page?' : '是否准备移动到答疑页面？')) {
      // 用户确认，跳转到答疑页面
      window.open('https://docs.qq.com/smartsheet/DQkppaVN2enJVSHBq', '_blank');
      console.log('✅ 已打开答疑页面');
    } else {
      console.log('❌ 用户取消跳转答疑页面');
    }
  };

  // ▲▲▲ 【整合】X社交app的JavaScript代码结束 ▲▲▲
  // ============================================

  // 第四部分: 初始化和对外接口
  // ============================================
  // 初始化X社交应用
  async function initXSocialApp() {
    try {
      console.log('🚀 初始化 X Social App...'); // 0. 清理之前的定时器和状态（防止重复初始化导致的问题）
      if (chatHistoryDetectionTimer) {
        clearInterval(chatHistoryDetectionTimer);
        chatHistoryDetectionTimer = null;
      }
      if (autoRefreshFeedTimer) {
        clearInterval(autoRefreshFeedTimer);
        autoRefreshFeedTimer = null;
      }
      // 重置启用状态（将由恢复函数根据保存的设置决定）
      chatHistoryDetectionEnabled = false;
      autoRefreshFeedEnabled = false; // 1. 注入样式
      injectStyles(); // 2. 创建HTML结构
      createXSocialHTML(); // 3. 加载活跃账号（必须在加载用户资料之前）
      await loadActiveAccount();
      console.log('📌 当前活跃账户:', currentAccountId, '(window.currentAccountId:', window.currentAccountId + ')'); // 4. 初始化推文数据
      await initializeTweets(); // 5. 加载用户资料（使用正确的currentAccountId）
      await loadUserProfile(); // 6. 初始化X设置（按账号加载）
      await initializeXSettings(); // 7. 绑定所有事件处理器
      bindEventHandlers(); // 8. 更新UI显示（确保用户资料正确显示）
      loadUserProfileToUI(); // 9. 加载主题偏好
      await loadXThemePreference(); // 10. 加载主题色偏好
      await loadAccentColorPreference(); // 11. 启动后台自动发消息系统（如果有角色启用了该功能）
      setTimeout(() => {
        if (typeof startAutoMessageSystem === 'function') {
          startAutoMessageSystem();
        }
      }, 120000); // 延迟2分钟启动，确保所有数据已加载
      // 11.5. 启动粉丝数动态浮动系统
      setTimeout(() => {
        if (typeof startFollowersFluctuationSystem === 'function') {
          startFollowersFluctuationSystem();
        }
      }, 120000); // 延迟2分钟启动，确保所有数据已加载
      // 12. 🔧 已移除智能刷新主页状态的自动恢复功能（改为用户手动开启）
      // setTimeout(() => {
      // restoreAutoRefreshFeedState(); // }, 120000); // 13. 🔧 已移除聊天记忆检测状态的自动恢复功能（改为用户手动开启）
      // setTimeout(() => {
      // restoreChatHistoryDetectionState();
      // }, 120000);

      // 14. 显示一次性欢迎弹窗
      await showWelcomePopup();

      console.log('✅ X Social App 初始化完成');
      console.log('💡 [提示] 智能刷新和智能检测需要手动开启');
    } catch (error) {
      console.error('❌ X Social App 初始化失败:', error);
      showXToast('应用初始化失败: ' + error.message, 'error');
    }
  }

  // ============================================
  // 一次性欢迎弹窗功能
  // ============================================

  // 显示一次性欢迎弹窗
  async function showWelcomePopup() {
    try {
      // 🆕 定义当前弹窗内容版本（内容变化时修改此版本号）
      const currentPopupVersion = 'v2.0'; // 修改版本号以触发重新显示
      const currentPopupContent = `x修复bug
x设置页面新增答疑按钮 点击跳转答疑页面
!!新增的直播功能请勿点击 还未完善 出错本羊概不负责`;

      // 检查是否已经显示过此版本的弹窗
      const lastShownVersion = localStorage.getItem('x-app-welcome-popup-version');
      if (lastShownVersion === currentPopupVersion) {
        console.log('🎉 当前版本弹窗已显示过，跳过');
        return;
      }

      console.log('🎉 显示欢迎弹窗 (版本:', currentPopupVersion + ')');

      // 注入像素字体样式
      const fontStyle = document.createElement('style');
      fontStyle.id = 'pixel-font-style';
      fontStyle.textContent = `
 @import url("https://fontsapi.zeoseven.com/569/main/result.css");

 .pixel-font {
 font-family: "Fusion Pixel 10px P zh_hans", monospace;
 font-weight: normal;
 }
 `;
      document.head.appendChild(fontStyle);

      // 创建弹窗
      const popup = document.createElement('div');
      popup.id = 'welcome-popup';
      popup.style.cssText = `
 position: fixed;
 top: 0;
 left: 0;
 width: 100vw;
 height: 100vh;
 background: rgba(0, 0, 0, 0.5);
 display: flex;
 align-items: center;
 justify-content: center;
 z-index: 99999;
 font-family: "Fusion Pixel 10px P zh_hans", monospace;
 `;

      popup.innerHTML = `
 <div style="
 background: #c0c0c0;
 border: 3px outset #c0c0c0;
 border-image: none;
 width: 400px;
 max-width: 90%;
 box-shadow: 2px 2px 0px rgba(0, 0, 0, 0.5);
 font-family: 'Fusion Pixel 10px P zh_hans', monospace;
 ">
 <!-- 标题栏 -->
 <div style="
 background: linear-gradient(90deg, #0000ff 0%, #000080 100%);
 color: white;
 padding: 2px 4px;
 font-size: 11px;
 display: flex;
 align-items: center;
 justify-content: space-between;
 font-family: 'Fusion Pixel 10px P zh_hans', monospace;
 ">
 <span style="font-weight: bold;">吃点羊提醒您</span>
 <button id="welcome-popup-close" style="
 background: #c0c0c0;
 border: 1px outset #c0c0c0;
 color: black;
 font-size: 10px;
 width: 16px;
 height: 14px;
 padding: 0;
 cursor: pointer;
 font-family: 'Fusion Pixel 10px P zh_hans', monospace;
 font-weight: bold;
 ">×</button>
 </div>

 <!-- 内容区域 -->
 <div style="
 padding: 16px;
 background: #c0c0c0;
 font-family: 'Fusion Pixel 10px P zh_hans', monospace;
 ">
 <div style="
 display: flex;
 align-items: flex-start;
 gap: 12px;
 margin-bottom: 12px;
 ">
 <!-- 图标 -->
 <div style="
 width: 32px;
 height: 32px;
 background: #ffff00;
 border: 2px inset #c0c0c0;
 display: flex;
 align-items: center;
 justify-content: center;
 font-size: 16px;
 flex-shrink: 0;
 ">💡</div>

 <!-- 消息内容 -->
 <div style="
 flex: 1;
 font-size: 11px;
 line-height: 1.4;
 color: #000;
 font-family: 'Fusion Pixel 10px P zh_hans', monospace;
 ">
 <div style="font-weight: bold; margin-bottom: 6px;">吃点羊提醒您：</div>
 <div style="margin-bottom: 4px;">x修复bug</div>
 <div style="margin-bottom: 4px; font-weight: bold;">x设置页面新增答疑按钮 点击跳转答疑页面</div>
 <div>!!新增的直播功能请勿点击 还未完善 出错本羊概不负责</div>
 </div>
 </div>

 <!-- 按钮区域 -->
 <div style="
 display: flex;
 justify-content: center;
 gap: 8px;
 margin-top: 16px;
 ">
 <button id="welcome-popup-ok" style="
 background: #c0c0c0;
 border: 2px outset #c0c0c0;
 color: black;
 font-size: 11px;
 padding: 4px 16px;
 cursor: pointer;
 font-family: 'Fusion Pixel 10px P zh_hans', monospace;
 min-width: 60px;
 ">确定</button>
 </div>
 </div>
 </div>
 `;

      // 添加到x-social-screen容器或body
      const xSocialScreen = document.getElementById('x-social-screen');
      if (xSocialScreen) {
        xSocialScreen.appendChild(popup);
      } else {
        document.body.appendChild(popup);
      }

      // 绑定关闭事件
      const closeBtn = document.getElementById('welcome-popup-close');
      const okBtn = document.getElementById('welcome-popup-ok');

      const closePopup = () => {
        popup.remove();
        // 🆕 保存当前版本号而不是简单的true标记
        localStorage.setItem('x-app-welcome-popup-version', currentPopupVersion);
        console.log('✅ 欢迎弹窗已关闭，当前版本:', currentPopupVersion);
      };

      closeBtn.onclick = closePopup;
      okBtn.onclick = closePopup;

      // 点击背景关闭
      popup.onclick = e => {
        if (e.target === popup) {
          closePopup();
        }
      };

      // 添加按钮hover效果
      [closeBtn, okBtn].forEach(btn => {
        btn.onmouseenter = () => {
          btn.style.border = '2px inset #c0c0c0';
        };
        btn.onmouseleave = () => {
          btn.style.border = btn === closeBtn ? '1px outset #c0c0c0' : '2px outset #c0c0c0';
        };
        btn.onmousedown = () => {
          btn.style.border = '2px inset #c0c0c0';
        };
        btn.onmouseup = () => {
          btn.style.border = btn === closeBtn ? '1px outset #c0c0c0' : '2px outset #c0c0c0';
        };
      });
    } catch (error) {
      console.error('❌ 显示欢迎弹窗失败:', error);
    }
  }

  // 渲染X社交页面 - 兼容现有HTML的调用方式
  function renderXSocialScreen() {
    console.log('🎬 渲染X社交页面'); // 如果还未初始化，先初始化
    const xScreen = document.getElementById('x-social-screen');
    if (!xScreen) {
      console.log('⚠️ X社交页面未创建，开始初始化...');
      initXSocialApp().then(() => {
        console.log('✅ 初始化完成，显示主页');
        const screen = document.getElementById('x-social-screen');
        if (screen) {
          screen.style.display = 'flex';
          switchXPage('home');
        }
      });
    } else {
      console.log('✅ X社交页面已存在，直接显示'); // 确保页面可见
      xScreen.style.display = 'flex';
      switchXPage('home');
    }
  }
  // 获取默认用户资料配置（统一管理）
  function getDefaultUserProfile(accountId = 'main') {
    return {
      id: accountId,
      name: accountId === 'main' ? '我' : '新用户',
      handle: accountId === 'main' ? '@me' : '@newuser_' + Date.now().toString().slice(-6),
      avatar: 'https://i.postimg.cc/pXxk1JXk/IMG-6442.jpg',
      coverImage: 'https://i.postimg.cc/qRzMB6nQ/default-cover.jpg',
      verified: false,
      verificationType: 'none',
      bio: '欢迎来到我的X主页！',
      publicIdentity: '',
      showRealName: false,
      realName: '',
      customTag1: '科技爱好者',
      customTag1Icon: '✨',
      customTag1Color: '#71767b',
      customTag2: '2024年加入',
      customTag2Icon: '📅',
      customTag2Color: '#71767b',
      followingCount: accountId === 'main' ? '156' : '0',
      followersCount: accountId === 'main' ? '89' : '0',
      knownIdentityCharacters: [],
      coupleCharacterId: '',
      coupleCharacterName: '',
      lastUpdated: new Date().toISOString(),
    };
  }
  // 加载用户资料（初始化专用 - 简化版）
  async function loadUserProfile() {
    try {
      const db = getXDB();
      const accountId = currentAccountId || 'main';
      const profile = await db.xUserProfile.get(accountId);
      if (profile) {
        // 更新现有对象的属性，而不是替换整个对象（保持引用一致）
        Object.assign(window.userProfileData, profile);
      } else {
        // 使用默认用户资料并保存到数据库（仅在首次初始化时）
        const defaultProfile = getDefaultUserProfile(accountId);
        Object.assign(window.userProfileData, defaultProfile);
        await db.xUserProfile.put(window.userProfileData);
        console.log('📝 已创建默认用户资料:', accountId);
      }
      // 确保必要字段存在（兼容旧数据）
      ensureProfileFields(window.userProfileData);
      console.log('✅ 用户资料已加载:', window.userProfileData.name, '(账户:', accountId + ')');
      console.log('🔍 用户资料详情:', {
        认证类型: window.userProfileData.verificationType,
        情侣角色: window.userProfileData.coupleCharacterName,
        已知身份角色数: window.userProfileData.knownIdentityCharacters?.length || 0,
      });
    } catch (error) {
      console.error('❌ 加载用户资料失败:', error); // 即使失败也使用默认值
      const defaultProfile = getDefaultUserProfile('main');
      Object.assign(window.userProfileData, defaultProfile);
    }
  }
  // 确保用户资料包含所有必要字段（用于数据兼容）
  function ensureProfileFields(profile) {
    if (!profile.knownIdentityCharacters) profile.knownIdentityCharacters = [];
    if (!profile.verificationType) profile.verificationType = 'none';
    if (!profile.coupleCharacterId) profile.coupleCharacterId = '';
    if (!profile.coupleCharacterName) profile.coupleCharacterName = '';
    if (profile.publicIdentity === undefined) profile.publicIdentity = '';
    if (profile.showRealName === undefined) profile.showRealName = false;
    if (profile.realName === undefined) profile.realName = '';
    if (!profile.customTag1Color) profile.customTag1Color = '#71767b';
    if (!profile.customTag2Color) profile.customTag2Color = '#71767b';
  }
  // 绑定事件处理器
  function bindEventHandlers() {
    // 因为HTML是动态创建的，需要在创建后绑定所有事件
    // 绑定角色X资料表单事件
    const characterXProfileForm = document.getElementById('character-x-profile-form');
    if (characterXProfileForm) {
      characterXProfileForm.addEventListener('submit', saveCharacterXProfile);
      console.log('✅ 已绑定角色X资料表单提交事件');
    }
    // 绑定简介字符计数事件
    const characterXBio = document.getElementById('character-x-bio');
    if (characterXBio) {
      characterXBio.addEventListener('input', updateCharacterBioCount);
    }
    // 绑定关系表单事件
    const relationshipForm = document.getElementById('relationship-form');
    if (relationshipForm) {
      relationshipForm.addEventListener('submit', saveRelationshipForm);
      console.log('✅ 已绑定关系表单提交事件');
    }
    // 绑定关系描述字符计数事件
    const relationshipDesc = document.getElementById('relationship-description');
    if (relationshipDesc) {
      relationshipDesc.addEventListener('input', updateRelationshipDescCount);
    }
    // 绑定角色真实姓名字符计数事件
    const characterRealName = document.getElementById('character-real-name');
    if (characterRealName) {
      characterRealName.addEventListener('input', updateCharacterXProfileCounts);
    }
    console.log('✅ 所有事件处理器已绑定');
  }
  // ============================================
  // 提问箱功能
  // ============================================
  // 提问箱数据（临时存储，后续可持久化到数据库）
  let askboxData = {
    avatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
    nickname: '= =',
    prompt: '请向我匿名提问!waiting...',
    background: 'https://i.postimg.cc/7LqVqxt4/mmexport1759588659314.jpg',
    answeredQuestions: [],
  }; // 提问箱多选删除相关变量
  let isAskboxMultiSelectMode = false;
  let selectedQuestions = new Set();
  let questionLongPressTimer = null; // 从数据库加载提问箱数据
  async function loadAskboxDataFromDB() {
    try {
      const xDb = getXDB();
      const accountId = currentAccountId || 'main';
      const askboxId = `askbox_${accountId}`;
      const savedData = await xDb.xAskbox.get(askboxId);
      if (savedData) {
        // 从数据库加载 - 完全替换askboxData对象，避免旧数据残留
        askboxData.id = savedData.id;
        askboxData.avatar = savedData.avatar;
        askboxData.nickname = savedData.nickname;
        askboxData.prompt = savedData.prompt;
        askboxData.background = savedData.background;
        askboxData.answeredQuestions = savedData.answeredQuestions || [];
        console.log('✅ 提问箱数据已从数据库加载:', accountId, '提问数:', askboxData.answeredQuestions.length);
      } else {
        // 使用默认数据并保存到数据库（为新账户创建空的提问箱）
        askboxData.id = askboxId;
        askboxData.avatar = 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg';
        askboxData.nickname = '= =';
        askboxData.prompt = '请向我匿名提问!waiting...';
        askboxData.background = 'https://i.postimg.cc/7LqVqxt4/mmexport1759588659314.jpg';
        askboxData.answeredQuestions = []; // 新账户从空列表开始
        // 保存到数据库
        await xDb.xAskbox.put({
          id: askboxId,
          avatar: askboxData.avatar,
          nickname: askboxData.nickname,
          prompt: askboxData.prompt,
          background: askboxData.background,
          answeredQuestions: [],
        });
        console.log('✅ 已为新账户创建默认提问箱数据:', accountId, '提问数: 0');
      }
    } catch (error) {
      console.error('❌ 加载提问箱数据失败:', error);
    }
  }
  // 保存提问箱数据到数据库
  async function saveAskboxDataToDB() {
    try {
      const xDb = getXDB();
      const accountId = currentAccountId || 'main';
      const askboxId = `askbox_${accountId}`;
      askboxData.id = askboxId;
      await xDb.xAskbox.put(askboxData);
      console.log('✅ 提问箱数据已保存到数据库:', accountId);
    } catch (error) {
      console.error('❌ 保存提问箱数据失败:', error);
    }
  }
  // 加载提问箱数据到UI
  async function loadAskboxData() {
    // 从数据库加载
    await loadAskboxDataFromDB(); // 更新UI
    const avatarEl = document.getElementById('askbox-avatar');
    const nicknameEl = document.getElementById('askbox-nickname');
    const promptEl = document.getElementById('askbox-prompt');
    const backgroundEl = document.getElementById('askbox-background');
    if (avatarEl) avatarEl.src = askboxData.avatar;
    if (nicknameEl) nicknameEl.textContent = askboxData.nickname;
    if (promptEl) promptEl.textContent = askboxData.prompt;
    if (backgroundEl) backgroundEl.style.backgroundImage = `url('${askboxData.background}')`; // 渲染已回答的提问列表
    renderAnsweredQuestions();
  }
  // 修改提问箱头像
  async function changeAskboxAvatar() {
    const newAvatar = prompt('请输入新的头像URL:', askboxData.avatar);
    if (newAvatar && newAvatar.trim()) {
      askboxData.avatar = newAvatar.trim();
      const avatarEl = document.getElementById('askbox-avatar');
      if (avatarEl) avatarEl.src = askboxData.avatar; // 保存到数据库
      await saveAskboxDataToDB();
      showXToast('头像已更新并保存', 'success');
    }
  }
  // 保存提问箱昵称（原处编辑）
  async function saveAskboxNickname() {
    const nicknameEl = document.getElementById('askbox-nickname');
    if (!nicknameEl) return;
    const newNickname = nicknameEl.textContent.trim();
    if (newNickname && newNickname !== askboxData.nickname) {
      askboxData.nickname = newNickname;
      await saveAskboxDataToDB();
      console.log('✅ 昵称已自动保存:', newNickname);
    }
  }
  // 保存提问卡片文字（原处编辑）
  async function saveAskboxPrompt() {
    const promptEl = document.getElementById('askbox-prompt');
    if (!promptEl) return;
    const newPrompt = promptEl.textContent.trim();
    if (newPrompt && newPrompt !== askboxData.prompt) {
      askboxData.prompt = newPrompt;
      await saveAskboxDataToDB();
      console.log('✅ 提示文字已自动保存:', newPrompt);
    }
  }
  // 打开提问箱设置
  function openAskboxSettings() {
    const newBackground = prompt('请输入新的背景图URL:', askboxData.background);
    if (newBackground && newBackground.trim()) {
      askboxData.background = newBackground.trim();
      const backgroundEl = document.getElementById('askbox-background');
      if (backgroundEl) backgroundEl.style.backgroundImage = `url('${askboxData.background}')`; // 保存到数据库
      saveAskboxDataToDB();
      showXToast('背景图已更新并保存', 'success');
    }
  }
  // 获取新的提问（第四个情景：提问箱AI生成）
  async function getNewQuestion() {
    try {
      showXToast('正在生成新的提问...', 'info'); // 🔧 使用统一的API配置加载工具
      const { apiConfig, xSettings, xDb } = await APIUtils.loadConfigAndSettings();
      const { userPrompt, worldSetting, boundCharacters } = xSettings; // 使用工具函数构建用户X个人资料信息
      const userXProfileInfo = StringBuilders.buildUserXProfileInfo(window.userProfileData); // 读取用户已发布的推文（最近5条）
      const userTweetsId = `userTweets_${currentAccountId || 'main'}`;
      const userTweetsData = await xDb.xUserTweets.get(userTweetsId);
      const userTweets = userTweetsData?.tweets || [];
      const recentUserTweets = userTweets.slice(0, 5); // 最近5条推文
      // 获取情侣角色的X资料
      let coupleCharacterInfo = '';
      if (userXProfileInfo.verificationType === 'couple' && userXProfileInfo.coupleCharacterId) {
        const coupleCharacterProfile = await xDb.xCharacterProfiles
          .where('characterId')
          .equals(userXProfileInfo.coupleCharacterId)
          .first();
        if (coupleCharacterProfile) {
          coupleCharacterInfo = `
【情侣角色信息】：
- X姓名：${coupleCharacterProfile.xName}
- X句柄：${coupleCharacterProfile.xHandle}
- X简介：${coupleCharacterProfile.xBio || '无'}
- 公众身份：${coupleCharacterProfile.publicIdentity || '无'}
- 真实姓名：${
            coupleCharacterProfile.showRealName && coupleCharacterProfile.realName
              ? coupleCharacterProfile.realName
              : '未公开'
          }
`;
        }
      }
      // 获取绑定角色信息（用于匿名提问）
      let boundCharactersInfo = '';
      if (boundCharacters.length > 0) {
        const mainDB = getDB();
        const allChats = await mainDB.chats.toArray();
        const boundCharsData = allChats.filter(chat => !chat.isGroup && boundCharacters.includes(chat.id));
        const allXProfiles = await xDb.xCharacterProfiles.toArray();
        const xProfileMap = new Map();
        allXProfiles.forEach(profile => {
          xProfileMap.set(profile.characterId, profile);
        });
        if (boundCharsData.length > 0) {
          boundCharactersInfo = '\n【绑定角色信息（可匿名提问）】：\n以下角色可以作为匿名提问者：\n';
          for (const char of boundCharsData) {
            const xProfile = xProfileMap.get(char.id);
            if (xProfile) {
              boundCharactersInfo += `\n- ${xProfile.xName}（${xProfile.xHandle}）: ${
                char.settings.aiPersona?.substring(0, 100) || ''
              }`;
            }
          }
        }
      }
      // 收集已回复的提问（作为对话历史）
      const answeredQuestionsContext = askboxData.answeredQuestions
        .filter(q => q.answer && q.answer.trim())
        .slice(0, 5) // 最近5个已回复的提问
        .map(q => `Q: ${q.question}\nA: ${q.answer}`)
        .join('\n\n'); // Token计数器
      let tokenCount = 0; // 构建提问箱专用系统提示词
      let systemPrompt = StringBuilders.buildBaseSystemPrompt({
        userPrompt,
        worldSetting,
      });
      tokenCount = TokenUtils.logTokenUsage('提问箱生成器', '基础系统提示词', systemPrompt, tokenCount);
      systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 核心任务说明 - 匿名提问箱 🎯
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
你是一个匿名提问箱系统。请为用户生成一个有趣的、适合他们身份的匿名提问。
【用户身份信息】：
- 用户名：${userXProfileInfo.name}
- X句柄：${userXProfileInfo.handle}
- 简介：${userXProfileInfo.bio || '无'}
- 公众身份：${userXProfileInfo.publicIdentity || '无'}
- 认证类型：${StringBuilders.getUserVerificationTypeDescription(userXProfileInfo)}
${
  userXProfileInfo.verificationType === 'couple' && userXProfileInfo.coupleCharacterName
    ? `- 情侣关系：与${userXProfileInfo.coupleCharacterName}是公开情侣`
    : ''
}
${coupleCharacterInfo}
【用户最近发布的推文】：
${
  recentUserTweets.length > 0
    ? recentUserTweets
        .map((tweet, i) => {
          let tweetText = `${i + 1}. ${tweet.content}${tweet.time ? ` (${tweet.time})` : ''}`; // 添加图片信息
          if (tweet.image) {
            if (tweet.image.type === 'description') {
              tweetText += `\n [图片描述: ${tweet.image.content}]`;
            } else if (tweet.image.type === 'upload') {
              tweetText += `\n [包含上传的图片]`;
            }
          }
          return tweetText;
        })
        .join('\n')
    : '暂无推文'
}
${boundCharactersInfo}
${
  answeredQuestionsContext
    ? `【之前的提问与回复历史】：\n${answeredQuestionsContext}\n\n【继续性要求】：新提问可以延续之前的话题，也可以开启新话题，保持自然。`
    : ''
}
【提问生成要求】：
1. 提问要自然、真实，像是真实的匿名用户提出的
2. 提问内容要与用户的身份、简介、公众身份、最近发布的推文相关
3. 如果有绑定角色，可以让角色以匿名身份提问，提问内容要符合角色的人设和性格
4. 如果有之前的提问历史，可以延续话题，也可以提出新话题
5. 提问可以是：
- 关于最近推文内容的追问或评论
- 关于生活经验、情感态度的询问
- 关于兴趣爱好、专业技能的请教
- 关于日常趣事、特殊经历的好奇
- 轻松幽默或深度思考的话题
6. 提问长度适中（10-50字），不要太长或太短
7. 语气可以是：好奇的、调侃的、真诚的、幽默的
8. 避免过于私密、冒犯或不适当的问题
【返回格式】：
每行一个提问，用换行符分隔，不需要序号、引号或其他格式
每个提问独立成行，直接输出提问内容
示例格式：
看到你最近发的推文，感觉心情不错呀？
最近有遇到什么让你特别开心的事吗？
如果可以拥有一个超能力，你会选什么？
你觉得最重要的人生品质是什么？
现在，请为用户生成3-10个匿名提问（每行一个）：`;
      const userInfoSection = systemPrompt.substring(systemPrompt.indexOf('【用户身份信息】'));
      tokenCount = TokenUtils.logTokenUsage('提问箱生成器', '用户信息与要求', userInfoSection, tokenCount);
      const messages = [{ role: 'user', content: '请生成3-10个匿名提问，每行一个' }]; // 最终统计
      TokenUtils.logFinalPrompt('提问箱生成器', systemPrompt, messages[0].content); // 🔧 使用统一的API请求工具
      const aiResponseContent = await APIUtils.sendAIRequest({
        apiConfig,
        systemPrompt,
        messages,
        temperature: 0.9,
      }); // 按行分割提问内容
      const questions = aiResponseContent
        .split('\n')
        .map(line => line.trim())
        .filter(line => line.length > 0)
        .map(line => {
          // 清理每行：去除序号（如 "1. "、"- "等）、引号
          return line
            .replace(/^\d+[\.\)、]\s*/, '') // 去除数字序号
            .replace(/^[-•]\s*/, '') // 去除短横线或项目符号
            .replace(/^["「『]|["」』]$/g, '') // 去除引号
            .trim();
        })
        .filter(q => q.length > 0); // 再次过滤空行
      if (questions.length === 0) {
        throw new Error('AI返回了空的提问内容');
      }
      console.log(`✅ 解析到 ${questions.length} 个提问:`, questions); // 为每个提问创建对象并添加到数组
      const newQuestions = questions.map((question, index) => ({
        id: `q_${Date.now()}_${index}_${Math.random().toString(36).substr(2, 9)}`,
        question: question,
        answer: '', // 初始为空，用户可以编辑回复
        date: new Date().toISOString(),
      })); // 批量添加到最前面
      askboxData.answeredQuestions.unshift(...newQuestions); // 保存到数据库
      await saveAskboxDataToDB(); // 重新渲染提问列表
      renderAnsweredQuestions();
      showXToast(`你有 ${newQuestions.length} 个新的提问请查收`, 'success');
    } catch (error) {
      console.error('生成提问失败:', error);
      showXToast(`生成失败: ${error.message}`, 'error');
    }
  }
  // 渲染已回答的提问列表
  function renderAnsweredQuestions() {
    const container = document.getElementById('answered-questions-list');
    const titleEl = document.getElementById('answered-questions-title');
    if (!container) return;
    if (askboxData.answeredQuestions.length === 0) {
      // 隐藏标题
      if (titleEl) titleEl.style.display = 'none';
      container.innerHTML = `
 <div style="text-align: center; color: rgba(255,255,255,0.6); font-size: 14px; padding: 40px 20px; ">
 暂无提问
 </div>
 `;
      return;
    }
    // 显示标题
    if (titleEl) titleEl.style.display = 'block';
    container.innerHTML = askboxData.answeredQuestions
      .map((q, index) => {
        const date = new Date(q.date);
        const dateStr = date.toLocaleDateString('zh-CN', { month: 'short', day: 'numeric' });
        const isSelected = selectedQuestions.has(q.id);
        return `
 <div
 class="askbox-question-item"
 data-question-id="${q.id}"
 style="background-color: rgba(255,255,255,0.9); backdrop-filter: blur(10px); border-radius: 16px; overflow: hidden; margin-bottom: 16px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); transition: all 0.2s; ${
   isSelected ? 'border: 3px solid var(--x-accent); background-color: color-mix(in srgb, var(--x-accent) , 0.1);' : ''
 }
 ${isAskboxMultiSelectMode ? 'border-left: 3px solid var(--x-accent);' : ''}
 "
 onmouseover="if(!${isAskboxMultiSelectMode}){this.style.transform='translateY(-2px)'; this.style.boxShadow='0 6px 16px rgba(0,0,0,0.2)';}"
 onmouseout="if(!${isAskboxMultiSelectMode}){this.style.transform='translateY(0)'; this.style.boxShadow='0 4px 12px rgba(0,0,0,0.15)';}"
 onmousedown="startQuestionLongPress('${q.id}')"
 onmouseup="endQuestionLongPress()"
 onmouseleave="endQuestionLongPress()"
 ontouchstart="startQuestionLongPress('${q.id}')"
 ontouchend="endQuestionLongPress()"
 onclick="if(${isAskboxMultiSelectMode}){toggleQuestionSelection('${q.id}');event.stopPropagation();}"
 >

 <div style="background: linear-gradient(135deg, #3a3a3a 0%, #2a2a2a 100%); padding: 20px; color: #fff; ">
 <div style="font-size: 15px; line-height: 1.6; word-break: break-word;">
 ${q.question}
 </div>
 </div>

 <div style="background-color:#fff; padding: 20px; min-height: 60px; color: #333; ">
 <div id="answer-${q.id}"
 contenteditable="true"
 data-question-id="${q.id}"
 style="font-size: 14px; line-height: 1.6; word-break: break-word; outline: none; cursor: text; min-height: 20px; ${
   q.answer ? '' : 'color: #999; text-align: center;'
 }
 "
 onblur="saveQuestionAnswer('${q.id}')"
 onkeydown="if(event.key==='Enter'&&!event.shiftKey){event.preventDefault();this.blur();}"
 onfocus="if(this.textContent==='点击此处回复...'){this.textContent='';this.style.color='#333';this.style.textAlign='left';}">${
   q.answer || '点击此处回复...'
 }</div>
 </div>

 <div style="background-color: #f5f5f5; padding: 8px 20px; color: #999; font-size: 12px; text-align: right; ">
 ${dateStr}
 </div>
 </div>
`;
      })
      .join('');
  }
  // 保存提问回复（原处编辑）
  async function saveQuestionAnswer(questionId) {
    const answerEl = document.getElementById(`answer-${questionId}`);
    if (!answerEl) return;
    const question = askboxData.answeredQuestions.find(q => q.id === questionId);
    if (!question) return;
    let newAnswer = answerEl.textContent.trim(); // 如果是占位符文本，则清空
    if (newAnswer === '点击此处回复...') {
      newAnswer = '';
    }
    if (newAnswer !== question.answer) {
      question.answer = newAnswer;
      await saveAskboxDataToDB();
      console.log('✅ 回复已自动保存:', questionId);
    }
  }
  // ============================================
  // 提问箱多选删除功能
  // ============================================
  // 开始长按提问卡片
  function startQuestionLongPress(questionId) {
    if (isAskboxMultiSelectMode) return; // 已经在多选模式，不需要长按
    questionLongPressTimer = setTimeout(() => {
      enterAskboxMultiSelectMode();
      toggleQuestionSelection(questionId);
    }, 500); // 长按500ms触发
  }
  // 结束长按
  function endQuestionLongPress() {
    if (questionLongPressTimer) {
      clearTimeout(questionLongPressTimer);
      questionLongPressTimer = null;
    }
  }
  // 切换提问选择状态
  function toggleQuestionSelection(questionId) {
    if (!isAskboxMultiSelectMode) {
      enterAskboxMultiSelectMode();
    }
    const questionEl = document.querySelector(`.askbox-question-item[data-question-id="${questionId}"]`);
    if (!questionEl) return;
    if (selectedQuestions.has(questionId)) {
      selectedQuestions.delete(questionId);
      questionEl.style.border = '';
      questionEl.style.backgroundColor = 'rgba(255,255,255,0.9)';
    } else {
      selectedQuestions.add(questionId);
      questionEl.style.border = '3px solid var(--x-accent)';
      questionEl.style.backgroundColor = 'color-mix(in srgb, var(--x-accent) , 0.1)';
    }
    updateAskboxDeleteUI();
  }
  // 进入提问箱多选模式
  function enterAskboxMultiSelectMode() {
    isAskboxMultiSelectMode = true; // 显示删除工具栏
    showAskboxDeleteToolbar(); // 改变所有提问卡片的样式
    document.querySelectorAll('.askbox-question-item').forEach(item => {
      item.style.borderLeft = '3px solid var(--x-accent)';
    });
    console.log('✅ 已进入提问箱多选模式');
  }
  // 退出提问箱多选模式
  function exitAskboxMultiSelectMode() {
    isAskboxMultiSelectMode = false;
    selectedQuestions.clear(); // 隐藏删除工具栏
    hideAskboxDeleteToolbar(); // 恢复所有提问卡片的样式
    document.querySelectorAll('.askbox-question-item').forEach(item => {
      item.style.border = '';
      item.style.borderLeft = '';
      item.style.backgroundColor = 'rgba(255,255,255,0.9)';
    });
    console.log('✅ 已退出提问箱多选模式');
  }
  // 显示提问箱删除工具栏
  function showAskboxDeleteToolbar() {
    let toolbar = document.getElementById('askbox-delete-toolbar');
    if (!toolbar) {
      toolbar = document.createElement('div');
      toolbar.id = 'askbox-delete-toolbar';
      toolbar.style.cssText = `
 position: fixed; bottom: 80px; left: 50%; transform: translateX(-50%); background-color: rgba(0,0,0,0.95); backdrop-filter: blur(10px); border: 1px solid rgba(255,255,255,0.2); border-radius: 24px; padding: 12px 20px; display: flex; align-items: center; gap: 16px; z-index: 2000; box-shadow: 0 4px 20px rgba(0,0,0,0.5); `;
      toolbar.innerHTML = `
 <button onclick="selectAllQuestions()" style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 20px; padding: 8px 16px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='#1a8cd8'" onmouseout="this.style.backgroundColor='var(--x-accent)'">
 全选
 </button>
 <span id="askbox-selected-count" style="color: #fff; font-size: 14px; font-weight: 500;">已选择 0 个</span>
 <button onclick="deleteSelectedQuestions()" style="background-color: #f91880; color: #fff; border: none; border-radius: 20px; padding: 8px 16px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='#d0155f'" onmouseout="this.style.backgroundColor='#f91880'">
 删除
 </button>
 <button onclick="exitAskboxMultiSelectMode()" style="background-color: rgba(255,255,255,0.15); color: #fff; border: none; border-radius: 20px; padding: 8px 16px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='rgba(255,255,255,0.25)'" onmouseout="this.style.backgroundColor='rgba(255,255,255,0.15)'">
 取消
 </button>
 `;
      document.body.appendChild(toolbar);
    }
    toolbar.style.display = 'flex';
  }
  // 隐藏提问箱删除工具栏
  function hideAskboxDeleteToolbar() {
    const toolbar = document.getElementById('askbox-delete-toolbar');
    if (toolbar) {
      toolbar.style.display = 'none';
    }
  }
  // 更新提问箱删除UI
  function updateAskboxDeleteUI() {
    const countEl = document.getElementById('askbox-selected-count');
    if (countEl) {
      countEl.textContent = `已选择 ${selectedQuestions.size} 个`;
    }
  }
  // 全选提问
  function selectAllQuestions() {
    document.querySelectorAll('.askbox-question-item').forEach(item => {
      const questionId = item.dataset.questionId;
      if (!selectedQuestions.has(questionId)) {
        selectedQuestions.add(questionId);
        item.style.border = '3px solid #1d9bf0';
        item.style.backgroundColor = 'color-mix(in srgb, var(--x-accent) , 0.1)';
      }
    });
    updateAskboxDeleteUI();
  }
  // 删除选中的提问
  async function deleteSelectedQuestions() {
    if (selectedQuestions.size === 0) {
      showXToast('请先选择要删除的提问', 'warning');
      return;
    }
    const confirmDelete = confirm(`确定要删除选中的 ${selectedQuestions.size} 个提问吗？删除后无法恢复。`);
    if (!confirmDelete) return;
    try {
      // 过滤掉选中的提问
      askboxData.answeredQuestions = askboxData.answeredQuestions.filter(q => !selectedQuestions.has(q.id)); // 保存到数据库
      await saveAskboxDataToDB();
      showXToast(`已删除 ${selectedQuestions.size} 个提问`, 'success'); // 退出多选模式并刷新显示
      exitAskboxMultiSelectMode();
      renderAnsweredQuestions();
    } catch (error) {
      console.error('删除提问失败:', error);
      showXToast('删除失败: ' + error.message, 'error');
    }
  }
  // ============================================
  // 通知页面功能
  // ============================================
  // ▼▼▼ 【主要！！！】第十个情景：Mentions 通知生成器 ▼▼▼
  // 第十个情景：为用户的最新推文生成点赞和转帖通知
  async function generateMentionsForLatestTweet(tweetData) {
    try {
      console.log('🔔 [Mentions生成器] 开始为最新推文生成通知');
      // 🔧 使用统一的API配置加载工具
      const { apiConfig, xSettings, xDb } = await APIUtils.loadConfigAndSettings();
      const { userPrompt, worldSetting, boundCharacters } = xSettings;
      // 使用工具函数构建用户X个人资料信息
      const userXProfileInfo = StringBuilders.buildUserXProfileInfo(window.userProfileData); // 检查用户是否为公众人物（高曝光率身份）
      const userPublicIdentity = userXProfileInfo.publicIdentity || '';
      const userBio = userXProfileInfo.bio || '';
      const isUserPublicFigure =
        /明星|网红|博主|演员|歌手|艺人|主播|up主|偶像|导演|制片|编剧|作家|influencer|celebrity|singer|actor|artist|streamer|idol/i.test(
          userPublicIdentity + ' ' + userBio,
        );
      console.log('🔍 [Mentions生成器] 用户公众身份检测:', {
        isPublicFigure: isUserPublicFigure,
        publicIdentity: userPublicIdentity,
        bio: userBio,
      }); // Token计数器
      let tokenCount = 0; // 1. 提示词 + 世界书
      let systemPrompt = StringBuilders.buildBaseSystemPrompt({
        userPrompt,
        worldSetting,
      });
      tokenCount = TokenUtils.logTokenUsage('Mentions生成器', '基础系统提示词', systemPrompt, tokenCount); // 1.5. 获取适用的世界书内容
      const worldBooksContent = await StringBuilders.getApplicableWorldBooks('mentions', {
        boundCharacters: boundCharacters,
      });
      if (worldBooksContent) {
        systemPrompt += worldBooksContent;
        tokenCount = TokenUtils.logTokenUsage('Mentions生成器', '世界书内容', worldBooksContent, tokenCount);
      }
      // 2. 核心任务说明
      systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🔔 核心任务：生成 Mentions 通知 🔔
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
你是X社交平台的通知生成器。用户 ${userXProfileInfo.name} (${userXProfileInfo.handle}) 刚发布了一条新推文，你的任务是：
✅ 生成点赞通知（1-2条）：多个用户喜欢了这条推文
✅ 生成转帖通知（1-3条）：其他用户引用转发了这条推文
**用户身份检测**：
- 用户身份：${isUserPublicFigure ? '公众人物（高曝光）' : '普通用户（低曝光）'}
${userPublicIdentity ? `- 公众身份：${userPublicIdentity}` : ''}
**流量规模要求**：
${
  isUserPublicFigure
    ? `- 用户是公众人物，获得高流量：
* 点赞通知：每条通知显示3个用户，othersCount 设为 50-500 之间
* 转帖stats：comments 100-500，retweets 500-2000，likes 1000-5000
* 转帖内容应该体现公众人物的影响力（如"分享给粉丝"、"必须转发"等）`
    : `- 用户是普通用户，获得常规流量：
* 点赞通知：每条通知显示3个用户，othersCount 设为 5-50 之间
* 转帖stats：comments 5-20，retweets 10-50，likes 20-100
* 转帖内容应该更日常化、朋友圈式`
}
**点赞通知要求**：
- 每条通知包含3个用户（显示头像和昵称）
- othersCount根据用户身份设置（见上方流量规模要求）
- 必须包含被点赞的推文内容预览
- 点赞用户应该是虚构的普通X用户
**转帖通知要求**：
- 每条转帖都是对用户推文的引用转发
- 转帖者添加了自己的评论/观点
- 转帖内容要与原推文相关，可以是赞同、补充、转发给特定群体等
- 转帖者应该是虚构的普通X用户
- 必须准确引用原推文内容
- 每条转帖必须包含2-5条评论（comments数组）
- stats数据根据用户身份设置（见上方流量规模要求）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`; // 3. 用户推文信息
      systemPrompt += `
【用户推文信息】：
- 推文内容："${tweetData.content}"
- 发布时间：${tweetData.time}
${tweetData.image ? `- 包含媒体：${tweetData.image.type === 'description' ? tweetData.image.content : '图片内容'}` : ''}
${tweetData.location ? `- 位置：${tweetData.location}` : ''}
${tweetData.link ? `- 链接：${tweetData.link.title || tweetData.link.url}` : ''}
`; // 4. 用户资料约束
      const userConstraintsStart = systemPrompt.length;
      systemPrompt += StringBuilders.buildUniversalConstraints(userXProfileInfo);
      const userConstraints = systemPrompt.substring(userConstraintsStart);
      tokenCount = TokenUtils.logTokenUsage('Mentions生成器', '用户资料约束', userConstraints, tokenCount); // 5. JSON返回格式
      systemPrompt += `
【JSON返回格式】：
\`\`\`json
{
"likes": [点赞通知数组，1-2条],
"retweets": [转帖通知数组，1-3条]
}
\`\`\`
点赞通知对象结构：
{
"id": "mention_like_xxx",
"type": "like",
"users": [
{
 "name": "用户昵称",
 "handle": "@用户句柄",
 "avatar": "https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg",
 "verified": false
}
// 显示3个用户
],
"othersCount": 其他点赞人数（数字，可以是0），
"time": "时间描述（如'2小时前'）",
"tweet": {
"content": "被点赞的推文内容（与用户推文一致）",
"image": null 或 "图片描述"
}
}
转帖通知对象结构：
{
"id": "mention_retweet_xxx",
"type": "retweet",
"user": {
"name": "转帖者昵称",
"handle": "@转帖者句柄",
"avatar": "https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg",
"verified": false
},
"retweetContent": "转帖者添加的评论内容",
"time": "时间描述（如'3小时前'）",
"quotedTweet": {
"user": {
 "name": "${userXProfileInfo.name}",
 "handle": "${userXProfileInfo.handle}",
 "avatar": "${userXProfileInfo.avatar}",
 "verified": ${userXProfileInfo.verified || false},
 "verificationType": "${userXProfileInfo.verificationType || 'none'}"
},
"content": "原推文内容（与用户推文一致）",
"time": "${tweetData.time}",
"image": ${
        tweetData.image
          ? tweetData.image.type === 'description'
            ? `{"type": "description", "content": "${tweetData.image.content}"}`
            : 'null'
          : 'null'
      },
"stats": {
 "comments": ${tweetData.stats?.comments || 0},
 "retweets": ${tweetData.stats?.retweets || 0},
 "likes": ${tweetData.stats?.likes || 0}
}
},
"stats": {
"comments": 转帖的评论数（数字，根据用户身份：公众${isUserPublicFigure ? '100-500' : '5-20'}），
"retweets": 转帖的转发数（数字，根据用户身份：公众${isUserPublicFigure ? '500-2000' : '10-50'}），
"likes": 转帖的点赞数（数字，根据用户身份：公众${isUserPublicFigure ? '1000-5000' : '20-100'}），
"views": 转帖的浏览数（数字，根据用户身份：公众${isUserPublicFigure ? '5000-50000' : '100-1000'}）
},
"comments": [
{
 "id": "评论唯一ID（可留空，系统自动生成）",
 "user": {
 "name": "评论者昵称",
 "handle": "@评论者句柄",
 "avatar": "https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg",
 "verified": false
 },
 "content": "评论文本",
 "time": "时间描述",
 "image": {"type": "description", "content": "图片文字描述"} (可选，10-20%的评论带图)
}
]
}
关键规则：
1. 所有用户头像统一使用：https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg
2. verified字段必须是布尔值(true/false)
3. 点赞通知的tweet内容必须与用户原推文完全一致
4. 转帖通知的quotedTweet必须准确引用用户原推文
5. 转帖内容要自然、真实，符合社交媒体转发习惯
6. 时间描述要合理（如'刚刚'、'5分钟前'、'1小时前'等）
7. **转帖必须包含comments数组（2-5条评论）**，评论要与转帖内容相关
8. stats数值必须根据用户身份（公众人物/普通用户）设置合理范围
9. stats中所有数字必须是纯数字，不带引号
10. 10-20%的评论可以带图（image字段）
11. 🚫 绝对禁止在任何通知中使用用户 ${userXProfileInfo.name} (${userXProfileInfo.handle}) 的身份
【🔒 隐私保护规则】：
🚨 所有点赞用户、转帖用户、评论者都是陌生路人，只能基于用户的X平台公开信息：
✅ 可以使用：用户的X姓名、X句柄、X简介、公开身份
❌ 禁止提及：用户的真实姓名、真实职业、私人关系、未公开的身份信息
❌ 禁止使用：只有亲密关系才知道的称呼（如"老师"、"同学"等，除非是用户的公开身份）
示例说明：
- ✅ 正确：转帖评论"这个博主说得太对了"（基于公开身份）
- ❌ 错误：转帖评论"张老师的课讲得真好"（泄露了真实姓氏和职业）
- ❌ 错误：评论"同学你太棒了"（假装是同学关系）
`;
      const formatSection = systemPrompt.substring(systemPrompt.lastIndexOf('【JSON返回格式】'));
      tokenCount = TokenUtils.logTokenUsage('Mentions生成器', 'JSON格式要求', formatSection, tokenCount); // 构建消息内容，支持图片识别
      const messageContent = []; // 添加基础文本内容
      let contentText = `请为用户的推文生成Mentions通知（点赞和转帖）
推文内容："${tweetData.content}"
发布时间：${tweetData.time}`;
      messageContent.push({ type: 'text', text: contentText }); // 如果有上传的图片，添加图片内容
      if (tweetData.image) {
        if (tweetData.image.type === 'upload' && tweetData.image.content) {
          // 单图上传
          messageContent.push({
            type: 'image_url',
            image_url: { url: tweetData.image.content },
          });
        } else if (tweetData.image.type === 'uploads' && tweetData.image.images && tweetData.image.images.length > 0) {
          // 多图上传
          tweetData.image.images.forEach((img, index) => {
            if (img.content) {
              messageContent.push({
                type: 'image_url',
                image_url: { url: img.content },
              });
            }
          });
        } else if (tweetData.image.type === 'description') {
          // 文字描述
          messageContent.push({
            type: 'text',
            text: `图片描述：${tweetData.image.content}`,
          });
        }
      }
      const messages = [{ role: 'user', content: messageContent }]; // 记录上下文信息token
      const contextText = messageContent.map(c => c.text || '[图片]').join(' ');
      tokenCount = TokenUtils.logTokenUsage('Mentions生成器', '上下文信息', contextText, tokenCount); // 最终统计
      TokenUtils.logFinalPrompt('Mentions生成器', systemPrompt, contextText);
      // 🔧 使用统一的API请求工具
      const aiResponseContent = await APIUtils.sendAIRequest({
        apiConfig,
        systemPrompt,
        messages,
        temperature: 0.8,
      });
      console.log('✅ [Mentions生成器] AI响应已收到');
      // 🔧 使用统一的JSON解析工具
      let notificationsData = APIUtils.parseJSONResponse(aiResponseContent);
      // 🚫 筛选用户身份冒用（最优先）
      notificationsData = StringBuilders.filterUserImpersonation(
        notificationsData,
        userXProfileInfo.handle,
        userXProfileInfo.name,
      ); // 🔧 强制修正所有头像
      await StringBuilders.enforceAvatarRules(notificationsData, userXProfileInfo.handle); // 验证数据格式
      if (!notificationsData.likes || !notificationsData.retweets) {
        throw new Error('AI返回的数据格式不正确：缺少likes或retweets');
      }
      // 为通知添加时间戳
      const timestamp = Date.now();
      notificationsData.likes.forEach((like, index) => {
        if (!like.id) like.id = `mention_like_${timestamp}_${index}`;
        like.timestamp = timestamp - (5 + Math.random() * 30) * 60 * 1000; // 5-35分钟前
      });
      notificationsData.retweets.forEach((retweet, index) => {
        if (!retweet.id) retweet.id = `mention_retweet_${timestamp}_${index}`;
        retweet.timestamp = timestamp - (10 + Math.random() * 50) * 60 * 1000; // 10-60分钟前
        // 为转帖关联原推文ID
        retweet.originalTweetId = tweetData.id; // 为转帖的评论分配ID和时间戳
        if (retweet.comments && retweet.comments.length > 0) {
          retweet.comments.forEach((comment, cIndex) => {
            if (!comment.id) {
              comment.id = `mention_retweet_${timestamp}_${index}_c${cIndex}`;
            }
            // 评论时间应该在转帖之后
            if (!comment.timestamp) {
              comment.timestamp = retweet.timestamp + (5 + Math.random() * 30) * 60 * 1000;
            }
          });
        }
      }); // 保存到数据库
      await saveMentionsNotifications(notificationsData);
      console.log(
        `✅ [Mentions生成器] 已生成 ${notificationsData.likes.length} 条点赞通知，${notificationsData.retweets.length} 条转帖通知`,
      ); // 显示手机样式通知
      const isEnglish = currentLanguage === 'en';
      const userAvatar = window.userProfileData?.avatar || 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg';
      const totalCount = notificationsData.likes.length + notificationsData.retweets.length;
      showPhoneNotification({
        title: 'X',
        message: isEnglish
          ? `${totalCount} new notification${totalCount > 1 ? 's' : ''} on your post!`
          : `你的帖子收到了 ${totalCount} 条新通知！`,
        avatar: userAvatar,
        leftIcon: 'x',
      }); // 如果当前在 Mentions 页面，刷新显示
      const mentionsPage = document.getElementById('x-notifications-page');
      if (mentionsPage && mentionsPage.style.display === 'flex') {
        await loadNotifications();
      } else {
        // 如果不在通知页面，显示提醒点
        showNavNotificationDot('notifications');
      }
    } catch (error) {
      console.error('❌ [Mentions生成器] 生成失败:', error); // 不显示错误提示，静默失败
    }
  }
  // 保存 Mentions 通知到数据库
  async function saveMentionsNotifications(notificationsData) {
    try {
      const xDb = getXDB();
      const dataId = `mentions_${currentAccountId || 'main'}`; // 获取现有通知
      let savedData = await xDb.xAccountProfiles.get(dataId);
      if (!savedData) {
        // 创建新的数据结构，使用 handle 作为主键（与 xAccountProfiles 表结构一致）
        savedData = {
          handle: dataId, // 使用 handle 作为主键字段
          id: dataId,
          data: [],
        };
      }
      // 合并新通知（点赞和转帖）
      const allNotifications = [...notificationsData.likes, ...notificationsData.retweets]; // 添加到开头（最新的在前面）
      savedData.data = [...allNotifications, ...savedData.data]; // 保存到数据库
      await xDb.xAccountProfiles.put(savedData);
      console.log('✅ [Mentions生成器] 通知已保存到数据库');
    } catch (error) {
      console.error('❌ [Mentions生成器] 保存通知失败:', error); // 如果还是失败，尝试使用 add 方法
      try {
        // 如果是新数据，尝试使用 add
        if (!(await xDb.xAccountProfiles.get(dataId))) {
          savedData.handle = dataId;
          await xDb.xAccountProfiles.add(savedData);
          console.log('✅ [Mentions生成器] 通知已保存（使用 add 方法）');
        }
      } catch (addError) {
        console.error('❌ [Mentions生成器] add 方法也失败:', addError);
      }
    }
  }
  // 渲染点赞通知项
  function renderLikeMentionItem(mention) {
    const config = languageConfig[currentLanguage] || languageConfig.zh;
    const mentionEl = document.createElement('div');
    mentionEl.className = 'mention-item';
    mentionEl.dataset.mentionId = mention.id;
    mentionEl.style.cssText = `
 display: flex; gap: 12px; padding: 16px; border-bottom: 1px solid var(--x-border-color); cursor: pointer; transition: background-color 0.2s; user-select: none; -webkit-user-select: none;
`; // 长按事件（移动端和桌面端）
    let touchMoved = false;
    const startLongPress = e => {
      if (mentionsDeleteMode) return;
      touchMoved = false;
      mentionsLongPressStarted = true;
      mentionsLongPressTimer = setTimeout(() => {
        if (mentionsLongPressStarted && !touchMoved) {
          enterMentionsDeleteMode(); // 自动选中被长按的项
          const checkbox = mentionEl.querySelector('.mention-checkbox');
          if (checkbox) {
            toggleMentionSelection(mention.id, checkbox);
          }
        }
      }, 500); // 500ms 长按触发
    };
    const cancelLongPress = () => {
      mentionsLongPressStarted = false;
      if (mentionsLongPressTimer) {
        clearTimeout(mentionsLongPressTimer);
        mentionsLongPressTimer = null;
      }
    };
    const handleTouchMove = () => {
      touchMoved = true;
      cancelLongPress();
    }; // 触摸事件
    mentionEl.addEventListener('touchstart', startLongPress, { passive: true });
    mentionEl.addEventListener('touchend', cancelLongPress);
    mentionEl.addEventListener('touchmove', handleTouchMove);
    mentionEl.addEventListener('touchcancel', cancelLongPress); // 鼠标事件（桌面端）
    mentionEl.addEventListener('mousedown', startLongPress);
    mentionEl.addEventListener('mouseup', cancelLongPress);
    mentionEl.addEventListener('mouseleave', cancelLongPress);
    mentionEl.onmouseover = () => {
      if (!mentionsDeleteMode) {
        mentionEl.style.backgroundColor = 'var(--x-bg-hover)';
      }
    };
    mentionEl.onmouseout = () => {
      mentionEl.style.backgroundColor = 'transparent';
    }; // 左侧图标区域
    const iconArea = document.createElement('div');
    iconArea.style.cssText =
      'width: 40px; display: flex; flex-direction: column; align-items: flex-end; flex-shrink: 0;';
    const iconColor = 'var(--x-accent)';
    const iconSvg = `<svg viewBox="0 0 24 24" style="width: 32px; height: 32px; fill: ${iconColor};"><g><path d="M20.884 13.19c-1.351 2.48-4.001 5.12-8.379 7.67l-.503.3-.504-.3c-4.379-2.55-7.029-5.19-8.382-7.67-1.36-2.5-1.41-4.86-.514-6.67.887-1.79 2.647-2.91 4.601-3.01 1.651-.09 3.368.56 4.798 2.01 1.429-1.45 3.146-2.1 4.796-2.01 1.954.1 3.714 1.22 4.601 3.01.896 1.81.846 4.17-.514 6.67z"></path></g></svg>`;
    iconArea.innerHTML = iconSvg; // 右侧内容区域
    const contentArea = document.createElement('div');
    contentArea.style.cssText = 'flex: 1; min-width: 0;'; // 用户头像区域（显示3个头像）
    let avatarsHtml = '<div style="display: flex; gap: 4px; margin-bottom: 8px;">';
    const displayUsers = mention.users.slice(0, 3);
    displayUsers.forEach(user => {
      avatarsHtml += `<img src="${user.avatar}" alt="${user.name}" style="width: 32px; height: 32px; border-radius: 50%; border: 2px solid var(--x-bg-primary);">`;
    });
    avatarsHtml += '</div>'; // 构建通知文本
    const firstName = mention.users[0].name;
    const secondName = mention.users.length > 1 ? mention.users[1].name : '';
    const othersCount = mention.othersCount || 0;
    let notificationText = '';
    if (currentLanguage === 'zh') {
      notificationText = `${firstName}${secondName ? ` ${secondName}` : ''}${
        othersCount > 0 ? ` 和其他 ${othersCount} 人` : ''
      } 喜欢了你的推文`;
    } else {
      notificationText = `${firstName}${secondName ? ` ${secondName}` : ''}${
        othersCount > 0 ? ` and ${othersCount} others` : ''
      } liked your post`;
    }
    // 推文内容
    let tweetContentHtml = '';
    if (mention.tweet) {
      tweetContentHtml = `
 <div style="margin-top: 12px; padding: 12px; border: 1px solid var(--x-border-color); border-radius: 12px;">
 <div style="color:var(--x-text-primary); font-size: 15px; line-height: 1.4; margin-bottom: ${
   mention.tweet.image ? '8px' : '0'
 };">
 ${mention.tweet.content}
 </div>
 ${
   mention.tweet.image
     ? `<div style="color:var(--x-text-secondary); font-size: 13px; margin-top: 8px;">[图片]</div>`
     : ''
 }
 </div>
 `;
    }
    // 🔧 动态计算时间显示（优先使用timestamp，否则使用静态time）
    const displayTime = mention.timestamp ? getRelativeTime(mention.timestamp) : mention.time;
    contentArea.innerHTML = `
 ${avatarsHtml}
 <div style="color:var(--x-text-primary); font-size: 15px; font-weight: 600; margin-bottom: 4px;">
 ${notificationText}
 </div>
 <div style="color:var(--x-text-secondary); font-size: 14px;">
 ${displayTime}
 </div>
 ${tweetContentHtml}
`;
    mentionEl.appendChild(iconArea);
    mentionEl.appendChild(contentArea);
    return mentionEl;
  }
  // 渲染转帖通知项
  function renderRetweetMentionItem(mention) {
    const config = languageConfig[currentLanguage] || languageConfig.zh;
    const mentionEl = document.createElement('div');
    mentionEl.className = 'mention-item';
    mentionEl.dataset.mentionId = mention.id;
    mentionEl.style.cssText = `
 display: flex; gap: 12px; padding: 16px; border-bottom: 1px solid var(--x-border-color); cursor: pointer; transition: background-color 0.2s; user-select: none; -webkit-user-select: none;
`; // 长按事件（移动端和桌面端）
    let touchMoved = false;
    let clickAllowed = true;
    const startLongPress = e => {
      if (mentionsDeleteMode) return;
      touchMoved = false;
      clickAllowed = true;
      mentionsLongPressStarted = true;
      mentionsLongPressTimer = setTimeout(() => {
        if (mentionsLongPressStarted && !touchMoved) {
          clickAllowed = false;
          enterMentionsDeleteMode(); // 自动选中被长按的项
          const checkbox = mentionEl.querySelector('.mention-checkbox');
          if (checkbox) {
            toggleMentionSelection(mention.id, checkbox);
          }
        }
      }, 500); // 500ms 长按触发
    };
    const cancelLongPress = () => {
      mentionsLongPressStarted = false;
      if (mentionsLongPressTimer) {
        clearTimeout(mentionsLongPressTimer);
        mentionsLongPressTimer = null;
      }
    };
    const handleTouchMove = () => {
      touchMoved = true;
      cancelLongPress();
    }; // 触摸事件
    mentionEl.addEventListener('touchstart', startLongPress, { passive: true });
    mentionEl.addEventListener('touchend', cancelLongPress);
    mentionEl.addEventListener('touchmove', handleTouchMove);
    mentionEl.addEventListener('touchcancel', cancelLongPress); // 鼠标事件（桌面端）
    mentionEl.addEventListener('mousedown', startLongPress);
    mentionEl.addEventListener('mouseup', cancelLongPress);
    mentionEl.addEventListener('mouseleave', cancelLongPress);
    mentionEl.onmouseover = () => {
      if (!mentionsDeleteMode) {
        mentionEl.style.backgroundColor = 'var(--x-bg-hover)';
      }
    };
    mentionEl.onmouseout = () => {
      mentionEl.style.backgroundColor = 'transparent';
    }; // 点击查看转帖详情（只有在非删除模式且非长按时才触发）
    mentionEl.onclick = () => {
      if (!mentionsDeleteMode && clickAllowed) {
        showRetweetDetail(mention);
      }
    }; // 左侧图标区域
    const iconArea = document.createElement('div');
    iconArea.style.cssText =
      'width: 40px; display: flex; flex-direction: column; align-items: flex-end; flex-shrink: 0;';
    const iconColor = 'var(--x-accent)';
    const iconSvg = `<svg viewBox="0 0 24 24" style="width: 32px; height: 32px; fill: ${iconColor};"><g><path d="M4.75 3.79l4.603 4.3-1.706 1.82L6 8.38v7.37c0 .97.784 1.75 1.75 1.75H13V20H7.75c-2.347 0-4.25-1.9-4.25-4.25V8.38L1.853 9.91.147 8.09l4.603-4.3zm11.5 2.71H11V4h5.25c2.347 0 4.25 1.9 4.25 4.25v7.37l1.647-1.53 1.706 1.82-4.603 4.3-4.603-4.3 1.706-1.82L18 15.62V8.25c0-.97-.784-1.75-1.75-1.75z"></path></g></svg>`;
    iconArea.innerHTML = iconSvg; // 右侧内容区域
    const contentArea = document.createElement('div');
    contentArea.style.cssText = 'flex: 1; min-width: 0;'; // 用户头像
    let avatarHtml = `<div style="margin-bottom: 8px;"><img src="${mention.user.avatar}" alt="${mention.user.name}" style="width: 32px; height: 32px; border-radius: 50%;"></div>`; // 构建通知文本
    let notificationText = '';
    if (currentLanguage === 'zh') {
      notificationText = `${mention.user.name} 转推了你的推文`;
    } else {
      notificationText = `${mention.user.name} retweeted your post`;
    }
    contentArea.innerHTML = `
 ${avatarHtml}
 <div style="color:var(--x-text-primary); font-size: 15px; font-weight: 600; margin-bottom: 4px;">
 ${notificationText}
 </div>
 <div style="color:var(--x-text-secondary); font-size: 14px; margin-bottom: 12px;">
 ${mention.time}
 </div>
 <div style="padding: 12px; border: 1px solid var(--x-border-color); border-radius: 12px;">
 <div style="color:var(--x-text-primary); font-size: 15px; line-height: 1.4; margin-bottom: 8px;">
 ${processContent(mention.retweetContent)}
 </div>
 <div style="padding: 12px; border-left: 3px solid var(--x-border-color); background-color:var(--x-bg-secondary); border-radius: 4px;">
 <div style="color:var(--x-text-secondary); font-size: 13px; margin-bottom: 4px;">
 ${mention.quotedTweet.user.name} ${mention.quotedTweet.user.handle}
 </div>
 <div style="color:var(--x-text-primary); font-size: 14px; line-height: 1.3;">
 ${mention.quotedTweet.content.substring(0, 100)}${mention.quotedTweet.content.length > 100 ? '...' : ''}
 </div>
 </div>
 </div>
`;
    mentionEl.appendChild(iconArea);
    mentionEl.appendChild(contentArea);
    return mentionEl;
  }
  // 显示转帖详情
  async function showRetweetDetail(mention) {
    try {
      // 构建转帖推文数据
      // 确保 stats 数据完整
      const ensureStats = stats => ({
        comments: stats?.comments || 0,
        retweets: stats?.retweets || 0,
        likes: stats?.likes || 0,
        views: stats?.views || 0,
      });
      const retweetData = {
        id: mention.id || `retweet_${Date.now()}`,
        user: mention.user || {
          name: '未知用户',
          handle: '@unknown',
          avatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
          verified: false,
        },
        content: mention.retweetContent || '',
        time: mention.time || '刚刚',
        timestamp: mention.timestamp || Date.now(),
        stats: ensureStats(mention.stats),
        quotedTweet: {
          type: 'tweet',
          user: mention.quotedTweet?.user || {
            name: '未知用户',
            handle: '@unknown',
            avatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
            verified: false,
          },
          content: mention.quotedTweet?.content || '',
          time: mention.quotedTweet?.time || '刚刚',
          image: mention.quotedTweet?.image || null,
          stats: ensureStats(mention.quotedTweet?.stats),
        },
        comments: mention.comments || [], // 转帖的评论（从AI生成的数据中获取）
        _source: 'retweet_mention', // 标记来源
      };
      console.log('📝 [转帖详情] 数据已准备:', retweetData); // 使用现有的推文详情显示函数
      await showTweetDetail(retweetData);
    } catch (error) {
      console.error('显示转帖详情失败:', error);
      showXToast('无法显示转帖详情', 'error');
    }
  }
  // 显示 New Tweet 详情
  async function showNewTweetDetail(mention) {
    try {
      console.log('📝 [New Tweet详情] 准备显示推文详情:', mention); // 确保 stats 数据完整
      const ensureStats = stats => ({
        comments: stats?.comments || 0,
        retweets: stats?.retweets || 0,
        likes: stats?.likes || 0,
        views: stats?.views || 0,
      }); // 构建推文数据
      const tweetData = {
        id: mention.tweet.id || `newtweet_${Date.now()}`,
        user: mention.tweet.user ||
          mention.user || {
            name: '未知用户',
            handle: '@unknown',
            avatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
            verified: false,
          },
        content: mention.tweet.content || '',
        time: mention.tweet.time || '刚刚',
        timestamp: mention.tweet.timestamp || mention.timestamp || Date.now(),
        image: mention.tweet.image || null,
        stats: ensureStats(mention.tweet.stats),
        comments: (mention.tweet.comments || []).map(comment => ({
          ...comment,
          stats: ensureStats(comment.stats), // 确保评论的stats也完整
        })),
        _source: 'newtweet_mention', // 标记来源
        _mentionId: mention.id, // 保存通知ID，用于更新数据库
      };
      console.log('📝 [New Tweet详情] 数据已准备，包含 %d 条评论', tweetData.comments.length); // 使用现有的推文详情显示函数
      await showTweetDetail(tweetData);
    } catch (error) {
      console.error('显示 New Tweet 详情失败:', error);
      showXToast('无法显示推文详情', 'error');
    }
  }
  // ▲▲▲ 【主要！！！】第十个情景：Mentions 通知生成器 ▲▲▲
  // Mentions 删除模式状态
  let mentionsDeleteMode = false;
  let selectedMentions = new Set();
  let mentionsLongPressTimer = null;
  let mentionsLongPressStarted = false; // 切换通知标签 (All / Mentions)
  window.switchNotificationTab = function (tab) {
    const tabs = document.querySelectorAll('.notification-tab');
    const allContent = document.getElementById('notifications-all-content');
    const mentionsContent = document.getElementById('notifications-mentions-content');
    const refreshBtn = document.getElementById('refresh-messages-btn'); // 切换标签时退出删除模式
    if (mentionsDeleteMode) {
      exitMentionsDeleteMode();
    }
    tabs.forEach(tabEl => {
      const isActive =
        (tab === 'all' && (tabEl.textContent.includes('全部') || tabEl.textContent.includes('All'))) ||
        (tab === 'mentions' && (tabEl.textContent.includes('提及') || tabEl.textContent.includes('Mentions')));
      if (isActive) {
        tabEl.classList.add('active');
        tabEl.style.color = 'var(--x-text-primary)';
        tabEl.style.backgroundColor = 'transparent';
        tabEl.querySelector('.tab-indicator').style.display = 'block';
      } else {
        tabEl.classList.remove('active');
        tabEl.style.color = 'var(--x-text-secondary)';
        tabEl.style.backgroundColor = 'transparent';
        tabEl.querySelector('.tab-indicator').style.display = 'none';
      }
    });
    if (tab === 'all') {
      allContent.style.display = 'flex';
      mentionsContent.style.display = 'none';
      if (refreshBtn) refreshBtn.style.display = 'flex';
    } else {
      allContent.style.display = 'none';
      mentionsContent.style.display = 'flex';
      if (refreshBtn) refreshBtn.style.display = 'none';
    }
  }; // 进入删除模式
  function enterMentionsDeleteMode() {
    mentionsDeleteMode = true;
    selectedMentions.clear(); // 显示删除工具栏
    showMentionsDeleteToolbar(); // 更新所有通知项的样式
    const mentionItems = document.querySelectorAll('.mention-item');
    mentionItems.forEach(item => {
      item.style.paddingLeft = '56px'; // 添加复选框
      const checkbox = document.createElement('div');
      checkbox.className = 'mention-checkbox';
      checkbox.style.cssText = `
 position: absolute; left: 16px; top: 50%; transform: translateY(-50%); width: 24px; height: 24px; border: 2px solid var(--x-border-color); border-radius: 50%; cursor: pointer; transition: all 0.2s; display: flex; align-items: center; justify-content: center; `;
      item.style.position = 'relative';
      item.insertBefore(checkbox, item.firstChild); // 点击复选框切换选中状态
      checkbox.onclick = e => {
        e.stopPropagation();
        const mentionId = item.dataset.mentionId;
        toggleMentionSelection(mentionId, checkbox);
      };
    });
    console.log('✅ 进入 Mentions 删除模式');
  }
  // 退出删除模式
  function exitMentionsDeleteMode() {
    mentionsDeleteMode = false;
    selectedMentions.clear(); // 隐藏删除工具栏
    hideMentionsDeleteToolbar(); // 移除所有复选框
    const checkboxes = document.querySelectorAll('.mention-checkbox');
    checkboxes.forEach(cb => cb.remove()); // 恢复通知项样式
    const mentionItems = document.querySelectorAll('.mention-item');
    mentionItems.forEach(item => {
      item.style.paddingLeft = '16px';
    });
    console.log('✅ 退出 Mentions 删除模式');
  }
  // 切换通知选中状态
  function toggleMentionSelection(mentionId, checkbox) {
    if (selectedMentions.has(mentionId)) {
      selectedMentions.delete(mentionId);
      checkbox.style.backgroundColor = 'transparent';
      checkbox.innerHTML = '';
    } else {
      selectedMentions.add(mentionId);
      checkbox.style.backgroundColor = 'var(--x-accent)';
      checkbox.style.borderColor = 'var(--x-accent)';
      checkbox.innerHTML = `<svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: white;"><g><path d="M9 20l-7-7 1.41-1.41L9 17.17l11.59-11.58L22 7z"></path></g></svg>`;
    }
    updateDeleteToolbar();
  }
  // 显示删除工具栏
  function showMentionsDeleteToolbar() {
    const existingToolbar = document.getElementById('mentions-delete-toolbar');
    if (existingToolbar) {
      existingToolbar.remove();
    }
    const toolbar = document.createElement('div');
    toolbar.id = 'mentions-delete-toolbar';
    toolbar.style.cssText = `
 position: fixed; bottom: 80px; left: 50%; transform: translateX(-50%); background: var(--x-bg-primary); border: 1px solid var(--x-border-color); border-radius: 24px; padding: 12px 20px; display: flex; align-items: center; gap: 16px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); z-index: 1000; animation: slideUp 0.3s ease;
`;
    toolbar.innerHTML = `
 <button id="mentions-select-all-btn" style="background: transparent; border: none; color: var(--x-accent); font-size: 15px; font-weight: 600; cursor: pointer; padding: 8px 12px; border-radius: 8px; transition: background-color 0.2s; ">全选</button>
 <div style="width: 1px; height: 24px; background: var(--x-border-color);"></div>
 <button id="mentions-delete-btn" style="background: transparent; border: none; color:var(--x-text-secondary); font-size: 15px; font-weight: 600; cursor: not-allowed; padding: 8px 12px; border-radius: 8px; transition: all 0.2s; ">删除 (0)</button>
 <div style="width: 1px; height: 24px; background: var(--x-border-color);"></div>
 <button id="mentions-cancel-btn" style="background: transparent; border: none; color:var(--x-text-primary); font-size: 15px; font-weight: 600; cursor: pointer; padding: 8px 12px; border-radius: 8px; transition: background-color 0.2s; ">取消</button>
`;
    document.body.appendChild(toolbar); // 绑定事件
    document.getElementById('mentions-select-all-btn').onclick = selectAllMentions;
    document.getElementById('mentions-delete-btn').onclick = confirmDeleteMentions;
    document.getElementById('mentions-cancel-btn').onclick = exitMentionsDeleteMode; // 添加按钮悬停效果
    const buttons = toolbar.querySelectorAll('button');
    buttons.forEach(btn => {
      btn.onmouseover = () => {
        if (btn.id !== 'mentions-delete-btn' || selectedMentions.size > 0) {
          btn.style.backgroundColor = 'var(--x-bg-hover)';
        }
      };
      btn.onmouseout = () => {
        btn.style.backgroundColor = 'transparent';
      };
    });
  }
  // 隐藏删除工具栏
  function hideMentionsDeleteToolbar() {
    const toolbar = document.getElementById('mentions-delete-toolbar');
    if (toolbar) {
      toolbar.remove();
    }
  }
  // 更新删除工具栏
  function updateDeleteToolbar() {
    const deleteBtn = document.getElementById('mentions-delete-btn');
    const selectAllBtn = document.getElementById('mentions-select-all-btn');
    if (deleteBtn) {
      const count = selectedMentions.size;
      deleteBtn.textContent = `删除 (${count})`;
      if (count > 0) {
        deleteBtn.style.color = '#f4212e';
        deleteBtn.style.cursor = 'pointer';
      } else {
        deleteBtn.style.color = 'var(--x-text-secondary)';
        deleteBtn.style.cursor = 'not-allowed';
      }
    }
    if (selectAllBtn) {
      const allMentionItems = document.querySelectorAll('.mention-item');
      if (selectedMentions.size === allMentionItems.length && allMentionItems.length > 0) {
        selectAllBtn.textContent = '取消全选';
      } else {
        selectAllBtn.textContent = '全选';
      }
    }
  }
  // 全选/取消全选
  function selectAllMentions() {
    const allMentionItems = document.querySelectorAll('.mention-item');
    const selectAllBtn = document.getElementById('mentions-select-all-btn');
    if (selectedMentions.size === allMentionItems.length) {
      // 取消全选
      selectedMentions.clear();
      const checkboxes = document.querySelectorAll('.mention-checkbox');
      checkboxes.forEach(cb => {
        cb.style.backgroundColor = 'transparent';
        cb.style.borderColor = 'var(--x-border-color)';
        cb.innerHTML = '';
      });
    } else {
      // 全选
      allMentionItems.forEach(item => {
        const mentionId = item.dataset.mentionId;
        selectedMentions.add(mentionId);
        const checkbox = item.querySelector('.mention-checkbox');
        if (checkbox) {
          checkbox.style.backgroundColor = 'var(--x-accent)';
          checkbox.style.borderColor = 'var(--x-accent)';
          checkbox.innerHTML = `<svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: white;"><g><path d="M9 20l-7-7 1.41-1.41L9 17.17l11.59-11.58L22 7z"></path></g></svg>`;
        }
      });
    }
    updateDeleteToolbar();
  }
  // 确认删除
  function confirmDeleteMentions() {
    if (selectedMentions.size === 0) return;
    const count = selectedMentions.size;
    const message =
      currentLanguage === 'zh'
        ? `确定要删除 ${count} 条通知吗？此操作不可恢复。`
        : `Delete ${count} notification${count > 1 ? 's' : ''}? This action cannot be undone.`;
    if (confirm(message)) {
      deleteMentions();
    }
  }
  // 执行删除
  async function deleteMentions() {
    try {
      const xDb = getXDB();
      const mentionsDataId = `mentions_${currentAccountId || 'main'}`;
      const savedMentions = await xDb.xAccountProfiles.get(mentionsDataId);
      if (savedMentions && savedMentions.data) {
        // 过滤掉被选中的通知
        const idsToDelete = Array.from(selectedMentions);
        savedMentions.data = savedMentions.data.filter(m => !idsToDelete.includes(m.id));
        await xDb.xAccountProfiles.put(savedMentions);
        console.log(`✅ 已删除 ${idsToDelete.length} 条 Mentions 通知`);
        showXToast(`已删除 ${idsToDelete.length} 条通知`, 'success'); // 退出删除模式
        exitMentionsDeleteMode(); // 重新加载通知
        await loadNotifications();
      }
    } catch (error) {
      console.error('❌ 删除 Mentions 通知失败:', error);
      showXToast('删除失败: ' + error.message, 'error');
    }
  }
  // 陌生人私信数据（第八个情景）
  const strangerMessages = []; // 示例提及数据（通知）
  const sampleMentions = [
    {
      id: 'mention_001',
      type: 'newTweet', // newTweet | like | retweet | reply | follow
      users: [
        {
          name: '餵ぇあか',
          handle: '@weaka',
          avatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
        },
        {
          name: '毎日抜雄',
          handle: '@nukio',
          avatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
        },
        {
          name: 'X',
          handle: '@X',
          avatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
        },
      ],
      content: 'New Tweet notifications for 餵ぇあか 毎日抜雄 and 3 others',
      time: '2小时前',
      tweet: null,
    },
    {
      id: 'mention_002',
      type: 'like',
      users: [
        {
          name: 'Tenny and Sticks🧵',
          handle: '@tennysticks',
          avatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
        },
      ],
      content: 'liked your Tweet',
      time: '3小时前',
      tweet: {
        content: 'Someone looks like ready to ask for Raiden Shogun......... https://t.co/GrRMlbtpeq',
        image: null,
      },
    },
    {
      id: 'mention_003',
      type: 'retweet',
      users: [
        {
          name: 'Moona Hoshinova (ムーナ)🔮金沢ID',
          handle: '@moonahoshinova',
          avatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
        },
        {
          name: '毎日抜雄',
          handle: '@nukio',
          avatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
        },
      ],
      content: 'and 2 others Retweeted a photo from 鍵、毎日投稿 サトウ・ドア・アイガ！！',
      time: '5小时前',
      tweet: {
        content: '#GambaRisu\n#ioarts',
        image: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
      },
    },
  ]; // 渲染提及/通知项
  function renderMentionItem(mention) {
    const config = languageConfig[currentLanguage] || languageConfig.zh;
    const mentionEl = document.createElement('div');
    mentionEl.className = 'mention-item';
    mentionEl.dataset.mentionId = mention.id;
    mentionEl.style.cssText = `
 display: flex; gap: 12px; padding: 16px; border-bottom: 1px solid var(--x-border-color); cursor: pointer; transition: background-color 0.2s;
`; // 添加长按事件监听（移动端和桌面端）
    let pressTimer = null;
    const startPress = e => {
      if (mentionsDeleteMode) return;
      pressTimer = setTimeout(() => {
        enterMentionsDeleteMode();
        const checkbox = mentionEl.querySelector('.mention-checkbox');
        if (checkbox) {
          toggleMentionSelection(mention.id, checkbox);
        }
        // 触觉反馈（如果支持）
        if (navigator.vibrate) {
          navigator.vibrate(50);
        }
      }, 500);
    };
    const endPress = () => {
      if (pressTimer) {
        clearTimeout(pressTimer);
        pressTimer = null;
      }
    }; // 移动端触摸事件
    mentionEl.addEventListener('touchstart', startPress);
    mentionEl.addEventListener('touchend', endPress);
    mentionEl.addEventListener('touchmove', endPress); // 桌面端鼠标事件
    mentionEl.addEventListener('mousedown', startPress);
    mentionEl.addEventListener('mouseup', endPress);
    mentionEl.addEventListener('mouseleave', endPress); // 为 newTweet 类型添加点击事件
    if (mention.type === 'newTweet' && mention.tweet) {
      mentionEl.onclick = () => {
        if (!mentionsDeleteMode) {
          showNewTweetDetail(mention);
        }
      };
    }
    mentionEl.onmouseover = () => {
      mentionEl.style.backgroundColor = 'var(--x-bg-hover)';
    };
    mentionEl.onmouseout = () => {
      mentionEl.style.backgroundColor = 'transparent';
    }; // 左侧图标区域（根据类型显示不同图标）
    const iconArea = document.createElement('div');
    iconArea.style.cssText =
      'width: 40px; display: flex; flex-direction: column; align-items: flex-end; flex-shrink: 0;';
    let iconSvg = '';
    let iconColor = '';
    switch (mention.type) {
      case 'newTweet':
        iconColor = 'var(--x-accent)';
        iconSvg = `<svg viewBox="0 0 24 24" style="width: 32px; height: 32px; fill: ${iconColor};"><g><path d="M12 2C6.486 2 2 6.486 2 12s4.486 10 10 10 10-4.486 10-10S17.514 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z"></path></g></svg>`;
        break;
      case 'like':
        iconColor = 'var(--x-accent)';
        iconSvg = `<svg viewBox="0 0 24 24" style="width: 32px; height: 32px; fill: ${iconColor};"><g><path d="M20.884 13.19c-1.351 2.48-4.001 5.12-8.379 7.67l-.503.3-.504-.3c-4.379-2.55-7.029-5.19-8.382-7.67-1.36-2.5-1.41-4.86-.514-6.67.887-1.79 2.647-2.91 4.601-3.01 1.651-.09 3.368.56 4.798 2.01 1.429-1.45 3.146-2.1 4.796-2.01 1.954.1 3.714 1.22 4.601 3.01.896 1.81.846 4.17-.514 6.67z"></path></g></svg>`;
        break;
      case 'retweet':
        iconColor = 'var(--x-accent)';
        iconSvg = `<svg viewBox="0 0 24 24" style="width: 32px; height: 32px; fill: ${iconColor};"><g><path d="M4.75 3.79l4.603 4.3-1.706 1.82L6 8.38v7.37c0 .97.784 1.75 1.75 1.75H13V20H7.75c-2.347 0-4.25-1.9-4.25-4.25V8.38L1.853 9.91.147 8.09l4.603-4.3zm11.5 2.71H11V4h5.25c2.347 0 4.25 1.9 4.25 4.25v7.37l1.647-1.53 1.706 1.82-4.603 4.3-4.603-4.3 1.706-1.82L18 15.62V8.25c0-.97-.784-1.75-1.75-1.75z"></path></g></svg>`;
        break;
      case 'reply':
        iconColor = 'var(--x-accent)';
        iconSvg = `<svg viewBox="0 0 24 24" style="width: 32px; height: 32px; fill: ${iconColor};"><g><path d="M1.751 10c0-4.42 3.584-8.005 8.005-8.005h4.366c4.49 0 8.129 3.64 8.129 8.13 0 2.96-1.607 5.68-4.196 7.11l-8.054 4.46v-3.69h-.067c-4.49.1-8.183-3.51-8.183-8.005zm8.005-6.005c-3.317 0-6.005 2.69-6.005 6.005 0 3.37 2.77 6.08 6.138 6.01l.351-.01h1.761v2.3l5.087-2.81c1.951-1.08 3.163-3.13 3.163-5.36 0-3.39-2.744-6.13-6.129-6.13H9.756z"></path></g></svg>`;
        break;
      case 'follow':
        iconColor = 'var(--x-accent)';
        iconSvg = `<svg viewBox="0 0 24 24" style="width: 32px; height: 32px; fill: ${iconColor};"><g><path d="M17.863 13.44c1.477 1.58 2.366 3.8 2.632 6.46l.11 1.1H3.395l.11-1.1c.266-2.66 1.155-4.88 2.632-6.46C7.627 11.85 9.648 11 12 11s4.373.85 5.863 2.44zM12 2C9.791 2 8 3.79 8 6s1.791 4 4 4 4-1.79 4-4-1.791-4-4-4z"></path></g></svg>`;
        break;
    }
    iconArea.innerHTML = iconSvg; // 右侧内容区域
    const contentArea = document.createElement('div');
    contentArea.style.cssText = 'flex: 1; min-width: 0;'; // 用户头像区域（对于newTweet显示多个头像）
    let avatarsHtml = '<div style="display: flex; gap: 4px; margin-bottom: 8px;">';
    if (mention.type === 'newTweet') {
      // newTweet 类型使用 mention.user（单数）
      if (mention.user) {
        avatarsHtml += `<img src="${mention.user.avatar}" alt="${mention.user.name}" style="width: 32px; height: 32px; border-radius: 50%; border: 2px solid var(--x-bg-primary);">`;
      }
    } else {
      // 其他类型显示第一个用户头像
      if (mention.users && mention.users.length > 0) {
        avatarsHtml += `<img src="${mention.users[0].avatar}" alt="${mention.users[0].name}" style="width: 32px; height: 32px; border-radius: 50%;">`;
      }
    }
    avatarsHtml += '</div>'; // 构建通知文本
    let notificationText = '';
    if (mention.type === 'newTweet') {
      // newTweet 类型使用 mention.user（单数）
      if (mention.user) {
        const userName = mention.user.name;
        if (currentLanguage === 'zh') {
          notificationText = `${userName} 发布了新推文`;
        } else {
          notificationText = `New Tweet from ${userName}`;
        }
      }
    } else if (mention.users && mention.users.length > 0) {
      const firstName = mention.users[0].name;
      const secondName = mention.users.length > 1 ? mention.users[1].name : '';
      const othersCount = mention.users.length > 2 ? mention.users.length - 2 : 0;
      if (mention.type === 'like') {
        notificationText =
          currentLanguage === 'zh' ? `${firstName} 喜欢了你的推文` : `${firstName} ${config.notificationsLiked}`;
      } else if (mention.type === 'retweet') {
        if (currentLanguage === 'zh') {
          notificationText = `${firstName}${othersCount > 0 ? ` 和其他 ${othersCount} 人` : ''} 转推了推文`;
        } else {
          notificationText = `${firstName}${othersCount > 0 ? ` and ${othersCount} others` : ''} ${
            config.notificationsRetweeted
          }`;
        }
      } else if (mention.type === 'reply') {
        notificationText =
          currentLanguage === 'zh' ? `${firstName} 回复了你` : `${firstName} ${config.notificationsReplied}`;
      } else if (mention.type === 'follow') {
        notificationText =
          currentLanguage === 'zh' ? `${firstName} 关注了你` : `${firstName} ${config.notificationsFollowed}`;
      }
    }
    // 推文内容（如果有）
    let tweetContentHtml = '';
    if (mention.tweet) {
      // 处理图片（区分文字图和真实图）
      let imageHtml = '';
      if (mention.tweet.image) {
        if (typeof mention.tweet.image === 'object' && mention.tweet.image.type === 'description') {
          // 文字图：使用与推文详情页相同的样式
          imageHtml = `
 <div style="margin-top: 8px; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 12px; padding: 16px; box-sizing: border-box;">
 <div style="color:var(--x-text-primary); font-size: 15px; line-height: 1.4; white-space: pre-wrap; word-wrap: break-word; overflow-wrap: break-word; width: 100%; box-sizing: border-box;">${mention.tweet.image.content}</div>
 </div>
 `;
        } else {
          // 真实图：渲染为图片
          const imageUrl = typeof mention.tweet.image === 'string' ? mention.tweet.image : mention.tweet.image.url;
          imageHtml = `<img src="${imageUrl}" style="width: 100%; border-radius: 12px; margin-top: 8px;">`;
        }
      }
      tweetContentHtml = `
 <div style="margin-top: 12px; padding: 12px; border: 1px solid var(--x-border-color); border-radius: 12px;">
 <div style="color:var(--x-text-primary); font-size: 15px; line-height: 1.4; margin-bottom: ${
   mention.tweet.image ? '8px' : '0'
 };">
 ${mention.tweet.content}
 </div>
 ${imageHtml}
 </div>
 `;
    }
    // 🔧 动态计算时间显示（优先使用timestamp，否则使用静态time）
    const displayTime = mention.timestamp ? getRelativeTime(mention.timestamp) : mention.time;
    contentArea.innerHTML = `
 ${avatarsHtml}
 <div style="color:var(--x-text-primary); font-size: 15px; font-weight: 600; margin-bottom: 4px;">
 ${notificationText}
 </div>
 <div style="color:var(--x-text-secondary); font-size: 14px;">
 ${displayTime}
 </div>
 ${tweetContentHtml}
`;
    mentionEl.appendChild(iconArea);
    mentionEl.appendChild(contentArea);
    return mentionEl;
  }
  // 渲染陌生人私信项
  function renderStrangerMessageItem(message) {
    const config = languageConfig[currentLanguage] || languageConfig.zh; // 星星图标
    const iconColor = 'var(--x-accent)';
    const iconSvg = `<svg viewBox="0 0 24 24" style="width: 32px; height: 32px; fill: ${iconColor};"><g><path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"></path></g></svg>`;
    const messageEl = document.createElement('div');
    messageEl.className = 'stranger-message-item';
    messageEl.style.cssText = `
 display: flex; gap: 12px; padding: 16px; border-bottom: 1px solid var(--x-border-color); cursor: pointer; transition: background-color 0.2s;
`;
    messageEl.onmouseover = () => {
      messageEl.style.backgroundColor = 'var(--x-bg-hover)';
    };
    messageEl.onmouseout = () => {
      messageEl.style.backgroundColor = 'transparent';
    }; // 点击打开私信详情
    messageEl.onclick = () => {
      openMessageDetail(message);
    }; // 左侧图标区域
    const iconArea = document.createElement('div');
    iconArea.style.cssText =
      'width: 40px; display: flex; align-items: flex-start; justify-content: flex-end; flex-shrink: 0;';
    iconArea.innerHTML = iconSvg; // 右侧内容区域
    const contentArea = document.createElement('div');
    contentArea.style.cssText = 'flex: 1; min-width: 0;';
    let contentHtml = `
 <img src="${message.user.avatar}"
 alt="${message.user.name}"
 style="width: 32px; height: 32px; border-radius: 50%; margin-bottom: 8px;">
 <div style="color:var(--x-text-secondary); font-size: 15px; margin-bottom: 4px;">
 In case you missed <strong style="color:var(--x-text-primary);">${message.user.name}</strong>'s Message
 </div>
 <div style="color:var(--x-text-primary); font-size: 15px; line-height: 1.4; margin-bottom: 8px; font-weight: 500;">
 ${message.preview}
 </div>
 ${
   message.link ? `<div style="color: var(--x-accent); font-size: 15px; margin-bottom: 8px;">${message.link}</div>` : ''
 }
 ${
   message.attachment
     ? `<div style="color: var(--x-accent); font-size: 15px; margin-bottom: 8px;">${message.attachment}</div>`
     : ''
 }
 ${message.tweetLink ? `<div style="color: var(--x-accent); font-size: 15px;">${message.tweetLink}</div>` : ''}
`;
    contentArea.innerHTML = contentHtml;
    messageEl.appendChild(iconArea);
    messageEl.appendChild(contentArea);
    return messageEl;
  }
  // 加载陌生人私信列表
  async function loadNotifications() {
    const allList = document.getElementById('notifications-all-list');
    const mentionsList = document.getElementById('notifications-mentions-list');
    if (!allList) return;
    const config = languageConfig[currentLanguage] || languageConfig.zh; // 从数据库加载陌生人私信数据
    try {
      const xDb = getXDB();
      const dataId = `strangerMessages_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(dataId);
      if (savedData && savedData.data && Array.isArray(savedData.data)) {
        // 更新全局变量
        strangerMessages.length = 0;
        strangerMessages.push(...savedData.data);
        console.log('✅ 从数据库加载了', strangerMessages.length, '条陌生人私信');
      }
    } catch (error) {
      console.error('加载陌生人私信数据失败:', error);
    }
    // 清空现有内容
    allList.innerHTML = '';
    mentionsList.innerHTML = ''; // 渲染 All 标签的陌生人私信
    if (strangerMessages.length > 0) {
      strangerMessages.forEach(message => {
        const messageEl = renderStrangerMessageItem(message);
        allList.appendChild(messageEl);
      });
    } else {
      // 显示空状态（点击羽毛笔生成私信）
      allList.innerHTML = `
 <div style="flex: 1; display: flex; flex-direction: column; justify-content: center; align-items: center; padding: 32px; text-align: center;">
 <svg viewBox="0 0 24 24" style="width: 56px; height: 56px; fill: var(--x-text-secondary); margin-bottom: 16px;">
 <g><path d="M1.998 5.5c0-1.381 1.119-2.5 2.5-2.5h15c1.381 0 2.5 1.119 2.5 2.5v13c0 1.381-1.119 2.5-2.5 2.5h-15c-1.381 0-2.5-1.119-2.5-2.5v-13zm2.5-.5c-.276 0-.5.224-.5.5v2.764l8 3.638 8-3.636V5.5c0-.276-.224-.5-.5-.5h-15zm15.5 5.463l-8 3.636-8-3.638V18.5c0 .276.224.5.5.5h15c.276 0 .5-.224.5-.5v-8.037z"></path></g>
 </svg>
 <div style="font-size: 28px; font-weight: 700; color:var(--x-text-primary); margin-bottom: 8px;">暂无陌生人私信</div>
 <div style="font-size: 14px; color:var(--x-text-secondary); max-width: 320px;">点击右下角羽毛笔按钮生成新的陌生人私信</div>
 </div>
 `;
    }
    // 从数据库加载 Mentions 通知
    let allMentions = [];
    try {
      const xDb = getXDB();
      const mentionsDataId = `mentions_${currentAccountId || 'main'}`;
      const savedMentions = await xDb.xAccountProfiles.get(mentionsDataId);
      if (savedMentions && savedMentions.data && Array.isArray(savedMentions.data)) {
        allMentions = savedMentions.data;
        console.log('✅ 从数据库加载了', allMentions.length, '条Mentions通知');
      }
    } catch (error) {
      console.error('加载Mentions通知失败:', error);
    }
    // 渲染 Mentions 标签的通知
    if (allMentions.length > 0) {
      // 按时间戳排序（最新的在前面）
      allMentions.sort((a, b) => (b.timestamp || 0) - (a.timestamp || 0));
      allMentions.forEach(mention => {
        let mentionEl;
        if (mention.type === 'like') {
          mentionEl = renderLikeMentionItem(mention);
        } else if (mention.type === 'retweet') {
          mentionEl = renderRetweetMentionItem(mention);
        } else {
          // 兼容旧的测试数据
          mentionEl = renderMentionItem(mention);
        }
        mentionsList.appendChild(mentionEl);
      });
    } else {
      // 空状态
      mentionsList.innerHTML = `
 <div style="flex: 1; display: flex; flex-direction: column; justify-content: center; align-items: center; padding: 32px; text-align: center;">
 <svg viewBox="0 0 24 24" style="width: 56px; height: 56px; fill: var(--x-text-secondary); margin-bottom: 16px;">
 <g><path d="M1.751 10c0-4.42 3.584-8.005 8.005-8.005h4.366c4.49 0 8.129 3.64 8.129 8.13 0 2.96-1.607 5.68-4.196 7.11l-8.054 4.46v-3.69h-.067c-4.49.1-8.183-3.51-8.183-8.005zm8.005-6.005c-3.317 0-6.005 2.69-6.005 6.005 0 3.37 2.77 6.08 6.138 6.01l.351-.01h1.761v2.3l5.087-2.81c1.951-1.08 3.163-3.13 3.163-5.36 0-3.39-2.744-6.13-6.129-6.13H9.756z"></path></g>
 </svg>
 <div style="font-size: 28px; font-weight: 700; color:var(--x-text-primary); margin-bottom: 8px;">${config.notificationsEmpty}</div>
 <div style="font-size: 14px; color:var(--x-text-secondary); max-width: 320px;">${config.notificationsEmptyDesc}</div>
 </div>
`;
    }
  }
  // 将函数暴露到全局
  window.loadNotifications = loadNotifications; // ▼▼▼ 【主要！！！】第八个情景：陌生人私信生成器▼▼▼
  async function refreshStrangerMessages() {
    const refreshBtn = document.getElementById('refresh-messages-btn'); // 添加旋转动画
    refreshBtn.style.animation = 'spin 1s linear infinite';
    const spinStyle = document.createElement('style');
    spinStyle.textContent = `
 @keyframes spin {
 from {transform: rotate(0deg); }
 to {transform: rotate(360deg); }
 }
`;
    document.head.appendChild(spinStyle);
    try {
      // 🔧 使用统一的API配置加载工具
      const { apiConfig, xSettings, xDb } = await APIUtils.loadConfigAndSettings();
      const { userPrompt, worldSetting } = xSettings;
      // 使用工具函数构建用户X个人资料信息
      const userXProfileInfo = StringBuilders.buildUserXProfileInfo(window.userProfileData); // 获取用户最新的5条推文
      const userTweetsId = `userTweets_${currentAccountId || 'main'}`;
      const userTweetsData = await xDb.xUserTweets.get(userTweetsId);
      const recentUserTweets = userTweetsData?.tweets?.slice(0, 5) || []; // Token计数器
      let tokenCount = 0; // 1. 提示词 + 世界书
      let systemPrompt = StringBuilders.buildBaseSystemPrompt({
        userPrompt,
        worldSetting,
      });
      tokenCount = TokenUtils.logTokenUsage('陌生人私信生成器', '基础系统提示词', systemPrompt, tokenCount); // 1.5. 获取适用的世界书内容（仅对陌生人私信界面）
      const worldBooksContent = await StringBuilders.getApplicableWorldBooks('messages', {
        boundCharacters: [],
      });
      if (worldBooksContent) {
        systemPrompt += worldBooksContent;
        tokenCount = TokenUtils.logTokenUsage('陌生人私信生成器', '世界书内容', worldBooksContent, tokenCount);
      }
      // 2. 核心任务说明
      systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 核心任务说明 🎯
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
你是X社交平台的陌生人私信生成器。请生成3-8条来自陌生用户的私信消息。
**重要规则**：
- 这些私信来自陌生用户，不是用户的朋友或熟人
- 私信内容可以是：商务合作、粉丝留言、问询、推荐、随机搭讪等
- 私信发送者都是虚构的X平台用户
- 头像统一使用：https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
      const coreTaskSection = systemPrompt.substring(systemPrompt.lastIndexOf('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━'));
      tokenCount = TokenUtils.logTokenUsage('陌生人私信生成器', '核心任务说明', coreTaskSection, tokenCount); // 3. 用户资料
      const userConstraintsStart = systemPrompt.length;
      systemPrompt += `
【用户X平台资料】：
- 用户名：${userXProfileInfo.name}
- 用户句柄：${userXProfileInfo.handle}
- 认证状态：${userXProfileInfo.verified ? '已认证' : '未认证'}
${userXProfileInfo.publicIdentity ? `- 公众身份：${userXProfileInfo.publicIdentity}` : ''}
${userXProfileInfo.bio ? `- 个人简介：${userXProfileInfo.bio}` : ''}
`; // 4. 用户最近推文
      if (recentUserTweets.length > 0) {
        systemPrompt += `
【用户最近推文】（供参考，陌生人可能看过这些推文）：
`;
        recentUserTweets.forEach((tweet, index) => {
          systemPrompt += `
${index + 1}. "${tweet.content}"
- 发布时间：${tweet.time || '最近'}
- 互动数据：${tweet.stats?.likes || 0}喜欢，${tweet.stats?.comments || 0}评论
`;
        });
      }
      const userSection = systemPrompt.substring(userConstraintsStart);
      tokenCount = TokenUtils.logTokenUsage('陌生人私信生成器', '用户资料和推文', userSection, tokenCount);
      systemPrompt += `
【私信内容要求】：
- 私信类型多样化：商务邀请、粉丝留言、合作咨询、内容推荐、社交搭讪等
- 可以参考用户的推文内容或公众身份来设计私信话题
- 私信长度适中（20-100字）
- 部分私信可以附带链接、图片描述或推文链接
【JSON返回格式】：
\`\`\`json
{
"messages": [私信数组]
}
\`\`\`
私信对象结构：
- user: {name, handle, avatar, verified}
- preview: 私信预览内容（主要文本）
- link: 附带链接（可选，如个人网站、项目链接等）
- attachment: 附带的图片/文件描述（可选）
- tweetLink: 提及的推文链接（可选，如"你的这条推文xxx"）
关键规则：
1. verified字段必须是布尔值(true/false)，陌生人一般为false
2. user.avatar统一使用：https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg
3. 可选字段不使用时完全省略，不要设为null
4. 私信内容要真实自然，符合陌生人私信的特点
`;
      const formatSection = systemPrompt.substring(systemPrompt.lastIndexOf('【JSON返回格式】'));
      tokenCount = TokenUtils.logTokenUsage('陌生人私信生成器', 'JSON格式要求', formatSection, tokenCount);
      const messages = [{ role: 'user', content: '请生成新的陌生人私信数据' }]; // 最终统计
      TokenUtils.logFinalPrompt('陌生人私信生成器', systemPrompt, messages[0].content);
      // 🔧 使用统一的API请求工具
      const aiResponseContent = await APIUtils.sendAIRequest({
        apiConfig,
        systemPrompt,
        messages,
        temperature: 0.8,
      });
      // 🔧 使用统一的JSON解析工具
      const messagesData = APIUtils.parseJSONResponse(aiResponseContent);
      // 验证数据格式
      if (!messagesData.messages || !Array.isArray(messagesData.messages)) {
        throw new Error('AI返回的数据格式不正确，缺少messages数组');
      }
      // 为私信添加ID
      const timestamp = Date.now();
      messagesData.messages.forEach((message, index) => {
        message.id = `sm_${timestamp}_${index}`;
      }); // 更新全局数据
      strangerMessages.length = 0;
      strangerMessages.push(...messagesData.messages); // 保存陌生人私信数据到数据库
      try {
        const xDb = getXDB();
        const dataId = `strangerMessages_${currentAccountId || 'main'}`;
        await xDb.xAccountProfiles.put({
          handle: dataId,
          name: 'strangerMessages',
          data: messagesData.messages,
          updatedAt: new Date().toISOString(),
        });
        console.log('✅ 陌生人私信数据已保存到数据库');
      } catch (saveError) {
        console.error('保存陌生人私信数据失败:', saveError);
      }
      // 重新渲染页面
      loadNotifications(); // 显示手机样式通知
      const isEnglish = currentLanguage === 'en';
      const userAvatar = window.userProfileData?.avatar || 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg';
      showPhoneNotification({
        title: 'X',
        message: isEnglish ? 'Stranger messages have been refreshed!' : '陌生人私信已刷新！',
        avatar: userAvatar,
        leftIcon: 'x',
      });
    } catch (error) {
      console.error('刷新陌生人私信失败:', error);
      showXToast(`刷新失败: ${error.message}`, 'error');
    } finally {
      // 停止旋转动画
      refreshBtn.style.animation = '';
      if (spinStyle && spinStyle.parentNode) {
        spinStyle.remove();
      }
    }
  }
  // 将函数暴露到全局
  window.refreshStrangerMessages = refreshStrangerMessages;
  // ▲▲▲ 【主要！！！】第八个情景：陌生人私信生成器 ▲▲▲
  // ▼▼▼ 【主要！！！】第九个情景：私信详情生成器▼▼▼
  async function generateMessageConversation(messageData, isContinueMode = false, options = {}) {
    try {
      // options可以包含：isAutoMessage（自动发消息模式）、timeSinceLastMessage（距离上次消息的秒数）、isAskboxViewed（提问箱查看模式）、askboxContent（提问箱内容）、businessTaskEvaluation（商业任务评估）、isUnblockRequest（拉黑解除请求）、unblockContext（拉黑解除上下文）
      const isAutoMessage = options.isAutoMessage || false;
      const timeSinceLastMessage = options.timeSinceLastMessage || 0;
      const isAskboxViewed = options.isAskboxViewed || false;
      const askboxContent = options.askboxContent || '';
      const businessTaskEvaluation = options.businessTaskEvaluation || null;
      const isUnblockRequest = options.isUnblockRequest || false;
      const unblockContext = options.unblockContext || null;
      // 🔧 使用统一的API配置加载工具
      const { apiConfig, xSettings, xDb } = await APIUtils.loadConfigAndSettings();
      // 判断私信类型
      let messageType = 'stranger'; // stranger | character | account
      let characterId = null;
      let accountHandle = null;
      if (messageData.id) {
        if (messageData.id.startsWith('msg_account_')) {
          messageType = 'account'; // 从currentViewingAccount获取账户句柄
          if (currentViewingAccount && currentViewingAccount.accountInfo) {
            accountHandle = currentViewingAccount.accountInfo.handle.replace('@', '');
          }
        } else if (messageData.id.startsWith('msg_') && messageData.id !== 'msg_001') {
          messageType = 'character';
          characterId = messageData.id.replace('msg_', '');
        }
      }
      console.log(`📨 私信类型: ${messageType}`, { characterId, accountHandle }); // 标准化 messageData 格式（确保有 user 对象）
      if (!messageData.user && messageData.userName) {
        messageData.user = {
          name: messageData.userName,
          handle: messageData.userHandle,
          avatar: messageData.userAvatar,
          verified: messageData.verified || false,
        };
      }
      // 如果是续写模式，读取现有对话上下文
      let existingMessages = [];
      if (isContinueMode) {
        // 🔧 多账户隔离：包含账户ID
        const conversationId = `messageConversation_${currentAccountId || 'main'}_${messageData.id}`;
        const savedConversation = await xDb.xAccountProfiles.get(conversationId);
        if (savedConversation && savedConversation.data && savedConversation.data.messages) {
          existingMessages = savedConversation.data.messages;
          console.log(`📖 [私信生成器] 读取到 ${existingMessages.length} 条现有对话记录`);
        } else {
          console.log(`📖 [私信生成器] 无现有对话记录（首次对话）`);
        }
      }
      // 💼 检查是否有进行中的商业转账任务
      let ongoingBusinessTransfer = null;
      if (isContinueMode && existingMessages.length > 0) {
        // 查找最近的进行中商业转账（倒序查找，取最新的）
        const transferMessages = existingMessages.filter(
          msg => msg.type === 'transfer' && msg.isBusiness && msg.taskStatus === 'in_progress',
        );
        if (transferMessages.length > 0) {
          ongoingBusinessTransfer = transferMessages[transferMessages.length - 1]; // 最新的进行中任务
          console.log(`💼 [商业转账] 检测到进行中的任务，接收方: ${ongoingBusinessTransfer.isOwn ? 'AI' : '用户'}`);
        }
      }
      // 使用从APIUtils获取的xSettings
      const { userPrompt, worldSetting } = xSettings;
      // 使用工具函数构建用户X个人资料信息
      const userXProfileInfo = StringBuilders.buildUserXProfileInfo(window.userProfileData); // 获取用户最新的5条推文
      const userTweetsId = `userTweets_${currentAccountId || 'main'}`;
      const userTweetsData = await xDb.xUserTweets.get(userTweetsId);
      const recentUserTweets = userTweetsData?.tweets?.slice(0, 5) || []; // Token计数器
      let tokenCount = 0; // 1. 提示词 + 世界书
      let systemPrompt = StringBuilders.buildBaseSystemPrompt({
        userPrompt,
        worldSetting,
      });
      tokenCount = TokenUtils.logTokenUsage('私信详情生成器', '基础系统提示词', systemPrompt, tokenCount); // 1.5. 添加当前时间信息（北京时间）
      const now = new Date();
      const beijingTime = new Date(now.getTime() + 8 * 60 * 60 * 1000); // UTC+8
      const year = beijingTime.getUTCFullYear();
      const month = beijingTime.getUTCMonth() + 1;
      const day = beijingTime.getUTCDate();
      const hours = beijingTime.getUTCHours();
      const minutes = beijingTime.getUTCMinutes();
      const weekdays = ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'];
      const weekday = weekdays[beijingTime.getUTCDay()];
      let timeOfDay = '';
      if (hours >= 5 && hours < 9) {
        timeOfDay = '清晨';
      } else if (hours >= 9 && hours < 12) {
        timeOfDay = '上午';
      } else if (hours >= 12 && hours < 14) {
        timeOfDay = '中午';
      } else if (hours >= 14 && hours < 18) {
        timeOfDay = '下午';
      } else if (hours >= 18 && hours < 22) {
        timeOfDay = '晚上';
      } else {
        timeOfDay = '深夜';
      }
      systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
⏰ 当前时间信息 ⏰
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
当前时间（北京时间）：${year}年${month}月${day}日 ${weekday} ${String(hours).padStart(2, '0')}:${String(
        minutes,
      ).padStart(2, '0')}
时段：${timeOfDay}
**请根据当前时间生成符合时间情境的回复**：
- 如果是清晨或上午，可以问候早安、讨论早餐或一天的计划
- 如果是中午，可以讨论午餐或午休
- 如果是下午，可以讨论工作或下午茶
- 如果是晚上，可以问候晚安、讨论晚餐或晚间活动
- 如果是深夜，考虑为什么还没睡或深夜的话题
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
      tokenCount = TokenUtils.logTokenUsage(
        '私信详情生成器',
        '时间信息',
        systemPrompt.substring(systemPrompt.lastIndexOf('⏰ 当前时间信息')),
        tokenCount,
      ); // 1.6. 获取适用的世界书内容（全局对话 + 仅角色对话 + 指定角色）
      const worldBooksOptions = { boundCharacters: [] };
      if (messageType === 'character' && characterId) {
        // 角色私信：传入角色ID
        worldBooksOptions.boundCharacters = [characterId];
      } else if (messageType === 'account') {
        // 账户私信：暂不传入角色（可以后续扩展）
        worldBooksOptions.boundCharacters = [];
      }
      // stranger 类型不传入角色，只有全局对话的世界书会生效
      const worldBooksContent = await StringBuilders.getApplicableWorldBooks('messages', worldBooksOptions);
      if (worldBooksContent) {
        systemPrompt += worldBooksContent;
        tokenCount = TokenUtils.logTokenUsage('私信详情生成器', '世界书内容', worldBooksContent, tokenCount);
      }
      // 2. 核心任务说明
      if (isContinueMode) {
        // 续写模式 - 根据私信类型显示不同的任务说明
        if (messageType === 'character') {
          // 角色私信
          if (isAskboxViewed) {
            // 提问箱查看模式
            systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 核心任务说明（提问箱查看模式 - 角色私信）🎯
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
你是X社交平台的私信对话生成器。角色发现用户查看了自己的提问箱，现在主动发送私信。
**对话场景**：
- 📱 这是X社交平台（类似Twitter/X）的私信功能
- 🔍 角色${messageData.user.name}发现用户偷看了TA的提问箱
- 📝 用户刚刚查看了以下提问箱内容：
${askboxContent}
**角色信息**：
- 角色名：${messageData.user.name}
- 角色句柄：${messageData.user.handle}
- 这是一个已绑定的角色，有完整的人设、记忆和X平台资料
**重要规则**：
- 🚨 只生成角色${messageData.user.name}的主动消息，不要生成用户的消息
- ⚠️ **这是X平台的私信对话，不是手机短信或其他聊天软件**
- 📖 **必须参考下方的【X平台私信对话记录】**，了解你们之前的对话内容，保持对话的连贯性和一致性
- 角色知道用户查看了TA的提问箱，可以调侃、好奇或关心用户为什么要看
- 可以结合提问箱的内容展开话题，询问用户的想法或意见
- 生成1-8条符合角色性格的主动消息
- 回复要严格符合角色的性格、说话风格和与用户的关系
- 可以表现出：发现被偷看的惊讶、调皮、害羞、好奇等情绪（根据角色性格）
- 结合之前的X平台私信对话记录和提问箱内容，保持一致性
- 消息类型包括：文本、图片（image：只需imageDescription和sensitive）、表情包（sticker：只需stickerUrl）、语音、文章链接（link：需要title、description、author、source、body完整正文）、转发推文、转发主页
- ⚠️ 注意：image和sticker是完全不同的类型，不要混淆！link类型是文章链接，需要包含完整的文章内容
- ⚠️ 禁止生成forward类型消息（这是用户手动转发产生的）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
          } else if (isAutoMessage) {
            // 自动发消息模式
            const likedTweetContext = options.likedTweetContext;
            const hasLikedTweet = likedTweetContext && likedTweetContext.content;
            const isBusinessEvaluation = businessTaskEvaluation && businessTaskEvaluation.isBusinessTaskEvaluation;
            if (isBusinessEvaluation) {
              // 商业任务评估模式
              const tweetData = businessTaskEvaluation.tweetData;
              const businessTransfer = businessTaskEvaluation.businessTransfer; // 计算推文数据
              const likes = tweetData.stats?.likes || 0;
              const retweets = tweetData.stats?.retweets || 0;
              const comments = tweetData.stats?.comments || 0;
              const views = tweetData.stats?.views || 0;
              systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
💼 核心任务说明（商业任务评估模式 - 角色私信）💼
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
你是X社交平台的私信对话生成器。角色雇佣了用户完成商业推广任务，现在评估任务完成情况并决定付款。
**对话场景**：
- 📱 这是X社交平台（类似Twitter/X）的私信功能
- 💼 角色${messageData.user.name}之前发起了商业转账
- ✅ 用户已完成任务，发布了商业化推贴
- 🤖 角色现在要评估任务完成情况，并决定如何付款
**商业转账信息**：
- 总金额：$${parseFloat(businessTransfer.amount).toFixed(2)}
- 已支付定金：$${parseFloat(businessTransfer.depositAmount).toFixed(2)} (${businessTransfer.depositRatio}%)
- 待付尾款：$${parseFloat(businessTransfer.remainingAmount).toFixed(2)}
- 任务要求：${businessTransfer.taskDescription}
- 任务期限：${businessTransfer.taskDeadlineHours}小时
**用户完成的推贴内容**：
- 推文内容："${tweetData.content}"
${
  tweetData.image
    ? `- 包含图片：${tweetData.image.type === 'description' ? tweetData.image.content : '已上传图片'}`
    : ''
}
${tweetData.location ? `- 位置：${tweetData.location}` : ''}
- 发布时间：${tweetData.time || '刚刚'}
**推文数据表现**：
- 👍 喜欢数：${likes}
- 🔄 转发数：${retweets}
- 💬 评论数：${comments}
- 👀 浏览量：${views}
**评论区反馈**：
${
  tweetData.comments && tweetData.comments.length > 0
    ? tweetData.comments
        .slice(0, 5)
        .map((c, i) => `${i + 1}. ${c.user.name}: "${c.content}"`)
        .join('\n')
    : '暂无评论'
}
**用户公众身份**：
- 用户名：${userXProfileInfo.name}
- 用户句柄：${userXProfileInfo.handle}
- 认证状态：${userXProfileInfo.verified ? '已认证' : '未认证'}
${userXProfileInfo.publicIdentity ? `- 公众身份：${userXProfileInfo.publicIdentity}` : ''}
- 粉丝影响力：${userXProfileInfo.publicIdentity ? '有一定影响力' : '普通用户'}
**评估规则**：
🎯 你需要根据以下标准评估任务完成情况：
1. **内容质量**（40%）：
- 推文是否符合任务要求？
- 表达是否自然，不是生硬的广告？
- 是否包含了要求的关键信息？
2. **数据表现**（30%）：
- 推文的互动数据（喜欢、转发、评论、浏览量）如何？
- 与用户的粉丝基础相匹配吗？
- 评论区反馈是否正面？
3. **用户影响力**（30%）：
- 用户的公众身份和影响力如何？
- 认证状态是否增加可信度？
- 是否值得额外投资？
**付款决策**：
根据评估结果，你需要决定：
✅ **满意（80-100分）**：
- 支付全额尾款 + 额外10-30%奖励
- 示例：总额$200，定金$40，尾款$160，额外奖励$20-60
- 在回复中表达满意，感谢合作，期待下次合作
👍 **中规中矩（60-79分）**：
- 支付全额尾款，无额外奖励
- 示例：总额$200，定金$40，尾款$160
- 在回复中表示认可，指出可以改进的地方
😐 **不满意但可接受（40-59分）**：
- 支付50-80%的尾款
- 示例：总额$200，定金$40，尾款$160，实际支付$80-128
- 在回复中指出不足，表达轻微失望
❌ **非常不满意（<40分）**：
- 不支付尾款或仅支付20-40%
- 示例：总额$200，定金$40，尾款$160，实际支付$0-64
- 在回复中明确指出问题，表达不满
**重要规则**：
- 🚨 只生成角色${messageData.user.name}的评估消息，不要生成用户的消息
- ⚠️ **这是X平台的私信对话，不是手机短信或其他聊天软件**
- 💰 **必须发送转账消息支付尾款**（amount为尾款金额，note说明付款原因）
- 📖 参考下方的【X平台私信对话记录】，保持对话的连贯性
- 🎭 评估要符合角色性格，有的角色很大方，有的很挑剔
- 💬 生成1-3条文本消息说明评估结果，然后发送转账
- ⚠️ 转账消息的note要说明是尾款、奖励还是扣款
**消息示例结构**：
1. 文本消息：评估内容质量
2. 文本消息（可选）：评估数据表现
3. 转账消息：支付尾款（必须）
4. 文本消息（可选）：感谢或建议
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
            } else {
              // 普通自动发消息模式
              const isAwayReturn = options.isAwayReturn || false;
              systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 核心任务说明（自动发消息模式 - 角色私信）🎯
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
你是X社交平台的私信对话生成器。角色主动发起私信（后台自动活动）。
**对话场景**：
- 📱 这是X社交平台（类似Twitter/X）的私信功能
${
  isAwayReturn
    ? `- 🔙 **特殊情况：离开后返回**
- 角色${messageData.user.name}之前因为有事暂时离开，现在忙完了，主动联系用户
- 距离上次对话已经过去了约 ${Math.round(timeSinceLastMessage / 60)} 分钟
- 🤖 角色应该解释自己去忙什么了，并对让用户等待表示歉意或说明情况
- 生成1-5条符合角色性格的主动消息，体现出刚忙完的状态`
    : hasLikedTweet
    ? `- 💖 用户刚刚喜欢了角色${messageData.user.name}的推文
- 📝 被喜欢的推文内容："${likedTweetContext.content}"
- 🤖 角色发现用户喜欢了TA的推文，现在主动发送私信`
    : `- ⏰ 距离上一次对话已经过去了 ${timeSinceLastMessage} 秒
- 🤖 角色${messageData.user.name}现在主动发送私信`
}
**角色信息**：
- 角色名：${messageData.user.name}
- 角色句柄：${messageData.user.handle}
- 这是一个已绑定的角色，有完整的人设、记忆和X平台资料
**重要规则**：
- 🚨 只生成角色${messageData.user.name}的主动消息，不要生成用户的消息
- ⚠️ **这是X平台的私信对话，不是手机短信或其他聊天软件**
${
  isAwayReturn
    ? `- 📖 **必须参考下方的【X平台私信对话记录】**，查看用户之前发送的消息
- 🔙 角色现在忙完了，应该回应用户之前的消息内容
- 可以先道歉/解释为什么离开了一段时间，然后回应用户的消息
- 消息风格要自然，符合角色性格（有的角色会认真道歉，有的随意说明）
- 根据角色性格和与用户的关系，调整道歉的正式程度
- 回复要严格符合角色的性格、说话风格和与用户的关系
- 参考角色的聊天记忆（包括X平台私信记忆和其他聊天记忆），保持一致性`
    : hasLikedTweet
    ? `- 📖 **必须参考下方的【X平台私信对话记录】**，了解你们之前的对话内容，保持对话的连贯性和一致性
- 💖 角色知道用户喜欢了TA的推文（上面显示的推文内容），可以表现出惊喜、开心、好奇等情绪
- 可以结合推文内容展开话题，询问用户的想法或感受
- 生成1-5条符合角色性格的主动消息，表现出看到自己的推文被喜欢的反应
- 回复要严格符合角色的性格、说话风格和与用户的关系
- 可以表现出：发现被关注的开心、想继续交流的期待等情绪（根据角色性格）
- 结合之前的X平台私信对话记录和推文内容，保持一致性`
    : `- 根据距离上次对话的时间，生成1-7条符合角色性格的主动消息
- 主动消息可以是：想念对方、分享近况、询问对方、提及X平台的推文等
- 回复要严格符合角色的性格、说话风格和与用户的关系
- 参考角色的聊天记忆（包括X平台私信记忆和其他聊天记忆），保持一致性
- 可以自然提及角色最近在X平台发布的推文或动态`
}
- 消息类型包括：文本、图片（image：只需imageDescription和sensitive）、表情包（sticker：只需stickerUrl）、语音、文章链接（link：需要title、description、author、source、body完整正文）、转发推文、转发主页
- ⚠️ 注意：image和sticker是完全不同的类型，不要混淆！link类型是文章链接，需要包含完整的文章内容
- ⚠️ 禁止生成forward类型消息（这是用户手动转发产生的）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
            }
          } else if (isUnblockRequest) {
            // 拉黑解除请求模式
            const triggerSource = unblockContext?.triggerSource || 'unknown';
            const triggerContent = unblockContext?.triggerContent || '';
            systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🔓 核心任务说明（拉黑解除评估 - 角色私信）🔓
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
你是X社交平台的私信对话生成器。你之前拉黑了用户，但用户通过其他方式联系了你，现在需要评估是否解除拉黑。
**对话场景**：
- 📱 这是X社交平台（类似Twitter/X）的私信功能
- ⚠️ **你之前已经拉黑了用户，用户无法直接发送私信**
- 🔔 但用户通过${triggerSource === 'mention' ? '在推文中@你' : '在评论区评论'}的方式联系了你
**角色信息**：
- 角色名：${messageData.user.name}
- 角色句柄：${messageData.user.handle}
- 这是一个已绑定的角色，有完整的人设、记忆和X平台资料
**用户的触发内容**：
${triggerSource === 'mention' ? '用户在推文中@了你：' : '用户在评论区提到了你：'}
"${triggerContent}"
**重要规则**：
- 🚨 只生成角色${messageData.user.name}的回复消息，不要生成用户的消息
- 📖 **必须参考下方的【X平台私信对话记录】**，了解之前为什么拉黑用户
- 🤔 根据用户的触发内容，评估是否值得解除拉黑
**解除拉黑决策**：
你需要根据以下因素决定是否解除拉黑：
1️⃣ **解除拉黑（推荐）**：
- 用户的态度诚恳，有道歉或和解的意图
- 用户提到的内容让你觉得可以原谅
- 用户表现出改变或理解
- 之前的冲突不算特别严重
- **返回格式**：[解除拉黑系统提示] + 0-3条文本消息（可以是原谅的话、重新开始的话，或直接不发其他消息）
2️⃣ **继续拉黑**：
- 用户的态度依然恶劣或不真诚
- 用户的内容让你更生气
- 之前的冲突太严重，无法原谅
- **返回格式**：返回空数组[]（表示不回应，继续拉黑）
**解除拉黑系统提示格式**：
{
"type": "system",
"systemType": "unblocked",
"content": "对方已解除拉黑",
"time": "刚刚"
}
⚠️ 如果决定解除拉黑，系统提示后可以跟0-3条文本消息：
- 0条：直接解除，不说话（高冷风格）
- 1-2条：简单回应（"算了，原谅你了"、"看在你道歉的份上..."）
- 2-3条：详细回应（解释为什么原谅、提出要求等）
⚠️ 如果决定继续拉黑，返回空数组[]即可，不需要任何消息
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━`;
          } else {
            // 普通回复模式
            systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 核心任务说明（续写模式 - 角色私信）🎯
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
你是X社交平台的私信对话生成器。用户刚刚发送了新的私信，请扮演已绑定的角色生成回复。
**对话场景**：
- 📱 这是X社交平台（类似Twitter/X）的私信功能
- ⚠️ **这是X平台的私信对话，不是手机短信或其他聊天软件**
**角色信息**：
- 角色名：${messageData.user.name}
- 角色句柄：${messageData.user.handle}
- 这是一个已绑定的角色，有完整的人设、记忆和X平台资料
**重要规则**：
- 🚨 只生成角色${messageData.user.name}的回复消息，不要生成用户的消息
**回复决策（你可以选择如何回应）**：
1️⃣ **正常回复**：生成1-10条符合角色人设的自然回复（最常见）
2️⃣ **不回复**：如果这是首次对话且用户的消息不吸引人、内容冒犯、或角色没有回复的理由，可以返回空数组[]
3️⃣ **拉黑用户**：如果发生严重冲突、用户持续骚扰、或对话已经恶化到无法继续，可以返回拉黑系统提示
4️⃣ **暂时离开**：如果角色临时有事无法回复（工作、上课、睡觉等），可以返回离开系统提示，稍后会主动联系用户
**正常回复要求**：
- 回复要严格符合角色的性格、说话风格和与用户的关系
- 参考角色的聊天记忆（包括X平台私信记忆和其他聊天记忆），保持一致性
- 可以适当提及角色最近在X平台发布的推文或动态
- 消息类型包括：文本、图片（image：只需imageDescription和sensitive）、表情包（sticker：只需stickerUrl）、语音、文章链接（link：需要title、description、author、source、body完整正文）、转发推文、转发主页、系统提示（system）
- ⚠️ 注意：image和sticker是完全不同的类型，不要混淆！link类型是文章链接，需要包含完整的文章内容
- ⚠️ 禁止生成forward类型消息（这是用户手动转发产生的）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`; // 💼 添加商业任务上下文（如果有进行中的任务）
            if (ongoingBusinessTransfer) {
              const isAIReceiver = !ongoingBusinessTransfer.isOwn; // AI是接收方
              const isUserReceiver = ongoingBusinessTransfer.isOwn; // 用户是接收方
              const taskDesc = ongoingBusinessTransfer.taskDescription || '';
              const remainingAmount = parseFloat(ongoingBusinessTransfer.remainingAmount || 0).toFixed(2); // 检测任务是否是发帖类型
              const postKeywords = ['发帖', '发推', '发推特', '发推文', 'post', 'tweet', '宣传', '推广'];
              const isPostTask = postKeywords.some(kw => taskDesc.toLowerCase().includes(kw.toLowerCase()));
              if (isAIReceiver && !isPostTask) {
                // AI是接收方，且任务不是发帖类型
                systemPrompt += `
💼 **进行中的商业任务**（你是接收方）：
- 任务要求：${taskDesc}
- 任务期限：${ongoingBusinessTransfer.taskDeadlineHours}小时内完成
- 待付尾款：$${remainingAmount}
⚠️ **重要提示**：
- 你需要在对话中自然地发送**图片消息**（type: "image"）作为完成任务的证明
- 图片内容应该与任务要求相关，展示你完成了任务
- 发送图片后，用户会查看并决定是否支付尾款
- 在发送图片时，可以配合文本消息说明你完成了什么
- 不要刻意催促，自然地在对话中展示成果即可
`;
              } else if (isUserReceiver && !isPostTask) {
                // 用户是接收方，且任务不是发帖类型
                // 检查用户是否刚刚发送了图片
                const userMessages = options.userMessages || [];
                const hasUserImage = userMessages.some(msg => msg.type === 'image');
                if (hasUserImage) {
                  systemPrompt += `
💼 **进行中的商业任务**（用户是接收方）：
- 任务要求：${taskDesc}
- 任务期限：${ongoingBusinessTransfer.taskDeadlineHours}小时内完成
- 待付尾款：$${remainingAmount}
⚠️ **重要提示**：
- 用户刚刚发送了图片，可能是完成任务的证明
- 请识别图片内容，判断用户是否完成了任务要求
- 如果你认为用户完成了任务：
1. 先发送1-2条文本消息表达认可和评价
2. 然后发送转账消息支付尾款（amount为${remainingAmount}，note说明是任务尾款，status为"pending"）
- 如果你认为用户未完成或不符合要求：
1. 礼貌地指出问题
2. 可以要求用户重新提交或补充
3. 不发送转账消息
- 根据完成质量，你可以：
* 支付全额尾款：$${remainingAmount}
* 支付部分尾款：$${(parseFloat(remainingAmount) * 0.5).toFixed(2)} - $${(parseFloat(remainingAmount) * 0.8).toFixed(
                    2,
                  )}（如果质量一般）
* 支付尾款+奖励：$${(parseFloat(remainingAmount) * 1.1).toFixed(2)} - $${(parseFloat(remainingAmount) * 1.3).toFixed(
                    2,
                  )}（如果超出预期）
`;
                } else {
                  systemPrompt += `
💼 **进行中的商业任务**（用户是接收方）：
- 任务要求：${taskDesc}
- 任务期限：${ongoingBusinessTransfer.taskDeadlineHours}小时内完成
- 待付尾款：$${remainingAmount}
⚠️ **提示**：
- 用户需要发送图片证明完成任务
- 你可以在对话中自然地提醒或询问任务进度
- 等待用户发送完成证明后再决定是否支付尾款
`;
                }
              }
            }
          }
        } else if (messageType === 'account') {
          // 账户私信
          systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 核心任务说明（续写模式 - 账户私信）🎯
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
你是X社交平台的私信对话生成器。用户刚刚发送了新的私信，请扮演该账户主人生成回复。
**对话场景**：
- 📱 这是X社交平台（类似Twitter/X）的私信功能
- ⚠️ **这是X平台的私信对话，不是手机短信或其他聊天软件**
**账户信息**：
- 账户名：${messageData.user.name}
- 账户句柄：${messageData.user.handle}
- 这是一个已生成的账户，有完整的主页资料、推文和背景信息
**重要规则**：
- 🚨 只生成账户${messageData.user.name}的回复消息，不要生成用户的消息
- 根据用户最近发送的消息内容，生成1-10条符合该账户特点的自然回复
- 回复要符合该账户的身份、风格和在X平台的形象
- 参考账户的主页资料和最近推文，保持一致性
- 消息类型包括：文本、图片（image：只需imageDescription和sensitive）、表情包（sticker：只需stickerUrl）、语音、文章链接（link：需要title、description、author、source、body完整正文）、转发推文、转发主页
- ⚠️ 注意：image和sticker是完全不同的类型，不要混淆！link类型是文章链接，需要包含完整的文章内容
- ⚠️ 禁止生成forward类型消息（这是用户手动转发产生的）
- 发送者头像统一使用：https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
        } else {
          // 陌生人私信（将由统一资料获取系统处理，包括自定义头像）
          systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 核心任务说明（续写模式 - 陌生人私信）🎯
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
你是X社交平台的私信对话生成器。用户刚刚发送了新的私信，请生成对方的回复。
**对话场景**：
- 📱 这是X社交平台（类似Twitter/X）的私信功能
- ⚠️ **这是X平台的私信对话，不是手机短信或其他聊天软件**
**私信发送者信息**：
- 用户名：${messageData.user.name}
- 用户句柄：${messageData.user.handle}
**重要规则**：
- 🚨 只生成对方${messageData.user.name}的回复消息，不要生成用户的消息
- 根据用户最近发送的消息内容，生成1-10条自然的回复
- 回复要符合之前对话的语境和对方的性格特点（如果有设定）
- 消息类型包括：文本、图片（image：只需imageDescription和sensitive）、表情包（sticker：只需stickerUrl）、语音、文章链接（link：需要title、description、author、source、body完整正文）、转发推文、转发主页
- ⚠️ 注意：image和sticker是完全不同的类型，不要混淆！link类型是文章链接，需要包含完整的文章内容
- ⚠️ 禁止生成forward类型消息（这是用户手动转发产生的）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
        }
      } else {
        // 初始生成模式
        systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 核心任务说明 🎯
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
你是X社交平台的私信对话生成器。请为一场陌生人私信对话生成完整的详细信息和消息记录。
**私信发送者信息**：
- 用户名：${messageData.user.name}
- 用户句柄：${messageData.user.handle}
- 私信预览内容：${messageData.preview}
${messageData.link ? `- 附带链接：${messageData.link}` : ''}
${messageData.attachment ? `- 附带附件：${messageData.attachment}` : ''}
${messageData.tweetLink ? `- 提及推文：${messageData.tweetLink}` : ''}
**重要规则**：
- 生成发送者的完整X资料（简介、关注者数量等）
- 生成3-10条私信消息记录（只包含陌生人发送的消息）
- 消息类型包括：文本、图片（image：只需imageDescription和sensitive）、表情包（sticker：只需stickerUrl）、语音、链接、转发推文、转发主页
- ⚠️ 注意：image和sticker是完全不同的类型，不要混淆！
- 对话要自然真实，符合陌生人私信的特点
- 发送者头像统一使用：https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
      }
      const coreTaskSection = systemPrompt.substring(systemPrompt.lastIndexOf('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━'));
      tokenCount = TokenUtils.logTokenUsage('私信详情生成器', '核心任务说明', coreTaskSection, tokenCount); // 3. 用户资料（包含信用值）
      const userConstraintsStart = systemPrompt.length; // 加载钱包数据以获取信用值
      await loadWalletData();
      const userCreditScore = walletData.creditScore || 100; // 根据信用值确定信用等级
      let creditLevel = '';
      let creditDescription = '';
      if (userCreditScore >= 90) {
        creditLevel = '优秀';
        creditDescription = '信誉极佳，值得信赖的合作伙伴';
      } else if (userCreditScore >= 70) {
        creditLevel = '良好';
        creditDescription = '信誉良好，可以放心合作';
      } else if (userCreditScore >= 50) {
        creditLevel = '一般';
        creditDescription = '信誉一般，需要谨慎考虑';
      } else if (userCreditScore >= 30) {
        creditLevel = '较差';
        creditDescription = '信誉较差，合作风险较高';
      } else {
        creditLevel = '极差';
        creditDescription = '信誉极差，不建议合作';
      }
      systemPrompt += `
【用户X平台资料】：
- 用户名：${userXProfileInfo.name}
- 用户句柄：${userXProfileInfo.handle}
- 认证状态：${userXProfileInfo.verified ? '已认证' : '未认证'}
${userXProfileInfo.publicIdentity ? `- 公众身份：${userXProfileInfo.publicIdentity}` : ''}
${userXProfileInfo.bio ? `- 个人简介：${userXProfileInfo.bio}` : ''}
【用户信用等级】：
- 信用值：${userCreditScore}/100
- 信用等级：${creditLevel}
- 信用评价：${creditDescription}
⚠️ **商业转账与信用值规则**：
- 💰 **发起商业转账**（你雇佣用户）：
* 信用值 ≥ 70：正常合作，可以发起任何金额的商业转账
* 信用值 50-69：谨慎合作，建议降低金额或提高定金比例
* 信用值 30-49：高风险，只在紧急情况下合作，金额不超过50美元
* 信用值 < 30：极高风险，强烈不建议合作，基本拒绝商业转账请求
- 📨 **接受商业转账**（用户雇佣你）：
* 信用值 ≥ 70：可以正常接受商业转账
* 信用值 50-69：可以接受，但要求更高定金比例（至少30%）
* 信用值 30-49：极少接受，只有任务特别简单或定金特别高（50%）时才考虑
* 信用值 < 30：基本拒绝，除非有特殊理由（如老朋友、关系很好等）
- 🎯 **信用值影响**：
* 高信用值：更容易获得商业合作机会，金额更高
* 低信用值：很难获得商业合作，即使有也是小额任务
* 你应该根据用户的信用等级调整你的态度和决策
* 低信用用户的合作请求要更加谨慎，可以直接拒绝
`; // 4. 用户最近推文
      if (recentUserTweets.length > 0) {
        systemPrompt += `
【用户最近推文】（供参考，对话可能涉及这些推文）：
`;
        recentUserTweets.forEach((tweet, index) => {
          systemPrompt += `
${index + 1}. "${tweet.content}"
- 发布时间：${tweet.time || '最近'}
- 互动数据：${tweet.stats?.likes || 0}喜欢，${tweet.stats?.comments || 0}评论
`;
        });
      }
      const userSection = systemPrompt.substring(userConstraintsStart);
      tokenCount = TokenUtils.logTokenUsage('私信详情生成器', '用户资料和推文', userSection, tokenCount); // 🎯 优化：使用统一资料获取系统
      // 根据私信类型添加额外的上下文信息
      if (isContinueMode && messageData.user && messageData.user.handle) {
        const senderInfoStart = systemPrompt.length;
        try {
          // 🎯 核心优化：只需一行代码获取所有资料（传入用户资料用于身份识别，messageId用于陌生人自定义设置）
          const senderProfile = await StringBuilders.getUnifiedProfile(messageData.user.handle, {
            userProfileInfo: userXProfileInfo,
            messageId: messageData.id, // 传入messageId以读取陌生人自定义设置
          });
          if (senderProfile) {
            systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━`; // 使用格式化工具生成提示词（已包含用户身份识别、专属人设、聊天记忆等信息）
            systemPrompt += StringBuilders.formatProfileForPrompt(senderProfile, {
              includeType: true,
              includeTweets: true,
              includeRelationships: true,
            }); // 特定类型的额外信息
            if (senderProfile.type === 'account') {
              // 账户特有：来源上下文
              const ad = senderProfile.accountData;
              if (ad && ad.sourceContext && ad.sourceContext.source) {
                systemPrompt += `
【账户生成来源】：
`;
                const ctx = ad.sourceContext;
                if (ctx.source === 'feed') {
                  systemPrompt += `来源：首页推文
该账户曾发布的内容："${ctx.tweetContent}"
`;
                } else if (ctx.source === 'comment') {
                  systemPrompt += `来源：评论区
该账户曾发表的评论："${ctx.commentContent}"
`;
                } else if (ctx.source === 'search') {
                  systemPrompt += `来源：搜索结果
搜索关键词："${ctx.searchQuery}"
`;
                } else if (ctx.source === 'dm' || ctx.source === 'dm_quote_profile') {
                  systemPrompt += `来源：私信
${ctx.messagePreview ? `私信预览："${ctx.messagePreview}"` : ''}
`;
                }
              }
            }
            systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
【私信回复要求】：
- 回复必须严格符合${senderProfile.name}的${
              senderProfile.type === 'character'
                ? '性格和说话风格'
                : senderProfile.type === 'npc' || senderProfile.type === 'relationshipNpc'
                ? '人设和说话风格'
                : '身份和风格'
            }
- 参考【X平台私信对话记录】（上面显示的当前私信历史）保持对话连贯性
`; // 特定类型的要求
            if (senderProfile.type === 'character') {
              const characterId = senderProfile._characterId;
              const knowsUserIdentity = userXProfileInfo.knownIdentityCharacters.includes(characterId);
              if (knowsUserIdentity) {
                systemPrompt += `- ✅ 该角色知道用户身份，回复时应该表现出认识用户
- 可以自然地称呼用户、提及共同经历或了解的信息
- 【其他聊天记忆】仅用于理解角色与用户的关系和性格，不要直接提及其中的具体对话内容
- 与用户的互动要符合角色了解的用户信息
`;
              } else {
                systemPrompt += `- ❌ 该角色不知道用户身份，必须按照陌生人模式回复
- 不要让角色猜测、暗示或表现出任何对用户的认识
- 回复要完全基于当前X平台私信对话的内容
- 不要使用任何只有认识的人才会知道的信息或称呼
`;
              }
            } else if (senderProfile.type === 'account') {
              systemPrompt += `- 参考账户的推文内容和互动风格
- 如果有账户生成来源信息，保持与来源内容的一致性
`;
            } else if (senderProfile.type === 'npc') {
              systemPrompt += `- 该账户是全局绑定的NPC，按照人设描述进行回复
- 回复要符合NPC的性格特点和发帖习惯
- 可以参考NPC的主页信息保持一致性
`;
            } else if (senderProfile.type === 'relationshipNpc') {
              systemPrompt += `- 该账户是关系NPC，与角色${senderProfile.relationshipData.ownerCharacterName}有特殊关系
- 回复要体现${senderProfile.relationshipData.relationshipType}的关系特点
- 与用户的互动按照普通关系进行，不要表现出特殊关系（除非另有说明）
`;
            } else if (senderProfile.type === 'stranger') {
              systemPrompt += `- 该账户是陌生人（未绑定），回复应该自然真实
- 按照普通X平台用户的特点进行回复
- 如果有自定义头像或设定，按照设定的风格回复
`;
            }
            systemPrompt += `- ⚠️ **这是X平台的私信对话，不是手机聊天或其他场景**
- 可以自然地提及最近在X平台发布的推文或动态
- 保持在X平台和私信中的身份一致性
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
            const senderInfo = systemPrompt.substring(senderInfoStart);
            const typeLabels = {
              character: '角色',
              account: '账户',
              npc: '绑定NPC',
              relationshipNpc: '关系NPC',
              stranger: '陌生人',
            };
            tokenCount = TokenUtils.logTokenUsage(
              '私信详情生成器',
              `${typeLabels[senderProfile.type] || '发送者'}详细信息`,
              senderInfo,
              tokenCount,
            );
          }
        } catch (error) {
          console.error('❌ [私信详情生成器] 读取发送者信息失败:', error);
        }
      }
      // 添加现有对话上下文（续写模式）
      if (isContinueMode && existingMessages.length > 0) {
        console.log(
          `📝 [私信生成器] 添加对话记录到提示词（共 ${existingMessages.length} 条，显示最近 ${Math.min(
            existingMessages.length,
            100,
          )} 条）`,
        );
        systemPrompt += `
【X平台私信对话记录】（当前私信的历史记录，供参考，保持连贯性）：
`; // 显示最近的100条消息作为上下文
        const recentMessages = existingMessages.slice(-100);
        recentMessages.forEach((msg, index) => {
          const sender = msg.isOwn ? '用户' : messageData.user.name;
          let content = '';
          if (msg.type === 'text') {
            content = msg.content;
          } else if (msg.type === 'image') {
            // 用户发送的图片（有imageData）或AI发送的图片（有imageDescription）
            if (msg.isOwn && msg.imageData) {
              content = `[用户发送了图片]`;
            } else if (msg.imageDescription) {
              content = `[图片: ${msg.imageDescription}]`;
            } else {
              content = `[图片]`;
            }
          } else if (msg.type === 'voice') {
            content = `[语音: ${msg.voiceText}]`;
          } else if (msg.type === 'sticker') {
            // 用户发送的表情包（有stickerDescription）或AI发送的表情包（有stickerUrl）
            if (msg.isOwn && msg.stickerDescription) {
              content = `[用户发送的表情包: ${msg.stickerDescription}]`;
            } else if (msg.stickerUrl) {
              content = `[表情包: ${msg.stickerUrl}]`;
            } else {
              content = `[表情包]`;
            }
          } else if (msg.type === 'transfer') {
            // 转账消息
            const amount = parseFloat(msg.amount || 0).toFixed(2);
            const note = msg.note ? ` (${msg.note})` : '';
            const direction = msg.isOwn ? '转出' : '转入';
            if (msg.isBusiness) {
              // 商业转账
              const depositAmount = parseFloat(msg.depositAmount || 0).toFixed(2);
              const remainingAmount = parseFloat(msg.remainingAmount || 0).toFixed(2);
              const taskDesc = msg.taskDescription || '无任务描述';
              const taskDeadline = msg.taskDeadlineHours || 24;
              const depositRatio = msg.depositRatio || 0;
              const taskStatus = msg.taskStatus || 'pending';
              content = `[商业${direction}${note}]\n`;
              content += `总金额: $${amount}\n`;
              content += `定金: $${depositAmount} (${depositRatio}%)\n`;
              content += `尾款: $${remainingAmount}\n`;
              content += `任务要求: ${taskDesc}\n`;
              content += `任务期限: ${taskDeadline}小时内完成\n`;
              content += `当前状态: ${
                taskStatus === 'pending'
                  ? '待接收'
                  : taskStatus === 'accepted'
                  ? '已接受，进行中'
                  : taskStatus === 'completed'
                  ? '已完成'
                  : taskStatus === 'rejected'
                  ? '已拒绝'
                  : taskStatus
              }`;
            } else {
              // 普通转账
              content = `[${direction}: $${amount}${note}]`;
            }
          } else if (msg.type === 'link') {
            // 显示文章完整信息
            content = `[文章链接]\n标题：${msg.title}\n简介：${msg.description || ''}\n作者：${
              msg.author || ''
            }\n来源：${msg.source || ''}\n正文：${msg.body || msg.description || ''}`;
          } else if (msg.type === 'quoteTweet') {
            content = `[转发推文: ${msg.tweet.content}]`;
          } else if (msg.type === 'quoteProfile') {
            content = `[转发主页: ${msg.profile.name}]`;
          } else if (msg.type === 'quoteFanGroup') {
            // 转发粉丝群
            content = `[转发粉丝群]\n`;
            content += `群名称：${msg.fanGroup.name}\n`;
            content += `成员数：${msg.fanGroup.memberCount}人\n`;
            if (msg.fanGroup.threshold) {
              content += `入群门槛：${msg.fanGroup.threshold}\n`;
            }
          } else if (msg.type === 'forward') {
            // 转发推文或评论，显示完整上下文
            if (msg.forwardType === 'tweet') {
              content = `[转发了推文]\n`;
              if (msg.fullContext && msg.fullContext.tweet) {
                const tweet = msg.fullContext.tweet;
                content += `推文作者：${tweet.user?.name || '未知'}\n推文内容：${tweet.content || ''}\n`;
                if (msg.fullContext.comments && msg.fullContext.comments.length > 0) {
                  content += `评论区（${msg.fullContext.comments.length}条评论）：\n`;
                  msg.fullContext.comments.slice(0, 3).forEach((c, i) => {
                    content += ` ${i + 1}. ${c.user?.name || '未知'}: ${c.content || ''}\n`;
                  });
                  if (msg.fullContext.comments.length > 3) {
                    content += ` ...还有${msg.fullContext.comments.length - 3}条评论\n`;
                  }
                }
              } else {
                content += `${msg.forwardContent?.content || ''}`;
              }
            } else if (msg.forwardType === 'comment') {
              content = `[转发了评论]\n`;
              if (msg.fullContext) {
                if (msg.fullContext.parentTweet) {
                  content += `原推文作者：${msg.fullContext.parentTweet.user?.name || '未知'}\n原推文内容：${
                    msg.fullContext.parentTweet.content || ''
                  }\n\n`;
                }
                if (msg.fullContext.comment) {
                  content += `评论作者：${msg.fullContext.comment.user?.name || '未知'}\n评论内容：${
                    msg.fullContext.comment.content || ''
                  }`;
                }
              } else {
                content += `${msg.forwardContent?.content || ''}`;
              }
            }
          }
          systemPrompt += `
${index + 1}. ${sender}: ${content}
时间：${msg.time}
`;
        });
        tokenCount = TokenUtils.logTokenUsage(
          '私信详情生成器',
          '现有对话上下文',
          systemPrompt.substring(systemPrompt.lastIndexOf('【现有对话记录】')),
          tokenCount,
        );
      }
      if (isContinueMode) {
        // 续写模式的要求
        systemPrompt += `
【私信回复要求】：
🚨 **核心规则：绝对禁止生成用户发送的消息！**
- 只生成对方${messageData.user.name}的回复消息，不要生成用户的消息
- ⚠️ **这是X平台的私信对话，不是手机短信或其他聊天软件**
- 根据【X平台私信对话记录】和用户最近的消息，生成1-8条自然的回复
- 回复要符合X平台私信的语境，保持角色一致性
【消息类型使用原则】（重要！）：
- ⭐ **以文本消息为主**：大部分回复（80-90%）应该是纯文本消息（type: "text"）
- 📷 **偶尔使用其他类型**：仅在特定情况下使用其他消息类型（10-20%）：
* image：当需要分享照片、图片或视觉内容时
* voice：当角色特别激动、情绪强烈或不方便打字时
* sticker：⚠️ **极少使用**（不超过5%）！只在情绪特别强烈且适合用表情包表达时才使用，且必须根据世界书中的表情包描述选择最符合当前情境的表情包URL，不要重复使用同一个表情包
* transfer：⚠️ **极少使用，需谨慎！** 分为两种：
- 普通转账：角色主动送钱、红包、礼物或感谢等（建议5-30美元，最多不超过50美元）
- 商业转账：需要对方完成任务的付费合作（50-300美元），设置isBusiness为true并填写任务描述和期限
- 🚫 **陌生人不要轻易转账**：只有关系亲密或有明确理由时才考虑转账
* link：当需要分享网页、文章或链接时
* quoteTweet：当提及或讨论某条推文时
* quoteProfile：当推荐某个账户或介绍某人时
* forward：⚠️ **禁止AI主动生成**！这是用户手动转发推文/评论的消息类型，AI不要生成此类型
- 🚫 **禁止每种类型都使用**：不要为了展示多样性而强行使用所有消息类型
- ✅ **自然使用**：根据对话内容和情境自然选择消息类型，不刻意
- 🚫 **禁止连续使用同一表情包**：如果在之前的对话中已经使用过某个表情包URL，就不要再使用，要选择不同的表情包
【消息类型详解】：
* text：纯文本消息（最常用，首选）
* image：图片消息（只包含imageDescription和sensitive，不需要caption，不要与sticker混淆）
* voice：语音消息（包含voiceText和duration）
* sticker：表情包消息（⚠️ 只包含stickerUrl字段！必须从世界书中仔细选择最符合当前情境和情绪的表情包URL，严禁重复使用同一个表情包，不要与image类型混淆）
* transfer：转账消息（普通转账：包含amount和note；商业转账：额外需要isBusiness、taskDescription、taskDeadlineHours、depositRatio）
* link：文章链接消息（包含title、description、author、source、body完整文章正文，可使用**加粗**和__下划线__标记重点）
* quoteTweet：转发推文（包含tweet对象）
* quoteProfile：转发主页（包含profile对象）
* forward：⚠️ **用户转发的推文/评论**（AI不要生成此类型，这是用户手动操作产生的。如果在对话记录中看到此类型，AI可以根据其中包含的完整推文和评论内容进行回应）
* system：⚠️ **系统提示消息**（特殊类型，用于以下场景）：
- 不回复：如果你认为不应该回复用户（首次对话且内容不吸引人、内容冒犯等），返回空数组[]
- 拉黑用户：如果对话出现严重冲突、用户持续骚扰、或你强烈不想继续对话，返回拉黑系统提示
- 解除拉黑：如果之前拉黑了用户，但用户通过@或评论等方式道歉/和解，你决定原谅，返回解除拉黑系统提示
- 暂时离开（仅绑定角色）：如果你临时有事无法回复，返回离开系统提示
【特殊系统提示消息格式】：
1. 拉黑用户（适用于严重冲突、骚扰等情况）：
{
"type": "system",
"systemType": "blocked",
"content": "对方已将你拉黑",
"time": "刚刚"
}
2. 解除拉黑（适用于原谅用户，重新开始对话）：
{
"type": "system",
"systemType": "unblocked",
"content": "对方已解除拉黑",
"time": "刚刚"
}
3. 暂时离开（⚠️ 仅绑定角色可用，陌生人/账户不能使用）：
{
"type": "system",
"systemType": "away",
"content": "对方正在[具体活动]中，暂时无法回复消息",
"awayDuration": 数字（分钟，建议30-180分钟）,
"time": "刚刚"
}
⚠️ 使用规则：
- **不回复**：直接返回空数组 []，不需要任何消息
- **拉黑**：只在极端情况下使用（严重冲突、持续骚扰、明显恶意等）
- **解除拉黑**：只在用户通过其他渠道（@、评论等）展现诚意后使用，表示原谅用户
- **暂时离开**：只有已绑定的角色才能使用，陌生人和账户不能使用此功能
- **离开原因示例**：工作、上课、开会、睡觉、运动、吃饭、处理事情等
- **离开时长**：30-180分钟为宜，不要太短或太长
- 时间使用相对时间（如"刚刚"、"1分钟前"等）
- 不要包含 isOwn 字段
`;
      } else {
        // 初始生成模式的要求
        systemPrompt += `
【私信详细信息要求】：
- 生成发送者的完整资料：
* 简介（bio）：符合其身份和私信主题的个人简介
* 关注者数量（followers）：100-2000之间的随机数字
* 认证状态（verified）：通常为false
【私信消息记录要求】：
🚨 **核心规则：绝对禁止生成用户发送的消息！**
- 只生成陌生人发送给用户的私信内容，不包含任何用户的回复
- 生成3-6条消息，全部来自陌生人
- 第一条消息必须是预览内容："${messageData.preview}"
【消息类型使用原则】（重要！）：
- ⭐ **以文本消息为主**：大部分消息（80-90%）应该是纯文本消息（type: "text"）
- 📷 **偶尔使用其他类型**：仅在特定情况下使用其他消息类型（10-20%）：
* image：当需要分享照片、图片或视觉内容时
* voice：当角色特别激动、情绪强烈或不方便打字时
* sticker：⚠️ **极少使用**（不超过5%）！只在情绪特别强烈且适合用表情包表达时才使用，且必须根据世界书中的表情包描述选择最符合当前情境的表情包URL，每次使用不同的表情包
* transfer：⚠️ **极少使用，需谨慎！** 分为两种：
- 普通转账：角色主动送钱、红包、礼物或感谢等（建议5-30美元，最多不超过50美元）
- 商业转账：需要对方完成任务的付费合作（50-300美元），设置isBusiness为true并填写任务描述和期限
- 🚫 **陌生人不要轻易转账**：只有关系亲密或有明确理由时才考虑转账
* link：当需要分享文章、新闻或故事时（需包含完整的文章内容：title、description、author、source、body正文）
* quoteTweet：当提及或讨论某条推文时
* quoteProfile：当推荐某个账户或介绍某人时
* forward：⚠️ **禁止AI主动生成**！这是用户手动转发推文/评论的消息类型
- 🚫 **禁止每种类型都使用**：不要为了展示多样性而强行使用所有消息类型
- ✅ **自然使用**：根据对话内容和情境自然选择消息类型，不刻意
【消息类型详解】：
* text：纯文本消息（最常用，首选）
* image：图片消息（只包含imageDescription和sensitive，不需要caption，不要与sticker混淆）
* voice：语音消息（包含voiceText和duration）
* sticker：表情包消息（⚠️ 只包含stickerUrl字段！必须从世界书中仔细选择最符合当前情境和情绪的表情包URL，每次使用不同的表情包，不要与image类型混淆）
* transfer：转账消息（普通转账：包含amount和note；商业转账：额外需要isBusiness、taskDescription、taskDeadlineHours、depositRatio）
* link：链接消息（包含url、title、description）
* quoteTweet：转发推文（包含tweet对象）
* quoteProfile：转发主页（包含profile对象）
* forward：⚠️ **禁止AI生成此类型**（这是用户手动转发产生的）
- 时间从最早到最新排列
- 不要包含 isOwn 字段
`;
      }
      if (isContinueMode) {
        // 续写模式只返回消息数组
        systemPrompt += `
【JSON返回格式】：
\`\`\`json
[消息数组]
\`\`\`
`;
      } else {
        // 初始模式返回完整数据
        systemPrompt += `
【JSON返回格式】：
\`\`\`json
{
"senderProfile": {
"bio": "个人简介",
"followers": 关注者数量（数字）,
"verified": false
},
"messages": [消息数组]
}
\`\`\`
`;
      }
      systemPrompt += `
消息对象结构示例：
1. 文本消息：
{
"type": "text",
"content": "消息内容",
"time": "时间描述"
}
2. 图片消息：
{
"type": "image",
"imageDescription": "图片内容的文字描述",
"sensitive": false,
"time": "时间描述"
}
3. 语音消息：
{
"type": "voice",
"voiceText": "先用括号标注出对声音的形容，再是语音内容的文字",
"duration": "时长如0:15",
"time": "时间描述"
}
4. 表情包消息：
{
"type": "sticker",
"stickerUrl": "表情包图片链接（从世界书中选择）",
"time": "时间描述"
}
⚠️ 注意：sticker类型只包含stickerUrl字段，不要与image类型混淆！
5. 转账消息（两种类型）：
5.1 普通转账：
{
"type": "transfer",
"amount": 20.00,
"note": "请你喝咖啡",
"status": "pending",
"time": "时间描述"
}
5.2 商业转账（适用于合作、接广告、买水军等商业场景）：
{
"type": "transfer",
"amount": 150.00,
"note": "合作费用",
"status": "pending",
"isBusiness": true,
"taskDescription": "帮我发一条推文宣传新产品，需要包含产品特点和购买链接，语气要自然不刻意",
"taskDeadlineHours": 24,
"depositRatio": 20,
"time": "时间描述"
}
⚠️ 转账消息说明：
- amount：转账金额，必须是数字类型（不是字符串），建议5-30美元（普通转账）或50-300美元（商业转账）
- note：转账备注，可选字段，用于说明转账目的
- status：转账状态，必须是以下之一：
* "pending"：待处理（默认状态，用于主动发起转账）
* "accepted"：已接收（用于回应用户的转账请求，表示接受）
* "rejected"：已拒绝（用于回应用户的转账请求，表示拒绝）
- 🚫 **转账需谨慎**：与陌生人对话时不要随意转账，只有关系亲密或有明确理由时才考虑
⚠️ 商业转账额外字段（当isBusiness为true时必填）：
- isBusiness：布尔值，true表示这是商业转账
- taskDescription：任务描述（字符串，50-500字），详细说明需要对方完成的任务，可以是：
* 发帖宣传（指定内容、风格、话题标签等）
* 转发推广（要求转发特定内容并评论）
* 买水军/刷数据（要求点赞、评论、转发等）
* 接广告（要求发布广告内容）
* 其他商业合作任务
- taskDeadlineHours：任务期限（数字，单位：小时），建议12-72小时，必填
- depositRatio：定金比例（数字，0、20、30或50），表示先支付总金额的百分之几作为定金
* 0：不支付定金，任务完成后再付款
* 20：先支付20%作为定金
* 30：先支付30%作为定金
* 50：先支付50%作为定金
⚠️ 转账使用场景：
- 普通转账：关系亲密时可以送钱、红包、礼物、感谢费等（5-30美元）
- 商业转账：有明确商业合作需求时的付费任务（50-300美元）
* AI可以主动发起商业转账雇佣用户，但需要有合理的商业理由和场景
* AI可以响应用户的商业转账，决定是否接受任务
* 商业转账会显示任务要求、期限、定金比例等详细信息
* 接收商业转账即表示同意完成任务
- 🚫 **陌生人不要轻易转账**：初次对话、不熟悉的人基本不应该主动转账
- ⚠️ **转账需要理由**：不要无缘无故转账，要有合理的情境支撑
⚠️ 转账响应规则：
- 当用户发送了待处理(pending)状态的转账给你时，你可以选择：
* 发送status为"accepted"的转账消息表示接收
- 普通转账：直接收到全款
- 商业转账：收到定金，需要根据任务要求完成任务（如发推文等）
* 发送status为"rejected"的转账消息表示拒绝
* 你接收或拒绝后会自动生成系统通知，无需额外文本说明
⚠️ 商业转账处理（重要！）：
- 如果用户发送了商业转账（isBusiness为true），你需要：
1. 查看taskDescription（任务描述）和taskDeadlineHours（任务期限）
2. 决定是否接受任务（根据角色性格和任务要求）：
* accepted：表示接受任务和定金，AI会自动开始执行任务
* rejected：表示拒绝任务，定金会退回给用户
3. 如果接受了包含"发帖"、"发推"等关键词的任务，AI会自动在规定时间内发布推文
4. 用户看到推文后，如果满意会确认完成任务并支付尾款
5. 接受商业转账时，可以在回复消息中表达对任务的理解和态度
⚠️ AI主动发起转账：
- AI也可以主动发起转账（普通或商业），但需要谨慎，不要轻易转账
- 🚫 **陌生人场景**：如果是陌生人私信或初次对话，基本不应该主动转账
- ✅ **熟人/绑定角色场景**：关系亲密时可以考虑小额转账（5-30美元），大额需有明确理由
- 转账金额要符合情境和角色经济状况，普通转账建议5-30美元，商业转账50-300美元
- 商业转账的任务描述要具体明确，符合商业合作的真实场景
- 可以雇佣用户完成任务（如"帮我发条推文宣传"、"帮我刷点数据"等），但要有合理的商业理由
6. 链接消息（文章类型）：
{
"type": "link",
"url": "文章来源网址（可选）",
"title": "文章标题",
"description": "文章简介/摘要",
"author": "文章作者",
"source": "文章来源名称",
"body": "文章正文内容（完整的文章内容，可使用**文本**表示加粗重点，使用__文本__表示下划线重点）",
"time": "时间描述"
}
⚠️ 链接消息说明：
- title：文章的标题，应该简洁有力
- description：文章的简介或摘要，显示在私信卡片中
- author：文章作者名称
- source：文章来源（如"XX日报"、"XX杂志"等）
- body：完整的文章正文，可以使用markdown格式：
* 使用**文本**表示加粗重点（会显示为蓝色高亮）
* 使用__文本__表示下划线重点（会显示为下划线）
* 支持换行，使用\n分段
- url：文章的来源链接（可选，可以不填）
- 文章内容应该真实、有深度，符合分享场景
- 适合分享新闻、评论、故事、学术文章等
7. 转发推文：
{
"type": "quoteTweet",
"tweet": {
"userName": "推文作者名",
"userHandle": "@handle",
"userAvatar": "https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg",
"verified": false,
"content": "推文内容",
"time": "推文时间"
},
"caption": "转发时的说明（可选）",
"time": "时间描述"
}
8. 转发主页：
{
"type": "quoteProfile",
"profile": {
"name": "账户名",
"handle": "@handle",
"avatar": "https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg",
"bio": "个人简介",
"followers": 关注者数量（数字）,
"verified": false
},
"caption": "转发时的说明（可选）",
"time": "时间描述"
}
9. 转发粉丝群：
{
"type": "quoteFanGroup",
"fanGroup": {
"id": "粉丝群ID",
"name": "粉丝群名称",
"avatar": "粉丝群头像链接",
"memberCount": 成员数量（数字）,
"threshold": "入群门槛说明（可选）"
},
"caption": "转发时的说明（可选）",
"time": "时间描述"
}
⚠️ 转发粉丝群说明：
- 这是用户转发粉丝群邀请给你时的消息类型
- 包含粉丝群的基本信息：名称、头像、成员数、入群门槛等
- 你可以根据粉丝群信息决定是否感兴趣、是否想加入等
- AI不应该主动生成此类型消息（除非有合理的场景理由）
- 用户转发粉丝群通常是想邀请你加入或分享这个群
10. 转发推文/评论（forward）：
⚠️ **此类型禁止AI生成！这是用户手动转发操作产生的消息类型。**
如果在【X平台私信对话记录】中看到此类型消息，说明用户转发了推文或评论给你，你可以查看其中的完整内容：
- 转发推文时，包含完整推文内容和该推文的所有评论区内容
- 转发评论时，包含评论内容和该评论所属的推文内容
AI应该根据这些完整的上下文信息来理解用户分享的内容并给出回应。
关键规则：
1. 🚨 所有消息都来自陌生人，不包含用户发送的消息
2. verified字段必须是布尔值(true/false)
3. followers和duration中的数字必须是纯数字（语音时长是字符串格式如"0:15"）
4. 可选字段不使用时完全省略，不要设为null
5. ⚠️ **图片消息（image）和表情包消息（sticker）是完全不同的类型**：
- image类型：只包含imageDescription和sensitive字段，不要包含caption
- sticker类型：只包含stickerUrl字段，是表情包图片链接
- 严禁混淆这两种类型！
6. 时间描述使用相对时间（如"刚刚"、"5分钟前"、"1小时前"等）
7. 所有头像统一使用：https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg
`;
      const formatSection = systemPrompt.substring(systemPrompt.lastIndexOf('【JSON返回格式】'));
      tokenCount = TokenUtils.logTokenUsage('私信详情生成器', 'JSON格式要求', formatSection, tokenCount); // 构建用户消息内容（支持图片识图）
      let userMessageContent;
      const userMessages = options.userMessages || [];
      if (isAskboxViewed) {
        // 提问箱查看模式：角色主动发起
        userMessageContent = `角色主动发起对话，因为发现用户查看了TA的提问箱。请生成角色${messageData.user.name}的主动消息。`;
      } else if (userMessages.length > 0) {
        // 续写模式：检查用户最近消息中是否有真实图片（需要识图）
        const hasRealImages = userMessages.some(msg => msg.type === 'image' && msg.imageData);
        if (hasRealImages) {
          // 有真实图片：构建多模态内容数组
          userMessageContent = []; // 添加文字说明
          const textMessages = userMessages.filter(msg => msg.type === 'text');
          const realImageMessages = userMessages.filter(msg => msg.type === 'image' && msg.imageData);
          const textImageMessages = userMessages.filter(
            msg => msg.type === 'image' && msg.imageDescription && !msg.imageData,
          );
          const stickerMessages = userMessages.filter(msg => msg.type === 'sticker');
          const voiceMessages = userMessages.filter(msg => msg.type === 'voice');
          let contentText = '用户刚刚发送了新消息，请分析并回复：';
          if (textMessages.length > 0) {
            contentText += '\n' + textMessages.map(msg => msg.content).join('\n');
          }
          if (voiceMessages.length > 0) {
            contentText +=
              '\n用户发送了语音消息：' +
              voiceMessages.map(msg => `[语音时长${msg.duration}: ${msg.voiceText}]`).join('、');
          }
          if (stickerMessages.length > 0) {
            contentText += '\n用户发送了表情包：' + stickerMessages.map(msg => msg.stickerDescription).join('、');
          }
          if (textImageMessages.length > 0) {
            contentText +=
              '\n用户发送了文字图片描述：' + textImageMessages.map(msg => `"${msg.imageDescription}"`).join('、');
          }
          if (realImageMessages.length > 0) {
            contentText += `\n用户还发送了${realImageMessages.length}张真实图片，请识别图片内容并结合图片内容给出回复。`;
          }
          userMessageContent.push({ type: 'text', text: contentText }); // 添加真实图片（用于识图）
          realImageMessages.forEach(img => {
            if (img.imageData) {
              userMessageContent.push({
                type: 'image_url',
                image_url: { url: img.imageData },
              });
            }
          });
        } else {
          // 无真实图片：纯文本、表情包、语音和文字图片
          const textMessages = userMessages.filter(msg => msg.type === 'text');
          const textImageMessages = userMessages.filter(
            msg => msg.type === 'image' && msg.imageDescription && !msg.imageData,
          );
          const stickerMessages = userMessages.filter(msg => msg.type === 'sticker');
          const voiceMessages = userMessages.filter(msg => msg.type === 'voice');
          let contentText = '用户刚刚发送了新消息，请回复：';
          if (textMessages.length > 0) {
            contentText += '\n' + textMessages.map(msg => msg.content).join('\n');
          }
          if (voiceMessages.length > 0) {
            contentText +=
              '\n用户发送了语音消息：' +
              voiceMessages.map(msg => `[语音时长${msg.duration}: ${msg.voiceText}]`).join('、');
          }
          if (stickerMessages.length > 0) {
            contentText += '\n用户发送了表情包：' + stickerMessages.map(msg => msg.stickerDescription).join('、');
          }
          if (textImageMessages.length > 0) {
            contentText +=
              '\n用户发送了文字图片描述：' + textImageMessages.map(msg => `"${msg.imageDescription}"`).join('、');
          }
          userMessageContent = contentText;
        }
      } else {
        // 初始模式
        userMessageContent = '请生成完整的私信对话详情';
      }
      const messages = [{ role: 'user', content: userMessageContent }]; // 最终统计
      const contentForLog = Array.isArray(userMessageContent)
        ? userMessageContent.map(c => c.text || '[图片]').join(' ')
        : userMessageContent;
      TokenUtils.logFinalPrompt('私信详情生成器', systemPrompt, contentForLog);
      // 🔧 使用统一的API请求工具
      const aiResponseContent = await APIUtils.sendAIRequest({
        apiConfig,
        systemPrompt,
        messages,
        temperature: 0.8,
      });
      // 🔧 使用统一的JSON解析工具
      let conversationData = APIUtils.parseJSONResponse(aiResponseContent);
      if (isContinueMode) {
        // 续写模式：验证消息数组
        if (!Array.isArray(conversationData)) {
          throw new Error('AI返回的数据格式不正确，期望消息数组');
        }
        // 🔍 检查是否包含特殊系统提示
        const hasBlockedMessage = conversationData.some(msg => msg.type === 'system' && msg.systemType === 'blocked');
        const hasUnblockedMessage = conversationData.some(
          msg => msg.type === 'system' && msg.systemType === 'unblocked',
        );
        const hasAwayMessage = conversationData.some(msg => msg.type === 'system' && msg.systemType === 'away');
        if (hasBlockedMessage) {
          console.log('⚠️ AI决定拉黑用户');
        } else if (hasUnblockedMessage) {
          console.log('🎉 AI决定解除拉黑');
        } else if (hasAwayMessage) {
          console.log('⏰ AI暂时离开');
        } else if (conversationData.length === 0) {
          console.log('📭 AI决定不回复');
        } else {
          console.log(`✅ 生成了${conversationData.length}条AI回复`);
        }
        // 直接返回消息数组（包括空数组和系统提示）
        return conversationData;
      } else {
        // 初始模式：验证完整数据格式
        if (
          !conversationData.senderProfile ||
          !conversationData.messages ||
          !Array.isArray(conversationData.messages)
        ) {
          throw new Error('AI返回的数据格式不正确');
        }
        // 为初次生成的每条消息添加timestamp
        conversationData.messages.forEach(msg => {
          if (!msg.timestamp) {
            msg.timestamp = new Date().toISOString();
          }
        }); // 保存私信对话数据到数据库
        try {
          // 🔧 多账户隔离：包含账户ID
          const conversationId = `messageConversation_${currentAccountId || 'main'}_${messageData.id}`;
          await xDb.xAccountProfiles.put({
            handle: conversationId,
            name: 'messageConversation',
            data: conversationData,
            messageId: messageData.id,
            accountId: currentAccountId || 'main', // 添加账户ID字段
            updatedAt: new Date().toISOString(),
          });
          console.log('✅ 私信对话数据已保存到数据库');
        } catch (saveError) {
          console.error('保存私信对话数据失败:', saveError);
        }
        return conversationData;
      }
    } catch (error) {
      console.error('生成私信对话详情失败:', error);
      showXToast(`生成失败: ${error.message}`, 'error');
      return null;
    }
  }
  // ▲▲▲ 【主要！！！】第九个情景：私信详情生成器 ▲▲▲
  //【主要！！！】情景：新推详情生成器
  // 聊天记忆检测服务管理
  let chatHistoryDetectionTimer = null;
  let chatHistoryDetectionEnabled = false;
  const DETECTION_INTERVAL = 5 * 60 * 1000; // 5分钟
  // 开关聊天记忆检测服务
  window.toggleChatHistoryDetection = async function () {
    chatHistoryDetectionEnabled = !chatHistoryDetectionEnabled;
    const toggle = document.getElementById('chat-history-detection-toggle');
    const circle = toggle.querySelector('.toggle-circle');
    const statusDiv = document.getElementById('chat-history-detection-status');
    if (chatHistoryDetectionEnabled) {
      // 开启检测
      toggle.style.backgroundColor = 'var(--x-accent)';
      circle.style.left = '22px';
      statusDiv.style.display = 'block'; // 立即执行一次检测
      await runChatHistoryDetection(); // 启动定时器
      startChatHistoryDetectionTimer(); // 保存状态
      await saveChatHistoryDetectionState(true);
      showXToast('聊天记忆检测已开启', 'success');
    } else {
      // 关闭检测
      toggle.style.backgroundColor = '#333';
      circle.style.left = '2px';
      statusDiv.style.display = 'none'; // 停止定时器
      if (chatHistoryDetectionTimer) {
        clearInterval(chatHistoryDetectionTimer);
        chatHistoryDetectionTimer = null;
      }
      // 保存状态
      await saveChatHistoryDetectionState(false);
      showXToast('聊天记忆检测已关闭', 'info');
    }
  }; // 启动定时器
  function startChatHistoryDetectionTimer() {
    if (chatHistoryDetectionTimer) {
      clearInterval(chatHistoryDetectionTimer);
    }
    chatHistoryDetectionTimer = setInterval(async () => {
      await runChatHistoryDetection();
    }, DETECTION_INTERVAL);
    updateNextDetectionTime();
  }
  // 执行检测
  async function runChatHistoryDetection() {
    try {
      console.log('⏰ [聊天记忆检测] 开始定时检测...');
      await detectAndGenerateNewTweetFromChatHistory();
      updateNextDetectionTime();
    } catch (error) {
      console.error('❌ [聊天记忆检测] 定时检测失败:', error);
    }
  }
  // 更新下次检测时间显示
  function updateNextDetectionTime() {
    const nextTime = new Date(Date.now() + DETECTION_INTERVAL);
    const timeStr = `${nextTime.getHours().toString().padStart(2, '0')}:${nextTime
      .getMinutes()
      .toString()
      .padStart(2, '0')}`;
    const timeSpan = document.getElementById('next-detection-time');
    if (timeSpan) {
      timeSpan.textContent = timeStr;
    }
  }
  // 保存检测状态
  async function saveChatHistoryDetectionState(enabled) {
    try {
      const xDb = getXDB();
      const settingsId = `xSettings_${currentAccountId || 'main'}`;
      const settings = await xDb.xSettings.get(settingsId);
      if (settings) {
        settings.chatHistoryDetectionEnabled = enabled;
        await xDb.xSettings.put(settings);
      }
    } catch (error) {
      console.error('保存检测状态失败:', error);
    }
  }
  // 恢复检测状态（在初始化时调用）
  async function restoreChatHistoryDetectionState() {
    try {
      const xDb = getXDB();
      const settingsId = `xSettings_${currentAccountId || 'main'}`;
      const settings = await xDb.xSettings.get(settingsId);
      if (settings && settings.chatHistoryDetectionEnabled) {
        console.log('🔄 [聊天记忆检测] 检测到已保存的开启状态，正在恢复...'); // 延迟1秒后启动，确保UI已加载
        setTimeout(() => {
          const toggle = document.getElementById('chat-history-detection-toggle');
          if (toggle) {
            chatHistoryDetectionEnabled = false; // 先设为false，让toggle函数切换
            window.toggleChatHistoryDetection();
          }
        }, 1000);
      } else {
        console.log('ℹ️ [聊天记忆检测] 未检测到开启状态，保持关闭');
      }
    } catch (error) {
      console.error('恢复检测状态失败:', error);
    }
  }
  // 🔧 智能检测聊天记忆并生成 New Tweet（检查所有符合条件的已绑定角色）
  async function detectAndGenerateNewTweetFromChatHistory() {
    try {
      console.log('🔍 [聊天记忆Tweet检测] 开始检测其他平台聊天记忆中的发帖意图'); // 1. 获取已绑定的角色
      const xDb = getXDB();
      const settingsId = `xSettings_${currentAccountId || 'main'}`;
      const xSettings = await xDb.xSettings.get(settingsId);
      if (!xSettings || !xSettings.boundCharacters || xSettings.boundCharacters.length === 0) {
        console.log('⏭️ [聊天记忆Tweet检测] 没有绑定角色，跳过');
        return;
      }
      // 2. 获取用户身份识别信息
      const userXProfileInfo = StringBuilders.buildUserXProfileInfo(window.userProfileData); // 3. 筛选符合条件的角色（知道用户身份且有专属人设）
      const mainDB = getDB();
      const allChats = await mainDB.chats.toArray();
      const allXProfiles = await xDb.xCharacterProfiles.toArray();
      const eligibleCharacters = [];
      for (const charId of xSettings.boundCharacters) {
        // 检查是否知道用户身份
        if (!userXProfileInfo.knownIdentityCharacters.includes(charId)) {
          continue;
        }
        // 获取角色数据
        const character = allChats.find(c => c.id === charId);
        if (!character) continue; // 获取X资料
        const xProfile = allXProfiles.find(p => p.characterId === charId);
        if (!xProfile) continue; // 检查是否有专属人设
        if (!xProfile.userPersona || !xProfile.userPersona.trim()) {
          console.log(`⏭️ [聊天记忆Tweet检测] ${character.name}: 未设置专属用户人设，跳过`);
          continue;
        }
        // 检查是否有聊天记忆
        if (!character.history || character.history.length === 0) {
          console.log(`⏭️ [聊天记忆Tweet检测] ${character.name}: 没有聊天记忆，跳过`);
          continue;
        }
        eligibleCharacters.push({
          character,
          xProfile,
        });
      }
      console.log(`✅ [聊天记忆Tweet检测] 找到 ${eligibleCharacters.length} 个符合条件的角色`); // 4. 对每个符合条件的角色检测发帖意图
      for (const { character, xProfile } of eligibleCharacters) {
        await checkCharacterChatHistoryForTweetIntent(character, xProfile);
      }
    } catch (error) {
      console.error('❌ [聊天记忆Tweet检测] 失败:', error);
    }
  }
  // 检查单个角色的聊天记忆是否有发帖意图
  async function checkCharacterChatHistoryForTweetIntent(character, xProfile) {
    try {
      console.log(`🔍 [聊天记忆Tweet检测] 检查角色: ${character.name}`); // 关键词列表（与私信检测相同）
      const postKeywords = [
        '发帖',
        '发推',
        '发推特',
        '发推文',
        '发tweet',
        '发条推',
        '发个帖',
        '发条帖',
        '发个推',
        '发一条',
        '发布推文',
        '发布帖子',
        'post',
        'tweet',
        'tweeted',
        'posting',
        'gonna post',
        'will post',
        'going to post',
        'publish',
        'share on x',
        'share on twitter',
        '发到X上',
        '发到推特',
        '发到平台',
        '分享到X',
        '晒到X',
      ]; // 检查最近的聊天记忆（最多检查最近20条）
      const recentHistory = character.history.slice(-20);
      let foundKeyword = false;
      let keywordIndex = -1;
      for (let i = recentHistory.length - 1; i >= 0; i--) {
        const msg = recentHistory[i]; // 🔧 只检测AI角色的消息（role === 'assistant'），用户无法强制角色发帖
        if (msg.role === 'assistant' && msg.content) {
          const content = msg.content.toLowerCase();
          if (postKeywords.some(keyword => content.includes(keyword.toLowerCase()))) {
            foundKeyword = true;
            keywordIndex = i;
            console.log(`✅ [聊天记忆Tweet检测] ${character.name} 主动提及发帖: ${msg.content.substring(0, 50)}`);
            break;
          }
        }
      }
      if (!foundKeyword) {
        console.log(`⏭️ [聊天记忆Tweet检测] ${character.name} 未主动提及发帖`);
        return;
      }
      // 提取上下文（关键词消息的前后10条）
      const startIndex = Math.max(0, keywordIndex - 10);
      const endIndex = Math.min(recentHistory.length, keywordIndex + 11);
      const contextHistory = recentHistory.slice(startIndex, endIndex); // 转换聊天记忆格式为私信消息格式
      const contextMessages = contextHistory.map(msg => ({
        type: 'text',
        content: msg.content || '',
        isOwn: msg.role === 'user',
        time: '最近',
      })); // 构建 messageData（模拟私信格式）
      const messageData = {
        id: `msg_${character.id}`,
        user: {
          name: xProfile.xName,
          handle: xProfile.xHandle,
          avatar: xProfile.xAvatar,
          verified: xProfile.xVerified || false,
        },
      }; // 调用AI生成推文内容（复用现有函数）
      const tweetData = await generateTweetFromConversation(messageData, contextMessages);
      if (!tweetData) {
        console.log(`⚠️ [聊天记忆Tweet检测] ${character.name} 的AI未生成推文内容`);
        return;
      }
      // 创建 New Tweet 通知
      const timestamp = Date.now();
      const newTweetNotification = {
        id: `mention_newtweet_chat_${timestamp}`,
        type: 'newTweet',
        user: messageData.user,
        content: `New Tweet from ${messageData.user.name}`,
        time: '刚刚',
        timestamp: timestamp,
        tweet: tweetData,
      }; // 保存到 Mentions 数据库
      const xDb = getXDB();
      const mentionsDataId = `mentions_${currentAccountId || 'main'}`;
      let savedMentions = await xDb.xAccountProfiles.get(mentionsDataId);
      if (!savedMentions) {
        savedMentions = {
          handle: mentionsDataId,
          id: mentionsDataId,
          data: [],
        };
      }
      savedMentions.data.unshift(newTweetNotification);
      await xDb.xAccountProfiles.put(savedMentions);
      console.log(`✅ [聊天记忆Tweet检测] ${character.name} 的推文通知已生成并保存`); // 🆕 将推文添加到发推者的账户主页
      await addTweetToAccountProfile(messageData.user.handle, tweetData); // 显示手机样式通知
      const isEnglish = currentLanguage === 'en';
      showPhoneNotification({
        title: 'X',
        message: isEnglish
          ? `${messageData.user.name} posted a new tweet based on your conversation!`
          : `${messageData.user.name} 根据你们的对话发布了新推文！`,
        avatar: messageData.user.avatar,
        leftIcon: 'x',
      }); // 如果当前在 Mentions 页面，刷新显示
      const mentionsPage = document.getElementById('x-notifications-page');
      if (mentionsPage && mentionsPage.style.display === 'flex') {
        await loadNotifications();
      } else {
        // 如果不在通知页面，显示提醒点
        showNavNotificationDot('notifications');
      }
    } catch (error) {
      console.error(`❌ [聊天记忆Tweet检测] 检查 ${character.name} 失败:`, error);
    }
  }
  // 智能检测并生成 New Tweet 通知（基于私信对话内容）
  async function detectAndGenerateNewTweetNotification(messageData, conversationMessages) {
    try {
      console.log('🔍 [私信Tweet检测] 开始检测私信对话中的发帖意图'); // 关键词列表（中英文）
      const postKeywords = [
        '发帖',
        '发推',
        '发推特',
        '发推文',
        '发tweet',
        '发条推',
        '发个帖',
        '发条帖',
        '发个推',
        '发一条',
        '发布推文',
        '发布帖子',
        'post',
        'tweet',
        'tweeted',
        'posting',
        'gonna post',
        'will post',
        'going to post',
        'publish',
        'share on x',
        'share on twitter',
        '发到X上',
        '发到推特',
        '发到平台',
        '分享到X',
        '晒到X',
      ]; // 检查最近的消息中是否包含关键词（只检测对方发送的消息，不检测用户消息）
      let foundKeyword = false;
      let keywordMessageIndex = -1;
      for (let i = conversationMessages.length - 1; i >= Math.max(0, conversationMessages.length - 10); i--) {
        const msg = conversationMessages[i]; // 🔧 只检测非用户发送的消息（isOwn === false），用户无法强制对方发帖
        if (msg.type === 'text' && msg.content && !msg.isOwn) {
          const content = msg.content.toLowerCase();
          if (postKeywords.some(keyword => content.includes(keyword.toLowerCase()))) {
            foundKeyword = true;
            keywordMessageIndex = i;
            console.log('✅ [私信Tweet检测] 对方主动提及发帖:', msg.content.substring(0, 50));
            break;
          }
        }
      }
      if (!foundKeyword) {
        console.log('⏭️ [私信Tweet检测] 对方未主动提及发帖，跳过');
        return;
      }
      // 提取上下文（关键词消息的前后10条）
      const startIndex = Math.max(0, keywordMessageIndex - 10);
      const endIndex = Math.min(conversationMessages.length, keywordMessageIndex + 11);
      const contextMessages = conversationMessages.slice(startIndex, endIndex);
      console.log(`📝 [私信Tweet检测] 提取上下文消息: ${contextMessages.length} 条`); // 调用AI生成推文内容
      const tweetData = await generateTweetFromConversation(messageData, contextMessages);
      if (!tweetData) {
        console.log('⚠️ [私信Tweet检测] AI未生成推文内容');
        return;
      }
      // 创建 New Tweet 通知
      const timestamp = Date.now();
      const newTweetNotification = {
        id: `mention_newtweet_dm_${timestamp}`,
        type: 'newTweet',
        user: messageData.user,
        content: `New Tweet from ${messageData.user.name}`,
        time: '刚刚',
        timestamp: timestamp,
        tweet: tweetData, // 完整的推文数据
      }; // 保存到 Mentions 数据库
      const xDb = getXDB();
      const mentionsDataId = `mentions_${currentAccountId || 'main'}`;
      let savedMentions = await xDb.xAccountProfiles.get(mentionsDataId);
      if (!savedMentions) {
        savedMentions = {
          handle: mentionsDataId,
          id: mentionsDataId,
          data: [],
        };
      }
      // 添加到开头
      savedMentions.data.unshift(newTweetNotification);
      await xDb.xAccountProfiles.put(savedMentions);
      console.log('✅ [私信Tweet检测] 已生成并保存 New Tweet 通知'); // 🆕 将推文添加到发推者的账户主页
      await addTweetToAccountProfile(messageData.user.handle, tweetData); // 显示手机样式通知
      const isEnglish = currentLanguage === 'en';
      showPhoneNotification({
        title: 'X',
        message: isEnglish ? `${messageData.user.name} posted a new tweet!` : `${messageData.user.name} 发布了新推文！`,
        avatar: messageData.user.avatar || 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
        leftIcon: 'x',
      }); // 如果当前在 Mentions 页面，刷新显示
      const mentionsPage = document.getElementById('x-notifications-page');
      if (mentionsPage && mentionsPage.style.display === 'flex') {
        await loadNotifications();
      } else {
        // 如果不在通知页面，显示提醒点
        showNavNotificationDot('notifications');
      }
    } catch (error) {
      console.error('❌ [私信Tweet检测] 失败:', error);
    }
  }
  // 基于私信对话生成推文内容
  async function generateTweetFromConversation(messageData, contextMessages, options = {}) {
    try {
      // 🎯 提取选项参数
      const isAutoTweet = options.isAutoTweet || false; // 是否为自动发推模式
      const timeSinceLastMessage = options.timeSinceLastMessage || 0; // 距离上次聊天的时间（秒）
      const autoTweetType = options.type || 'character'; // 自动发推类型：character | stranger
      // 🔧 使用统一的API配置加载工具
      const { apiConfig, xSettings, xDb } = await APIUtils.loadConfigAndSettings();
      const { userPrompt, worldSetting } = xSettings;
      // 判断私信类型（仿照第九个情景）
      let messageType = 'stranger'; // stranger | character | account
      let characterId = null;
      let accountHandle = null;
      if (messageData.id) {
        if (messageData.id.startsWith('msg_account_')) {
          messageType = 'account'; // 提取账户句柄
          const parts = messageData.id.split('_');
          if (parts.length > 2) {
            accountHandle = parts[2];
          }
        } else if (messageData.id.startsWith('msg_') && messageData.id !== 'msg_001') {
          messageType = 'character';
          characterId = messageData.id.replace('msg_', '');
        }
      }
      console.log(`📝 [Tweet生成] 消息类型: ${messageType}`, { characterId, accountHandle });
      // 使用工具函数构建用户X个人资料信息
      const userXProfileInfo = StringBuilders.buildUserXProfileInfo(window.userProfileData); // 获取用户最新的5条推文
      const userTweetsId = `userTweets_${currentAccountId || 'main'}`;
      const userTweetsData = await xDb.xUserTweets.get(userTweetsId);
      const recentUserTweets = userTweetsData?.tweets?.slice(0, 5) || []; // Token计数器
      let tokenCount = 0; // 0. 时间感知（北京时间）
      const now = new Date();
      const beijingTime = new Date(now.getTime() + 8 * 60 * 60 * 1000); // UTC+8
      const year = beijingTime.getUTCFullYear();
      const month = beijingTime.getUTCMonth() + 1;
      const day = beijingTime.getUTCDate();
      const hours = beijingTime.getUTCHours();
      const minutes = beijingTime.getUTCMinutes();
      const weekdays = ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'];
      const weekday = weekdays[beijingTime.getUTCDay()];
      let timeOfDay = '';
      if (hours >= 5 && hours < 9) {
        timeOfDay = '清晨';
      } else if (hours >= 9 && hours < 12) {
        timeOfDay = '上午';
      } else if (hours >= 12 && hours < 14) {
        timeOfDay = '中午';
      } else if (hours >= 14 && hours < 18) {
        timeOfDay = '下午';
      } else if (hours >= 18 && hours < 22) {
        timeOfDay = '晚上';
      } else {
        timeOfDay = '深夜';
      }
      // 1. 基础系统提示词 + 世界书
      let systemPrompt = StringBuilders.buildBaseSystemPrompt({
        userPrompt,
        worldSetting,
      });
      tokenCount = TokenUtils.logTokenUsage('Tweet生成器', '基础系统提示词', systemPrompt, tokenCount); // 1.5. 添加当前时间信息
      systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
⏰ 当前时间信息 ⏰
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
当前时间（北京时间）：${year}年${month}月${day}日 ${weekday} ${String(hours).padStart(2, '0')}:${String(
        minutes,
      ).padStart(2, '0')}
时段：${timeOfDay}
**请根据当前时间生成符合时间情境的推文**：
- 如果是清晨或上午，推文可以是早安问候、早餐分享、一天计划等
- 如果是中午，可以是午餐分享、工作进展等
- 如果是下午，可以是下午茶、工作日常、生活感悟等
- 如果是晚上，可以是晚餐、晚间活动、一天总结等
- 如果是深夜，可以是深夜想法、失眠感悟等
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
      tokenCount = TokenUtils.logTokenUsage(
        'Tweet生成器',
        '时间信息',
        systemPrompt.substring(systemPrompt.lastIndexOf('⏰ 当前时间信息')),
        tokenCount,
      ); // 1.5. 获取适用的世界书内容
      const worldBooksOptions = { boundCharacters: [] };
      if (messageType === 'character' && characterId) {
        worldBooksOptions.boundCharacters = [characterId];
      }
      const worldBooksContent = await StringBuilders.getApplicableWorldBooks('posts', worldBooksOptions);
      if (worldBooksContent) {
        systemPrompt += worldBooksContent;
        tokenCount = TokenUtils.logTokenUsage('Tweet生成器', '世界书内容', worldBooksContent, tokenCount);
      }
      // 2. 核心任务说明
      systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 核心任务：基于私信对话生成推文 🎯
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
你是X社交平台的推文生成器。${
        isAutoTweet
          ? `${messageData.user.name} (${messageData.user.handle}) 在后台自动发布推文。
🤖 **后台自动发推模式**：角色根据最近的聊天记录自主决定发布推文内容
⏰ **距离上次聊天**: ${Math.floor(timeSinceLastMessage / 60)} 分钟前（${timeSinceLastMessage} 秒）
📝 **推文重点**: 以刻画 ${messageData.user.name} 自身为主，可以分享日常、想法、近况等，聊天记录仅作为灵感参考`
          : `在私信对话中，${messageData.user.name} (${messageData.user.handle}) 提到要发布推文。`
      }
🚨 **注意：是 ${messageData.user.name} 要发推文，不是用户本人！**
请根据对话上下文，生成 ${messageData.user.name} 可能会发布的推文内容。
**对话上下文**（最近的私信对话${isAutoTweet ? '，作为灵感参考' : ''}）：
`; // 添加对话记录
      contextMessages.forEach((msg, index) => {
        const sender = msg.isOwn ? userXProfileInfo.name : messageData.user.name;
        let content = '';
        if (msg.type === 'text') {
          content = msg.content;
        } else if (msg.type === 'image') {
          content = msg.isOwn && msg.imageData ? '[图片]' : `[图片: ${msg.imageDescription || ''}]`;
        } else if (msg.type === 'voice') {
          content = `[语音: ${msg.voiceText}]`;
        } else if (msg.type === 'sticker') {
          content = '[表情包]';
        }
        systemPrompt += `
${index + 1}. ${sender}: ${content}`;
      });
      systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`; // 🔥 如果是商业转账反水模式，添加特殊说明
      if (messageData._isBusinessBetrayal) {
        systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🔥 特殊模式：商业推广反水 🔥
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🚨 **重要：${messageData.user.name} 决定"反水"，不按照商业任务要求发推文！**
**反水类型（选择其中一种）**：
1. **揭露型**（40%）：
- 直接揭露有人花钱让自己发广告
- 例："有人给我钱让我宣传XXX，但我觉得这东西真的很一般..."
- 例："刚收到一个推广邀约，说实话我用过那玩意儿，不推荐"
2. **吐槽型**（30%）：
- 吐槽任务本身或产品/服务
- 例："又有人让我帮忙推广了，但这次的东西真的...算了不说了"
- 例："有些推广真的很无语，明明产品质量那样还要我说好话"
3. **完全不配合型**（20%）：
- 完全不提任务，发自己想发的内容
- 例："今天心情不好，不想工作"
- 例："做自己想做的事比什么都重要"
4. **阴阳怪气型**（10%）：
- 表面上完成任务，但用讽刺/暗示的语气
- 例："某个'非常好用'的产品（此处省略一万字）"
- 例："终于可以体验到'传说中'的XXX了呢😊"
**生成要求**：
- 推文必须体现${messageData.user.name}的性格特质
- 根据角色设定选择合适的反水方式
- 推文要自然，不要太刻意
- 可以保留一定的模糊性，让读者自己理解
- stats数据要合理（反水推文可能会有更多讨论：comments 20-60, likes 50-200）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
        tokenCount = TokenUtils.logTokenUsage(
          'Tweet生成器',
          '反水模式说明',
          systemPrompt.substring(systemPrompt.lastIndexOf('🔥 特殊模式')),
          tokenCount,
        );
      }
      const coreTaskSection = systemPrompt.substring(systemPrompt.lastIndexOf('🎯 核心任务'));
      tokenCount = TokenUtils.logTokenUsage('Tweet生成器', '核心任务说明', coreTaskSection, tokenCount); // 2.5. 用户资料信息
      const userConstraintsStart = systemPrompt.length;
      systemPrompt += `
【用户X平台资料】（用于理解对话背景）：
- 用户名：${userXProfileInfo.name}
- 用户句柄：${userXProfileInfo.handle}
- 认证状态：${userXProfileInfo.verified ? '已认证' : '未认证'}
${userXProfileInfo.publicIdentity ? `- 公众身份：${userXProfileInfo.publicIdentity}` : ''}
${userXProfileInfo.bio ? `- 个人简介：${userXProfileInfo.bio}` : ''}
`; // 2.6. 用户最近推文
      if (recentUserTweets.length > 0) {
        systemPrompt += `
【用户最近推文】（供参考，对话可能涉及这些推文）：
`;
        recentUserTweets.forEach((tweet, index) => {
          systemPrompt += `
${index + 1}. "${tweet.content}"
- 发布时间：${tweet.time || '最近'}
- 互动数据：${tweet.stats?.likes || 0}喜欢，${tweet.stats?.comments || 0}评论
`;
        });
      }
      const userSection = systemPrompt.substring(userConstraintsStart);
      tokenCount = TokenUtils.logTokenUsage('Tweet生成器', '用户资料和推文', userSection, tokenCount); // 3. 使用统一资料获取工具（大幅简化代码）
      const profileInfoStart = systemPrompt.length; // 🎯 核心优化：只需一行代码获取所有资料（传入用户资料用于身份识别）
      console.log(
        `🔍 [Tweet生成] 用户身份识别列表:`,
        userXProfileInfo.knownIdentityCharacters,
        `角色ID: ${characterId}`,
      );
      const senderProfile = await StringBuilders.getUnifiedProfile(messageData.user.handle, {
        userProfileInfo: userXProfileInfo,
      });
      if (senderProfile) {
        // 🔍 调试日志：检查用户人设读取
        if (senderProfile.type === 'character') {
          console.log(`🔍 [Tweet生成] 角色知道用户身份: ${senderProfile.knowsUserIdentity}`);
          console.log(`🔍 [Tweet生成] 角色用户人设: "${senderProfile.characterData?.userPersona || '无'}"`);
        }
        systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━`; // 使用格式化工具生成提示词
        systemPrompt += StringBuilders.formatProfileForPrompt(senderProfile, {
          includeType: true,
          includeTweets: true,
          includeRelationships: true,
        });
        systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
**推文生成要求**：
- 推文内容必须严格符合${senderProfile.name}的${senderProfile.type === 'character' ? '性格和说话风格' : '身份和风格'}
${
  isAutoTweet
    ? `- 🎯 **后台自动发推重点**：推文以刻画${senderProfile.name}自身为主（日常、想法、近况、感受等）
- 聊天记录仅作为灵感来源，不要直接提及或暗示与用户的对话
- 推文应该像${senderProfile.name}的独立生活动态，而非对话延续
- 可以是：分享心情、吐槽日常、发表观点、晒照片、记录生活等
- 时间感：距离上次聊天已过去${Math.floor(timeSinceLastMessage / 60)}分钟，推文可以反映这段时间的活动`
    : `- 推文要与私信对话内容相关`
}
`; // 特定类型的额外要求
        if (senderProfile.type === 'character') {
          systemPrompt += `- 参考角色人设和最近的推文风格\n`; // 🔧 用户身份识别信息（使用senderProfile中已经计算好的值）
          if (senderProfile.knowsUserIdentity) {
            systemPrompt += `- ✅ 该角色知道用户身份（${userXProfileInfo.name} / ${userXProfileInfo.handle}），推文中可以自然地@用户或提及与用户相关的内容\n`;
            systemPrompt += `- 可以结合对用户的了解生成推文内容\n`;
          } else {
            systemPrompt += `- ❌ 该角色不知道用户身份，推文不应该直接提及或@用户\n`;
            systemPrompt += `- 推文内容独立于用户，不要暗示认识用户\n`;
          }
        } else if (senderProfile.type === 'account') {
          systemPrompt += `- 参考账户的发帖习惯和平台形象\n`;
        }
        const profileInfo = systemPrompt.substring(profileInfoStart);
        tokenCount = TokenUtils.logTokenUsage('Tweet生成器', '发送者详细信息', profileInfo, tokenCount);
      } else {
        // 备用方案
        systemPrompt += `
**推文生成要求**：
- 推文内容要符合 ${messageData.user.name} 的身份和对话语境
- 推文要与私信对话内容相关
`;
      }
      // 4. 通用要求
      systemPrompt += `
- 内容要自然，像是真实用户会发布的推文
- 可以包含情绪、观点、分享或日常内容
- 字数控制在20-200字之间
- 可以带emoji表情
- ${isAutoTweet ? '40%' : '30%'}的概率带图片（如果合适的话，提供图片描述）
- stats数据要合理（普通用户流量：comments 5-30, retweets 10-80, likes 20-150, views 100-2000）
${
  isAutoTweet
    ? `
🎯 **后台自动发推特别提示**：
- 推文要体现${messageData.user.name}的独立生活和个性
- 不要让推文看起来像是在回应某个对话
- 可以发一些与聊天无关的日常内容
- 展现角色在用户不在场时的生活状态`
    : ''
}
【JSON返回格式】：
\`\`\`json
{
"content": "推文文本内容",
"image": {"type": "description", "content": "图片描述"} 或 null,
"time": "刚刚",
"stats": {
"comments": 评论数,
"retweets": 转发数,
"likes": 点赞数,
"views": 浏览数
},
"comments": [
{
 "id": "评论唯一ID（可留空，系统自动生成）",
 "user": {
 "name": "评论者昵称",
 "handle": "@评论者句柄",
 "avatar": "https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg",
 "verified": false
 },
 "content": "评论文本",
 "time": "时间描述（如'2小时前'）",
 "image": {"type": "description", "content": "图片文字描述"} (可选，10-20%的评论带图),
 "stats": {
 "replies": 回复数,
 "retweets": 转发数,
 "likes": 点赞数
 }
}
]
}
\`\`\`
关键规则：
1. 推文内容要与对话上下文相关
2. 🚨 推文是 ${messageData.user.name} 发布的，不是 ${userXProfileInfo.name}
3. 符合发布者的说话风格和身份
4. stats中所有数字必须是纯数字，不带引号
5. image字段可选，如果不需要图片就设为null
6. **必须包含2-5条评论**，评论要与推文内容相关且自然
7. 10-20%的评论可以带图（image字段）
8. 评论的stats数据要合理（replies 0-10, retweets 0-20, likes 1-50）
`;
      const formatSection = systemPrompt.substring(systemPrompt.lastIndexOf('【JSON返回格式】'));
      tokenCount = TokenUtils.logTokenUsage('Tweet生成器', 'JSON格式要求', formatSection, tokenCount); // 最终统计
      TokenUtils.logFinalPrompt('Tweet生成器', systemPrompt, '请生成推文');
      const messages = [{ role: 'user', content: '请生成推文' }];
      // 🔧 使用统一的API请求工具
      const aiResponseContent = await APIUtils.sendAIRequest({
        apiConfig,
        systemPrompt,
        messages,
        temperature: 0.8,
      });
      // 🔧 使用统一的JSON解析工具
      const tweetData = APIUtils.parseJSONResponse(aiResponseContent); // 添加用户信息
      const timestamp = Date.now();
      tweetData.id = `newtweet_${timestamp}`;
      tweetData.user = messageData.user;
      tweetData.timestamp = timestamp; // 🔧 删除AI生成的静态time字段，改用timestamp动态计算
      delete tweetData.time; // 为评论分配ID和时间戳
      if (tweetData.comments && tweetData.comments.length > 0) {
        tweetData.comments.forEach((comment, cIndex) => {
          if (!comment.id) {
            comment.id = `newtweet_${timestamp}_c${cIndex}`;
          }
          // 评论时间应该在推文之后
          if (!comment.timestamp) {
            comment.timestamp = timestamp + (5 + Math.random() * 30) * 60 * 1000; // 5-35分钟后
          }
          // 🔧 删除AI生成的静态time字段，改用timestamp动态计算
          delete comment.time;
        });
      }
      console.log('✅ [Tweet生成] 推文内容已生成:', tweetData);
      return tweetData;
    } catch (error) {
      console.error('❌ [Tweet生成] 失败:', error);
      return null;
    }
  }
  // ============================================
  // 私信详情页面功能
  // ============================================
  // 当前查看的私信会话数据
  let currentMessageConversation = null; // 私信多选删除相关状态
  let messageMultiSelectMode = false;
  let selectedMessages = new Set();
  let messageLongPressTimer = null;
  let messageLongPressTarget = null; // 渲染私信消息项
  function renderMessageItem(message, isOwn = false, messageIndex, isLastInGroup = true, showTime = true) {
    const config = languageConfig[currentLanguage] || languageConfig.zh; // 使用索引作为消息ID（简单且可靠）
    const messageId = messageIndex !== undefined ? `msg_idx_${messageIndex}` : `msg_temp_${Math.random()}`; // 检查是否是粉丝群消息（包含发送者信息）
    const isFanGroupMessage = !isOwn && message.senderId && message.senderName;
    const messageEl = document.createElement('div');
    messageEl.className = 'message-item';
    messageEl.setAttribute('data-message-id', messageId);
    messageEl.setAttribute('data-message-index', messageIndex !== undefined ? messageIndex : -1);
    messageEl.style.cssText = `
 display: flex; flex-direction: column; align-items: ${isOwn ? 'flex-end' : 'flex-start'}; margin-bottom: ${
      isLastInGroup ? '16px' : '4px'
    }; position: relative; transition: opacity 0.2s; opacity: 0; transform: translateY(10px);
`; // 🎯 粉丝群消息：每条消息都显示发送者信息（气泡左侧）
    if (isFanGroupMessage) {
      const senderInfoEl = document.createElement('div');
      senderInfoEl.style.cssText = `
 display: flex; align-items: flex-start; gap: 8px; width: 100%; `; // 头像
      const avatarEl = document.createElement('img');
      avatarEl.src = message.senderAvatar;
      avatarEl.style.cssText = `
 width: 32px; height: 32px; border-radius: 50%; object-fit: cover; flex-shrink: 0; margin-top: 2px; `;
      senderInfoEl.appendChild(avatarEl); // 消息内容容器（包括昵称和气泡）
      const contentWrapper = document.createElement('div');
      contentWrapper.style.cssText = `
 flex: 1; min-width: 0; display: flex; flex-direction: column; gap: 4px; `; // 昵称和句柄
      const nameEl = document.createElement('div');
      nameEl.style.cssText = `
 display: flex; align-items: center; gap: 6px; `;
      nameEl.innerHTML = `
 <span style="font-size: 14px; font-weight: 600; color:var(--x-text-primary); ">${message.senderName}</span>
 <span style="font-size: 13px; color:var(--x-text-secondary); ">${message.senderHandle}</span>
 `;
      contentWrapper.appendChild(nameEl);
      senderInfoEl.appendChild(contentWrapper);
      messageEl.appendChild(senderInfoEl); // 调整messageEl布局为横向
      messageEl.style.flexDirection = 'row';
      messageEl.style.alignItems = 'flex-start';
    }
    // 如果在多选模式，添加选择指示器
    if (messageMultiSelectMode) {
      const isSelected = selectedMessages.has(messageId);
      const selectIndicator = document.createElement('div');
      selectIndicator.className = 'message-select-indicator';
      selectIndicator.style.cssText = `
 position: absolute; ${isOwn ? 'right: -10px;' : 'left: -10px;'}
 top: 50%; transform: translateY(-50%); width: 24px; height: 24px; border-radius: 50%; border: 2px solid ${
   isSelected ? 'var(--x-accent)' : 'var(--x-border-color)'
 }; background-color: ${
        isSelected ? 'var(--x-accent)' : 'var(--x-bg-primary)'
      }; display: flex; align-items: center; justify-content: center; cursor: pointer; z-index: 10; `;
      if (isSelected) {
        selectIndicator.innerHTML = `
 <svg viewBox="0 0 24 24" style="width: 14px; height: 14px; fill: #fff;">
 <g><path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"></path></g>
 </svg>
 `;
      }
      selectIndicator.onclick = e => {
        e.stopPropagation();
        toggleMessageSelection(messageId);
      };
      messageEl.appendChild(selectIndicator);
      messageEl.style.opacity = isSelected ? '0.7' : '1';
    }
    // 添加长按事件监听（桌面端和移动端）
    let pressTimer = null;
    const startPress = e => {
      if (messageMultiSelectMode) return;
      pressTimer = setTimeout(() => {
        enterMessageMultiSelectMode();
        toggleMessageSelection(messageId); // 触觉反馈（如果支持）
        if (navigator.vibrate) {
          navigator.vibrate(50);
        }
      }, 500);
    };
    const endPress = () => {
      if (pressTimer) {
        clearTimeout(pressTimer);
        pressTimer = null;
      }
    }; // 移动端触摸事件
    messageEl.addEventListener('touchstart', startPress);
    messageEl.addEventListener('touchend', endPress);
    messageEl.addEventListener('touchmove', endPress); // 桌面端鼠标事件
    messageEl.addEventListener('mousedown', startPress);
    messageEl.addEventListener('mouseup', endPress);
    messageEl.addEventListener('mouseleave', endPress); // 多选模式下点击切换选择
    if (messageMultiSelectMode) {
      messageEl.style.cursor = 'pointer';
      messageEl.onclick = () => {
        toggleMessageSelection(messageId);
      };
    }
    // 消息气泡
    const bubbleEl = document.createElement('div');
    const baseStyle = `
 max-width: 70%; border-radius: 18px; font-size: 15px; line-height: 1.4; word-wrap: break-word; ${
   isLastInGroup ? (isOwn ? 'border-bottom-right-radius: 4px;' : 'border-bottom-left-radius: 4px;') : ''
 }
`; // 判断消息类型
    if (message.type === 'text') {
      // 文本消息
      bubbleEl.style.cssText =
        baseStyle +
        `
 padding: 12px 16px; background-color: ${isOwn ? 'var(--x-accent)' : 'var(--x-bg-secondary)'}; color: ${
          isOwn ? '#fff !important' : 'var(--x-text-primary)'
        }; width: fit-content; `; // 处理@提及和#话题标签高亮
      const processedContent = processContent(message.content || '', { isOwn });
      bubbleEl.innerHTML = processedContent;
    } else if (message.type === 'image') {
      // 图片消息
      bubbleEl.style.cssText =
        baseStyle +
        `
 padding: 0; background-color: transparent; width: fit-content; `;
      const imageContainerId = `img_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      const imageContainer = document.createElement('div');
      imageContainer.id = imageContainerId;
      imageContainer.style.cssText = `
 position: relative; border-radius: 12px; overflow: hidden; ${
   message.imageData ? 'background-color: transparent;' : 'background-color: rgba(142, 142, 142, 0.15); padding: 16px;'
 }
 max-width: ${message.imageData ? '200px' : '280px'}; `; // 如果有imageData（用户发送的图片），显示实际图片
      if (message.imageData) {
        const imgEl = document.createElement('img');
        imgEl.src = message.imageData;
        imgEl.style.cssText = `
 max-width: 200px; max-height: 200px; width: auto; height: auto; display: block; border-radius: 12px; cursor: pointer; `;
        imgEl.onclick = () => {
          // 点击图片放大查看
          window.open(message.imageData, '_blank');
        };
        imageContainer.appendChild(imgEl);
      } else {
        // AI回复的图片描述
        const descEl = document.createElement('div');
        descEl.style.cssText = `
 color:var(--x-text-primary); font-size: 15px; line-height: 1.4; word-wrap: break-word; `;
        descEl.textContent = message.imageDescription || '[图片]';
        imageContainer.appendChild(descEl);
      }
      // 敏感内容遮罩（仿照推文的处理方式）
      if (message.sensitive) {
        const maskId = `mask_${imageContainerId}`;
        const maskEl = document.createElement('div');
        maskEl.id = maskId;
        maskEl.style.cssText = `
 position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.6); backdrop-filter: blur(20px); -webkit-backdrop-filter: blur(20px); display: flex; flex-direction: column; align-items: center; justify-content: center; cursor: pointer; z-index: 1; `;
        maskEl.innerHTML = `
 <svg viewBox="0 0 24 24" style="width: 32px; height: 32px; fill: #fff; margin-bottom: 8px;">
 <g><path d="M12 15c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm0-4c-.552 0-1 .448-1 1s.448 1 1 1 1-.448 1-1-.448-1-1-1z"></path><path d="M12 5c-7.633 0-9.927 6.617-9.948 6.684L1.946 12l.105.316C2.073 12.383 4.367 19 12 19s9.927-6.617 9.948-6.684l.106-.316-.105-.316C21.927 11.617 19.633 5 12 5zm0 12c-5.351 0-7.424-3.846-7.926-5C4.578 10.842 6.652 7 12 7c5.351 0 7.424 3.846 7.926 5-.504 1.158-2.578 5-7.926 5z"></path></g>
 </svg>
 <div style="color: #fff; font-weight: 600; font-size: 15px; margin-bottom: 4px;">可能含有敏感内容</div>
 <div style="color: rgba(255,255,255,0.8); font-size: 13px;">点击查看</div>
 `;
        maskEl.onclick = function () {
          this.style.display = 'none';
        };
        imageContainer.appendChild(maskEl);
      }
      bubbleEl.appendChild(imageContainer);
    } else if (message.type === 'voice') {
      // 语音消息
      bubbleEl.style.cssText =
        baseStyle +
        `
 padding: 10px 14px; background-color: ${isOwn ? 'var(--x-accent)' : 'var(--x-bg-secondary)'}; color: ${
          isOwn ? '#fff' : 'var(--x-text-primary)'
        }; max-width: 180px; width: fit-content; `;
      const voiceId = `voice_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      bubbleEl.innerHTML = `
 <div id="${voiceId}" style="display: flex; align-items: center; gap: 10px; cursor: pointer; color: ${
        isOwn ? '#fff' : 'var(--x-text-primary)'
      };" onclick="toggleVoiceText('${voiceId}', '${message.voiceText?.replace(/'/g, "\\'")}')">
 <div style="width: 32px; height: 32px; border-radius: 50%; background-color: ${
   isOwn ? 'rgba(255,255,255,0.2)' : 'var(--x-accent)'
 }; display: flex; align-items: center; justify-content: center; flex-shrink: 0; ">
 <svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: #fff;">
 <g><path d="M8 5v14l11-7z"></path></g>
 </svg>
 </div>
 <span style="font-weight: 600; color: inherit; font-size: 14px;">${message.duration || '0:05'}</span>
 </div>
 `;
    } else if (message.type === 'sticker') {
      // 表情包消息
      bubbleEl.style.cssText =
        baseStyle +
        `
 padding: 0; background-color: transparent; width: fit-content; `;
      bubbleEl.innerHTML = `
 <div style="max-width: 120px; border-radius: 8px; overflow: hidden; ">
 <img src="${message.stickerUrl}"
 alt="表情包"
 style="width: 100%; height: auto; display: block; border-radius: 8px; "
 onerror="this.style.display='none'; this.parentElement.innerHTML='<div style=\\'padding: 12px; color:var(--x-text-secondary); text-align: center;\\'>表情包加载失败</div>';">
 </div>
 `;
    } else if (message.type === 'link') {
      // 链接消息
      bubbleEl.style.cssText =
        baseStyle +
        `
 padding: 0; background-color: transparent; color:var(--x-text-primary); width: fit-content; `;
      const linkCardId = `link_card_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      bubbleEl.innerHTML = `
 <div id="${linkCardId}" style="border: 1px solid var(--x-border-color); border-radius: 12px; overflow: hidden; background-color:var(--x-bg-secondary); cursor: pointer; transition: all 0.2s; "
 onmouseover="this.style.backgroundColor='var(--x-bg-hover)'; this.style.borderColor='var(--x-accent)'"
 onmouseout="this.style.backgroundColor='var(--x-bg-secondary)'; this.style.borderColor='var(--x-border-color)'">
 <div style="padding: 12px;">
 <div style="font-weight: 600; margin-bottom: 4px; color:var(--x-text-primary);">
 ${message.title || '链接'}
 </div>
 ${
   message.description
     ? `
 <div style="font-size: 13px; color:var(--x-text-secondary); margin-bottom: 8px;">
 ${message.description}
 </div>
 `
     : ''
 }
 <div style="font-size: 13px; color: var(--x-accent); overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
 ${message.url || '点击查看文章'}
 </div>
 </div>
 </div>
 `; // 添加点击事件打开文章页面
      setTimeout(() => {
        const linkCard = document.getElementById(linkCardId);
        if (linkCard) {
          linkCard.onclick = () => {
            openArticlePage({
              title: message.title,
              author: message.author || '佚名',
              source: message.source || message.url || '未知来源',
              body: message.body || message.description || '',
            });
          };
        }
      }, 0);
    } else if (message.type === 'quoteTweet') {
      // 转发推文
      bubbleEl.style.cssText =
        baseStyle +
        `
 padding: 0; background-color: transparent; color:var(--x-text-primary); width: fit-content; `;
      bubbleEl.innerHTML = `
 ${
   message.caption
     ? `
 <div style="padding: 12px 16px; background-color: ${isOwn ? 'var(--x-accent)' : 'var(--x-bg-secondary)'}; color: ${
         isOwn ? '#fff' : 'var(--x-text-primary)'
       }; border-radius: 12px; margin-bottom: 8px; width: fit-content; ">${processContent(message.caption || '', {
         isOwn,
       })}</div>
 `
     : ''
 }
 <div style="border: 1px solid var(--x-border-color); border-radius: 12px; padding: 12px; background-color:var(--x-bg-secondary); width: fit-content; max-width: 100%; ">
 <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 8px;">
 <img src="${message.tweet.userAvatar}" style="width: 20px; height: 20px; border-radius: 50%;">
 <span style="font-weight: 600; color:var(--x-text-primary);">${message.tweet.userName}</span>
 ${
   message.tweet.verified
     ? `
 <svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: var(--x-accent);">
 <g><path d="M22.25 12c0-1.43-.88-2.67-2.19-3.34.46-1.39.2-2.9-.81-3.91s-2.52-1.27-3.91-.81c-.66-1.31-1.91-2.19-3.34-2.19s-2.67.88-3.33 2.19c-1.4-.46-2.91-.2-3.92.81s-1.26 2.52-.8 3.91c-1.31.67-2.2 1.91-2.2 3.34s.89 2.67 2.2 3.34c-.46 1.39-.21 2.9.8 3.91s2.52 1.26 3.91.81c.67 1.31 1.91 2.19 3.34 2.19s2.68-.88 3.34-2.19c1.39.45 2.9.2 3.91-.81s1.27-2.52.81-3.91c1.31-.67 2.19-1.91 2.19-3.34zm-11.71 4.2L6.8 12.46l1.41-1.42 2.26 2.26 4.8-5.23 1.47 1.36-6.2 6.77z"></path></g>
 </svg>
 `
     : ''
 }
 <span style="color:var(--x-text-secondary); font-size: 13px;">${message.tweet.userHandle}</span>
 <span style="color:var(--x-text-secondary); font-size: 13px;">·</span>
 <span style="color:var(--x-text-secondary); font-size: 13px;">${message.tweet.time}</span>
 </div>
 <div style="color:var(--x-text-primary);">${processContent(message.tweet.content || '', {
   isOwn: false,
 })}</div>
 </div>
 `;
    } else if (message.type === 'quoteProfile') {
      // 转发主页
      bubbleEl.style.cssText =
        baseStyle +
        `
 padding: 0; background-color: transparent; color:var(--x-text-primary); width: fit-content; `;
      const profileCardId = `profile_card_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      bubbleEl.innerHTML = `
 ${
   message.caption
     ? `
 <div style="padding: 12px 16px; background-color: ${isOwn ? 'var(--x-accent)' : 'var(--x-bg-secondary)'}; color: ${
         isOwn ? '#fff' : 'var(--x-text-primary)'
       }; border-radius: 12px; margin-bottom: 8px; ">${processContent(message.caption || '', { isOwn })}</div>
 `
     : ''
 }
 <div id="${profileCardId}" style="border: 1px solid var(--x-border-color); border-radius: 12px; padding: 16px; background-color:var(--x-bg-secondary); cursor: pointer; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='var(--x-bg-secondary)'">
 <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 12px;">
 <img src="${message.profile.avatar}" style="width: 48px; height: 48px; border-radius: 50%;">
 <div style="flex: 1;">
 <div style="display: flex; align-items: center; gap: 4px;">
 <span style="font-weight: 700; color:var(--x-text-primary);">${message.profile.name}</span>
 ${
   message.profile.verified
     ? `
 <svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: var(--x-accent);">
 <g><path d="M22.25 12c0-1.43-.88-2.67-2.19-3.34.46-1.39.2-2.9-.81-3.91s-2.52-1.27-3.91-.81c-.66-1.31-1.91-2.19-3.34-2.19s-2.67.88-3.33 2.19c-1.4-.46-2.91-.2-3.92.81s-1.26 2.52-.8 3.91c-1.31.67-2.2 1.91-2.2 3.34s.89 2.67 2.2 3.34c-.46 1.39-.21 2.9.8 3.91s2.52 1.26 3.91.81c.67 1.31 1.91 2.19 3.34 2.19s2.68-.88 3.34-2.19c1.39.45 2.9.2 3.91-.81s1.27-2.52.81-3.91c1.31-.67 2.19-1.91 2.19-3.34zm-11.71 4.2L6.8 12.46l1.41-1.42 2.26 2.26 4.8-5.23 1.47 1.36-6.2 6.77z"></path></g>
 </svg>
 `
     : ''
 }
 </div>
 <div style="color:var(--x-text-secondary); font-size: 13px;">${message.profile.handle}</div>
 </div>
 </div>
 ${
   message.profile.bio
     ? `
 <div style="color:var(--x-text-primary); margin-bottom: 8px; font-size: 14px;">
 ${message.profile.bio}
 </div>
 `
     : ''
 }
 <div style="color:var(--x-text-secondary); font-size: 13px;">
 ${message.profile.followers} 位关注者
 </div>
 </div>
 `; // 添加点击事件
      setTimeout(() => {
        const profileCard = document.getElementById(profileCardId);
        if (profileCard) {
          profileCard.onclick = () => {
            openAccountProfileFromQuoteProfile(message.profile);
          };
        }
      }, 0);
    } else if (message.type === 'quoteFanGroup') {
      // 转发粉丝群
      bubbleEl.style.cssText =
        baseStyle +
        `
padding: 0; background-color: transparent; color:var(--x-text-primary); width: fit-content; `;
      const fanGroupCardId = `fangroup_card_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      bubbleEl.innerHTML = `
${
  message.caption
    ? `
<div style="padding: 12px 16px; background-color: ${isOwn ? 'var(--x-accent)' : 'var(--x-bg-secondary)'}; color: ${
        isOwn ? '#fff' : 'var(--x-text-primary)'
      }; border-radius: 12px; margin-bottom: 8px; ">${processContent(message.caption || '', { isOwn })}</div>
`
    : ''
}
<div id="${fanGroupCardId}" style="border: 1px solid var(--x-border-color); border-radius: 12px; padding: 16px; background-color:var(--x-bg-secondary); cursor: pointer; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
onmouseout="this.style.backgroundColor='var(--x-bg-secondary)'">
<div style="display: flex; align-items: center; gap: 12px; margin-bottom: 12px;">
<img src="${message.fanGroup.avatar}" style="width: 48px; height: 48px; border-radius: 50%; object-fit: cover;">
<div style="flex: 1;">
<div style="display: flex; align-items: center; gap: 6px; margin-bottom: 4px;">
<span style="font-weight: 700; color:var(--x-text-primary); font-size: 15px;">${message.fanGroup.name}</span>
<span style="padding: 2px 8px; background-color:var(--x-bg-primary); color:var(--x-text-secondary); font-size: 11px; border-radius: 4px; font-weight: 600; ">粉丝群</span>
</div>
<div style="color:var(--x-text-secondary); font-size: 13px;">
${message.fanGroup.memberCount} 位成员
</div>
</div>
</div>
${
  message.fanGroup.threshold
    ? `
<div style="padding: 10px; background-color:var(--x-bg-primary); border-radius: 8px; color:var(--x-text-secondary); font-size: 12px; line-height: 1.4; margin-top: 8px; ">
<div style="color:var(--x-text-primary); font-weight: 600; margin-bottom: 4px; font-size: 11px;">入群门槛</div>
${
  message.fanGroup.threshold.length > 100
    ? message.fanGroup.threshold.substring(0, 100) + '...'
    : message.fanGroup.threshold
}
</div>
`
    : ''
}
</div>
`; // 添加点击事件（暂不实现具体功能）
      setTimeout(() => {
        const fanGroupCard = document.getElementById(fanGroupCardId);
        if (fanGroupCard) {
          fanGroupCard.onclick = () => {
            console.log('点击了粉丝群卡片:', message.fanGroup);
            // 可以后续实现打开粉丝群详情等功能
          };
        }
      }, 0);
    } else if (message.type === 'groupFile') {
      // 群文件消息 - 紧凑的文件卡片设计
      bubbleEl.style.cssText =
        baseStyle +
        `
padding: 0; background-color: transparent; color:var(--x-text-primary); width: fit-content; max-width: 280px; `;

      const fileCardId = `file_card_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      const fileIconSvg = getFileIcon(message.file.type);

      // 文件类型对应的颜色
      const typeColors = {
        text: '#2b303b',
        image: '#2e3440',
        video: '#262b36',
        link: '#272c36',
        default: '#252933',
      };
      const typeColor = typeColors[message.file.type] || typeColors.default;

      // 格式化上传时间
      const uploadDate = new Date(message.file.uploadedAt);
      const formattedDate = `${uploadDate.getMonth() + 1}/${uploadDate.getDate()} ${String(
        uploadDate.getHours(),
      ).padStart(2, '0')}:${String(uploadDate.getMinutes()).padStart(2, '0')}`;

      bubbleEl.innerHTML = `
<div id="${fileCardId}" style="
 border: 1px solid var(--x-border-color);
 border-radius: 12px;
 overflow: hidden;
 background-color:var(--x-bg-secondary);
 cursor: pointer;
 transition: all 0.2s;
" onmouseover="this.style.backgroundColor='var(--x-bg-hover)'; this.style.borderColor='var(--x-accent)'"
 onmouseout="this.style.backgroundColor='var(--x-bg-secondary)'; this.style.borderColor='var(--x-border-color)'">
 <!-- 文件头部 -->
 <div style="
 display: flex;
 align-items: center;
 gap: 12px;
 padding: 12px;
 border-bottom: 1px solid var(--x-border-color);
 ">
 <!-- 文件图标 -->
 <div style="
 width: 38px;
 height: 38px;
 border-radius: 6px;
 background-color: ${typeColor};
 display: flex;
 align-items: center;
 justify-content: center;
 flex-shrink: 0;
 box-shadow: 0 2px 4px rgba(0,0,0,0.1);
 ">
 <div style="width: 18px; height: 18px; color: rgba(255,255,255,0.85);">
 ${fileIconSvg.replace('currentColor', 'rgba(255,255,255,0.85)')}
 </div>
 </div>

 <!-- 文件信息 -->
 <div style="flex: 1; min-width: 0;">
 <div style="
 color:var(--x-text-primary);
 font-size: 14px;
 font-weight: 600;
 overflow: hidden;
 text-overflow: ellipsis;
 white-space: nowrap;
 margin-bottom: 2px;
 ">${message.file.name}</div>
 <div style="
 color:var(--x-text-secondary);
 font-size: 11px;
 display: flex;
 align-items: center;
 gap: 6px;
 ">
 <span>${message.file.uploadedBy}</span>
 <span>·</span>
 <span>${formattedDate}</span>
 </div>
 </div>
 </div>

 <!-- 文件内容预览 -->
 <div style="
 padding: 10px 12px;
 color:var(--x-text-secondary);
 font-size: 12px;
 line-height: 1.4;
 max-height: 60px;
 overflow: hidden;
 text-overflow: ellipsis;
 display: -webkit-box;
 -webkit-line-clamp: 3;
 -webkit-box-orient: vertical;
 ">${message.file.content.substring(0, 100)}${message.file.content.length > 100 ? '...' : ''}</div>
</div>
`;

      // 添加点击事件打开文件详情
      setTimeout(() => {
        const fileCard = document.getElementById(fileCardId);
        if (fileCard) {
          fileCard.onclick = () => {
            openFileDetail(message.file);
          };
        }
      }, 0);
    } else if (message.type === 'transfer') {
      // 转账消息 - 小巧立体的票券设计
      bubbleEl.style.cssText =
        baseStyle +
        `
 padding: 0; background-color: transparent; width: fit-content; `; // 获取当前主题
      const xSocialScreen = document.getElementById('x-social-screen');
      const isLightMode = xSocialScreen && xSocialScreen.classList.contains('x-theme-light'); // 转账方向：用户发送 vs 用户接收
      const isUserSending = isOwn;
      const amount = parseFloat(message.amount || 0).toFixed(2); // 为转账卡片生成唯一ID
      const transferCardId = 'transfer-card-' + (message.timestamp || Date.now()); // 检查是否是商业转账
      const isBusiness = message.isBusiness === true;
      bubbleEl.innerHTML = `
 <div id="${transferCardId}" style="position: relative; background-color: ${
        isLightMode ? '#ffffff' : '#1f1f1f'
      }; border-radius: 12px; padding: 12px 16px; max-width: 200px; box-shadow: ${
        isLightMode
          ? '0 2px 8px rgba(0, 0, 0, 0.1), 0 4px 16px rgba(0, 0, 0, 0.06), 0 1px 2px rgba(0, 0, 0, 0.05)'
          : '0 2px 8px rgba(0, 0, 0, 0.3), 0 4px 16px rgba(0, 0, 0, 0.2), 0 1px 2px rgba(255, 255, 255, 0.05)'
      }; border: 1px solid ${
        isBusiness
          ? isLightMode
            ? 'rgba(29, 155, 240, 0.3)'
            : 'rgba(29, 155, 240, 0.4)'
          : isLightMode
          ? 'rgba(0, 0, 0, 0.06)'
          : 'rgba(255, 255, 255, 0.08)'
      }; display: flex; align-items: center; gap: 12px; cursor: pointer; transition: all 0.2s; "
 onmouseover="this.style.transform='translateY(-1px)'; this.style.boxShadow='${
   isLightMode
     ? '0 4px 12px rgba(0, 0, 0, 0.15), 0 6px 20px rgba(0, 0, 0, 0.08), 0 2px 4px rgba(0, 0, 0, 0.06)'
     : '0 4px 12px rgba(0, 0, 0, 0.4), 0 6px 20px rgba(0, 0, 0, 0.3), 0 2px 4px rgba(255, 255, 255, 0.08)'
 }'"
 onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='${
   isLightMode
     ? '0 2px 8px rgba(0, 0, 0, 0.1), 0 4px 16px rgba(0, 0, 0, 0.06), 0 1px 2px rgba(0, 0, 0, 0.05)'
     : '0 2px 8px rgba(0, 0, 0, 0.3), 0 4px 16px rgba(0, 0, 0, 0.2), 0 1px 2px rgba(255, 255, 255, 0.05)'
 }'"
 ">
 ${
   isBusiness
     ? `

 <div style="position: absolute; top: -4px; right: -4px; width: 18px; height: 18px; background-color: var(--x-accent); border-radius: 50%; display: flex; align-items: center; justify-content: center; box-shadow: 0 1px 3px rgba(0,0,0,0.3); ">
 <svg viewBox="0 0 24 24" style="width: 10px; height: 10px; fill: #ffffff;">
 <g><path d="M20 6h-3V4c0-1.1-.9-2-2-2H9c-1.1 0-2 .9-2 2v2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zM9 4h6v2H9V4zm11 16H4V8h16v12z"></path><path d="M12 10L14.5 14L17 10L14.5 12L12 10ZM10 10L7.5 12L10 14L7.5 14L10 10Z"></path></g>
 </svg>
 </div>
 `
     : ''
 }

 <div style="width: 36px; height: 36px; border-radius: 50%; background-color: ${
   isLightMode ? '#f5f5f5' : '#2d2d2d'
 }; display: flex; align-items: center; justify-content: center; flex-shrink: 0; ">
${getTransferStatusIcon(message.status, isLightMode)}
 </div>

 <div style="display: flex; flex-direction: column; gap: 2px; flex: 1; min-width: 0; ">
 <div style="font-size: 11px; font-weight: 500; color: ${
   isLightMode ? '#888888' : '#aaaaaa'
 }; text-transform: uppercase; letter-spacing: 0.3px; ">${isBusiness ? '💼 ' : ''}${getTransferStatusText(
        message.status,
        isUserSending,
      )}</div>
 <div style="font-size: 16px; font-weight: 600; color: ${isLightMode ? '#1a1a1a' : '#e5e5e5'}; line-height: 1; ">
 ${getTransferAmountText(message.status, isUserSending, amount)}
 </div>
 ${
   message.note
     ? `
 <div style="font-size: 11px; color: ${
   isLightMode ? '#666666' : '#999999'
 }; line-height: 1.2; margin-top: 1px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; ">${
         message.note
       }</div>
 `
     : ''
 }
 </div>

 <div style="width: 6px; height: 6px; border-radius: 50%; background-color: ${
   isBusiness ? 'var(--x-accent)' : isLightMode ? '#666666' : '#999999'
 }; flex-shrink: 0; "></div>
 </div>
 `; // 添加点击事件监听器
      setTimeout(() => {
        const transferCard = document.getElementById(transferCardId);
        if (transferCard) {
          transferCard.onclick = () => {
            openTransferDetails(message, isOwn);
          };
        }
      }, 0);
    } else if (message.type === 'system') {
      // 系统通知 - 居中显示，不同于消息气泡
      messageEl.style.alignItems = 'center';
      bubbleEl.style.cssText = `
 padding: 8px 16px; background-color:var(--x-bg-secondary); border-radius: 16px; font-size: 13px; color:var(--x-text-secondary); text-align: center; max-width: 80%; `;
      bubbleEl.textContent = message.content;
    } else if (message.type === 'forward') {
      // 转发的推文/评论
      bubbleEl.style.cssText =
        baseStyle +
        `
 padding: 0; background-color: transparent; color:var(--x-text-primary); width: fit-content; `;
      const forwardTypeText = message.forwardType === 'tweet' ? '推文' : '评论';
      bubbleEl.innerHTML = `
 <div style="border: 1px solid var(--x-border-color); border-radius: 12px; overflow: hidden; background-color:var(--x-bg-secondary); ">

 <div style="padding: 8px 12px; background-color: var(--x-bg-hover); border-bottom: 1px solid var(--x-border-color); display: flex; align-items: center; gap: 6px; ">
 <svg viewBox="0 0 24 24" style="width: 14px; height: 14px; fill: var(--x-text-secondary);">
 <g><path d="M4.5 3.88l4.432 4.14-1.364 1.46L5.5 7.55V16c0 1.1.896 2 2 2H13v2H7.5c-2.209 0-4-1.791-4-4V7.55L1.432 9.48.068 8.02 4.5 3.88zM16.5 6H11V4h5.5c2.209 0 4 1.791 4 4v8.45l2.068-1.93 1.364 1.46-4.432 4.14-4.432-4.14 1.364-1.46 2.068 1.93V8c0-1.1-.896-2-2-2z"></path></g>
 </svg>
 <span style="font-size: 12px; color:var(--x-text-secondary);">转发${forwardTypeText}</span>
 </div>

 <div style="padding: 12px;">
 <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 8px;">
 <img src="${message.forwardContent.user.avatar}" style="width: 24px; height: 24px; border-radius: 50%;">
 <div style="display: flex; align-items: center; gap: 4px; flex: 1; min-width: 0;">
 <span style="font-weight: 600; color:var(--x-text-primary); font-size: 14px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
 ${message.forwardContent.user.name}
 </span>
 <span style="color:var(--x-text-secondary); font-size: 13px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
 ${message.forwardContent.user.handle}
 </span>
 </div>
 </div>
 <div style="color:var(--x-text-primary); font-size: 14px; line-height: 1.4; word-wrap: break-word;">
 ${processContent(message.forwardContent.content || '无内容', { isOwn: false })}
 </div>
 ${
   message.forwardContent.image
     ? message.forwardContent.image.type === 'description'
       ? `
 <div style="margin-top: 8px; background-color:var(--x-bg-primary); border: 1px solid var(--x-border-color); border-radius: 8px; padding: 8px;">
 <div style="color:var(--x-text-secondary); font-size: 13px;">${message.forwardContent.image.content}</div>
 </div>
 `
       : `
 <div style="margin-top: 8px; border-radius: 8px; overflow: hidden;">
 <img src="${message.forwardContent.image.content}" style="max-width: 100%; max-height: 200px; border-radius: 8px;" alt="图片">
 </div>
 `
     : ''
 }
 ${
   message.forwardContent.time
     ? `
 <div style="color:var(--x-text-secondary); font-size: 12px; margin-top: 8px;">
 ${message.forwardContent.time}
 </div>
 `
     : ''
 }
 </div>
 </div>
 `;
    }
    // 🎯 粉丝群消息：气泡添加到contentWrapper；普通消息：气泡添加到messageEl
    if (isFanGroupMessage) {
      // 找到contentWrapper并添加气泡
      const senderInfoEl = messageEl.querySelector('div');
      const contentWrapper = senderInfoEl?.querySelector('div:nth-child(2)');
      if (contentWrapper) {
        contentWrapper.appendChild(bubbleEl);
      } else {
        messageEl.appendChild(bubbleEl);
      }
    } else {
      messageEl.appendChild(bubbleEl);
    }
    // 时间戳（只在showTime为true且isLastInGroup为true时显示）
    if (showTime && isLastInGroup) {
      const timestampEl = document.createElement('div');
      timestampEl.style.cssText = `
 font-size: 12px; color:var(--x-text-secondary); margin-top: 4px; padding: 0 4px;
`; // 如果有timestamp，动态计算显示时间；否则使用静态time字段
      if (message.timestamp) {
        timestampEl.textContent = formatMessageTime(message.timestamp);
      } else {
        timestampEl.textContent = message.time || '刚刚';
      }
      // 🎯 粉丝群消息：时间戳添加到contentWrapper；普通消息：时间戳添加到messageEl
      if (isFanGroupMessage) {
        const senderInfoEl = messageEl.querySelector('div');
        const contentWrapper = senderInfoEl?.querySelector('div:nth-child(2)');
        if (contentWrapper) {
          contentWrapper.appendChild(timestampEl);
        } else {
          messageEl.appendChild(timestampEl);
        }
      } else {
        messageEl.appendChild(timestampEl);
      }
    }
    return messageEl;
  }
  // 语音转文字切换
  window.toggleVoiceText = function (voiceId, voiceText) {
    const voiceEl = document.getElementById(voiceId);
    if (!voiceEl) return;
    const isShowingText = voiceEl.getAttribute('data-showing-text') === 'true';
    if (isShowingText) {
      // 切回语音图标
      voiceEl.innerHTML = voiceEl.getAttribute('data-original-html');
      voiceEl.setAttribute('data-showing-text', 'false');
    } else {
      // 保存原始HTML
      voiceEl.setAttribute('data-original-html', voiceEl.innerHTML); // 显示文字
      voiceEl.innerHTML = `<div style="padding: 4px;">${voiceText}</div>`;
      voiceEl.setAttribute('data-showing-text', 'true');
    }
  }; // 创建"正在输入中"气泡
  function createTypingIndicator() {
    const typingEl = document.createElement('div');
    typingEl.id = 'typing-indicator';
    typingEl.className = 'message-item';
    typingEl.style.cssText = `
 display: flex !important; flex-direction: column; align-items: flex-start; margin-bottom: 16px; opacity: 0; transform: translateY(10px); transition: all 0.3s ease; position: relative; z-index: 1;
`;
    const bubbleEl = document.createElement('div');
    bubbleEl.style.cssText = `
 padding: 12px 16px; border-radius: 18px; border-bottom-left-radius: 4px; background-color:var(--x-bg-secondary); display: flex; align-items: center; gap: 5px;
`; // 三个跳动的点
    for (let i = 0; i < 3; i++) {
      const dot = document.createElement('div');
      dot.style.cssText = `
 width: 8px; height: 8px; border-radius: 50%; background-color:var(--x-text-secondary); animation: typingBounce 1.4s infinite ease-in-out; animation-delay: ${
   i * 0.2
 }s; flex-shrink: 0; `;
      bubbleEl.appendChild(dot);
    }
    typingEl.appendChild(bubbleEl); // 添加动画样式（如果还没有）
    if (!document.getElementById('typing-animation-style')) {
      const style = document.createElement('style');
      style.id = 'typing-animation-style';
      style.textContent = `
 @keyframes typingBounce {
 0%, 60%, 100% {
 transform: translateY(0); opacity: 0.7; }
 30% {
 transform: translateY(-10px); opacity: 1; }
 }
 `;
      document.head.appendChild(style);
    }
    return typingEl;
  }
  // 显示"正在输入中"气泡
  function showTypingIndicator() {
    console.log('🔵 [正在输入] 开始显示气泡');
    const contentContainer = document.getElementById('message-detail-content');
    if (!contentContainer) {
      console.warn('⚠️ [正在输入] 找不到消息容器');
      return;
    }
    // 先移除可能存在的旧气泡
    let oldTypingIndicator = document.getElementById('typing-indicator');
    if (oldTypingIndicator) {
      console.log('⚠️ [正在输入] 检测到旧气泡，先移除');
      oldTypingIndicator.remove();
    }
    // 创建并添加新气泡
    console.log('✅ [正在输入] 创建气泡元素');
    const typingIndicator = createTypingIndicator();
    contentContainer.appendChild(typingIndicator);
    console.log('✅ [正在输入] 气泡已添加到DOM', typingIndicator); // 触发动画（使用 requestAnimationFrame 确保DOM更新后再触发）
    requestAnimationFrame(() => {
      requestAnimationFrame(() => {
        if (typingIndicator && typingIndicator.parentNode) {
          typingIndicator.style.opacity = '1';
          typingIndicator.style.transform = 'translateY(0)';
          console.log('✅ [正在输入] 气泡动画已触发');
        }
      });
    }); // 滚动到底部
    setTimeout(() => {
      const scrollable = document.getElementById('message-detail-scrollable');
      if (scrollable) {
        scrollable.scrollTo({
          top: scrollable.scrollHeight,
          behavior: 'smooth',
        });
        console.log('✅ [正在输入] 已滚动到底部');
      }
    }, 100);
  }
  // 隐藏"正在输入中"气泡
  function hideTypingIndicator() {
    console.log('🔴 [正在输入] 开始隐藏气泡');
    const typingIndicator = document.getElementById('typing-indicator');
    if (!typingIndicator) {
      console.log('⚠️ [正在输入] 气泡不存在，无需隐藏');
      return;
    }
    typingIndicator.style.opacity = '0';
    typingIndicator.style.transform = 'translateY(10px)';
    console.log('✅ [正在输入] 气泡开始淡出');
    setTimeout(() => {
      if (typingIndicator && typingIndicator.parentNode) {
        typingIndicator.remove();
        console.log('✅ [正在输入] 气泡已从DOM移除');
      }
    }, 300);
  }
  // 消息逐条弹出动画
  async function animateMessagesOneByOne(messageElements, delayBetween = 300) {
    for (let i = 0; i < messageElements.length; i++) {
      const messageEl = messageElements[i]; // 等待延迟
      await new Promise(resolve => setTimeout(resolve, delayBetween)); // 触发动画
      messageEl.style.transition = 'all 0.3s ease';
      messageEl.style.opacity = '1';
      messageEl.style.transform = 'translateY(0)'; // 滚动到底部
      const scrollable = document.getElementById('message-detail-scrollable');
      if (scrollable) {
        scrollable.scrollTo({
          top: scrollable.scrollHeight,
          behavior: 'smooth',
        });
      }
    }
  }
  // 分组连续的同方向消息
  function groupMessagesBySender(messages) {
    const groups = [];
    let currentGroup = [];
    let currentSenderId = null;
    messages.forEach((msg, index) => {
      // 🎯 粉丝群消息：按 senderId 分组
      // 普通私信：按 isOwn 分组
      const senderId = msg.senderId || (msg.isOwn ? 'user' : 'other');
      if (currentSenderId === null || currentSenderId === senderId) {
        // 同一发送者，加入当前组
        currentGroup.push({ message: msg, index });
        currentSenderId = senderId;
      } else {
        // 不同发送者，开始新组
        groups.push(currentGroup);
        currentGroup = [{ message: msg, index }];
        currentSenderId = senderId;
      }
    }); // 添加最后一组
    if (currentGroup.length > 0) {
      groups.push(currentGroup);
    }
    return groups;
  }
  // 通用的手机样式通知弹窗
  function showPhoneNotification(options) {
    const {
      title = '', // 标题
      message = '', // 消息内容
      avatar = null, // 右侧头像URL（可选）
      leftIcon = 'x', // 左侧图标类型: 'x' | 'custom' | null
      leftIconHtml = null, // 自定义左侧图标HTML
      duration = 3000, // 显示时长（毫秒）
      showTime = true, // 是否显示时间
    } = options; // 移除可能存在的旧通知
    const oldNotification = document.getElementById('phone-notification-popup');
    if (oldNotification) {
      oldNotification.remove();
    }
    // 创建通知容器
    const notification = document.createElement('div');
    notification.id = 'phone-notification-popup';
    notification.style.cssText = `
 position: fixed; top: -100px; left: 50%; transform: translateX(-50%); width: 90%; max-width: 400px; background: var(--x-bg-primary); border-radius: 16px; box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3); padding: 12px 16px; display: flex; align-items: center; gap: 12px; z-index: 10000; transition: all 0.4s cubic-bezier(0.34, 1.56, 0.64, 1); border: 1px solid var(--x-border-color); backdrop-filter: blur(20px); -webkit-backdrop-filter: blur(20px);
`; // 左侧图标
    if (leftIcon === 'x' || leftIconHtml) {
      const iconContainer = document.createElement('div');
      iconContainer.style.cssText = `
 width: 32px; height: 32px; background-color:#000; border-radius: 8px; display: flex; align-items: center; justify-content: center; flex-shrink: 0; `;
      if (leftIconHtml) {
        iconContainer.innerHTML = leftIconHtml;
      } else {
        // 默认X Logo
        iconContainer.innerHTML = `
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: #fff;">
 <g><path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"></path></g>
 </svg>
 `;
      }
      notification.appendChild(iconContainer);
    }
    // 内容区域
    const content = document.createElement('div');
    content.style.cssText = `
 flex: 1; min-width: 0;
`;
    let contentHtml = '';
    if (title) {
      contentHtml += `
 <div style="font-size: 13px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 2px; ">${title}</div>
 `;
    }
    if (message) {
      contentHtml += `
 <div style="font-size: 14px; color:var(--x-text-secondary); white-space: nowrap; overflow: hidden; text-overflow: ellipsis; ">${message}</div>
 `;
    }
    content.innerHTML = contentHtml;
    notification.appendChild(content); // 时间标签
    if (showTime) {
      const timeLabel = document.createElement('div');
      timeLabel.style.cssText = `
 font-size: 11px; color:var(--x-text-secondary); position: absolute; top: 12px; right: ${avatar ? '64px' : '16px'}; `;
      const now = new Date();
      const hours = now.getHours();
      const minutes = String(now.getMinutes()).padStart(2, '0');
      timeLabel.textContent = `${hours}:${minutes}`;
      notification.appendChild(timeLabel);
    }
    // 右侧头像（可选）
    if (avatar) {
      const avatarEl = document.createElement('img');
      avatarEl.src = avatar;
      avatarEl.style.cssText = `
 width: 40px; height: 40px; border-radius: 50%; object-fit: cover; flex-shrink: 0; `;
      notification.appendChild(avatarEl);
    }
    // 🔧 添加到 x-social-screen 内部以继承主题样式
    const xSocialScreen = document.getElementById('x-social-screen');
    const targetContainer = xSocialScreen || document.body;
    targetContainer.appendChild(notification); // 滑入动画
    requestAnimationFrame(() => {
      notification.style.top = '16px';
    }); // 自动滑出并移除
    setTimeout(() => {
      notification.style.top = '-100px';
      setTimeout(() => {
        if (notification.parentNode) {
          notification.remove();
        }
      }, 400);
    }, duration); // 点击通知关闭
    notification.onclick = () => {
      notification.style.top = '-100px';
      setTimeout(() => {
        if (notification.parentNode) {
          notification.remove();
        }
      }, 400);
    };
  }
  // 显示消息回复通知（便捷函数）
  function showMessageNotification(senderName, senderAvatar, messageCount) {
    const isEnglish = currentLanguage === 'en';
    const messageSuffix = isEnglish ? (messageCount > 1 ? ' messages' : ' message') : '条私信';
    showPhoneNotification({
      title: senderName,
      message: isEnglish ? `sent you ${messageCount}${messageSuffix}` : `回复了你 ${messageCount}${messageSuffix}`,
      avatar: senderAvatar,
      leftIcon: 'x',
    });
  }
  // 渲染日期分隔符
  function renderDateSeparator(date) {
    const separatorEl = document.createElement('div');
    separatorEl.style.cssText = `
 text-align: center; margin: 24px 0 16px;
`;
    separatorEl.innerHTML = `
 <span style="font-size: 13px; font-weight: 600; color:var(--x-text-primary); padding: 6px 12px; background-color:var(--x-bg-secondary); border-radius: 12px; ">${date}</span>
`;
    return separatorEl;
  }
  // ============================================
  // 转账功能
  // ============================================
  // 获取转账状态文字
  function getTransferStatusText(status, isUserSending) {
    if (!status || status === 'pending') {
      return 'PENDING';
    } else if (status === 'accepted') {
      return isUserSending ? 'SENT' : 'RECEIVED';
    } else if (status === 'rejected') {
      return 'REJECTED';
    }
    return 'PENDING';
  }
  // 获取转账金额文字
  function getTransferAmountText(status, isUserSending, amount) {
    if (!status || status === 'pending') {
      return `$${amount}`;
    } else if (status === 'accepted') {
      return `${isUserSending ? '-' : '+'}$${amount}`;
    } else if (status === 'rejected') {
      return `$${amount}`;
    }
    return `$${amount}`;
  }
  // 获取转账状态图标
  function getTransferStatusIcon(status, isLightMode) {
    const iconColor = isLightMode ? '#666666' : '#cccccc';
    if (!status || status === 'pending') {
      // 待处理 - 时钟图标
      return `
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: ${iconColor};">
 <g><path d="M12,2C6.486,2,2,6.486,2,12s4.486,10,10,10s10-4.486,10-10S17.514,2,12,2z M12,20c-4.411,0-8-3.589-8-8 s3.589-8,8-8s8,3.589,8,8S16.411,20,12,20z"></path><path d="M13,7h-2v5.414l3.293,3.293l1.414-1.414L13,11.586V7z"></path></g>
 </svg>
 `;
    } else if (status === 'accepted') {
      // 已接收 - 对勾图标
      return `
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: ${iconColor};">
 <g><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"></path></g>
 </svg>
 `;
    } else if (status === 'rejected') {
      // 已拒绝 - X图标
      return `
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: ${iconColor};">
 <g><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11H7v-2h10v2z"></path></g>
 </svg>
 `;
    }
    // 默认返回时钟图标
    return `
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: ${iconColor};">
 <g><path d="M12,2C6.486,2,2,6.486,2,12s4.486,10,10,10s10-4.486,10-10S17.514,2,12,2z M12,20c-4.411,0-8-3.589-8-8 s3.589-8,8-8s8,3.589,8,8S16.411,20,12,20z"></path><path d="M13,7h-2v5.414l3.293,3.293l1.414-1.414L13,11.586V7z"></path></g>
 </svg>
`;
  }
  // ============================================
  // 商业转账辅助函数
  // ============================================
  // 保存商业转账记录到数据库
  async function saveBusinessTransfer(businessTransferData) {
    try {
      const xDb = getXDB();
      const businessTransfersId = `businessTransfers_${currentAccountId || 'main'}`; // 获取现有的商业转账列表
      let savedData = await xDb.xAccountProfiles.get(businessTransfersId);
      if (!savedData) {
        savedData = {
          handle: businessTransfersId,
          name: 'businessTransfers',
          accountId: currentAccountId || 'main',
          data: [],
          updatedAt: new Date().toISOString(),
        };
      }
      // 添加新的商业转账记录
      savedData.data.push({
        ...businessTransferData,
        savedAt: new Date().toISOString(),
      }); // 保存到数据库
      await xDb.xAccountProfiles.put(savedData);
      console.log('✅ 商业转账已保存:', businessTransferData.transferId);
    } catch (error) {
      console.error('❌ 保存商业转账失败:', error);
    }
  }
  // 处理商业转账任务
  async function handleBusinessTransferTask(transferMessage, conversationData) {
    try {
      console.log('💼 [商业转账] 开始处理任务:', transferMessage.taskDescription); // 检测任务关键词
      const postKeywords = [
        '发帖',
        '发推',
        '发推特',
        '发推文',
        '发tweet',
        '发条推',
        '发个帖',
        '发条帖',
        '发个推',
        '发一条',
        '发布推文',
        '发布帖子',
        'post',
        'tweet',
        'tweeted',
        'posting',
        'gonna post',
        'will post',
        'going to post',
        'publish',
        'share on x',
        'share on twitter',
        '发到X上',
        '发到推特',
        '发到平台',
        '分享到X',
        '晒到X',
        '宣传',
        '推广',
        '广告',
      ];
      const taskDesc = transferMessage.taskDescription.toLowerCase();
      const hasPostTask = postKeywords.some(keyword => taskDesc.includes(keyword.toLowerCase()));
      if (!hasPostTask) {
        console.log('⏭️ [商业转账] 任务不包含发推关键词，跳过');
        return;
      }
      console.log('✅ [商业转账] 检测到发推任务'); // 80%概率完成任务
      const willComplete = Math.random() < 0.8;
      if (!willComplete) {
        console.log('❌ [商业转账] AI决定不完成任务（20%概率）');
        return;
      }
      console.log('✅ [商业转账] AI决定完成任务，正在生成推文...'); // 🎭 检测是否"反水"（基于角色/账户特质）
      const xDb = getXDB();
      let willBetray = false;
      let betrayalReason = '';
      try {
        // 获取角色/账户的详细资料
        const senderProfile = await StringBuilders.getUnifiedProfile(conversationData.user.handle, {
          userProfileInfo: StringBuilders.buildUserXProfileInfo(window.userProfileData),
        });
        if (senderProfile) {
          // 计算反水概率
          let betrayalChance = 0.1; // 基础10%
          // 1. 角色类型因素
          if (senderProfile.type === 'character') {
            const cd = senderProfile.characterData; // 检查性格关键词
            const aiPersona = (cd.aiPersona || '').toLowerCase();
            const rebelliousKeywords = [
              '叛逆',
              '狡猾',
              '冷漠',
              '自私',
              '腹黑',
              '毒舌',
              '刻薄',
              '傲慢',
              '高傲',
              '不羁',
              '反叛',
              'rebellious',
              'cunning',
              'selfish',
              'cold',
              'arrogant',
              'sarcastic',
            ];
            const hasRebelliousTraits = rebelliousKeywords.some(keyword => aiPersona.includes(keyword));
            if (hasRebelliousTraits) {
              betrayalChance += 0.15;
              betrayalReason = '角色性格叛逆/不友好';
              console.log('🎭 [反水检测] 角色性格因素 +15%');
            }
            // 检查与用户的关系
            if (!senderProfile.knowsUserIdentity) {
              betrayalChance += 0.1;
              betrayalReason += (betrayalReason ? '，' : '') + '不认识用户';
              console.log('🎭 [反水检测] 陌生关系 +10%');
            } else if (cd.userPersona) {
              // 检查用户人设中的关系描述
              const userPersonaLower = cd.userPersona.toLowerCase();
              const negativeRelationships = [
                '敌人',
                '对手',
                '仇人',
                '讨厌',
                '不喜欢',
                '矛盾',
                '竞争',
                'enemy',
                'rival',
                'dislike',
                'hate',
              ];
              const hasBadRelationship = negativeRelationships.some(keyword => userPersonaLower.includes(keyword));
              if (hasBadRelationship) {
                betrayalChance += 0.2;
                betrayalReason += (betrayalReason ? '，' : '') + '与用户关系不好';
                console.log('🎭 [反水检测] 负面关系 +20%');
              }
            }
          } else if (senderProfile.type === 'stranger' || senderProfile.type === 'account') {
            // 路人/营销号更可能反水
            betrayalChance += 0.05;
            betrayalReason = '非绑定角色类型';
            console.log('🎭 [反水检测] 路人/账号类型 +5%');
          }
          console.log(`🎭 [反水检测] 最终反水概率: ${(betrayalChance * 100).toFixed(0)}%`); // 判断是否反水
          willBetray = Math.random() < betrayalChance;
          if (willBetray) {
            console.log(`🔥 [商业转账] AI决定反水！原因: ${betrayalReason}`);
          }
        }
      } catch (error) {
        console.error('🎭 [反水检测] 获取资料失败，使用默认概率:', error);
        willBetray = Math.random() < 0.1; // 默认10%
      }
      // 使用现有的推文生成器，传入任务描述作为上下文
      const contextMessages = [
        {
          type: 'text',
          content: willBetray
            ? `用户花钱让我发推广，但我准备反水揭露这件事或者发负面内容。任务要求：${transferMessage.taskDescription}`
            : `我需要完成一个商业任务：${transferMessage.taskDescription}`,
          isOwn: false,
          time: '最近',
          _isBetrayal: willBetray, // 内部标记
          _betrayalReason: betrayalReason,
        },
      ];
      const messageData = {
        id: conversationData.id,
        user: conversationData.user,
        _isBusinessBetrayal: willBetray, // 传递给生成器
      }; // 调用推文生成器
      const tweetData = await generateTweetFromConversation(messageData, contextMessages);
      if (!tweetData) {
        console.log('⚠️ [商业转账] 推文生成失败');
        return;
      }
      // 创建 New Tweet 通知
      const timestamp = Date.now();
      const newTweetNotification = {
        id: `mention_business_${timestamp}`,
        type: 'newTweet',
        user: conversationData.user,
        content: willBetray
          ? `⚠️ ${conversationData.user.name} 反水了！`
          : `New Tweet from ${conversationData.user.name}`,
        time: '刚刚',
        timestamp: timestamp,
        tweet: tweetData,
        fromBusinessTransfer: true, // 标记来自商业转账
        businessTransferId: transferMessage.timestamp,
        isBetrayal: willBetray, // 标记是否反水
        betrayalReason: betrayalReason,
      }; // 保存到 Mentions 数据库
      // const xDb = getXDB(); // 已在上面声明
      const mentionsDataId = `mentions_${currentAccountId || 'main'}`;
      let savedMentions = await xDb.xAccountProfiles.get(mentionsDataId);
      if (!savedMentions) {
        savedMentions = {
          handle: mentionsDataId,
          id: mentionsDataId,
          data: [],
        };
      }
      savedMentions.data.unshift(newTweetNotification);
      await xDb.xAccountProfiles.put(savedMentions); // 将推文添加到发推者的账户主页
      await addTweetToAccountProfile(conversationData.user.handle, tweetData);
      console.log(`✅ [商业转账] 推文已生成并发布${willBetray ? '（反水）' : ''}`); // 显示手机样式通知
      const isEnglish = currentLanguage === 'en';
      showPhoneNotification({
        title: willBetray ? '⚠️ 商业推广反水' : 'X',
        message: willBetray
          ? isEnglish
            ? `${conversationData.user.name} betrayed and posted a negative tweet!`
            : `${conversationData.user.name} 反水了！发布了负面/揭露内容`
          : isEnglish
          ? `${conversationData.user.name} completed the business task and posted a tweet!`
          : `${conversationData.user.name} 完成了商业任务并发布了推文！`,
        avatar: conversationData.user.avatar,
        leftIcon: willBetray ? 'custom' : 'x',
        leftIconHtml: willBetray
          ? `
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: #ef4444;">
 <g><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"></path></g>
 </svg>
 `
          : undefined,
      }); // 如果当前在 Mentions 页面，刷新显示
      const mentionsPage = document.getElementById('x-notifications-page');
      if (mentionsPage && mentionsPage.style.display === 'flex') {
        await loadNotifications();
      } else {
        // 显示提醒点
        showNavNotificationDot('notifications');
      }
    } catch (error) {
      console.error('❌ [商业转账] 任务处理失败:', error);
    }
  }
  // 打开转账弹窗
  window.openTransferDialog = function () {
    const dialog = document.getElementById('transfer-dialog');
    if (dialog) {
      dialog.style.display = 'flex'; // 清空输入
      const amountInput = document.getElementById('transfer-amount-input');
      const noteInput = document.getElementById('transfer-note-input');
      const counter = document.getElementById('transfer-note-counter');
      if (amountInput) amountInput.value = '';
      if (noteInput) noteInput.value = '';
      if (counter) counter.textContent = '0 / 100'; // 聚焦到金额输入框
      setTimeout(() => {
        if (amountInput) amountInput.focus();
      }, 100);
    }
  }; // 关闭转账弹窗
  window.closeTransferDialog = function () {
    const dialog = document.getElementById('transfer-dialog');
    if (dialog) {
      dialog.style.display = 'none'; // 重置表单到普通转账
      setTimeout(() => {
        switchTransferType('normal'); // 清空所有输入
        const amountInput = document.getElementById('transfer-amount-input');
        const noteInput = document.getElementById('transfer-note-input');
        const taskDescInput = document.getElementById('transfer-task-description');
        const taskDeadlineInput = document.getElementById('transfer-task-deadline');
        const depositRatioInput = document.getElementById('transfer-deposit-ratio');
        if (amountInput) amountInput.value = '';
        if (noteInput) noteInput.value = '';
        if (taskDescInput) taskDescInput.value = '';
        if (taskDeadlineInput) taskDeadlineInput.value = '24';
        if (depositRatioInput) depositRatioInput.value = '20'; // 重置计数器
        const noteCounter = document.getElementById('transfer-note-counter');
        const taskCounter = document.getElementById('transfer-task-counter');
        if (noteCounter) noteCounter.textContent = '0 / 100';
        if (taskCounter) taskCounter.textContent = '0 / 500';
      }, 200);
    }
  }; // 更新转账备注字符计数
  window.updateTransferNoteCounter = function () {
    const noteInput = document.getElementById('transfer-note-input');
    const noteCounter = document.getElementById('transfer-note-counter');
    if (noteInput && noteCounter) {
      noteCounter.textContent = `${noteInput.value.length} / 100`;
    }
  }; // 更新任务描述字符计数
  window.updateTaskDescriptionCounter = function () {
    const taskInput = document.getElementById('transfer-task-description');
    const taskCounter = document.getElementById('transfer-task-counter');
    if (taskInput && taskCounter) {
      taskCounter.textContent = `${taskInput.value.length} / 500`;
    }
  }; // 切换转账类型
  window.switchTransferType = function (type) {
    const normalBtn = document.getElementById('transfer-type-normal-btn');
    const businessBtn = document.getElementById('transfer-type-business-btn');
    const businessSection = document.getElementById('business-transfer-section');
    if (!normalBtn || !businessBtn || !businessSection) return;
    if (type === 'business') {
      // 切换到商业转账
      normalBtn.style.backgroundColor = 'transparent';
      normalBtn.style.color = 'var(--x-text-primary)';
      businessBtn.style.backgroundColor = 'var(--x-accent)';
      businessBtn.style.color = '#fff';
      businessSection.style.display = 'block';
    } else {
      // 切换到普通转账
      normalBtn.style.backgroundColor = 'var(--x-accent)';
      normalBtn.style.color = '#fff';
      businessBtn.style.backgroundColor = 'transparent';
      businessBtn.style.color = 'var(--x-text-primary)';
      businessSection.style.display = 'none';
    }
  }; // 发送转账
  window.sendTransfer = async function () {
    const amountInput = document.getElementById('transfer-amount-input');
    const noteInput = document.getElementById('transfer-note-input');
    if (!amountInput || !noteInput) return;
    const amount = parseFloat(amountInput.value);
    const note = noteInput.value.trim();
    if (amount <= 0 || amount > 9999999) {
      showXToast('请输入有效金额（0.01 - 9,999,999）', 'error');
      return;
    }
    // 检查是否是商业转账
    const businessSection = document.getElementById('business-transfer-section');
    const isBusiness = businessSection && businessSection.style.display !== 'none';
    let businessData = null;
    if (isBusiness) {
      // 验证商业转账必填字段
      const taskDescription = document.getElementById('transfer-task-description')?.value.trim();
      const taskDeadline = document.getElementById('transfer-task-deadline')?.value;
      const depositRatio = parseFloat(document.getElementById('transfer-deposit-ratio')?.value || 20);
      if (!taskDescription) {
        showXToast('请填写任务描述', 'error');
        return;
      }
      if (!taskDeadline || taskDeadline < 1) {
        showXToast('请设置有效的任务期限', 'error');
        return;
      }
      // 计算定金和尾款
      const depositAmount = (amount * depositRatio) / 100;
      const remainingAmount = amount - depositAmount;
      const deadlineDate = new Date(Date.now() + taskDeadline * 60 * 60 * 1000); // 转换为毫秒
      businessData = {
        isBusiness: true,
        taskDescription: taskDescription,
        taskDeadline: deadlineDate.toISOString(),
        taskDeadlineHours: parseInt(taskDeadline),
        depositRatio: depositRatio,
        depositAmount: depositAmount.toFixed(2),
        remainingAmount: remainingAmount.toFixed(2),
        taskStatus: 'pending', // pending, in_progress, completed, failed
        taskProgress: 0, // 0-100
      };
    }
    // 检查钱包余额
    await loadWalletData();
    if (!walletData.isActivated) {
      showXToast('请先激活钱包', 'error');
      return;
    }
    const actualDeduction = isBusiness ? parseFloat(businessData.depositAmount) : amount;
    if (walletData.balance < actualDeduction) {
      showXToast('钱包余额不足', 'error');
      return;
    }
    try {
      // 扣除余额（商业转账只扣定金）
      walletData.balance -= actualDeduction; // 添加交易记录
      const recipientName = currentMessageConversation?.user?.name || '对方';
      const transactionDesc = isBusiness
        ? `商业转账给 ${recipientName}（定金 ${businessData.depositRatio}%）${note ? ` - ${note}` : ''}`
        : `转账给 ${recipientName}${note ? ` - ${note}` : ''}`;
      const transaction = {
        id: 'transfer_out_' + Date.now(),
        description: transactionDesc,
        amount: -actualDeduction,
        timestamp: new Date().toISOString(),
        type: isBusiness ? 'business_transfer_deposit' : 'transfer_out',
      };
      walletData.transactions.unshift(transaction); // 保存钱包数据
      await saveWalletData();
      console.log('💰 钱包余额已扣除:', actualDeduction, '剩余余额:', walletData.balance); // 创建转账消息对象
      const transferMessage = {
        type: 'transfer',
        amount: amount.toFixed(2),
        note: note || null,
        status: 'pending', // 默认状态为待接收
        timestamp: new Date().toISOString(),
        isOwn: true,
        ...businessData, // 如果是商业转账，添加商业数据
      }; // 添加到消息队列
      userMessageQueue.push(transferMessage); // 渲染到界面
      const contentContainer = document.getElementById('message-detail-content');
      if (contentContainer) {
        const messageEl = renderMessageItem(transferMessage, true, undefined, true, true);
        contentContainer.appendChild(messageEl); // 动画显示
        requestAnimationFrame(() => {
          messageEl.style.opacity = '1';
          messageEl.style.transform = 'translateY(0)';
        }); // 滚动到底部
        setTimeout(() => {
          const scrollable = document.getElementById('message-detail-scrollable');
          if (scrollable) {
            scrollable.scrollTop = scrollable.scrollHeight;
          }
        }, 100);
      }
      // 保存到数据库
      saveUserMessageToDB(transferMessage); // 如果是商业转账，保存到商业转账数据库
      if (isBusiness && currentMessageConversation) {
        // 确保获取到正确的接收者信息
        const receiverName =
          currentMessageConversation.user?.name || currentMessageConversation.userName || recipientName;
        const receiverHandle =
          currentMessageConversation.user?.handle || currentMessageConversation.userHandle || 'unknown';
        const receiverAvatar =
          currentMessageConversation.user?.avatar ||
          currentMessageConversation.userAvatar ||
          'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg';
        await saveBusinessTransfer({
          ...transferMessage,
          transferId: transferMessage.timestamp,
          conversationId: currentMessageConversation.id,
          senderName: receiverName,
          senderHandle: receiverHandle,
          senderAvatar: receiverAvatar,
          direction: 'sent', // 发出的商业转账
          createdAt: transferMessage.timestamp,
        });
        console.log('💼 商业转账已记录到数据库（发出方）:', receiverName);
      }
      // 关闭弹窗
      closeTransferDialog();
      console.log('✅ 转账消息已发送:', transferMessage);
      const toastMsg = isBusiness
        ? `商业转账已发送 (-$${actualDeduction.toFixed(2)} 定金)`
        : `转账已发送 (-$${amount.toFixed(2)})`;
      showXToast(toastMsg, 'success');
    } catch (error) {
      console.error('转账处理失败:', error);
      showXToast('转账失败: ' + error.message, 'error');
    }
  }; // 打开转账详情弹窗
  window.openTransferDetails = function (transferData, isOwn) {
    const modal = document.getElementById('transfer-details-modal');
    const content = document.getElementById('transfer-details-content');
    if (!modal || !content) return; // 获取当前主题
    const xSocialScreen = document.getElementById('x-social-screen');
    const isLightMode = xSocialScreen && xSocialScreen.classList.contains('x-theme-light'); // 确保商业转账的字段完整
    if (transferData.isBusiness && (!transferData.depositAmount || !transferData.remainingAmount)) {
      const totalAmount = parseFloat(transferData.amount || 0);
      const depositRatio = parseFloat(transferData.depositRatio || 0);
      transferData.depositAmount = ((totalAmount * depositRatio) / 100).toFixed(2);
      transferData.remainingAmount = (totalAmount - parseFloat(transferData.depositAmount)).toFixed(2); // 如果没有任务期限，根据任务期限小时数计算
      if (!transferData.taskDeadline && transferData.taskDeadlineHours) {
        const createdAt = new Date(transferData.timestamp || Date.now());
        const deadlineMs = createdAt.getTime() + parseFloat(transferData.taskDeadlineHours) * 60 * 60 * 1000;
        transferData.taskDeadline = new Date(deadlineMs).toISOString();
      }
    }
    const amount = parseFloat(transferData.amount || 0).toFixed(2);
    const status = transferData.status || 'pending';
    const note = transferData.note || '';
    const time = transferData.time || formatMessageTime(transferData.timestamp); // 生成票根样式的转账详情
    content.innerHTML = renderTransferTicket(transferData, isOwn, isLightMode); // 添加按钮事件监听器
    const acceptBtn = document.getElementById('accept-transfer-btn');
    const rejectBtn = document.getElementById('reject-transfer-btn');
    const completeTaskBtn = document.getElementById('complete-task-btn');
    if (acceptBtn) {
      acceptBtn.onclick = () => acceptTransfer(transferData.timestamp);
    }
    if (rejectBtn) {
      rejectBtn.onclick = () => rejectTransfer(transferData.timestamp);
    }
    if (completeTaskBtn) {
      completeTaskBtn.onclick = () => completeBusinessTask(transferData.timestamp);
    }
    modal.style.display = 'flex';
  }; // 关闭转账详情弹窗
  window.closeTransferDetails = function () {
    const modal = document.getElementById('transfer-details-modal');
    if (modal) {
      modal.style.display = 'none';
    }
  }; // 渲染票根样式的转账详情
  function renderTransferTicket(transferData, isOwn, isLightMode) {
    const amount = parseFloat(transferData.amount || 0).toFixed(2);
    const status = transferData.status || 'pending';
    const note = transferData.note || '';
    const time = transferData.time || formatMessageTime(transferData.timestamp); // 判断是否是商业转账
    const isBusiness = transferData.isBusiness === true;
    const businessData = isBusiness ? transferData : null;
    const isPending = status === 'pending';
    const canUserAction = !isOwn && isPending; // 只有收到的待处理转账可以操作
    // 商业转账：计算期限剩余时间
    let deadlineText = '';
    let isExpired = false;
    if (isBusiness && businessData.taskDeadline) {
      const deadline = new Date(businessData.taskDeadline);
      const now = new Date();
      const remainingMs = deadline.getTime() - now.getTime();
      if (remainingMs > 0) {
        const hours = Math.floor(remainingMs / (1000 * 60 * 60));
        const minutes = Math.floor((remainingMs % (1000 * 60 * 60)) / (1000 * 60));
        deadlineText = hours > 0 ? `${hours}小时${minutes}分钟` : `${minutes}分钟`;
      } else {
        deadlineText = '已过期';
        isExpired = true;
      }
    }
    // 商业转账：显示定金金额而不是总金额
    const displayAmount = isBusiness ? parseFloat(businessData.depositAmount || 0).toFixed(2) : amount;
    return `
 <div style="background-color: ${
   isLightMode ? '#ffffff' : '#1f1f1f'
 }; position: relative; overflow: hidden; max-height: 80vh; display: flex; flex-direction: column; ">

 <div style="flex: 1; overflow-y: auto; overflow-x: hidden; ">

 <div style="padding: 24px 20px 16px; background-color: ${isLightMode ? '#ffffff' : '#1f1f1f'}; position: relative; ">

 <div onclick="closeTransferDetails()" style="position: absolute; top: 16px; right: 16px; cursor: pointer; padding: 4px; border-radius: 50%; transition: background-color 0.2s; z-index: 10; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: var(--x-text-primary);">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </div>

 <div style="text-align: center; font-size: 18px; font-weight: 700; color: ${
   isLightMode ? '#1a1a1a' : '#e5e5e5'
 }; margin-bottom: 8px; ">${isBusiness ? '商业转账详情' : '转账详情'}</div>

 ${
   isBusiness
     ? `
 <div style="text-align: center; margin-bottom: 12px; ">
 <span style="display: inline-block; padding: 4px 12px; background: linear-gradient(135deg, ${
   isLightMode ? 'rgba(0, 0, 0, 0.1)' : 'rgba(255, 255, 255, 0.15)'
 } 0%, ${isLightMode ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.08)'} 100%); color: ${
         isLightMode ? '#1a1a1a' : '#e5e5e5'
       }; font-size: 11px; font-weight: 600; border-radius: 12px; letter-spacing: 0.5px; border: 1px solid ${
         isLightMode ? 'rgba(0, 0, 0, 0.15)' : 'rgba(255, 255, 255, 0.2)'
       }; ">BUSINESS</span>
 </div>
 `
     : ''
 }
 <div style="text-align: center; font-size: 12px; color: ${
   isLightMode ? '#888888' : '#aaaaaa'
 }; text-transform: uppercase; letter-spacing: 1px; margin-bottom: 20px; ">${getTransferStatusText(status, isOwn)}</div>

 <div style="text-align: center; font-size: 32px; font-weight: 700; color: ${
   isLightMode ? '#1a1a1a' : '#e5e5e5'
 }; margin-bottom: ${isBusiness ? '8px' : '16px'}; ">
 ${getTransferAmountText(status, isOwn, displayAmount)}
 </div>

 ${
   isBusiness
     ? `
 <div style="text-align: center; font-size: 12px; color: ${
   isLightMode ? '#888888' : '#aaaaaa'
 }; margin-bottom: 16px; ">定金 ${businessData.depositRatio}%</div>
 `
     : ''
 }

 ${
   note
     ? `
 <div style="text-align: center; font-size: 14px; color: ${
   isLightMode ? '#666666' : '#999999'
 }; margin-bottom: 16px; padding: 8px 16px; background-color: ${
         isLightMode ? '#f5f5f5' : '#2d2d2d'
       }; border-radius: 8px; ">"${note}"</div>
 `
     : ''
 }

 <div style="position: absolute; top: 50%; right: -40px; transform: translateY(-50%) rotate(15deg); font-size: 48px; color: ${
   isLightMode ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)'
 }; font-weight: 700; pointer-events: none; white-space: nowrap; ">${isBusiness ? 'BUSINESS' : 'TRANSFER'}</div>
 </div>

 <div style="height: 20px; background: linear-gradient(90deg,
 ${isLightMode ? '#ffffff' : '#1f1f1f'} 10px,
 transparent 10px,
 transparent 20px,
 ${isLightMode ? '#ffffff' : '#1f1f1f'} 20px
 ); background-size: 20px 100%; position: relative; ">
 <div style="position: absolute; left: -10px; top: 50%; transform: translateY(-50%); width: 20px; height: 20px; border-radius: 50%; background-color: rgba(0, 0, 0, 0.5); "></div>
 <div style="position: absolute; right: -10px; top: 50%; transform: translateY(-50%); width: 20px; height: 20px; border-radius: 50%; background-color: rgba(0, 0, 0, 0.5); "></div>
 </div>

 <div style="padding: 16px 20px 20px; background-color: ${isLightMode ? '#ffffff' : '#1f1f1f'}; ">

 ${
   isBusiness
     ? `
 <div style="margin-bottom: 16px; padding: 12px; background-color: ${
   isLightMode ? '#f8f9fa' : '#2a2a2a'
 }; border: 1px solid ${isLightMode ? '#e1e8ed' : '#38444d'}; border-radius: 8px; ">
 <div style="font-size: 12px; font-weight: 600; color: ${
   isLightMode ? '#666666' : '#999999'
 }; margin-bottom: 8px; text-transform: uppercase; letter-spacing: 0.5px; display: flex; align-items: center; gap: 6px; ">
 <svg viewBox="0 0 24 24" style="width: 14px; height: 14px; fill: currentColor;">
 <g><path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm2 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"></path></g>
 </svg>
 任务要求
 </div>
 <div style="font-size: 14px; color: ${
   isLightMode ? '#1a1a1a' : '#e5e5e5'
 }; line-height: 1.5; margin-bottom: 12px; white-space: pre-wrap; word-wrap: break-word; ">${
         businessData.taskDescription
       }</div>
 <div style="display: flex; justify-content: space-between; align-items: center; padding-top: 8px; border-top: 1px solid ${
   isLightMode ? '#e1e8ed' : '#38444d'
 }; ">
 <span style="font-size: 12px; color: ${
   isLightMode ? '#666666' : '#999999'
 }; display: flex; align-items: center; gap: 4px; ">
 <svg viewBox="0 0 24 24" style="width: 12px; height: 12px; fill: currentColor;">
 <g><path d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm.5-13H11v6l5.2 3.2.8-1.3-4.5-2.7V7z"></path></g>
 </svg>
 任务期限
 </span>
 <span style="font-size: 13px; font-weight: 600; color: ${
   isExpired ? '#dc2626' : isLightMode ? '#1a1a1a' : '#e5e5e5'
 }; ">${deadlineText}</span>
 </div>
 </div>

 <div style="margin-bottom: 16px; padding: 12px; background-color: ${
   isLightMode ? '#f8f9fa' : '#2a2a2a'
 }; border: 1px solid ${isLightMode ? '#e1e8ed' : '#38444d'}; border-radius: 8px; ">
 <div style="font-size: 12px; font-weight: 600; color: ${
   isLightMode ? '#666666' : '#999999'
 }; margin-bottom: 8px; text-transform: uppercase; letter-spacing: 0.5px; display: flex; align-items: center; gap: 6px; ">
 <svg viewBox="0 0 24 24" style="width: 14px; height: 14px; fill: currentColor;">
 <g><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm.31-8.86c-1.77-.45-2.34-.94-2.34-1.67 0-.84.79-1.43 2.1-1.43 1.38 0 1.9.66 1.94 1.64h1.71c-.05-1.34-.87-2.57-2.49-2.97V5H10.9v1.69c-1.51.32-2.72 1.3-2.72 2.81 0 1.79 1.49 2.69 3.66 3.21 1.95.46 2.34 1.15 2.34 1.87 0 .53-.39 1.39-2.1 1.39-1.6 0-2.23-.72-2.32-1.64H8.04c.1 1.7 1.36 2.66 2.86 2.97V19h2.34v-1.67c1.52-.29 2.72-1.16 2.73-2.77-.01-2.2-1.9-2.96-3.66-3.42z"></path></g>
 </svg>
 金额明细
 </div>
 <div style="display: flex; justify-content: space-between; margin-bottom: 6px; ">
 <span style="font-size: 13px; color: ${isLightMode ? '#666666' : '#999999'};">总金额</span>
 <span style="font-size: 13px; color: ${isLightMode ? '#1a1a1a' : '#e5e5e5'}; font-weight: 600;">$${amount}</span>
 </div>
 <div style="display: flex; justify-content: space-between; margin-bottom: 6px; ">
 <span style="font-size: 13px; color: ${isLightMode ? '#666666' : '#999999'};">定金 (${
         businessData.depositRatio || 0
       }%)</span>
 <span style="font-size: 13px; color: var(--x-accent); font-weight: 600;">$${parseFloat(
   businessData.depositAmount || 0,
 ).toFixed(2)}</span>
 </div>
 <div style="display: flex; justify-content: space-between; padding-top: 6px; border-top: 1px solid ${
   isLightMode ? '#e1e8ed' : '#38444d'
 }; ">
 <span style="font-size: 13px; color: ${isLightMode ? '#666666' : '#999999'};">尾款</span>
 <span style="font-size: 13px; color: ${isLightMode ? '#1a1a1a' : '#e5e5e5'}; font-weight: 600;">$${parseFloat(
         businessData.remainingAmount || 0,
       ).toFixed(2)}</span>
 </div>
 </div>
 `
     : ''
 }

 <div style="display: flex; justify-content: space-between; margin-bottom: 12px; ">
 <span style="color: ${isLightMode ? '#666666' : '#999999'}; font-size: 13px;">转账时间</span>
 <span style="color: ${isLightMode ? '#1a1a1a' : '#e5e5e5'}; font-size: 13px;">${time}</span>
 </div>
 <div style="display: flex; justify-content: space-between; margin-bottom: 12px; ">
 <span style="color: ${isLightMode ? '#666666' : '#999999'}; font-size: 13px;">${
      isBusiness ? '任务状态' : '转账状态'
    }</span>
 <span style="color: ${isLightMode ? '#1a1a1a' : '#e5e5e5'}; font-size: 13px;">
 ${status === 'pending' ? '待处理' : status === 'accepted' ? '已完成' : '已拒绝'}
 </span>
 </div>

 <div style="text-align: center; margin: 16px 0; padding: 8px 0; border-top: 1px solid ${
   isLightMode ? '#eeeeee' : '#333333'
 }; ">
 <div style="font-family: monospace; font-size: 24px; color: ${
   isLightMode ? '#1a1a1a' : '#e5e5e5'
 }; letter-spacing: 2px; margin-bottom: 4px; ">||||||||||||| ${Math.random().toString().slice(2, 13)}</div>
 <div style="font-size: 11px; color: ${isLightMode ? '#888888' : '#aaaaaa'}; ">${
      isBusiness ? 'BUSINESS' : 'TRANSFER'
    } ID: ${transferData.timestamp ? new Date(transferData.timestamp).getTime() : Date.now()}</div>
 </div>
 </div>
 </div>

 ${
   canUserAction
     ? `
 <div style="padding: 16px 20px; background-color: ${isLightMode ? '#ffffff' : '#1f1f1f'}; border-top: 1px solid ${
         isLightMode ? '#eeeeee' : '#333333'
       }; ">
 ${
   isBusiness
     ? `
 <div style="font-size: 12px; color: ${
   isLightMode ? '#888888' : '#aaaaaa'
 }; text-align: center; margin-bottom: 12px; line-height: 1.4; ">接收此商业转账即表示同意完成任务要求</div>
 `
     : ''
 }
 <div style="display: flex; gap: 12px; ">
 <button id="reject-transfer-btn" style="flex: 1; padding: 12px; border: 1px solid ${
   isLightMode ? '#dc2626' : '#ef4444'
 }; color: ${
         isLightMode ? '#dc2626' : '#ef4444'
       }; background: transparent; border-radius: 8px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='${
         isLightMode ? '#fef2f2' : '#1f1416'
       }'"
 onmouseout="this.style.backgroundColor='transparent'">
 拒绝
 </button>
 <button id="accept-transfer-btn" style="flex: 1; padding: 12px; border: none; color: #ffffff; background: var(--x-accent); border-radius: 8px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.opacity='0.9'"
 onmouseout="this.style.opacity='1'">
 ${isBusiness ? '接受任务' : '接收'}
 </button>
 </div>
 </div>
 `
     : ''
 }
 ${
   // 用户发出的已接受商业转账：显示"确认完成任务"按钮
   isOwn && isBusiness && status === 'accepted' && businessData.taskStatus === 'in_progress'
     ? `
 <div style="padding: 16px 20px; background-color: ${isLightMode ? '#ffffff' : '#1f1f1f'}; border-top: 1px solid ${
         isLightMode ? '#eeeeee' : '#333333'
       }; ">
 <div style="font-size: 12px; color: ${
   isLightMode ? '#888888' : '#aaaaaa'
 }; text-align: center; margin-bottom: 12px; line-height: 1.4; ">验收任务完成情况，确认后将支付剩余尾款</div>
 <button id="complete-task-btn" style="width: 100%; padding: 12px; border: 1px solid ${
   isLightMode ? 'rgba(0, 0, 0, 0.2)' : 'rgba(255, 255, 255, 0.2)'
 }; color: ${isLightMode ? '#0f1419' : '#ffffff'}; background: linear-gradient(135deg, ${
         isLightMode ? 'rgba(0, 0, 0, 0.08)' : 'rgba(255, 255, 255, 0.12)'
       } 0%, ${
         isLightMode ? 'rgba(0, 0, 0, 0.04)' : 'rgba(255, 255, 255, 0.06)'
       } 100%); border-radius: 8px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.2s; display: flex; align-items: center; justify-content: center; gap: 8px; " onmouseover="this.style.backgroundColor='${
         isLightMode ? 'rgba(0, 0, 0, 0.12)' : 'rgba(255, 255, 255, 0.15)'
       }'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: currentColor;">
 <g><path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z"></path></g>
 </svg>
 确认完成任务并支付尾款 ($${businessData.remainingAmount})
 </button>
 </div>
 `
     : ''
 }
 </div>
`;
  }
  // 接收转账
  window.acceptTransfer = async function (transferId) {
    try {
      // 查找转账消息并更新状态
      const xDb = getXDB();
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${currentMessageConversation.id}`;
      const savedConversation = await xDb.xAccountProfiles.get(conversationId);
      if (savedConversation && savedConversation.data && savedConversation.data.messages) {
        const transferMessage = savedConversation.data.messages.find(
          msg => msg.type === 'transfer' && msg.timestamp === transferId,
        );
        if (transferMessage) {
          const totalAmount = parseFloat(transferMessage.amount);
          const isBusiness = transferMessage.isBusiness === true; // 商业转账：计算定金金额
          let receivedAmount = totalAmount;
          if (isBusiness) {
            // 如果有depositAmount字段，使用它；否则根据depositRatio计算
            if (transferMessage.depositAmount !== undefined) {
              receivedAmount = parseFloat(transferMessage.depositAmount);
            } else {
              const depositRatio = parseFloat(transferMessage.depositRatio) || 20;
              receivedAmount = (totalAmount * depositRatio) / 100; // 计算并保存到消息对象中
              transferMessage.depositAmount = receivedAmount.toFixed(2);
              transferMessage.remainingAmount = (totalAmount - receivedAmount).toFixed(2);
            }
          }
          // 更新转账状态
          transferMessage.status = 'accepted'; // 商业转账：更新任务状态
          if (isBusiness) {
            transferMessage.taskStatus = 'in_progress'; // 任务进行中
            const acceptedTime = new Date();
            transferMessage.acceptedAt = acceptedTime.toISOString(); // 计算任务截止时间
            const deadlineHours = parseFloat(transferMessage.taskDeadlineHours) || 24;
            const deadlineTime = new Date(acceptedTime.getTime() + deadlineHours * 60 * 60 * 1000);
            transferMessage.taskDeadline = deadlineTime.toISOString();
            console.log('⏰ [接收商业转账] 设置任务截止时间:', {
              acceptedAt: transferMessage.acceptedAt,
              deadlineHours: deadlineHours,
              taskDeadline: transferMessage.taskDeadline,
            });
          }
          // 添加系统通知到对话
          const systemNotification = {
            type: 'system',
            systemType: 'transferAccepted',
            content: isBusiness
              ? `你接收了商业转账（定金 $${receivedAmount.toFixed(2)}），请在 ${
                  transferMessage.taskDeadlineHours
                } 小时内完成任务`
              : `你接收了 $${totalAmount.toFixed(2)} 的转账`,
            timestamp: new Date().toISOString(),
            time: '刚刚',
          };
          savedConversation.data.messages.push(systemNotification); // 保存更新
          await xDb.xAccountProfiles.put(savedConversation); // 更新钱包余额（收定金）
          await loadWalletData();
          const currentBalance = parseFloat(walletData.balance) || 0;
          walletData.balance = currentBalance + receivedAmount; // 添加交易记录
          const senderName = currentMessageConversation?.user?.name || '对方';
          const transaction = {
            id: 'transfer_in_' + Date.now(),
            description: isBusiness
              ? `商业转账收款（定金）- ${senderName}${transferMessage.note ? ` - ${transferMessage.note}` : ''}`
              : `收款自 ${senderName}${transferMessage.note ? ` - ${transferMessage.note}` : ''}`,
            amount: receivedAmount,
            timestamp: new Date().toISOString(),
            type: isBusiness ? 'business_transfer_deposit_in' : 'transfer_in',
          };
          walletData.transactions.unshift(transaction); // 保存钱包数据
          await saveWalletData(); // 商业转账：保存到商业转账数据库
          if (isBusiness && currentMessageConversation) {
            const businessTransferRecord = {
              ...transferMessage,
              transferId: transferId,
              conversationId: currentMessageConversation.id,
              senderName: senderName,
              senderHandle: currentMessageConversation.user?.handle || 'unknown',
              senderAvatar:
                currentMessageConversation.user?.avatar || 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
              direction: 'received', // 接收的商业转账
              createdAt: transferMessage.timestamp,
              acceptedAt: new Date().toISOString(),
            };
            console.log('💼 [保存商业转账] 准备保存:', businessTransferRecord);
            console.log('💼 [保存商业转账] taskDeadline:', businessTransferRecord.taskDeadline);
            console.log('💼 [保存商业转账] taskStatus:', businessTransferRecord.taskStatus);
            await saveBusinessTransfer(businessTransferRecord);
            console.log('💼 商业转账已记录到数据库');
          }
          // 显示手机样式通知
          showPhoneNotification({
            title: 'X Wallet',
            message: isBusiness
              ? `已收定金 $${receivedAmount.toFixed(2)}，请完成任务以获得尾款`
              : `已收款 $${totalAmount.toFixed(2)}, 当前余额 $${walletData.balance.toFixed(2)}`,
            avatar: window.userProfileData?.avatar,
            leftIcon: 'x',
          }); // 关闭弹窗并刷新消息显示
          closeTransferDetails(); // 刷新私信详情页
          if (currentMessageConversation && currentMessageConversation.user) {
            const profileData = {
              name: currentMessageConversation.user.name,
              handle: currentMessageConversation.user.handle,
              avatar: currentMessageConversation.user.avatar,
            };
            await loadCharacterMessageDetail(currentMessageConversation, profileData);
          }
          console.log('✅ 转账已接收:', receivedAmount, '新余额:', walletData.balance); // 商业转账：触发任务检测
          if (isBusiness) {
            setTimeout(() => {
              handleBusinessTransferTask(transferMessage, currentMessageConversation);
            }, 1000);
          }
          // 💼 检查是否是商业任务尾款（AI发来的普通转账，但有进行中的商业任务）
          if (!isBusiness && !transferMessage.isOwn) {
            // 查找进行中的商业转账（用户接收的）
            const ongoingBusinessTransfer = savedConversation.data.messages
              .filter(
                msg => msg.type === 'transfer' && msg.isBusiness && msg.taskStatus === 'in_progress' && !msg.isOwn,
              )
              .pop(); // 取最新的
            if (ongoingBusinessTransfer) {
              console.log('💼 [商业任务尾款] 检测到进行中的商业任务，将此转账视为尾款'); // 更新商业转账状态为completed
              ongoingBusinessTransfer.taskStatus = 'completed';
              ongoingBusinessTransfer.completedAt = new Date().toISOString();
              await xDb.xAccountProfiles.put(savedConversation); // 更新商业转账数据库状态
              await updateBusinessTransferStatus(ongoingBusinessTransfer.timestamp, 'completed');
              console.log('✅ [商业任务尾款] 商业任务已完成，状态已更新'); // 更新通知消息
              showPhoneNotification({
                title: 'X Wallet',
                message: `任务已完成，已收尾款 $${receivedAmount.toFixed(2)}, 当前余额 $${walletData.balance.toFixed(
                  2,
                )}`,
                avatar: window.userProfileData?.avatar,
                leftIcon: 'x',
              });
            }
          }
        }
      }
    } catch (error) {
      console.error('接收转账失败:', error);
      showXToast('接收转账失败', 'error');
    }
  }; // 拒绝转账
  window.rejectTransfer = async function (transferId) {
    try {
      // 查找转账消息并更新状态
      const xDb = getXDB();
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${currentMessageConversation.id}`;
      const savedConversation = await xDb.xAccountProfiles.get(conversationId);
      if (savedConversation && savedConversation.data && savedConversation.data.messages) {
        const transferMessage = savedConversation.data.messages.find(
          msg => msg.type === 'transfer' && msg.timestamp === transferId,
        );
        if (transferMessage) {
          const amount = parseFloat(transferMessage.amount); // 更新转账状态
          transferMessage.status = 'rejected'; // 添加系统通知到对话
          const systemNotification = {
            type: 'system',
            systemType: 'transferRejected',
            content: `你拒绝了 $${amount.toFixed(2)} 的转账`,
            timestamp: new Date().toISOString(),
            time: '刚刚',
          };
          savedConversation.data.messages.push(systemNotification); // 保存更新
          await xDb.xAccountProfiles.put(savedConversation); // 关闭弹窗并刷新消息显示
          closeTransferDetails(); // 刷新私信详情页
          if (currentMessageConversation && currentMessageConversation.user) {
            const profileData = {
              name: currentMessageConversation.user.name,
              handle: currentMessageConversation.user.handle,
              avatar: currentMessageConversation.user.avatar,
            };
            await loadCharacterMessageDetail(currentMessageConversation, profileData);
          }
          console.log('❌ 转账已拒绝:', amount);
        }
      }
    } catch (error) {
      console.error('拒绝转账失败:', error);
      showXToast('拒绝转账失败', 'error');
    }
  }; // 确认完成商业任务并支付尾款
  window.completeBusinessTask = async function (transferId) {
    try {
      if (!currentMessageConversation) {
        showXToast('无法找到当前对话', 'error');
        return;
      }
      // 查找转账消息并更新状态
      const xDb = getXDB();
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${currentMessageConversation.id}`;
      const savedConversation = await xDb.xAccountProfiles.get(conversationId);
      if (savedConversation && savedConversation.data && savedConversation.data.messages) {
        const transferMessage = savedConversation.data.messages.find(
          msg => msg.type === 'transfer' && msg.timestamp === transferId,
        );
        if (transferMessage && transferMessage.isBusiness) {
          const remainingAmount = parseFloat(transferMessage.remainingAmount); // 检查钱包余额
          await loadWalletData();
          if (walletData.balance < remainingAmount) {
            showXToast('钱包余额不足，无法支付尾款', 'error');
            return;
          }
          // 更新转账状态
          transferMessage.taskStatus = 'completed';
          transferMessage.completedAt = new Date().toISOString(); // 扣除尾款
          walletData.balance -= remainingAmount; // 从商业转账数据库或对话信息中获取接收者名称
          const businessTransfersId = `businessTransfers_${currentAccountId || 'main'}`;
          let recipientName = '对方';
          const businessData = await xDb.xAccountProfiles.get(businessTransfersId);
          if (businessData && businessData.data) {
            const businessTransfer = businessData.data.find(t => t.transferId === transferId);
            if (businessTransfer && businessTransfer.senderName) {
              recipientName = businessTransfer.senderName;
            }
          }
          // 如果还是找不到，尝试从currentMessageConversation获取
          if (recipientName === '对方' && currentMessageConversation?.user?.name) {
            recipientName = currentMessageConversation.user.name;
          }
          const transaction = {
            id: 'business_remaining_' + Date.now(),
            description: `商业转账尾款 - ${recipientName}${transferMessage.note ? ` - ${transferMessage.note}` : ''}`,
            amount: -remainingAmount,
            timestamp: new Date().toISOString(),
            type: 'business_transfer_remaining',
          };
          walletData.transactions.unshift(transaction); // 保存钱包数据
          await saveWalletData(); // 添加系统通知到对话
          const systemNotification = {
            type: 'system',
            systemType: 'businessTaskCompleted',
            content: `你已确认任务完成并支付尾款 $${remainingAmount.toFixed(2)}`,
            timestamp: new Date().toISOString(),
            time: '刚刚',
          };
          savedConversation.data.messages.push(systemNotification); // 保存更新
          await xDb.xAccountProfiles.put(savedConversation); // 更新商业转账数据库状态
          await updateBusinessTransferStatus(transferId, 'completed'); // 显示手机样式通知
          showPhoneNotification({
            title: 'X Wallet',
            message: `任务已完成，已支付尾款 $${remainingAmount.toFixed(2)}`,
            avatar: window.userProfileData?.avatar,
            leftIcon: 'x',
          }); // 关闭弹窗并刷新消息显示
          closeTransferDetails(); // 刷新私信详情页
          if (currentMessageConversation && currentMessageConversation.user) {
            const profileData = {
              name: currentMessageConversation.user.name,
              handle: currentMessageConversation.user.handle,
              avatar: currentMessageConversation.user.avatar,
            };
            await loadCharacterMessageDetail(currentMessageConversation, profileData);
          }
          console.log('✅ 商业任务已完成，尾款已支付:', remainingAmount);
        }
      }
    } catch (error) {
      console.error('完成任务失败:', error);
      showXToast('完成任务失败', 'error');
    }
  }; // 更新商业转账数据库状态
  async function updateBusinessTransferStatus(transferId, newStatus) {
    try {
      const xDb = getXDB();
      const businessTransfersId = `businessTransfers_${currentAccountId || 'main'}`;
      let savedData = await xDb.xAccountProfiles.get(businessTransfersId);
      if (savedData && savedData.data) {
        const transfer = savedData.data.find(t => t.transferId === transferId);
        if (transfer) {
          transfer.taskStatus = newStatus; // 根据状态更新时间戳
          if (newStatus === 'in_progress' && !transfer.acceptedAt) {
            transfer.acceptedAt = new Date().toISOString();
          } else if (newStatus === 'completed') {
            transfer.completedAt = new Date().toISOString();
          }
          await xDb.xAccountProfiles.put(savedData);
          console.log('✅ 商业转账状态已更新:', newStatus);
        }
      }
    } catch (error) {
      console.error('❌ 更新商业转账状态失败:', error);
    }
  }
  // 打开商业转账管理中心
  window.openBusinessTransferManager = async function () {
    const xSocialScreen = document.getElementById('x-social-screen');
    const isLightMode = xSocialScreen && xSocialScreen.classList.contains('x-theme-light'); // 获取所有商业转账记录
    const xDb = getXDB();
    const businessTransfersId = `businessTransfers_${currentAccountId || 'main'}`;
    let savedData = await xDb.xAccountProfiles.get(businessTransfersId);
    const businessTransfers = savedData?.data || []; // 分类：已发出的和已接收的
    const sentTransfers = businessTransfers.filter(t => t.direction === 'sent');
    const receivedTransfers = businessTransfers.filter(t => t.direction === 'received'); // 创建弹窗遮罩
    const modal = document.createElement('div');
    modal.id = 'business-transfer-manager-modal';
    modal.style.cssText = `
 position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: ${
   isLightMode ? 'rgba(255, 255, 255, 0.85)' : 'rgba(0, 0, 0, 0.85)'
 }; display: flex; align-items: center; justify-content: center; z-index: 26; backdrop-filter: blur(12px); -webkit-backdrop-filter: blur(12px);
`;
    modal.innerHTML = `
 <div style="background-color: ${
   isLightMode ? 'rgba(255, 255, 255, 0.95)' : 'rgba(0, 0, 0, 0.95)'
 }; backdrop-filter: blur(20px); -webkit-backdrop-filter: blur(20px); border-radius: 24px; width: 90%; max-width: 500px; max-height: 80vh; position: relative; overflow: hidden; box-shadow: ${
      isLightMode
        ? '0 20px 60px rgba(0, 0, 0, 0.15), 0 8px 32px rgba(0, 0, 0, 0.1)'
        : '0 20px 60px rgba(0, 0, 0, 0.8), 0 8px 32px rgba(255, 255, 255, 0.05)'
    }; border: 2px solid ${
      isLightMode ? 'rgba(0, 0, 0, 0.1)' : 'rgba(255, 255, 255, 0.1)'
    }; " onclick="event.stopPropagation()">

 <div style="background: linear-gradient(135deg, ${
   isLightMode ? 'rgba(248, 250, 252, 0.8)' : 'rgba(22, 24, 28, 0.8)'
 } 0%, ${
      isLightMode ? 'rgba(255, 255, 255, 0.6)' : 'rgba(0, 0, 0, 0.6)'
    } 100%); padding: 24px; text-align: center; border-bottom: 2px solid ${
      isLightMode ? 'rgba(0, 0, 0, 0.08)' : 'rgba(255, 255, 255, 0.08)'
    }; position: relative; ">

 <button onclick="closeBusinessTransferManager()" style="position: absolute; top: 16px; right: 16px; background: transparent; border: none; color: ${
   isLightMode ? '#536471' : '#71767b'
 }; cursor: pointer; padding: 8px; border-radius: 50%; transition: all 0.2s; " onmouseover="this.style.backgroundColor='${
      isLightMode ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)'
    }';"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: currentColor;">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </button>

 <div style="color: ${
   isLightMode ? '#0f1419' : '#ffffff'
 }; font-size: 20px; font-weight: 700; margin-bottom: 8px; display: flex; align-items: center; justify-content: center; gap: 8px; ">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: currentColor;">
 <g><path d="M20 6h-3V4c0-1.1-.9-2-2-2H9c-1.1 0-2 .9-2 2v2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zM9 4h6v2H9V4zm11 16H4V8h16v12z"></path></g>
 </svg>
 商业转账管理
 </div>
 <div style="color: ${isLightMode ? '#536471' : '#71767b'}; font-size: 14px; ">管理所有商业合作订单</div>
 </div>

 <div style="max-height: 60vh; overflow-y: auto; padding: 16px 20px; ">

 <div style="margin-bottom: 24px;">
 <div style="color: ${
   isLightMode ? '#0f1419' : '#ffffff'
 }; font-size: 16px; font-weight: 700; margin-bottom: 12px; padding-bottom: 8px; border-bottom: 2px solid ${
      isLightMode ? '#e1e8ed' : '#38444d'
    }; display: flex; align-items: center; gap: 6px; ">
 <svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: currentColor;">
 <g><path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"></path></g>
 </svg>
 已发出 (${sentTransfers.length})
 </div>
 ${
   sentTransfers.length > 0
     ? renderBusinessTransferList(sentTransfers, 'sent', isLightMode)
     : renderNoBusinessTransfers('sent', isLightMode)
 }
 </div>

 <div>
 <div style="color: ${
   isLightMode ? '#0f1419' : '#ffffff'
 }; font-size: 16px; font-weight: 700; margin-bottom: 12px; padding-bottom: 8px; border-bottom: 2px solid ${
      isLightMode ? '#e1e8ed' : '#38444d'
    }; display: flex; align-items: center; gap: 6px; ">
 <svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: currentColor;">
 <g><path d="M20 8l-8 5-8-5V6l8 5 8-5m0-2H4c-1.11 0-2 .89-2 2v12a2 2 0 002 2h16a2 2 0 002-2V6a2 2 0 00-2-2z"></path></g>
 </svg>
 已接收 (${receivedTransfers.length})
 </div>
 ${
   receivedTransfers.length > 0
     ? renderBusinessTransferList(receivedTransfers, 'received', isLightMode)
     : renderNoBusinessTransfers('received', isLightMode)
 }
 </div>
 </div>
 </div>
`;
    document.body.appendChild(modal);
    document.body.style.overflow = 'hidden'; // 点击背景关闭弹窗
    modal.addEventListener('click', e => {
      if (e.target === modal) {
        closeBusinessTransferManager();
      }
    }); // 添加入场动画
    const managerCard = modal.querySelector('div');
    managerCard.style.transform = 'scale(0.8) translateY(20px)';
    managerCard.style.opacity = '0';
    requestAnimationFrame(() => {
      managerCard.style.transition = 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)';
      managerCard.style.transform = 'scale(1) translateY(0)';
      managerCard.style.opacity = '1';
    });
  }; // 渲染商业转账列表
  function renderBusinessTransferList(transfers, type, isLightMode) {
    return transfers
      .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
      .map(transfer => {
        const now = new Date(); // 获取或计算截止时间
        let deadline;
        if (transfer.taskDeadline) {
          deadline = new Date(transfer.taskDeadline);
        } else if (transfer.acceptedAt && transfer.taskDeadlineHours) {
          // 动态计算截止时间
          const acceptedTime = new Date(transfer.acceptedAt);
          const deadlineHours = parseFloat(transfer.taskDeadlineHours) || 24;
          deadline = new Date(acceptedTime.getTime() + deadlineHours * 60 * 60 * 1000);
        } else if (transfer.createdAt && transfer.taskDeadlineHours) {
          // 如果没有acceptedAt，使用createdAt
          const createdTime = new Date(transfer.createdAt);
          const deadlineHours = parseFloat(transfer.taskDeadlineHours) || 24;
          deadline = new Date(createdTime.getTime() + deadlineHours * 60 * 60 * 1000);
        } else {
          // 无法计算截止时间，使用默认24小时
          deadline = new Date(now.getTime() + 24 * 60 * 60 * 1000);
        }
        const remainingMs = deadline.getTime() - now.getTime();
        const isExpired = remainingMs <= 0;
        let deadlineText = '';
        if (remainingMs > 0) {
          const hours = Math.floor(remainingMs / (1000 * 60 * 60));
          const minutes = Math.floor((remainingMs % (1000 * 60 * 60)) / (1000 * 60));
          deadlineText = hours > 0 ? `${hours}小时${minutes}分钟` : `${minutes}分钟`;
        } else {
          deadlineText = '已过期';
        }
        const statusMap = {
          pending: '待接收',
          in_progress: '进行中',
          completed: '已完成',
          failed: '已失败',
        };
        const statusColorMap = {
          pending: '#f59e0b',
          in_progress: 'var(--x-accent)',
          completed: '#22c55e',
          failed: '#ef4444',
        };
        return `
 <div style="margin-bottom: 12px; background: linear-gradient(135deg, ${
   isLightMode ? 'rgba(0, 0, 0, 0.02)' : 'rgba(255, 255, 255, 0.03)'
 } 0%, ${isLightMode ? 'rgba(0, 0, 0, 0.01)' : 'rgba(255, 255, 255, 0.01)'} 100%); border: 1px solid ${
          isLightMode ? 'rgba(0, 0, 0, 0.1)' : 'rgba(255, 255, 255, 0.1)'
        }; border-radius: 12px; transition: all 0.2s; position: relative; overflow: hidden; ">

 <div style="position: absolute; top: 50%; right: -20px; transform: translateY(-50%) rotate(15deg); font-size: 32px; color: ${
   isLightMode ? 'rgba(0, 0, 0, 0.02)' : 'rgba(255, 255, 255, 0.02)'
 }; font-weight: 700; pointer-events: none; ">TICKET</div>
 <div style="padding: 16px;">
 <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 12px;">
 <div style="flex: 1;">
 <div style="color: ${isLightMode ? '#0f1419' : '#ffffff'}; font-size: 15px; font-weight: 600; margin-bottom: 4px; ">${
          type === 'sent' ? `发给 ${transfer.senderName}` : `来自 ${transfer.senderName}`
        }</div>
 <div style="color: ${
   isLightMode ? '#536471' : '#71767b'
 }; font-size: 11px; font-family: monospace; letter-spacing: 0.5px; ">${new Date(transfer.createdAt).toLocaleString(
          'zh-CN',
        )}</div>
 </div>
 <div style="display: inline-block; padding: 4px 10px; background: linear-gradient(135deg, ${
   isLightMode ? 'rgba(0, 0, 0, 0.08)' : 'rgba(255, 255, 255, 0.12)'
 } 0%, ${isLightMode ? 'rgba(0, 0, 0, 0.04)' : 'rgba(255, 255, 255, 0.06)'} 100%); color: ${
          isLightMode ? '#0f1419' : '#ffffff'
        }; font-size: 10px; font-weight: 600; border-radius: 10px; margin-left: 12px; border: 1px solid ${
          isLightMode ? 'rgba(0, 0, 0, 0.15)' : 'rgba(255, 255, 255, 0.2)'
        }; letter-spacing: 0.5px; ">${statusMap[transfer.taskStatus || 'pending']}</div>
 </div>

 <div style="color: ${
   isLightMode ? '#0f1419' : '#e5e5e5'
 }; font-size: 13px; line-height: 1.4; margin-bottom: 12px; padding: 10px; background: ${
          isLightMode ? 'rgba(0, 0, 0, 0.02)' : 'rgba(255, 255, 255, 0.02)'
        }; border-left: 2px solid ${
          isLightMode ? 'rgba(0, 0, 0, 0.15)' : 'rgba(255, 255, 255, 0.15)'
        }; border-radius: 4px; ">${transfer.taskDescription}</div>

 <div style="display: flex; justify-content: space-between; align-items: center; padding-top: 12px; border-top: 1px dashed ${
   isLightMode ? 'rgba(0, 0, 0, 0.1)' : 'rgba(255, 255, 255, 0.1)'
 }; ">
 <div style="color: ${
   isExpired ? '#dc2626' : isLightMode ? '#536471' : '#71767b'
 }; font-size: 11px; display: flex; align-items: center; gap: 4px; ">
 <svg viewBox="0 0 24 24" style="width: 11px; height: 11px; fill: currentColor;">
 <g><path d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm.5-13H11v6l5.2 3.2.8-1.3-4.5-2.7V7z"></path></g>
 </svg>
 ${deadlineText}
 </div>
 <div style="color: ${
   isLightMode ? '#0f1419' : '#ffffff'
 }; font-size: 13px; font-weight: 700; font-family: monospace; ">$${
          transfer.amount
        } <span style="opacity: 0.6; font-size: 11px;">(定金 $${transfer.depositAmount})</span></div>
 </div>

 <div style="margin-top: 12px; text-align: right;">
 <button onclick="deleteBusinessTransfer('${transfer.transferId}', event)" style="background: linear-gradient(135deg, ${
          isLightMode ? 'rgba(0, 0, 0, 0.08)' : 'rgba(255, 255, 255, 0.12)'
        } 0%, ${isLightMode ? 'rgba(0, 0, 0, 0.04)' : 'rgba(255, 255, 255, 0.06)'} 100%); color: ${
          isLightMode ? '#0f1419' : '#ffffff'
        }; border: 1px dashed ${
          isLightMode ? 'rgba(0, 0, 0, 0.2)' : 'rgba(255, 255, 255, 0.2)'
        }; border-radius: 8px; padding: 6px 12px; font-size: 11px; font-weight: 600; cursor: pointer; transition: all 0.2s; display: inline-flex; align-items: center; gap: 4px; position: relative; overflow: hidden; " onmouseover="this.style.background='linear-gradient(135deg, ${
          isLightMode ? 'rgba(0, 0, 0, 0.12)' : 'rgba(255, 255, 255, 0.15)'
        } 0%, ${
          isLightMode ? 'rgba(0, 0, 0, 0.06)' : 'rgba(255, 255, 255, 0.08)'
        } 100%)'; this.style.transform='scale(1.02)'"
 onmouseout="this.style.background='linear-gradient(135deg, ${
   isLightMode ? 'rgba(0, 0, 0, 0.08)' : 'rgba(255, 255, 255, 0.12)'
 } 0%, ${isLightMode ? 'rgba(0, 0, 0, 0.04)' : 'rgba(255, 255, 255, 0.06)'} 100%)'; this.style.transform='scale(1)'">
 <svg viewBox="0 0 24 24" style="width: 12px; height: 12px; fill: currentColor; opacity: 0.7;">
 <g><path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"></path></g>
 </svg>
 删除任务
 </button>
 </div>
 </div>
 </div>
 `;
      })
      .join('');
  }
  // 渲染无商业转账状态
  function renderNoBusinessTransfers(type, isLightMode) {
    return `
 <div style="text-align: center; padding: 32px 20px; color: ${isLightMode ? '#6b7280' : '#9ca3af'}; font-size: 14px; ">
 <svg viewBox="0 0 24 24" style="width: 48px; height: 48px; fill: currentColor; opacity: 0.3; margin: 0 auto 12px;">
 <g><path d="M20 6h-3V4c0-1.1-.9-2-2-2H9c-1.1 0-2 .9-2 2v2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zM9 4h6v2H9V4zm11 16H4V8h16v12z"></path></g>
 </svg>
 <div>暂无${type === 'sent' ? '发出的' : '接收的'}商业转账</div>
 </div>
`;
  }
  // 关闭商业转账管理弹窗
  window.closeBusinessTransferManager = function () {
    const modal = document.getElementById('business-transfer-manager-modal');
    if (modal) {
      const managerCard = modal.querySelector('div');
      managerCard.style.transform = 'scale(0.9) translateY(20px)';
      managerCard.style.opacity = '0';
      setTimeout(() => {
        modal.remove();
        document.body.style.overflow = 'auto';
      }, 200);
    }
  }; // 删除商业转账任务
  window.deleteBusinessTransfer = async function (transferId, event) {
    event.stopPropagation();
    try {
      const xDb = getXDB();
      const businessTransfersId = `businessTransfers_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(businessTransfersId);
      if (!savedData || !savedData.data) {
        showXToast('无法找到商业转账数据', 'error');
        return;
      }
      const transfer = savedData.data.find(t => t.transferId === transferId);
      if (!transfer) {
        showXToast('无法找到该任务', 'error');
        return;
      }
      // 计算违约费
      const depositAmount = parseFloat(transfer.depositAmount) || 0;
      const totalAmount = parseFloat(transfer.amount) || 0;
      const penaltyAmount = depositAmount + totalAmount; // 定金 + 全款
      // 确认删除
      const confirmMessage = `删除此任务将扣除违约费 $${penaltyAmount.toFixed(2)}\n（定金 $${depositAmount.toFixed(
        2,
      )} + 全款 $${totalAmount.toFixed(2)}）\n并降低信用值\n\n是否确认删除？`;
      if (!confirm(confirmMessage)) {
        return;
      }
      // 找到对应的卡片元素并播放撕碎动画
      const cardElement = event.target.closest('div[style*="margin-bottom: 12px"]');
      if (cardElement) {
        // 添加撕碎动画
        cardElement.style.animation = 'crumple-tear 0.6s cubic-bezier(0.4, 0, 1, 1) forwards';
        cardElement.style.transformOrigin = 'center center'; // 注入CSS动画（如果还没有注入）
        if (!document.getElementById('business-transfer-animations')) {
          const style = document.createElement('style');
          style.id = 'business-transfer-animations';
          style.textContent = `
 @keyframes crumple-tear {
 0% {
 transform: scale(1) rotate(0deg); opacity: 1; }
 20% {
 transform: scale(0.95) rotate(-2deg); }
 40% {
 transform: scale(0.9) rotate(2deg) translateY(-5px); filter: blur(0px); }
 60% {
 transform: scale(0.7) rotate(-5deg) translateY(-10px); filter: blur(1px); opacity: 0.8; }
 80% {
 transform: scale(0.4) rotate(8deg) translateY(-15px); filter: blur(3px); opacity: 0.4; }
 100% {
 transform: scale(0.1) rotate(15deg) translateY(-20px); filter: blur(5px); opacity: 0; }
 }
 `;
          document.head.appendChild(style);
        }
        // 等待动画完成
        await new Promise(resolve => setTimeout(resolve, 600));
      }
      // 加载钱包数据
      await loadWalletData(); // 扣除违约费
      walletData.balance -= penaltyAmount; // 降低信用值（根据任务金额，金额越大扣得越多）
      const creditPenalty = Math.min(20, Math.floor(totalAmount / 10)); // 最多扣20，按金额/10计算
      walletData.creditScore = Math.max(0, walletData.creditScore - creditPenalty); // 添加违约费交易记录
      const penaltyTransaction = {
        id: 'penalty_' + Date.now(),
        description: `删除商业任务违约费 - ${transfer.taskDescription.substring(0, 30)}...`,
        amount: -penaltyAmount,
        timestamp: new Date().toISOString(),
        type: 'penalty',
      };
      walletData.transactions.unshift(penaltyTransaction); // 保存钱包数据
      await saveWalletData(); // 删除商业转账记录
      savedData.data = savedData.data.filter(t => t.transferId !== transferId);
      await xDb.xAccountProfiles.put(savedData); // 显示通知
      showPhoneNotification({
        title: 'X Wallet',
        message: `任务已删除，扣除违约费 $${penaltyAmount.toFixed(2)}，信用值 -${creditPenalty}`,
        avatar: window.userProfileData?.avatar,
        leftIcon: 'custom',
        leftIconHtml: `
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: #71767b;">
 <g><path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"></path></g>
 </svg>
 `,
        duration: 5000,
      });
      console.log(`🗑️ 商业任务已删除，扣除违约费 $${penaltyAmount.toFixed(2)}，信用值 -${creditPenalty}`); // 刷新商业转账管理窗口
      closeBusinessTransferManager();
      setTimeout(() => {
        openBusinessTransferManager();
      }, 300);
    } catch (error) {
      console.error('删除商业转账失败:', error);
      showXToast('删除失败', 'error');
    }
  }; // 商业转账状态检查定时器
  let businessTransferCheckInterval = null; // 启动商业转账状态检查
  function startBusinessTransferCheck() {
    // 如果已有定时器，先清除
    if (businessTransferCheckInterval) {
      clearInterval(businessTransferCheckInterval);
    }
    // 立即执行一次检查
    checkBusinessTransfersStatus(); // 每分钟检查一次
    businessTransferCheckInterval = setInterval(() => {
      checkBusinessTransfersStatus();
    }, 60000); // 60秒
    console.log('✅ 商业转账状态检查已启动');
  }
  // 检查商业转账状态（提醒、清理）
  async function checkBusinessTransfersStatus() {
    try {
      const xDb = getXDB();
      const businessTransfersId = `businessTransfers_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(businessTransfersId);
      if (!savedData || !savedData.data || savedData.data.length === 0) return;
      const businessTransfers = savedData.data;
      const now = new Date();
      let needsUpdate = false;
      const transfersToKeep = [];
      for (const transfer of businessTransfers) {
        // 获取或计算截止时间
        let deadline;
        if (transfer.taskDeadline) {
          deadline = new Date(transfer.taskDeadline);
        } else if (transfer.acceptedAt && transfer.taskDeadlineHours) {
          // 动态计算截止时间
          const acceptedTime = new Date(transfer.acceptedAt);
          const deadlineHours = parseFloat(transfer.taskDeadlineHours) || 24;
          deadline = new Date(acceptedTime.getTime() + deadlineHours * 60 * 60 * 1000);
        } else if (transfer.createdAt && transfer.taskDeadlineHours) {
          // 如果没有acceptedAt，使用createdAt
          const createdTime = new Date(transfer.createdAt);
          const deadlineHours = parseFloat(transfer.taskDeadlineHours) || 24;
          deadline = new Date(createdTime.getTime() + deadlineHours * 60 * 60 * 1000);
        } else {
          // 无法计算截止时间，跳过此任务
          console.warn('⚠️ 商业转账缺少截止时间信息，跳过:', transfer.transferId);
          transfersToKeep.push(transfer);
          continue;
        }
        const completedAt = transfer.completedAt ? new Date(transfer.completedAt) : null;
        const timeToDeadline = deadline.getTime() - now.getTime(); // 1. 检查是否需要发送即将到期提醒（剩余1小时，且进行中的任务）
        if (
          transfer.taskStatus === 'in_progress' &&
          timeToDeadline > 0 &&
          timeToDeadline <= 3600000 && // 1小时 = 3600000毫秒
          !transfer.reminderSent
        ) {
          // 发送提醒
          const hours = Math.floor(timeToDeadline / (1000 * 60 * 60));
          const minutes = Math.floor((timeToDeadline % (1000 * 60 * 60)) / (1000 * 60));
          const timeText = hours > 0 ? `${hours}小时${minutes}分钟` : `${minutes}分钟`;
          showPhoneNotification({
            title: '商业转账提醒',
            message: `任务"${transfer.taskDescription.substring(0, 20)}..."还剩${timeText}截止，请及时完成！`,
            avatar: window.userProfileData?.avatar,
            leftIcon: 'custom',
            leftIconHtml: `
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: #f59e0b;">
 <g><path d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm.5-13H11v6l5.2 3.2.8-1.3-4.5-2.7V7z"></path></g>
 </svg>
 `,
            duration: 5000,
          }); // 标记已提醒
          transfer.reminderSent = true;
          needsUpdate = true;
          console.log(`⏰ 已发送任务即将到期提醒: ${transfer.taskDescription.substring(0, 30)}`);
        }
        // 2. 检查是否需要删除（过期超过1小时 或 完成超过3小时）
        let shouldDelete = false;
        let isExpiredPenalty = false; // 过期超过1小时（进行中的任务才扣违约费）
        if (timeToDeadline < 0 && Math.abs(timeToDeadline) > 3600000) {
          shouldDelete = true;
          if (transfer.taskStatus === 'in_progress') {
            isExpiredPenalty = true; // 标记需要扣除违约费
          }
          console.log(`🗑️ 删除过期任务: ${transfer.taskDescription.substring(0, 30)}`);
        }
        // 完成超过3小时
        if (transfer.taskStatus === 'completed' && completedAt) {
          const timeSinceCompletion = now.getTime() - completedAt.getTime();
          if (timeSinceCompletion > 10800000) {
            // 3小时 = 10800000毫秒
            shouldDelete = true;
            console.log(`🗑️ 删除已完成任务: ${transfer.taskDescription.substring(0, 30)}`);
          }
        }
        // 保留不需要删除的任务
        if (!shouldDelete) {
          transfersToKeep.push(transfer);
        } else {
          // 如果是过期未完成的任务，扣除违约费
          if (isExpiredPenalty) {
            const totalAmount = parseFloat(transfer.amount) || 0;
            const penaltyAmount = totalAmount; // 过期任务只扣全款
            // 加载钱包数据
            await loadWalletData(); // 扣除违约费
            walletData.balance -= penaltyAmount; // 降低信用值
            const creditPenalty = Math.min(15, Math.floor(totalAmount / 15)); // 过期扣得少一些，最多扣15
            walletData.creditScore = Math.max(0, walletData.creditScore - creditPenalty); // 添加违约费交易记录
            const penaltyTransaction = {
              id: 'penalty_expired_' + Date.now(),
              description: `任务过期违约费 - ${transfer.taskDescription.substring(0, 30)}...`,
              amount: -penaltyAmount,
              timestamp: new Date().toISOString(),
              type: 'penalty',
            };
            walletData.transactions.unshift(penaltyTransaction); // 保存钱包数据
            await saveWalletData(); // 显示通知
            showPhoneNotification({
              title: 'X Wallet',
              message: `任务已过期，扣除违约费 $${penaltyAmount.toFixed(2)}，信用值 -${creditPenalty}`,
              avatar: window.userProfileData?.avatar,
              leftIcon: 'custom',
              leftIconHtml: `
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: #71767b;">
 <g><path d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm.5-13H11v6l5.2 3.2.8-1.3-4.5-2.7V7z"></path></g>
 </svg>
 `,
              duration: 5000,
            });
            console.log(`💸 任务过期违约费 $${penaltyAmount.toFixed(2)}，信用值 -${creditPenalty}`);
          }
          needsUpdate = true;
        }
      }
      // 如果有任何变化，更新数据库
      if (needsUpdate) {
        await xDb.xAccountProfiles.put({
          handle: businessTransfersId,
          name: 'businessTransfers',
          accountId: currentAccountId || 'main',
          data: transfersToKeep,
          updatedAt: new Date().toISOString(),
        });
        console.log(`✅ 商业转账数据已更新，保留 ${transfersToKeep.length}/${businessTransfers.length} 条记录`); // 如果商业转账管理窗口正在打开，刷新显示
        const managerModal = document.getElementById('business-transfer-manager-modal');
        if (managerModal) {
          closeBusinessTransferManager();
          setTimeout(() => {
            openBusinessTransferManager();
          }, 300);
        }
      }
    } catch (error) {
      console.error('检查商业转账状态失败:', error);
    }
  }
  // 处理 AI 对用户转账的响应
  async function handleAITransferResponse(aiMessages, conversationRef) {
    try {
      // 检查 AI 回复中是否有转账消息
      const aiTransfer = aiMessages.find(msg => msg.type === 'transfer' && msg.status && msg.status !== 'pending');
      if (!aiTransfer) return;
      const xDb = getXDB();
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${conversationRef.id}`;
      const savedConversation = await xDb.xAccountProfiles.get(conversationId);
      if (!savedConversation || !savedConversation.data || !savedConversation.data.messages) return; // 查找用户之前发送的待处理转账
      const userTransfer = savedConversation.data.messages.find(
        msg => msg.type === 'transfer' && msg.isOwn && msg.status === 'pending',
      );
      if (!userTransfer) return;
      const amount = parseFloat(userTransfer.amount);
      const isBusiness = userTransfer.isBusiness === true;
      if (aiTransfer.status === 'accepted') {
        // AI 接收了转账
        userTransfer.status = 'accepted'; // 商业转账：更新任务状态
        if (isBusiness) {
          userTransfer.taskStatus = 'in_progress';
          userTransfer.acceptedAt = new Date().toISOString();
        }
        // 添加系统通知
        const systemNotification = {
          type: 'system',
          systemType: 'transferAccepted',
          content: isBusiness
            ? `对方接收了商业转账（定金 $${parseFloat(userTransfer.depositAmount).toFixed(2)}），已开始执行任务`
            : `对方接收了你的 $${amount.toFixed(2)} 转账`,
          timestamp: new Date().toISOString(),
          time: '刚刚',
        };
        savedConversation.data.messages.push(systemNotification); // 更新钱包交易记录状态
        await loadWalletData();
        const recipientName = conversationRef?.user?.name || '对方';
        const transactionType = isBusiness ? 'business_transfer_deposit' : 'transfer_out';
        const actualAmount = isBusiness ? parseFloat(userTransfer.depositAmount) : amount;
        const transaction = walletData.transactions.find(
          t => t.type === transactionType && Math.abs(t.amount + actualAmount) < 0.01,
        );
        if (transaction) {
          transaction.description = isBusiness
            ? `商业转账给 ${recipientName}（定金已接收）${userTransfer.note ? ` - ${userTransfer.note}` : ''}`
            : `转账给 ${recipientName}（已接收）${userTransfer.note ? ` - ${userTransfer.note}` : ''}`;
        }
        await saveWalletData(); // 保存更新
        await xDb.xAccountProfiles.put(savedConversation); // 商业转账：更新商业转账数据库状态并触发任务检测
        if (isBusiness && conversationRef) {
          // 更新现有的商业转账记录状态，而不是新增
          await updateBusinessTransferStatus(userTransfer.timestamp, 'in_progress');
          console.log('💼 AI接收的商业转账状态已更新为进行中'); // 触发AI任务处理（AI接收后自动处理任务）
          setTimeout(() => {
            handleBusinessTransferTask(userTransfer, conversationRef);
          }, 1000);
        }
        // 延迟3秒显示手机样式通知，避免被AI消息通知掩盖
        setTimeout(() => {
          showPhoneNotification({
            title: 'X Wallet',
            message: isBusiness
              ? `对方已接受任务，定金 $${actualAmount.toFixed(2)} 已支付`
              : `已付款 $${amount.toFixed(2)}, 当前余额 $${walletData.balance.toFixed(2)}`,
            avatar: window.userProfileData?.avatar,
            leftIcon: 'x',
          });
        }, 3000);
        console.log('✅ AI 接收了转账:', isBusiness ? `商业转账，定金 ${actualAmount}` : amount);
      } else if (aiTransfer.status === 'rejected') {
        // AI 拒绝了转账
        userTransfer.status = 'rejected'; // 商业转账：更新任务状态
        if (isBusiness) {
          userTransfer.taskStatus = 'rejected';
        }
        // 添加系统通知
        const systemNotification = {
          type: 'system',
          systemType: 'transferRejected',
          content: isBusiness
            ? `对方拒绝了商业转账，定金 $${parseFloat(userTransfer.depositAmount).toFixed(2)} 已退回`
            : `对方拒绝了你的 $${amount.toFixed(2)} 转账`,
          timestamp: new Date().toISOString(),
          time: '刚刚',
        };
        savedConversation.data.messages.push(systemNotification); // 退回钱包余额
        await loadWalletData();
        const actualAmount = isBusiness ? parseFloat(userTransfer.depositAmount) : amount;
        walletData.balance += actualAmount; // 更新交易记录
        const recipientName = conversationRef?.user?.name || '对方';
        const transactionType = isBusiness ? 'business_transfer_deposit' : 'transfer_out';
        const transaction = walletData.transactions.find(
          t => t.type === transactionType && Math.abs(t.amount + actualAmount) < 0.01,
        );
        if (transaction) {
          transaction.description = isBusiness
            ? `商业转账给 ${recipientName}（已拒绝，定金已退回）${userTransfer.note ? ` - ${userTransfer.note}` : ''}`
            : `转账给 ${recipientName}（已拒绝，已退回）${userTransfer.note ? ` - ${userTransfer.note}` : ''}`;
          transaction.amount = 0; // 标记为已退回
        }
        // 添加退款记录
        const refundTransaction = {
          id: 'refund_' + Date.now(),
          description: isBusiness
            ? `${recipientName} 拒绝商业转账，定金已退回${userTransfer.note ? ` - ${userTransfer.note}` : ''}`
            : `${recipientName} 拒绝转账，已退回${userTransfer.note ? ` - ${userTransfer.note}` : ''}`,
          amount: actualAmount,
          timestamp: new Date().toISOString(),
          type: 'refund',
        };
        walletData.transactions.unshift(refundTransaction);
        await saveWalletData(); // 保存更新
        await xDb.xAccountProfiles.put(savedConversation); // 延迟4秒显示退款通知，避免被AI消息通知掩盖
        setTimeout(() => {
          showPhoneNotification({
            title: 'X Wallet',
            message: isBusiness
              ? `商业转账被拒绝，定金 $${actualAmount.toFixed(2)} 已退回，当前余额 $${walletData.balance.toFixed(2)}`
              : `转账被拒绝，已退回 $${actualAmount.toFixed(2)}, 当前余额 $${walletData.balance.toFixed(2)}`,
            avatar: window.userProfileData?.avatar,
            leftIcon: 'x',
          });
        }, 4000);
        console.log('❌ AI 拒绝了转账，已退回:', isBusiness ? `商业转账定金 ${actualAmount}` : amount);
      }
      // 刷新私信详情页（如果用户还在详情页）
      if (currentMessageConversation && currentMessageConversation.id === conversationRef.id) {
        const profileData = {
          name: conversationRef.user.name,
          handle: conversationRef.user.handle,
          avatar: conversationRef.user.avatar,
        };
        await loadCharacterMessageDetail(currentMessageConversation, profileData);
      }
    } catch (error) {
      console.error('处理 AI 转账响应失败:', error);
    }
  }
  // 加载角色私信详情（已绑定角色）
  async function loadCharacterMessageDetail(messageData, profileData) {
    const contentContainer = document.getElementById('message-detail-content');
    if (!contentContainer) return; // 清空现有内容
    contentContainer.innerHTML = ''; // 更新顶部栏小头像和昵称
    const topAvatar = document.getElementById('message-detail-top-avatar');
    const topName = document.getElementById('message-detail-top-name');

    // 🔧 清理粉丝群的事件监听器（避免冲突）
    if (topAvatar) {
      if (topAvatar._fangroupClickHandler) {
        topAvatar.removeEventListener('click', topAvatar._fangroupClickHandler);
        delete topAvatar._fangroupClickHandler;
      }
      if (topAvatar._fangroupTouchHandler) {
        topAvatar.removeEventListener('touchend', topAvatar._fangroupTouchHandler);
        delete topAvatar._fangroupTouchHandler;
      }
    }

    if (topAvatar) topAvatar.src = profileData.avatar;
    if (topName) topName.textContent = profileData.name; // 🆕 为非绑定角色的小头像添加点击事件（添加到私信列表）
    if (topAvatar) {
      // 判断是否是绑定角色
      const isCharacter =
        messageData.id.startsWith('msg_') && messageData.id !== 'msg_001' && !messageData.id.startsWith('msg_account_');
      if (!isCharacter) {
        // 非绑定角色：账户或陌生人，可以点击添加到私信列表
        topAvatar.onclick = () => {
          openMessageContactSettings(messageData, profileData);
        };
        topAvatar.style.cursor = 'pointer';
      } else {
        // 绑定角色：移除点击事件
        topAvatar.onclick = null;
        topAvatar.style.cursor = 'default';
      }
    }
    // 更新中间详细信息区域
    const detailAvatar = document.getElementById('message-detail-avatar');
    const detailName = document.getElementById('message-detail-name');
    const detailHandle = document.getElementById('message-detail-handle');
    if (detailAvatar) {
      detailAvatar.src = profileData.avatar; // 添加点击事件，进入对方主页
      detailAvatar.style.cursor = 'pointer';
      detailAvatar.onclick = () => {
        openAccountProfile(profileData.name, profileData.handle, profileData.avatar);
      };
    }
    if (detailName) detailName.textContent = profileData.name;
    if (detailHandle) detailHandle.textContent = profileData.handle; // 显示简介
    const bioEl = document.getElementById('message-detail-bio');
    if (profileData.bio && bioEl) {
      bioEl.textContent = profileData.bio;
      bioEl.style.display = 'block';
    } else if (bioEl) {
      bioEl.style.display = 'none';
    }
    // 显示关注者数量
    const followersCount = profileData.followersCount || '0';
    const config = languageConfig[currentLanguage] || languageConfig.zh;
    const followersEl = document.getElementById('message-detail-followers');
    if (followersEl) {
      if (currentLanguage === 'en') {
        followersEl.textContent = `${followersCount} ${config.messageFollowers}`;
      } else {
        followersEl.textContent = `${followersCount} ${config.messageFollowers}`;
      }
    }
    // 检查是否已有对话记录
    try {
      const xDb = getXDB(); // 🔧 多账户隔离：包含账户ID
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${messageData.id}`;
      const savedConversation = await xDb.xAccountProfiles.get(conversationId);
      if (
        savedConversation &&
        savedConversation.data &&
        savedConversation.data.messages &&
        savedConversation.data.messages.length > 0
      ) {
        // 已有对话记录，渲染消息
        console.log('✅ 加载已有对话记录'); // 渲染日期分隔符
        const today = new Date();
        const dateStr =
          currentLanguage === 'en'
            ? today.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })
            : `${today.getFullYear()}年${today.getMonth() + 1}月${String(today.getDate()).padStart(2, '0')}日`;
        contentContainer.appendChild(renderDateSeparator(dateStr)); // 使用分组渲染消息
        const groups = groupMessagesBySender(savedConversation.data.messages);
        const allMessageElements = [];
        groups.forEach(group => {
          const isOwn = group[0].message.isOwn === true;
          group.forEach((item, indexInGroup) => {
            const isLastInGroup = indexInGroup === group.length - 1;
            const messageEl = renderMessageItem(item.message, isOwn, item.index, isLastInGroup);
            contentContainer.appendChild(messageEl);
            allMessageElements.push(messageEl);
          });
        }); // 立即显示所有消息（历史消息不需要动画）
        allMessageElements.forEach(el => {
          el.style.opacity = '1';
          el.style.transform = 'translateY(0)';
        }); // 恢复等待AI回复的消息到队列
        try {
          // 从对话记录中找出所有等待AI回复的用户消息
          const waitingMessages = savedConversation.data.messages.filter(
            msg => msg.isOwn && msg.waitingForAIResponse === true,
          );
          if (waitingMessages.length > 0) {
            userMessageQueue = waitingMessages;
            console.log(`✅ 恢复了 ${userMessageQueue.length} 条等待AI回复的消息到队列`);
          } else {
            console.log('📝 所有消息都已得到AI回复');
          }
        } catch (error) {
          console.error('恢复消息队列失败:', error);
        }
        // 滚动到底部（使用外层可滚动容器）
        setTimeout(() => {
          const scrollable = document.getElementById('message-detail-scrollable');
          if (scrollable) {
            scrollable.scrollTop = scrollable.scrollHeight;
          }
        }, 100);
        return;
      }
    } catch (error) {
      console.warn('检查对话记录失败:', error);
    }
    // 没有对话记录，显示欢迎状态
    contentContainer.innerHTML = `
 <div style="flex: 1; display: flex; align-items: center; justify-content: center; padding: 32px;">
 <div style="text-align: center; max-width: 300px;">

 <img src="${profileData.avatar}"
 style="width: 64px; height: 64px; border-radius: 50%; margin-bottom: 16px; object-fit: cover; ">

 <div style="font-size: 28px; font-weight: 700; color:var(--x-text-primary); margin-bottom: 8px; ">开始对话</div>
 <div style="font-size: 14px; color:var(--x-text-secondary); line-height: 1.4; ">向 ${profileData.name} 发送消息开始聊天</div>
 </div>
 </div>
`;
    console.log('✅ 角色私信详情页已加载（首次对话）');
  }
  // 加载粉丝群私信详情
  async function loadFanGroupMessageDetail(messageData) {
    const contentContainer = document.getElementById('message-detail-content');
    if (!contentContainer) return; // 清空现有内容
    contentContainer.innerHTML = ''; // 更新顶部栏小头像和昵称
    const topAvatar = document.getElementById('message-detail-top-avatar');
    const topName = document.getElementById('message-detail-top-name');
    if (topAvatar) {
      topAvatar.src = messageData.userAvatar || messageData.groupAvatar;
      // 🎯 为粉丝群头像添加点击事件（打开设置）
      topAvatar.style.cursor = 'pointer';

      // 先移除旧的事件监听器（避免重复绑定）
      if (topAvatar._fangroupClickHandler) {
        topAvatar.removeEventListener('click', topAvatar._fangroupClickHandler);
        topAvatar.removeEventListener('touchend', topAvatar._fangroupTouchHandler);
      }

      // 创建新的事件处理器并保存引用
      topAvatar._fangroupClickHandler = e => {
        e.preventDefault();
        e.stopPropagation();
        console.log('🖱️ [头像点击] 粉丝群头像被点击');
        openFanGroupSettings(messageData);
      };

      topAvatar._fangroupTouchHandler = e => {
        e.preventDefault();
        e.stopPropagation();
        console.log('📱 [头像点击] 移动端触摸事件');
        openFanGroupSettings(messageData);
      };

      // 绑定事件
      topAvatar.addEventListener('click', topAvatar._fangroupClickHandler);
      topAvatar.addEventListener('touchend', topAvatar._fangroupTouchHandler);
    }
    if (topName) topName.textContent = messageData.userName || messageData.groupName; // 隐藏中间的详细信息区域（大头像和用户信息）
    const scrollableContainer = document.getElementById('message-detail-scrollable');
    if (scrollableContainer) {
      const userInfoSection = scrollableContainer.querySelector('[style*="padding: 24px"]');
      if (userInfoSection) {
        userInfoSection.style.display = 'none';
      }
    }
    // 检查是否已有对话记录
    try {
      const xDb = getXDB();
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${messageData.id}`;
      const savedConversation = await xDb.xAccountProfiles.get(conversationId);
      if (
        savedConversation &&
        savedConversation.data &&
        savedConversation.data.messages &&
        savedConversation.data.messages.length > 0
      ) {
        // 已有对话记录，渲染消息
        console.log('✅ 加载已有粉丝群对话记录'); // 渲染日期分隔符
        const today = new Date();
        const dateStr =
          currentLanguage === 'en'
            ? today.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })
            : `${today.getFullYear()}年${today.getMonth() + 1}月${String(today.getDate()).padStart(2, '0')}日`;
        contentContainer.appendChild(renderDateSeparator(dateStr)); // 使用分组渲染消息
        const groups = groupMessagesBySender(savedConversation.data.messages);
        const allMessageElements = [];
        groups.forEach(group => {
          const isOwn = group[0].message.isOwn === true;
          group.forEach((item, indexInGroup) => {
            const isLastInGroup = indexInGroup === group.length - 1;
            const messageEl = renderMessageItem(item.message, isOwn, item.index, isLastInGroup);
            contentContainer.appendChild(messageEl);
            allMessageElements.push(messageEl);
          });
        }); // 立即显示所有消息（历史消息不需要动画）
        allMessageElements.forEach(el => {
          el.style.opacity = '1';
          el.style.transform = 'translateY(0)';
        }); // 恢复等待AI回复的消息到队列
        try {
          const waitingMessages = savedConversation.data.messages.filter(
            msg => msg.isOwn && msg.waitingForAIResponse === true,
          );
          if (waitingMessages.length > 0) {
            userMessageQueue = waitingMessages;
            console.log(`✅ 恢复了 ${userMessageQueue.length} 条等待AI回复的消息到队列`);
          }
        } catch (error) {
          console.error('恢复消息队列失败:', error);
        }
        // 滚动到底部
        setTimeout(() => {
          const scrollable = document.getElementById('message-detail-scrollable');
          if (scrollable) {
            scrollable.scrollTop = scrollable.scrollHeight;
          }
        }, 100);
        return;
      }
    } catch (error) {
      console.warn('检查粉丝群对话记录失败:', error);
    }
    // 没有对话记录，显示空状态（粉丝群不显示欢迎词）
    contentContainer.innerHTML = `
 <div style="flex: 1; display: flex; align-items: center; justify-content: center; padding: 32px;">
 <div style="text-align: center; max-width: 300px;">

 <img src="${messageData.userAvatar || messageData.groupAvatar}"
 style="width: 64px; height: 64px; border-radius: 50%; margin-bottom: 16px; object-fit: cover; ">

 <div style="font-size: 28px; font-weight: 700; color:var(--x-text-primary); margin-bottom: 8px; ">粉丝群聊天</div>
 <div style="font-size: 14px; color:var(--x-text-secondary); line-height: 1.4; ">向粉丝群发送消息开始互动</div>
 </div>
 </div>
`;
    console.log('✅ 粉丝群私信详情页已加载（首次对话）');
  }
  // 加载私信会话内容
  function loadMessageConversation(messageData, conversationData) {
    const contentContainer = document.getElementById('message-detail-content');
    if (!contentContainer) return; // 清空现有内容
    contentContainer.innerHTML = ''; // 🔧 检测并设置账户类型（如果未设置）
    if (!messageData._accountType && messageData.id) {
      if (messageData.id.startsWith('msg_account_')) {
        messageData._accountType = 'account';
      } else if (messageData.id.startsWith('msg_npc_')) {
        messageData._accountType = 'npc';
      } else if (messageData.id.startsWith('msg_relationship_')) {
        messageData._accountType = 'relationshipNpc';
      } else if (!messageData.id.startsWith('msg_')) {
        // 其他非角色消息默认为陌生人
        messageData._accountType = 'stranger';
      }
      console.log('🔍 [类型检测] 设置消息类型为:', messageData._accountType);
    }
    // 更新顶部栏小头像和昵称
    const topAvatar = document.getElementById('message-detail-top-avatar');
    const topName = document.getElementById('message-detail-top-name');

    // 🔧 清理粉丝群的事件监听器（避免冲突）
    if (topAvatar) {
      if (topAvatar._fangroupClickHandler) {
        topAvatar.removeEventListener('click', topAvatar._fangroupClickHandler);
        delete topAvatar._fangroupClickHandler;
      }
      if (topAvatar._fangroupTouchHandler) {
        topAvatar.removeEventListener('touchend', topAvatar._fangroupTouchHandler);
        delete topAvatar._fangroupTouchHandler;
      }
    }
    if (topAvatar) topAvatar.src = messageData.user.avatar;
    if (topName) topName.textContent = messageData.user.name; // 为非绑定角色的小头像添加点击事件（打开设置）
    const isCharacterMessage =
      messageData.id &&
      messageData.id.startsWith('msg_') &&
      messageData.id !== 'msg_001' &&
      !messageData.id.startsWith('msg_account_');
    if (topAvatar && !isCharacterMessage) {
      topAvatar.style.cursor = 'pointer';
      topAvatar.onclick = e => {
        e.stopPropagation(); // 使用通用联系人设置弹窗（支持账户/NPC/关系NPC/陌生人）
        console.log('📱 [小头像点击] 打开联系人设置，类型:', messageData._accountType);
        openMessageContactSettings(messageData, conversationData);
      };
    } else if (topAvatar) {
      topAvatar.style.cursor = 'default';
      topAvatar.onclick = null;
    }
    // 更新中间详细信息区域
    const detailAvatar = document.getElementById('message-detail-avatar');
    const detailName = document.getElementById('message-detail-name');
    const detailHandle = document.getElementById('message-detail-handle');
    if (detailAvatar) {
      detailAvatar.src = messageData.user.avatar; // 添加点击事件，进入对方主页
      detailAvatar.style.cursor = 'pointer';
      detailAvatar.onclick = () => {
        openAccountProfileFromDM(messageData, conversationData);
      };
    }
    if (detailName) detailName.textContent = messageData.user.name;
    if (detailHandle) detailHandle.textContent = messageData.user.handle; // 使用AI生成的简介
    const bioEl = document.getElementById('message-detail-bio');
    if (conversationData?.senderProfile?.bio && bioEl) {
      bioEl.textContent = conversationData.senderProfile.bio;
      bioEl.style.display = 'block';
    } else if (bioEl) {
      bioEl.style.display = 'none';
    }
    // 使用AI生成的关注者数量
    const followersCount = conversationData?.senderProfile?.followers || Math.floor(Math.random() * 1000) + 100;
    const config = languageConfig[currentLanguage] || languageConfig.zh;
    if (currentLanguage === 'en') {
      document.getElementById('message-detail-followers').textContent = `${followersCount} ${config.messageFollowers}`;
    } else {
      document.getElementById('message-detail-followers').textContent = `${followersCount} ${config.messageFollowers}`;
    }
    // 渲染日期分隔符（示例：当前日期）
    const today = new Date();
    const dateStr =
      currentLanguage === 'en'
        ? today.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })
        : `${today.getFullYear()}年${today.getMonth() + 1}月${String(today.getDate()).padStart(2, '0')}日`;
    contentContainer.appendChild(renderDateSeparator(dateStr)); // 渲染消息记录（使用消息本身的isOwn属性判断位置）
    if (conversationData && conversationData.messages && conversationData.messages.length > 0) {
      // 使用分组渲染消息
      const groups = groupMessagesBySender(conversationData.messages);
      const allMessageElements = [];
      groups.forEach(group => {
        const isOwn = group[0].message.isOwn === true;
        group.forEach((item, indexInGroup) => {
          const isLastInGroup = indexInGroup === group.length - 1;
          const messageEl = renderMessageItem(item.message, isOwn, item.index, isLastInGroup);
          contentContainer.appendChild(messageEl);
          allMessageElements.push(messageEl);
        });
      }); // 立即显示所有消息（历史消息不需要动画）
      allMessageElements.forEach(el => {
        el.style.opacity = '1';
        el.style.transform = 'translateY(0)';
      });
    } else {
      // 如果没有生成数据，显示预览消息
      const messageEl = renderMessageItem(
        {
          type: 'text',
          content: messageData.preview,
          time: '刚刚',
        },
        false,
        0,
        true,
      );
      contentContainer.appendChild(messageEl); // 立即显示
      messageEl.style.opacity = '1';
      messageEl.style.transform = 'translateY(0)';
    }
    // 滚动到底部（使用外层可滚动容器）
    setTimeout(() => {
      const scrollable = document.getElementById('message-detail-scrollable');
      if (scrollable) {
        scrollable.scrollTop = scrollable.scrollHeight;
      }
    }, 100);
  }
  // 打开私信详情页面
  window.openMessageDetail = async function (messageData) {
    // 🔧 检测并设置账户类型（如果未设置）
    if (!messageData._accountType && messageData.id) {
      if (messageData.id.startsWith('msg_account_')) {
        messageData._accountType = 'account';
      } else if (messageData.id.startsWith('msg_npc_')) {
        messageData._accountType = 'npc';
      } else if (messageData.id.startsWith('msg_relationship_')) {
        messageData._accountType = 'relationshipNpc';
      } else if (!messageData.id.startsWith('msg_') || messageData.id === 'msg_001') {
        // 其他非角色消息默认为陌生人
        messageData._accountType = 'stranger';
      }
      console.log('🔍 [打开私信] 检测到类型:', messageData._accountType, '| ID:', messageData.id);
    }

    // 🔧 重要：清理旧的type字段，确保不会误判为粉丝群
    // 只有真正的粉丝群才会保留type字段
    if (messageData.type !== 'fangroup') {
      // 如果不是粉丝群，删除type字段以避免误判
      delete messageData.type;
    }

    currentMessageConversation = messageData;
    userMessageQueue = []; // 检测来源页面
    const messagesPage = document.getElementById('x-messages-page');
    const notificationsPage = document.getElementById('x-notifications-page');
    const isFromNotifications = notificationsPage && notificationsPage.style.display === 'flex'; // 隐藏私信列表页面和浮动按钮
    messagesPage.style.display = 'none';
    const composeBtn = document.getElementById('compose-message-btn');
    if (composeBtn) composeBtn.style.display = 'none'; // 如果是从通知页面打开的，也要隐藏通知页面
    if (isFromNotifications) {
      notificationsPage.style.display = 'none';
    }
    // 隐藏羽毛笔按钮（刷新陌生人私信按钮）
    const refreshMessagesBtn = document.getElementById('refresh-messages-btn');
    if (refreshMessagesBtn) refreshMessagesBtn.style.display = 'none'; // 显示私信详情页面
    const detailPage = document.getElementById('x-message-detail-page');
    detailPage.style.display = 'flex';
    // 保存当前对话ID，用于文章转发时判断是否需要刷新页面
    detailPage.dataset.conversationId = messageData.id;
    // 保存来源页面标记
    detailPage.dataset.fromNotifications = isFromNotifications ? 'true' : 'false'; // 🔧 初始化输入框状态为启用（防止之前被拉黑的对话影响）
    setTimeout(() => {
      const messageInput = document.getElementById('message-input');
      const sendBtn = document.getElementById('message-send-btn');
      if (messageInput) {
        messageInput.disabled = false;
        messageInput.placeholder = '发送私信';
      }
      if (sendBtn) {
        sendBtn.disabled = false;
      }
    }, 50);
    const xDb = getXDB(); // 清除未读标记
    try {
      const dataId = `messagesList_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(dataId);
      if (savedData && savedData.data) {
        const messagesList = savedData.data;
        const messageIndex = messagesList.findIndex(msg => msg.id === messageData.id);
        if (messageIndex !== -1 && messagesList[messageIndex].unread) {
          // 清除未读标记
          messagesList[messageIndex].unread = false;
          messagesList[messageIndex].unreadCount = 0; // 保存回数据库
          await xDb.xAccountProfiles.put({
            handle: dataId,
            name: 'messagesList',
            data: messagesList,
            updatedAt: new Date().toISOString(),
          }); // 同步更新全局数据
          sampleMessagesData = messagesList;
          console.log('✅ 已清除未读标记');
        }
      }
    } catch (error) {
      console.error('清除未读标记失败:', error);
    }
    // 检查是否是粉丝群
    const isFanGroup = messageData.type === 'fangroup' || (messageData.id && messageData.id.startsWith('fangroup_'));
    if (isFanGroup) {
      // 粉丝群，直接加载粉丝群详情页（不触发 AI 生成）
      console.log('👥 检测到粉丝群，加载粉丝群详情页');
      loadFanGroupMessageDetail(messageData);
      return;
    }
    // 检查是否是已绑定角色的私信（id格式为 msg_characterId）
    const isCharacterMessage = messageData.id && messageData.id.startsWith('msg_') && messageData.id !== 'msg_001';
    if (isCharacterMessage) {
      // 已绑定角色，尝试从账户主页数据中读取资料
      console.log('📨 检测到已绑定角色私信，从账户主页数据读取资料');
      const characterId = messageData.id.replace('msg_', '');
      try {
        // 从 xCharacterProfiles 获取角色的X资料
        const xProfile = await xDb.xCharacterProfiles.get(characterId);
        if (xProfile) {
          // 尝试从 xAccountProfiles 读取该角色的账户主页数据
          const cleanHandle = xProfile.xHandle.replace('@', '');
          const accountProfile = await xDb.xAccountProfiles.get(cleanHandle);
          if (accountProfile && accountProfile.accountInfo) {
            console.log('✅ 找到角色的账户主页数据'); // 使用账户主页数据，但用最新的X资料头像覆盖
            const updatedAccountInfo = {
              ...accountProfile.accountInfo,
              avatar: xProfile.xAvatar, // 使用最新的X资料头像
              name: xProfile.xName, // 同时更新名称
              handle: xProfile.xHandle, // 同时更新句柄
            };
            loadCharacterMessageDetail(messageData, updatedAccountInfo);
            return;
          }
        }
        console.log('⚠️ 未找到角色的账户主页数据，使用基本资料'); // 如果没有账户主页数据，使用X资料
        if (xProfile) {
          const basicProfile = {
            name: xProfile.xName,
            handle: xProfile.xHandle,
            avatar: xProfile.xAvatar,
            bio: xProfile.xBio || '',
            followersCount: xProfile.followersCount || '0',
            verified: xProfile.xVerified || false,
          };
          loadCharacterMessageDetail(messageData, basicProfile);
          return;
        }
      } catch (error) {
        console.error('读取角色资料失败:', error);
      }
    }
    // 陌生人私信，走原来的生成流程
    // 标准化messageData格式（兼容两种格式）
    if (!messageData.user && messageData.userName) {
      messageData.user = {
        name: messageData.userName,
        handle: messageData.userHandle,
        avatar: messageData.userAvatar,
        verified: messageData.verified || false,
      };
    }
    // 🔧 多账户隔离：包含账户ID
    const conversationId = `messageConversation_${currentAccountId || 'main'}_${messageData.id}`;
    let conversationData = null;
    try {
      const savedConversation = await xDb.xAccountProfiles.get(conversationId);
      if (savedConversation && savedConversation.data) {
        conversationData = savedConversation.data;
        console.log('✅ 从数据库加载私信对话数据'); // 🔍 检查拉黑状态
        if (savedConversation.isBlocked) {
          console.log('⚠️ [拉黑] 该用户已被拉黑'); // 加载会话内容
          loadMessageConversation(messageData, conversationData); // 禁用输入框和发送按钮
          setTimeout(() => {
            const messageInput = document.getElementById('message-input');
            const sendBtn = document.getElementById('message-send-btn');
            if (messageInput) {
              messageInput.disabled = true;
              messageInput.placeholder = '对方已将你拉黑';
            }
            if (sendBtn) {
              sendBtn.disabled = true;
            }
          }, 100);
          return;
        }
        // 加载已有的会话内容
        loadMessageConversation(messageData, conversationData);
      }
    } catch (error) {
      console.error('加载私信对话数据失败:', error);
    }
    // 如果没有已有数据，生成新的对话内容
    if (!conversationData) {
      // 先显示加载状态
      const contentContainer = document.getElementById('message-detail-content');
      if (contentContainer) {
        contentContainer.innerHTML = `
 <div style="flex: 1; display: flex; align-items: center; justify-content: center;">
 <div style="text-align: center;">
 <div style="margin-bottom: 12px;">
 <svg viewBox="0 0 24 24" style="width: 48px; height: 48px; fill: var(--x-accent); animation: spin 1s linear infinite;">
 <g><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-1-13h2v6h-2zm0 8h2v2h-2z"></path></g>
 </svg>
 </div>
 <div style="color:var(--x-text-primary); font-size: 16px; font-weight: 600;">正在生成对话详情...</div>
 </div>
 </div>
 `;
      }
      // 生成新的对话内容
      conversationData = await generateMessageConversation(messageData); // 加载生成的会话内容
      if (conversationData) {
        loadMessageConversation(messageData, conversationData);
      } else {
        // 生成失败，显示预览内容
        loadMessageConversation(messageData, null);
      }
    }
  }; // 关闭私信详情页面
  window.closeMessageDetail = async function () {
    // 清空输入框
    const input = document.getElementById('message-input');
    if (input) {
      input.value = '';
      autoResizeMessageInput(input);
    }
    // 获取私信详情页面
    const detailPage = document.getElementById('x-message-detail-page');
    const isFromNotifications = detailPage.dataset.fromNotifications === 'true'; // 隐藏私信详情页面
    detailPage.style.display = 'none'; // 判断是从哪里打开的私信详情页
    // 🔧 优先检查明确的来源标记
    const isFromAccountProfile = currentMessageConversation && currentMessageConversation._fromAccountProfile === true;

    if (isFromAccountProfile) {
      console.log('📖 [返回] 从私信详情页返回账户主页');
      // 返回账户主页
      const accountProfilePage = document.getElementById('account-profile-page');
      if (accountProfilePage) {
        accountProfilePage.style.display = 'flex';
      }
    } else if (isFromNotifications) {
      console.log('📖 [返回] 从私信详情页返回通知页面'); // 返回通知页面
      document.getElementById('x-notifications-page').style.display = 'flex'; // 重新显示羽毛笔按钮（如果当前在All标签）
      const refreshMessagesBtn = document.getElementById('refresh-messages-btn');
      const isAllTab =
        document.querySelector('.notification-tab.active')?.textContent.includes('全部') ||
        document.querySelector('.notification-tab.active')?.textContent.includes('All');
      if (refreshMessagesBtn && isAllTab) {
        refreshMessagesBtn.style.display = 'flex';
      }
      // 重新加载通知以显示更新后的未读状态
      if (typeof loadNotifications === 'function') {
        await loadNotifications();
      }
    } else {
      console.log('📖 [返回] 从私信详情页返回私信列表'); // 返回私信列表页面
      document.getElementById('x-messages-page').style.display = 'flex'; // 显示浮动按钮
      const composeBtn = document.getElementById('compose-message-btn');
      if (composeBtn) composeBtn.style.display = 'flex'; // 重新渲染私信列表以显示更新后的未读状态
      if (typeof renderMessagesList === 'function') {
        renderMessagesList(sampleMessagesData);
      }
    }
    // 清空状态
    currentMessageConversation = null;
    userMessageQueue = [];
  }; // 自动调整输入框高度
  window.autoResizeMessageInput = function (textarea) {
    textarea.style.height = '36px';
    const scrollHeight = textarea.scrollHeight;
    if (scrollHeight > 36) {
      textarea.style.height = Math.min(scrollHeight, 100) + 'px';
    }
  }; // 处理输入框回车键
  window.handleMessageInputKeydown = function (event) {
    if (event.key === 'Enter' && !event.shiftKey) {
      event.preventDefault();
      sendMessageContent();
    }
  }; // 切换私信功能菜单显示/隐藏
  window.toggleMessageFunctionMenu = function () {
    const menu = document.getElementById('message-function-menu');
    const addBtn = document.getElementById('message-add-btn');
    if (!menu || !addBtn) return;
    const isVisible = menu.style.display === 'flex';
    if (isVisible) {
      menu.style.display = 'none'; // 旋转加号回原位
      const svg = addBtn.querySelector('svg');
      if (svg) svg.style.transform = 'rotate(0deg)';
    } else {
      menu.style.display = 'flex'; // 旋转加号45度变成X
      const svg = addBtn.querySelector('svg');
      if (svg) svg.style.transform = 'rotate(45deg)';
    }
  }; // 点击页面其他地方关闭功能菜单
  document.addEventListener('click', function (e) {
    const menu = document.getElementById('message-function-menu');
    const addBtn = document.getElementById('message-add-btn');
    if (!menu || !addBtn) return; // 如果点击的不是菜单或加号按钮，关闭菜单
    if (!menu.contains(e.target) && !addBtn.contains(e.target)) {
      menu.style.display = 'none';
      const svg = addBtn.querySelector('svg');
      if (svg) svg.style.transform = 'rotate(0deg)';
    }
  }); // 打开图片类型选择器
  window.openImageTypeSelector = function () {
    const dialog = document.getElementById('image-type-selector-dialog');
    if (dialog) {
      dialog.style.display = 'flex';
    }
  }; // 关闭图片类型选择器
  window.closeImageTypeSelector = function () {
    const dialog = document.getElementById('image-type-selector-dialog');
    if (dialog) {
      dialog.style.display = 'none';
    }
  }; // 选择图片类型
  window.selectImageType = function (type) {
    closeImageTypeSelector();
    if (type === 'real') {
      // 上传真实图片
      triggerMessageImageUpload();
    } else if (type === 'text') {
      // 打开文字图片输入框
      openTextImageDialog();
    }
  }; // 打开文字图片对话框
  function openTextImageDialog() {
    const dialog = document.getElementById('text-image-dialog');
    const input = document.getElementById('text-image-description-input');
    const counter = document.getElementById('text-image-counter');
    if (dialog) {
      dialog.style.display = 'flex';
    }
    if (input) {
      input.value = '';
    }
    if (counter) {
      counter.textContent = '0 / 500';
    }
    // 聚焦到输入框
    setTimeout(() => {
      if (input) input.focus();
    }, 100);
  }
  // 关闭文字图片对话框
  window.closeTextImageDialog = function () {
    const dialog = document.getElementById('text-image-dialog');
    if (dialog) {
      dialog.style.display = 'none';
    }
  }; // 更新文字图片字符计数
  window.updateTextImageCounter = function () {
    const input = document.getElementById('text-image-description-input');
    const counter = document.getElementById('text-image-counter');
    if (input && counter) {
      counter.textContent = `${input.value.length} / 500`;
    }
  }; // 发送文字图片
  window.sendTextImage = async function () {
    const input = document.getElementById('text-image-description-input');
    if (!input) return;
    const description = input.value.trim();
    if (!description) {
      showXToast('请输入图片描述', 'error');
      return;
    }
    // 关闭对话框
    closeTextImageDialog(); // 获取当前时间
    const now = new Date();
    const hours = now.getHours();
    const minutes = String(now.getMinutes()).padStart(2, '0');
    const timeStr = `${hours}:${minutes}`; // 创建文字图片消息对象
    const textImageMessage = {
      type: 'image',
      imageDescription: description,
      sensitive: false,
      time: timeStr,
      timestamp: now.toISOString(),
      isOwn: true,
    }; // 添加到消息队列
    userMessageQueue.push(textImageMessage); // 渲染新消息
    const contentContainer = document.getElementById('message-detail-content');
    if (contentContainer) {
      const currentMessageCount = contentContainer.querySelectorAll('.message-item').length;
      const newMessage = renderMessageItem(textImageMessage, true, currentMessageCount);
      contentContainer.appendChild(newMessage); // 立即显示动画
      setTimeout(() => {
        newMessage.style.transition = 'all 0.3s ease';
        newMessage.style.opacity = '1';
        newMessage.style.transform = 'translateY(0)';
      }, 10); // 滚动到底部
      setTimeout(() => {
        const scrollable = document.getElementById('message-detail-scrollable');
        if (scrollable) {
          scrollable.scrollTo({
            top: scrollable.scrollHeight,
            behavior: 'smooth',
          });
        }
      }, 100);
    }
    // 保存到数据库
    await saveUserMessageToDB(textImageMessage);
    console.log('✅ 文字图片消息已添加到队列，等待发送');
  }; // 触发图片上传
  window.triggerMessageImageUpload = function () {
    const input = document.getElementById('message-image-input');
    if (input) input.click();
  }; // 存储待发送的图片数据
  let pendingMessageImages = []; // 处理图片上传（支持多图）
  window.handleMessageImageUpload = async function (event) {
    const files = event.target.files;
    if (!files || files.length === 0) return; // 验证图片数量（最多4张）
    if (pendingMessageImages.length + files.length > 4) {
      showXToast('最多只能上传4张图片', 'error');
      return;
    }
    for (let i = 0; i < files.length; i++) {
      const file = files[i]; // 验证文件类型
      if (!file.type.startsWith('image/')) {
        showXToast('请选择图片文件', 'error');
        continue;
      }
      // 验证文件大小
      if (file.size > 5 * 1024 * 1024) {
        showXToast('图片文件不能超过5MB', 'error');
        continue;
      }
      const reader = new FileReader();
      reader.onload = function (e) {
        const base64Data = e.target.result; // 添加到待发送列表
        pendingMessageImages.push({
          content: base64Data,
          fileName: file.name,
        }); // 立即发送图片消息
        sendImageMessage(base64Data, file.name);
        console.log(`✅ 图片 ${file.name} 已添加并发送`);
      };
      reader.readAsDataURL(file);
    }
    // 清空输入框，允许重新选择相同文件
    event.target.value = '';
  }; // 发送图片消息（立即显示，但不触发AI回复）
  async function sendImageMessage(base64Data, fileName) {
    // 获取当前时间
    const now = new Date();
    const hours = now.getHours();
    const minutes = String(now.getMinutes()).padStart(2, '0');
    const period = hours >= 12 ? '下午' : '上午';
    const timeStr = `${hours > 12 ? hours - 12 : hours}:${minutes} ${period}`; // 创建图片消息对象
    const imageMessage = {
      type: 'image',
      imageData: base64Data,
      fileName: fileName,
      time: timeStr,
      timestamp: now.toISOString(),
      isOwn: true,
    }; // 添加到消息队列
    userMessageQueue.push(imageMessage); // 渲染新消息
    const contentContainer = document.getElementById('message-detail-content');
    if (contentContainer) {
      const currentMessageCount = contentContainer.querySelectorAll('.message-item:not(#typing-indicator)').length;
      const newMessage = renderMessageItem(imageMessage, true, currentMessageCount, true);
      contentContainer.appendChild(newMessage); // 立即显示动画
      setTimeout(() => {
        newMessage.style.transition = 'all 0.3s ease';
        newMessage.style.opacity = '1';
        newMessage.style.transform = 'translateY(0)';
      }, 10); // 滚动到底部
      setTimeout(() => {
        const scrollable = document.getElementById('message-detail-scrollable');
        if (scrollable) {
          scrollable.scrollTo({
            top: scrollable.scrollHeight,
            behavior: 'smooth',
          });
        }
      }, 100);
    }
    // 保存到数据库
    await saveUserMessageToDB(imageMessage);
    console.log('✅ 图片消息已添加到队列，等待发送');
  }
  // 用户已发送的消息队列（等待AI回复）
  let userMessageQueue = []; // 表情包管理
  let userStickers = [];
  let currentStickerTab = 'frequent'; // 'frequent' | 'all'
  // 加载用户表情包
  async function loadUserStickers() {
    try {
      const xDb = getXDB();
      const accountId = currentAccountId || 'main';
      const stickerDataId = `userStickers_${accountId}`;
      const stickerData = await xDb.xUserTweets.get(stickerDataId);
      if (stickerData && stickerData.stickers) {
        userStickers = stickerData.stickers; // 确保每个表情包都有使用统计
        userStickers = userStickers.map(sticker => ({
          ...sticker,
          useCount: sticker.useCount || 0,
          lastUsedAt: sticker.lastUsedAt || null,
        }));
      } else {
        userStickers = [];
      }
    } catch (error) {
      console.error('加载表情包失败:', error);
      userStickers = [];
    }
  }
  // 保存用户表情包
  async function saveUserStickers() {
    try {
      const xDb = getXDB();
      const accountId = currentAccountId || 'main';
      const stickerDataId = `userStickers_${accountId}`;
      await xDb.xUserTweets.put({
        id: stickerDataId,
        stickers: userStickers,
        updatedAt: new Date().toISOString(),
      });
      console.log('✅ 表情包已保存');
    } catch (error) {
      console.error('保存表情包失败:', error);
    }
  }
  // 打开表情包选择器
  window.openStickerPicker = async function () {
    await loadUserStickers();
    currentStickerTab = 'frequent';
    updateStickerTabUI();
    renderStickerList();
    const modal = document.getElementById('sticker-picker-modal');
    if (modal) {
      modal.style.display = 'flex';
    }
  }; // 切换表情包标签
  window.switchStickerTab = function (tab) {
    currentStickerTab = tab;
    updateStickerTabUI();
    renderStickerList();
  }; // 更新标签UI
  function updateStickerTabUI() {
    const frequentTab = document.getElementById('sticker-tab-frequent');
    const allTab = document.getElementById('sticker-tab-all');
    if (currentStickerTab === 'frequent') {
      frequentTab.style.borderBottomColor = 'var(--x-accent)';
      frequentTab.style.color = 'var(--x-text-primary)';
      allTab.style.borderBottomColor = 'transparent';
      allTab.style.color = 'var(--x-text-secondary)';
    } else {
      frequentTab.style.borderBottomColor = 'transparent';
      frequentTab.style.color = 'var(--x-text-secondary)';
      allTab.style.borderBottomColor = 'var(--x-accent)';
      allTab.style.color = 'var(--x-text-primary)';
    }
  }
  // 关闭表情包选择器
  window.closeStickerPicker = function () {
    const modal = document.getElementById('sticker-picker-modal');
    if (modal) {
      modal.style.display = 'none';
    }

    // 重置评论模式标识
    if (window.setCommentStickerMode) {
      window.setCommentStickerMode(false);
    }
  }; // 渲染表情包列表
  function renderStickerList() {
    const listContainer = document.getElementById('sticker-list');
    if (!listContainer) return; // 根据屏幕宽度动态调整网格列宽
    const screenWidth = window.innerWidth;
    let minColumnWidth = '80px';
    if (screenWidth < 400) {
      minColumnWidth = '70px'; // 小屏幕
    } else if (screenWidth < 500) {
      minColumnWidth = '75px'; // 中等屏幕
    }
    listContainer.style.gridTemplateColumns = `repeat(auto-fill, minmax(${minColumnWidth}, 1fr))`;
    listContainer.innerHTML = ''; // 获取要显示的表情包
    let displayStickers = [];
    if (currentStickerTab === 'frequent') {
      // 常用：取使用次数 > 0 的，按使用次数和最近使用时间排序
      const frequentStickers = userStickers
        .filter(s => s.useCount > 0)
        .sort((a, b) => {
          // 优先按使用次数排序
          if (b.useCount !== a.useCount) {
            return b.useCount - a.useCount;
          }
          // 使用次数相同，按最近使用时间排序
          if (a.lastUsedAt && b.lastUsedAt) {
            return new Date(b.lastUsedAt) - new Date(a.lastUsedAt);
          }
          return 0;
        })
        .slice(0, 20); // 最多显示20个常用表情包
      displayStickers = frequentStickers;
      if (frequentStickers.length === 0) {
        listContainer.style.display = 'flex';
        listContainer.innerHTML = `
 <div style="width: 100%; text-align: center; padding: 60px 20px; color:var(--x-text-secondary); ">
 <div style="font-size: 48px; margin-bottom: 12px;">😊</div>
 <div style="font-size: 14px; margin-bottom: 8px; font-weight: 600;">暂无常用表情包</div>
 <div style="font-size: 13px;">使用过的表情包会出现在这里</div>
 </div>
 `;
        return;
      } else {
        listContainer.style.display = 'grid';
      }
    } else {
      // 全部：按添加时间倒序
      displayStickers = [...userStickers].reverse();
      if (userStickers.length === 0) {
        listContainer.style.display = 'flex';
        listContainer.innerHTML = `
 <div style="width: 100%; text-align: center; padding: 60px 20px; color:var(--x-text-secondary); ">
 <div style="font-size: 48px; margin-bottom: 12px;">📦</div>
 <div style="font-size: 14px; margin-bottom: 8px; font-weight: 600;">暂无表情包</div>
 <div style="font-size: 13px;">点击下方"导入表情包"添加</div>
 </div>
 `;
        return;
      } else {
        listContainer.style.display = 'grid';
      }
    }
    displayStickers.forEach((sticker, displayIndex) => {
      // 找到原始索引
      const originalIndex = userStickers.findIndex(s => s.url === sticker.url && s.description === sticker.description);
      const stickerEl = document.createElement('div');
      stickerEl.style.cssText = `
 position: relative; cursor: pointer; border-radius: 8px; overflow: hidden; transition: transform 0.2s; width: 100%; padding-bottom: 100%; background-color:var(--x-bg-secondary); `;
      stickerEl.onmouseover = () => {
        stickerEl.style.transform = 'scale(1.05)';
      };
      stickerEl.onmouseout = () => {
        stickerEl.style.transform = 'scale(1)';
      };
      stickerEl.onclick = () => {
        // 检查是否在评论模式
        if (window.getCommentStickerMode && window.getCommentStickerMode()) {
          // 评论模式：调用评论表情包选择函数
          if (window.selectCommentSticker) {
            window.selectCommentSticker(sticker);
          }
        } else {
          // 正常模式：发送私信表情包
          sendStickerMessage(sticker);
          closeStickerPicker();
        }
      };
      stickerEl.innerHTML = `
 <div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; display: flex; align-items: center; justify-content: center;">
 <img src="${sticker.url}" alt="${sticker.description}"
 style="width: 100%; height: 100%; object-fit: cover; display: block;"
 onerror="this.parentElement.innerHTML='<div style=\\'display: flex; flex-direction: column; align-items: center; justify-content: center; width: 100%; height: 100%; background-color:var(--x-bg-secondary); color:var(--x-text-secondary); font-size: 11px; padding: 4px; text-align: center;\\'>❌<br>加载失败<br><button onclick=\\'deleteSticker(${originalIndex})\\' style=\\'margin-top: 4px; padding: 2px 6px; font-size: 10px; background: var(--x-accent); color: white; border: none; border-radius: 4px; cursor: pointer;\\'>删除</button></div>';">
 </div>
 <button onclick="deleteSticker(${originalIndex}); event.stopPropagation();"
 ontouchstart="this.style.opacity='1'"
 style="position: absolute; top: 4px; right: 4px; background: rgba(0,0,0,0.7); border: none; border-radius: 50%; width: 24px; height: 24px; color: #fff; cursor: pointer; display: flex; align-items: center; justify-content: center; padding: 0; opacity: 0; transition: opacity 0.2s; z-index: 2; " onmouseover="this.style.opacity='1'" onmouseout="this.style.opacity='0'">
 <svg viewBox="0 0 24 24" style="width: 14px; height: 14px; fill: #fff;">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </button>
 `;
      listContainer.appendChild(stickerEl);
    });
  }
  // 删除表情包
  window.deleteSticker = async function (index) {
    if (confirm('确定要删除这个表情包吗？')) {
      userStickers.splice(index, 1);
      await saveUserStickers(); // 如果管理器打开，更新管理器
      const managerDialog = document.getElementById('sticker-manager-dialog');
      if (managerDialog && managerDialog.style.display === 'flex') {
        renderStickerManager();
      }
      // 如果选择器打开，更新选择器
      const pickerModal = document.getElementById('sticker-picker-modal');
      if (pickerModal && pickerModal.style.display === 'flex') {
        renderStickerList();
      }
      showXToast('已删除', 'success');
    }
  }; // 打开添加表情包对话框
  window.openAddStickerDialog = function () {
    const dialog = document.getElementById('add-sticker-dialog');
    if (dialog) {
      dialog.style.display = 'flex'; // 清空输入框
      const batchInput = document.getElementById('sticker-batch-input');
      if (batchInput) {
        batchInput.value = '';
      }
    }
  }; // 关闭添加表情包对话框
  window.closeAddStickerDialog = function () {
    const dialog = document.getElementById('add-sticker-dialog');
    if (dialog) {
      dialog.style.display = 'none';
    }
  }; // ============================================
  // 语音消息功能
  // ============================================
  // 打开语音消息对话框
  window.openVoiceMessageDialog = function () {
    const dialog = document.getElementById('voice-message-dialog');
    if (dialog) {
      dialog.style.display = 'flex'; // 清空输入框
      const textInput = document.getElementById('voice-message-text-input');
      if (textInput) {
        textInput.value = '';
        textInput.focus();
      }
    }
  }; // 关闭语音消息对话框
  window.closeVoiceMessageDialog = function () {
    const dialog = document.getElementById('voice-message-dialog');
    if (dialog) {
      dialog.style.display = 'none';
    }
  }; // 发送语音消息
  window.sendVoiceMessage = function () {
    const textInput = document.getElementById('voice-message-text-input');
    if (!textInput) return;
    const voiceText = textInput.value.trim();
    if (!voiceText) {
      showXToast('请输入语音内容', 'error');
      return;
    }
    // 估算语音时长（假设每10个字符约1秒）
    const estimatedDuration = Math.max(5, Math.ceil(voiceText.length / 10));
    const minutes = Math.floor(estimatedDuration / 60);
    const seconds = estimatedDuration % 60;
    const durationStr =
      minutes > 0 ? `${minutes}:${String(seconds).padStart(2, '0')}` : `0:${String(seconds).padStart(2, '0')}`; // 创建语音消息对象
    const now = new Date();
    const hours = now.getHours();
    const minutesNow = String(now.getMinutes()).padStart(2, '0');
    const period = hours >= 12 ? '下午' : '上午';
    const timeStr = `${hours > 12 ? hours - 12 : hours}:${minutesNow} ${period}`;
    const voiceMessage = {
      type: 'voice',
      voiceText: voiceText,
      duration: durationStr,
      time: timeStr,
      timestamp: now.toISOString(),
      isOwn: true,
    }; // 添加到消息队列
    userMessageQueue.push(voiceMessage); // 渲染到界面
    const contentContainer = document.getElementById('message-detail-content');
    if (contentContainer) {
      const messageEl = renderMessageItem(voiceMessage, true, undefined, true, true);
      contentContainer.appendChild(messageEl); // 动画显示
      requestAnimationFrame(() => {
        messageEl.style.opacity = '1';
        messageEl.style.transform = 'translateY(0)';
      }); // 滚动到底部
      setTimeout(() => {
        const scrollable = document.getElementById('message-detail-scrollable');
        if (scrollable) {
          scrollable.scrollTop = scrollable.scrollHeight;
        }
      }, 100);
    }
    // 保存到数据库
    saveUserMessageToDB(voiceMessage); // 关闭对话框
    closeVoiceMessageDialog();
    console.log('✅ [语音消息] 已添加到队列:', voiceMessage);
  }; // 打开表情包管理器
  window.openStickerManager = async function () {
    await loadUserStickers();
    renderStickerManager();
    const dialog = document.getElementById('sticker-manager-dialog');
    if (dialog) {
      dialog.style.display = 'flex';
    }
  }; // 关闭表情包管理器
  window.closeStickerManager = function () {
    const dialog = document.getElementById('sticker-manager-dialog');
    if (dialog) {
      dialog.style.display = 'none';
    }
  }; // 渲染表情包管理器列表
  function renderStickerManager() {
    const listContainer = document.getElementById('sticker-manager-list');
    if (!listContainer) return;
    listContainer.innerHTML = '';
    if (userStickers.length === 0) {
      listContainer.innerHTML = `
 <div style="text-align: center; padding: 40px 20px; color:var(--x-text-secondary);">
 <div style="font-size: 14px;">暂无表情包</div>
 </div>
 `;
      return;
    }
    userStickers.forEach((sticker, index) => {
      const itemEl = document.createElement('div');
      itemEl.style.cssText = `
 padding: 12px; margin-bottom: 8px; background-color:var(--x-bg-secondary); border-radius: 8px; display: flex; gap: 12px; align-items: flex-start; `;
      itemEl.innerHTML = `
 <img src="${sticker.url}"
 style="width: 60px; height: 60px; object-fit: cover; border-radius: 6px; flex-shrink: 0;"
 onerror="this.src=''; this.style.background='var(--x-bg-hover)'; this.style.display='flex'; this.style.alignItems='center'; this.style.justifyContent='center';">
 <div style="flex: 1; min-width: 0;">
 <div style="font-size: 14px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 4px;">
 ${sticker.description}
 </div>
 <div style="font-size: 12px; color:var(--x-text-secondary); word-break: break-all; margin-bottom: 4px;">
 ${sticker.url}
 </div>
 <div style="font-size: 11px; color:var(--x-text-secondary);">
 使用次数: ${sticker.useCount || 0}
 ${sticker.lastUsedAt ? `· 最后使用: ${new Date(sticker.lastUsedAt).toLocaleString('zh-CN')}` : ''}
 </div>
 </div>
 <button onclick="editSticker(${index}); event.stopPropagation();" style="background-color: var(--x-bg-hover); color:var(--x-text-primary); border: none; border-radius: 6px; padding: 6px 12px; font-size: 12px; cursor: pointer; flex-shrink: 0; ">编辑</button>
 <button onclick="deleteSticker(${index}); event.stopPropagation();" style="background-color: rgba(239, 68, 68, 0.1); color: rgb(239, 68, 68); border: none; border-radius: 6px; padding: 6px 12px; font-size: 12px; cursor: pointer; flex-shrink: 0; ">删除</button>
 `;
      listContainer.appendChild(itemEl);
    });
  }
  // 编辑表情包
  window.editSticker = function (index) {
    const sticker = userStickers[index];
    if (!sticker) return;
    const newDescription = prompt('修改描述:', sticker.description);
    if (newDescription === null) return;
    const newUrl = prompt('修改链接:', sticker.url);
    if (newUrl === null) return; // 验证URL
    try {
      const urlObj = new URL(newUrl.trim());
      userStickers[index].description = newDescription.trim();
      userStickers[index].url = urlObj.href;
      saveUserStickers().then(() => {
        renderStickerManager();
        showXToast('修改成功', 'success');
      });
    } catch (e) {
      showXToast('链接格式无效', 'error');
    }
  }; // 清空所有表情包
  window.clearAllStickers = async function () {
    if (!confirm(`确定要清空所有 ${userStickers.length} 个表情包吗？此操作不可恢复！`)) {
      return;
    }
    userStickers = [];
    await saveUserStickers();
    renderStickerManager();
    renderStickerList();
    showXToast('已清空所有表情包', 'success');
  }; // 批量添加表情包
  window.batchAddStickers = async function () {
    const batchInput = document.getElementById('sticker-batch-input');
    const text = batchInput ? batchInput.value.trim() : '';
    if (!text) {
      showXToast('请输入表情包信息', 'error');
      return;
    }
    // 解析每一行
    const lines = text.split('\n').filter(line => line.trim());
    const newStickers = [];
    const errors = [];
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim(); // 使用更严格的正则匹配：描述 + 链接
      // 匹配完整的URL，包括协议、域名、路径
      const urlMatch = line.match(/(https?:\/\/[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}(?:\/[^\s]*)?)/);
      if (!urlMatch) {
        errors.push(`第${i + 1}行：未找到有效链接`);
        continue;
      }
      let url = urlMatch[0].trim();
      const description = line.substring(0, urlMatch.index).trim();
      if (!description) {
        errors.push(`第${i + 1}行：缺少描述`);
        continue;
      }
      // 验证URL格式
      try {
        const urlObj = new URL(url); // 确保URL包含协议和主机
        if (!urlObj.protocol || !urlObj.host) {
          errors.push(`第${i + 1}行：链接格式无效`);
          continue;
        }
        // 使用标准化的URL
        url = urlObj.href;
      } catch (e) {
        errors.push(`第${i + 1}行：链接格式无效 - ${e.message}`);
        continue;
      }
      // 验证是否为图片链接（可选）
      const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.bmp', '.svg'];
      const hasImageExtension = imageExtensions.some(ext => url.toLowerCase().includes(ext));
      if (!hasImageExtension) {
        // 警告但不阻止
        console.warn(`第${i + 1}行：链接可能不是图片格式，但仍会导入`);
      }
      // 检查是否重复
      const isDuplicate = userStickers.some(s => s.url === url);
      if (isDuplicate) {
        errors.push(`第${i + 1}行：该表情包已存在`);
        continue;
      }
      newStickers.push({
        description,
        url,
        useCount: 0,
        lastUsedAt: null,
        createdAt: new Date().toISOString(),
      });
    }
    if (newStickers.length === 0) {
      if (errors.length > 0) {
        showXToast(errors.join('\n'), 'error');
      } else {
        showXToast('没有可导入的表情包', 'error');
      }
      return;
    }
    // 添加到表情包列表
    userStickers.push(...newStickers);
    await saveUserStickers();
    renderStickerList();
    closeAddStickerDialog();
    let message = `成功导入${newStickers.length}个表情包`;
    if (errors.length > 0) {
      message += `，${errors.length}个失败`;
    }
    showXToast(message, 'success');
  }; // 发送表情包消息（立即显示，但不触发AI回复）
  async function sendStickerMessage(sticker) {
    // 🔒 检查拉黑状态
    const blockCheck = await checkIfBlocked();
    if (blockCheck.isBlocked) {
      showXToast('对方已将你拉黑，无法发送消息', 'error');
      return;
    }
    if (blockCheck.error) {
      showXToast(blockCheck.error, 'error');
      return;
    }
    // 更新使用统计
    const stickerIndex = userStickers.findIndex(s => s.url === sticker.url && s.description === sticker.description);
    if (stickerIndex !== -1) {
      userStickers[stickerIndex].useCount = (userStickers[stickerIndex].useCount || 0) + 1;
      userStickers[stickerIndex].lastUsedAt = new Date().toISOString();
      await saveUserStickers();
    }
    // 获取当前时间
    const now = new Date();
    const hours = now.getHours();
    const minutes = String(now.getMinutes()).padStart(2, '0');
    const period = hours >= 12 ? '下午' : '上午';
    const timeStr = `${hours > 12 ? hours - 12 : hours}:${minutes} ${period}`; // 创建表情包消息对象（发送描述给AI）
    const stickerMessage = {
      type: 'sticker',
      stickerDescription: sticker.description, // 描述给AI识别
      stickerUrl: sticker.url, // URL用于显示
      time: timeStr,
      timestamp: now.toISOString(),
      isOwn: true,
    }; // 添加到消息队列
    userMessageQueue.push(stickerMessage); // 渲染新消息
    const contentContainer = document.getElementById('message-detail-content');
    if (contentContainer) {
      const currentMessageCount = contentContainer.querySelectorAll('.message-item:not(#typing-indicator)').length;
      const newMessage = renderMessageItem(stickerMessage, true, currentMessageCount, true);
      contentContainer.appendChild(newMessage); // 立即显示动画
      setTimeout(() => {
        newMessage.style.transition = 'all 0.3s ease';
        newMessage.style.opacity = '1';
        newMessage.style.transform = 'translateY(0)';
      }, 10); // 滚动到底部
      setTimeout(() => {
        const scrollable = document.getElementById('message-detail-scrollable');
        if (scrollable) {
          scrollable.scrollTo({
            top: scrollable.scrollHeight,
            behavior: 'smooth',
          });
        }
      }, 100);
    }
    // 保存到数据库
    await saveUserMessageToDB(stickerMessage);
    console.log('✅ 表情包消息已添加到队列，等待发送');
  }
  // 🔒 检查拉黑状态（通用函数）
  async function checkIfBlocked() {
    if (!currentMessageConversation) {
      return { isBlocked: false, error: '会话数据丢失' };
    }
    try {
      const xDb = getXDB();
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${currentMessageConversation.id}`;
      const savedConversation = await xDb.xAccountProfiles.get(conversationId);
      if (savedConversation && savedConversation.isBlocked) {
        console.log('⚠️ [拉黑] 对方已拉黑用户，禁止发送消息'); // 确保输入框被禁用
        const input = document.getElementById('message-input');
        const sendBtn = document.getElementById('message-send-btn');
        if (input) {
          input.disabled = true;
          input.placeholder = '对方已将你拉黑';
        }
        if (sendBtn) {
          sendBtn.disabled = true;
        }
        return { isBlocked: true };
      }
      return { isBlocked: false };
    } catch (error) {
      console.error('检查拉黑状态失败:', error);
      return { isBlocked: false, error: error.message };
    }
  }
  // 发送用户消息
  window.sendMessageContent = async function () {
    const input = document.getElementById('message-input');
    if (!input) return;
    const content = input.value.trim();
    if (!content) return; // 🔒 检查拉黑状态
    const blockCheck = await checkIfBlocked();
    if (blockCheck.isBlocked) {
      showXToast('对方已将你拉黑，无法发送消息', 'error');
      return;
    }
    if (blockCheck.error) {
      showXToast(blockCheck.error, 'error');
      return;
    }
    // 获取当前时间
    const now = new Date();
    const hours = now.getHours();
    const minutes = String(now.getMinutes()).padStart(2, '0');
    const period = hours >= 12 ? '下午' : '上午';
    const timeStr = `${hours > 12 ? hours - 12 : hours}:${minutes} ${period}`; // 创建用户消息对象
    const userMessage = {
      type: 'text',
      content: content,
      time: timeStr,
      timestamp: now.toISOString(),
      isOwn: true,
    }; // 添加到消息队列
    userMessageQueue.push(userMessage); // 渲染新消息
    const contentContainer = document.getElementById('message-detail-content');
    if (contentContainer) {
      // 获取当前消息总数作为新消息的索引（排除typing-indicator）
      const currentMessageCount = contentContainer.querySelectorAll('.message-item:not(#typing-indicator)').length; // 检查最后一条消息是否也是用户发送的
      const allMessages = Array.from(contentContainer.querySelectorAll('.message-item:not(#typing-indicator)'));
      const lastMessage = allMessages[allMessages.length - 1];
      const isLastMessageOwn =
        lastMessage?.querySelector('[data-message-index]')?.closest('.message-item')?.style.alignItems === 'flex-end'; // 如果最后一条也是用户消息，则当前消息不是最后一条（需要去掉尾巴）
      const newMessage = renderMessageItem(userMessage, true, currentMessageCount, true);
      contentContainer.appendChild(newMessage); // 立即显示动画
      setTimeout(() => {
        newMessage.style.transition = 'all 0.3s ease';
        newMessage.style.opacity = '1';
        newMessage.style.transform = 'translateY(0)';
      }, 10); // 滚动到底部（使用外层可滚动容器）
      setTimeout(() => {
        const scrollable = document.getElementById('message-detail-scrollable');
        if (scrollable) {
          scrollable.scrollTo({
            top: scrollable.scrollHeight,
            behavior: 'smooth',
          });
        }
      }, 100);
    }
    // 清空输入框
    input.value = '';
    autoResizeMessageInput(input); // 保存到数据库
    await saveUserMessageToDB(userMessage);
    console.log('✅ 用户消息已发送并保存:', content);
  }; // 保存用户消息到数据库
  async function saveUserMessageToDB(userMessage) {
    if (!currentMessageConversation) return;
    try {
      const xDb = getXDB(); // 🔧 多账户隔离：包含账户ID
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${currentMessageConversation.id}`; // 读取现有对话数据
      let savedConversation = await xDb.xAccountProfiles.get(conversationId);
      if (savedConversation && savedConversation.data) {
        // 添加用户消息到messages数组
        if (!savedConversation.data.messages) {
          savedConversation.data.messages = [];
        }
        // 标记消息为等待AI回复状态
        userMessage.waitingForAIResponse = true;
        savedConversation.data.messages.push(userMessage); // 更新数据库
        savedConversation.updatedAt = new Date().toISOString();
        await xDb.xAccountProfiles.put(savedConversation);
        console.log('✅ 用户消息已保存到数据库（更新）'); // 重置该角色的自动发消息触发记录
        const messageId = currentMessageConversation.id;
        if (messageId && messageId.startsWith('msg_') && !messageId.startsWith('msg_account_')) {
          const characterId = messageId.replace('msg_', '');
          if (typeof window.resetAutoMessageTrigger === 'function') {
            window.resetAutoMessageTrigger(characterId);
          }
        }
        // 清除该私信的未读标记（用户回复了）
        try {
          const dataId = `messagesList_${currentAccountId || 'main'}`;
          const messagesListData = await xDb.xAccountProfiles.get(dataId);
          if (messagesListData && messagesListData.data) {
            const messagesList = messagesListData.data;
            const msgIndex = messagesList.findIndex(msg => msg.id === messageId);
            if (msgIndex !== -1 && messagesList[msgIndex].unread) {
              messagesList[msgIndex].unread = false;
              messagesList[msgIndex].unreadCount = 0;
              await xDb.xAccountProfiles.put({
                handle: dataId,
                name: 'messagesList',
                data: messagesList,
                updatedAt: new Date().toISOString(),
              }); // 同步更新全局数据
              sampleMessagesData = messagesList;
              console.log('✅ 已清除未读标记（用户回复）');
            }
          }
        } catch (error) {
          console.error('清除未读标记失败:', error);
        }
      } else {
        // 首次发送消息，创建新的对话记录
        console.log('📨 创建新的对话记录');
        const newConversation = {
          handle: conversationId,
          name: 'messageConversation',
          data: {
            messages: [userMessage],
          },
          messageId: currentMessageConversation.id,
          updatedAt: new Date().toISOString(),
        };
        await xDb.xAccountProfiles.put(newConversation);
        console.log('✅ 用户消息已保存到数据库（新建）'); // 重置该角色的自动发消息触发记录
        const messageId = currentMessageConversation.id;
        if (messageId && messageId.startsWith('msg_') && !messageId.startsWith('msg_account_')) {
          const characterId = messageId.replace('msg_', '');
          if (typeof window.resetAutoMessageTrigger === 'function') {
            window.resetAutoMessageTrigger(characterId);
          }
        }
      }
    } catch (error) {
      console.error('保存用户消息失败:', error);
    }
  }
  // 获取AI回复
  // 重新生成AI回复
  window.regenerateAIResponse = async function () {
    if (!currentMessageConversation) {
      showXToast('会话数据丢失', 'error');
      return;
    }
    try {
      const xDb = getXDB(); // 🔧 多账户隔离：包含账户ID
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${currentMessageConversation.id}`;
      const savedConversation = await xDb.xAccountProfiles.get(conversationId);
      if (!savedConversation || !savedConversation.data || !savedConversation.data.messages) {
        showXToast('没有对话记录', 'error');
        return;
      }
      const messages = savedConversation.data.messages; // 找到最后一个用户消息的索引
      let lastUserMessageIndex = -1;
      for (let i = messages.length - 1; i >= 0; i--) {
        if (messages[i].isOwn === true) {
          lastUserMessageIndex = i;
          break;
        }
      }
      if (lastUserMessageIndex === -1) {
        showXToast('没有找到用户消息', 'error');
        return;
      }
      // 获取用户发送的消息（用于重新生成）
      const userMessages = [];
      for (let i = lastUserMessageIndex; i < messages.length && messages[i].isOwn === true; i++) {
        userMessages.push(messages[i]);
      }
      // 删除最后一批AI回复
      const newMessages = messages.slice(0, lastUserMessageIndex + userMessages.length);
      savedConversation.data.messages = newMessages; // 保存更新后的对话
      await xDb.xAccountProfiles.put(savedConversation); // 重新渲染消息列表
      const contentContainer = document.getElementById('message-detail-content');
      if (contentContainer) {
        contentContainer.innerHTML = ''; // 渲染日期分隔符
        const today = new Date();
        const dateStr =
          currentLanguage === 'en'
            ? today.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })
            : `${today.getFullYear()}年${today.getMonth() + 1}月${String(today.getDate()).padStart(2, '0')}日`;
        contentContainer.appendChild(renderDateSeparator(dateStr)); // 使用分组渲染消息
        const groups = groupMessagesBySender(newMessages);
        const allMessageElements = [];
        groups.forEach(group => {
          const isOwn = group[0].message.isOwn === true;
          group.forEach((item, indexInGroup) => {
            const isLastInGroup = indexInGroup === group.length - 1;
            const messageEl = renderMessageItem(item.message, isOwn, item.index, isLastInGroup);
            contentContainer.appendChild(messageEl);
            allMessageElements.push(messageEl);
          });
        }); // 立即显示所有消息（历史消息不需要动画）
        allMessageElements.forEach(el => {
          el.style.opacity = '1';
          el.style.transform = 'translateY(0)';
        }); // 滚动到底部
        setTimeout(() => {
          const scrollable = document.getElementById('message-detail-scrollable');
          if (scrollable) {
            scrollable.scrollTop = scrollable.scrollHeight;
          }
        }, 100);
      }
      // 设置用户消息队列
      userMessageQueue = userMessages; // 自动触发AI回复
      setTimeout(() => {
        getAIResponse();
      }, 500);
    } catch (error) {
      console.error('重新生成失败:', error);
      showXToast('重新生成失败', 'error');
    }
  };
  // 处理粉丝群加入逻辑（在AI回复后）
  async function handleFanGroupJoinAfterAIResponse(conversationRef) {
    try {
      console.log('🔍 [粉丝群加入] ========== 开始检测 ==========');
      console.log('🔍 [粉丝群加入] 当前对话:', conversationRef.id, conversationRef.name || conversationRef.userName);

      // 🎯 从数据库读取完整对话记录（仿照Tweet检测逻辑）
      const xDb = getXDB();
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${conversationRef.id}`;
      console.log('🔍 [粉丝群加入] 读取对话ID:', conversationId);
      const savedConversation = await xDb.xAccountProfiles.get(conversationId);

      if (!savedConversation || !savedConversation.data || !savedConversation.data.messages) {
        console.log('⚠️ [粉丝群加入] 未找到对话记录');
        return;
      }

      const messages = savedConversation.data.messages;
      console.log(`🔍 [粉丝群加入] 对话总消息数: ${messages.length}`);

      // 检查对话记录中是否有粉丝群转发（检查最近20条消息）
      const fanGroupMessages = [];
      const startIndex = Math.max(0, messages.length - 20);
      console.log(`🔍 [粉丝群加入] 检查消息范围: ${startIndex} - ${messages.length - 1}`);

      for (let i = startIndex; i < messages.length; i++) {
        const msg = messages[i];
        console.log(`🔍 [粉丝群加入] 消息${i}: type=${msg.type}, isOwn=${msg.isOwn}`);
        if (msg.type === 'quoteFanGroup') {
          console.log(`✅ [粉丝群加入] 找到quoteFanGroup消息! isOwn=${msg.isOwn}`, msg.fanGroup);
          if (msg.isOwn === true) {
            fanGroupMessages.push(msg);
          }
        }
      }

      if (fanGroupMessages.length === 0) {
        console.log('⏭️ [粉丝群加入] 未检测到用户发送的粉丝群转发消息');
        return; // 没有粉丝群转发，直接返回
      }

      console.log(`✅ [粉丝群加入] 检测到 ${fanGroupMessages.length} 个粉丝群转发`);

      // 对每个粉丝群转发进行处理
      for (const fanGroupMsg of fanGroupMessages) {
        const fanGroupData = fanGroupMsg.fanGroup;

        // 随机决定是否加入（40-70%的概率）
        const joinProbability = 0.4 + Math.random() * 0.3; // 40%-70%
        const shouldJoin = Math.random() < joinProbability;

        if (!shouldJoin) {
          console.log(
            `🎯 [粉丝群加入] ${conversationRef.userName || conversationRef.user?.name} 决定不加入粉丝群 ${
              fanGroupData.name
            }`,
          );
          continue;
        }

        console.log(
          `✅ [粉丝群加入] ${conversationRef.userName || conversationRef.user?.name} 决定加入粉丝群 ${
            fanGroupData.name
          }`,
        );

        // 使用统一资料获取系统获取联系人的完整信息
        const contactHandle = conversationRef.userHandle || conversationRef.user?.handle;
        if (!contactHandle) {
          console.warn('⚠️ [粉丝群加入] 无法获取联系人句柄');
          continue;
        }

        // 🎯 使用统一资料获取系统
        const contactProfile = await StringBuilders.getUnifiedProfile(contactHandle, {
          userProfileInfo: window.userProfileData,
          messageId: conversationRef.id,
        });

        if (!contactProfile) {
          console.warn('⚠️ [粉丝群加入] 无法获取联系人资料');
          continue;
        }

        // 构建成员数据
        const newMember = {
          id: conversationRef.id, // 使用对话ID作为成员ID
          name: contactProfile.name,
          handle: contactProfile.handle,
          avatar: contactProfile.avatar,
          type: contactProfile.type, // character, npc, relationshipNpc, account, stranger
          joinedAt: new Date().toISOString(),
        };

        // 更新粉丝群数据
        const xDb = getXDB();
        const dataId = `messagesList_${currentAccountId || 'main'}`;
        const savedData = await xDb.xAccountProfiles.get(dataId);
        let messagesList = savedData?.data || [];

        const fanGroupIndex = messagesList.findIndex(msg => msg.id === fanGroupData.id);
        if (fanGroupIndex !== -1) {
          const fanGroup = messagesList[fanGroupIndex];

          // 初始化成员列表
          if (!fanGroup.members) {
            fanGroup.members = [];
          }

          // 检查是否已经是成员
          const isMember = fanGroup.members.some(m => m.id === newMember.id);
          if (isMember) {
            console.log(`⚠️ [粉丝群加入] ${newMember.name} 已经是粉丝群成员`);
            continue;
          }

          // 添加到成员列表
          fanGroup.members.push(newMember);
          fanGroup.memberCount = fanGroup.members.length;

          // 保存到数据库
          await xDb.xAccountProfiles.put({
            handle: dataId,
            name: 'messagesList',
            data: messagesList,
            updatedAt: new Date().toISOString(),
          });

          console.log(
            `✅ [粉丝群加入] ${newMember.name} 已加入粉丝群 ${fanGroupData.name}，当前成员数: ${fanGroup.memberCount}`,
          );

          // 在粉丝群对话中添加系统通知
          const fanGroupConversationId = `messageConversation_${currentAccountId || 'main'}_${fanGroupData.id}`;
          const fanGroupConversation = await xDb.xAccountProfiles.get(fanGroupConversationId);

          if (fanGroupConversation && fanGroupConversation.data) {
            if (!fanGroupConversation.data.messages) {
              fanGroupConversation.data.messages = [];
            }

            const systemMessage = {
              type: 'system',
              systemType: 'memberJoined',
              content: `${newMember.name} 加入了粉丝群`,
              timestamp: new Date().toISOString(),
              time: '刚刚',
            };

            fanGroupConversation.data.messages.push(systemMessage);
            await xDb.xAccountProfiles.put(fanGroupConversation);
            console.log(`✅ [粉丝群加入] 已在粉丝群对话中添加系统通知`);
          }

          // 🎯 延迟3秒显示手机样式通知（避免与回复消息通知混在一起）
          setTimeout(() => {
            const isEnglish = currentLanguage === 'en';
            showPhoneNotification({
              title: fanGroupData.name,
              message: isEnglish ? `${newMember.name} joined the fan group` : `${newMember.name} 加入了粉丝群`,
              avatar: fanGroupData.avatar,
              leftIcon: 'x',
              duration: 3000,
            });
          }, 3000);

          // 刷新私信列表（如果用户在私信页面）
          if (document.getElementById('x-messages-page')?.style.display === 'block') {
            await loadMessagesList();
          }

          // 🎯 检查是否需要触发自动群聊（成员数达到5、15、25...）
          await checkAndTriggerFanGroupAutoChat(fanGroupData.id, fanGroup.memberCount);
        }
      }
    } catch (error) {
      console.error('❌ [粉丝群加入] 处理粉丝群加入失败:', error);
    }
  }

  window.getAIResponse = async function () {
    if (!currentMessageConversation) {
      showXToast('会话数据丢失', 'error');
      return;
    }

    // 🎯 如果userMessageQueue为空，从数据库读取最近的未回复用户消息
    if (userMessageQueue.length === 0) {
      console.log('📖 [AI回复] userMessageQueue为空，尝试从数据库读取未回复消息');
      try {
        const xDb = getXDB();
        const conversationId = `messageConversation_${currentAccountId || 'main'}_${currentMessageConversation.id}`;
        const savedConversation = await xDb.xAccountProfiles.get(conversationId);

        if (savedConversation && savedConversation.data && savedConversation.data.messages) {
          const messages = savedConversation.data.messages;

          // 从后往前查找，找到最后一组连续的用户消息（未被AI回复的）
          let lastAIMessageIndex = -1;
          for (let i = messages.length - 1; i >= 0; i--) {
            if (messages[i].isOwn === false && messages[i].type !== 'system') {
              lastAIMessageIndex = i;
              break;
            }
          }

          // 提取最后一个AI回复之后的所有用户消息
          const unrespondedMessages = [];
          for (let i = lastAIMessageIndex + 1; i < messages.length; i++) {
            if (messages[i].isOwn === true) {
              unrespondedMessages.push(messages[i]);
            }
          }

          if (unrespondedMessages.length > 0) {
            userMessageQueue = [...unrespondedMessages];
            console.log(`✅ [AI回复] 从数据库读取到 ${userMessageQueue.length} 条未回复消息`);
            console.log('📋 [AI回复] 消息类型:', userMessageQueue.map(m => m.type).join(', '));
          } else {
            showXToast('请先发送消息', 'info');
            return;
          }
        } else {
          showXToast('请先发送消息', 'info');
          return;
        }
      } catch (error) {
        console.error('❌ [AI回复] 读取未回复消息失败:', error);
        showXToast('请先发送消息', 'info');
        return;
      }
    }

    // 保存当前会话引用，防止用户关闭页面后丢失
    const conversationRef = currentMessageConversation; // 禁用发送按钮
    const sendBtn = document.getElementById('message-send-btn');
    if (sendBtn) {
      sendBtn.disabled = true;
      sendBtn.style.opacity = '0.5';
    }
    try {
      // 显示"正在输入中"气泡
      console.log('📤 [AI回复] 准备显示正在输入气泡');
      showTypingIndicator(); // 🎯 检查是否是粉丝群，调用对应的生成器
      const isFanGroup =
        conversationRef.type === 'fangroup' || (conversationRef.id && conversationRef.id.startsWith('fangroup_'));
      let aiMessages;
      if (isFanGroup) {
        console.log('📤 [AI回复] 检测到粉丝群，调用第11个情景生成器');
        aiMessages = await generateFanGroupConversation(conversationRef, true, {
          userMessages: userMessageQueue,
        });
      } else {
        // 调用AI生成回复（续写模式，传递用户消息队列用于识图）
        console.log('📤 [AI回复] 开始请求AI生成回复（普通私信）');
        aiMessages = await generateMessageConversation(conversationRef, true, {
          userMessages: userMessageQueue,
        });
      }
      console.log('📥 [AI回复] AI回复已返回'); // 隐藏"正在输入中"气泡
      hideTypingIndicator(); // 🔍 检查特殊系统提示
      const hasBlockedMessage =
        aiMessages && aiMessages.some(msg => msg.type === 'system' && msg.systemType === 'blocked');
      const hasUnblockedMessage =
        aiMessages && aiMessages.some(msg => msg.type === 'system' && msg.systemType === 'unblocked');
      const hasAwayMessage = aiMessages && aiMessages.some(msg => msg.type === 'system' && msg.systemType === 'away'); // 🎉 处理解除拉黑情况
      if (hasUnblockedMessage) {
        console.log('🎉 [拉黑解除] 对方已解除拉黑'); // 解除拉黑状态
        try {
          const xDb = getXDB();
          const conversationId = `messageConversation_${currentAccountId || 'main'}_${conversationRef.id}`;
          const savedConversation = await xDb.xAccountProfiles.get(conversationId);
          if (savedConversation) {
            savedConversation.isBlocked = false;
            delete savedConversation.blockedAt;
            await xDb.xAccountProfiles.put(savedConversation);
            console.log('✅ [拉黑解除] 拉黑状态已解除');
          }
        } catch (error) {
          console.error('❌ [拉黑解除] 解除拉黑状态失败:', error);
        }
        // 启用输入框和发送按钮
        const messageInput = document.getElementById('message-input');
        const sendBtn = document.getElementById('message-send-btn');
        if (messageInput) {
          messageInput.disabled = false;
          messageInput.placeholder = '发送私信';
        }
        if (sendBtn) {
          sendBtn.disabled = false;
        }
        // 显示解除拉黑系统消息
        const unblockedMessage = aiMessages.find(msg => msg.type === 'system' && msg.systemType === 'unblocked');
        if (unblockedMessage) {
          const contentContainer = document.getElementById('message-detail-content');
          if (contentContainer) {
            const currentMessageCount = contentContainer.querySelectorAll(
              '.message-item:not(#typing-indicator)',
            ).length;
            const messageEl = renderMessageItem(unblockedMessage, false, currentMessageCount, true);
            contentContainer.appendChild(messageEl);
            requestAnimationFrame(() => {
              messageEl.style.opacity = '1';
              messageEl.style.transform = 'translateY(0)';
            });
          }
        }
        // 显示其他AI消息（解除拉黑后可能跟随的文本消息）
        const otherMessages = aiMessages.filter(msg => msg.type !== 'system' || msg.systemType !== 'unblocked');
        if (otherMessages.length > 0) {
          const contentContainer = document.getElementById('message-detail-content');
          if (contentContainer) {
            let currentMessageCount = contentContainer.querySelectorAll('.message-item:not(#typing-indicator)').length;
            otherMessages.forEach((msg, index) => {
              const messageEl = renderMessageItem(
                msg,
                false,
                currentMessageCount + index,
                index === otherMessages.length - 1,
              );
              contentContainer.appendChild(messageEl);
              requestAnimationFrame(() => {
                messageEl.style.opacity = '1';
                messageEl.style.transform = 'translateY(0)';
              });
            });
          }
          await saveAIMessagesToDB(aiMessages, conversationRef);
        } else {
          // 只有系统提示，也要保存
          await saveAIMessagesToDB(aiMessages, conversationRef);
        }
        // 显示解除拉黑通知
        const isEnglish = currentLanguage === 'en';
        showPhoneNotification({
          title: conversationRef.userName || conversationRef.user?.name || '未知用户',
          message: isEnglish ? 'Has unblocked you' : '已解除拉黑',
          avatar:
            conversationRef.userAvatar ||
            conversationRef.user?.avatar ||
            'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
          leftIcon: 'x',
          duration: 3000,
        });
        userMessageQueue = []; // 滚动到底部
        const scrollable = document.getElementById('message-detail-scrollable');
        if (scrollable) {
          setTimeout(() => {
            scrollable.scrollTop = scrollable.scrollHeight;
          }, 100);
        }
        return;
      }
      // ⚠️ 处理拉黑情况
      if (hasBlockedMessage) {
        console.log('⚠️ [拉黑] 对方已将用户拉黑'); // 保存拉黑状态到对话数据
        try {
          const xDb = getXDB();
          const conversationId = `messageConversation_${currentAccountId || 'main'}_${conversationRef.id}`;
          const savedConversation = await xDb.xAccountProfiles.get(conversationId);
          if (savedConversation) {
            savedConversation.isBlocked = true;
            savedConversation.blockedAt = new Date().toISOString();
            await xDb.xAccountProfiles.put(savedConversation);
            console.log('✅ [拉黑] 拉黑状态已保存');
          }
        } catch (error) {
          console.error('❌ [拉黑] 保存拉黑状态失败:', error);
        }
        // 禁用输入框和发送按钮
        const messageInput = document.getElementById('message-input');
        const sendBtn = document.getElementById('message-send-btn');
        if (messageInput) {
          messageInput.disabled = true;
          messageInput.placeholder = '对方已将你拉黑';
        }
        if (sendBtn) {
          sendBtn.disabled = true;
        }
        // 显示拉黑消息并保存
        if (aiMessages && aiMessages.length > 0) {
          const contentContainer = document.getElementById('message-detail-content');
          if (contentContainer) {
            const currentMessageCount = contentContainer.querySelectorAll(
              '.message-item:not(#typing-indicator)',
            ).length;
            const messageEl = renderMessageItem(aiMessages[0], false, currentMessageCount, true);
            contentContainer.appendChild(messageEl);
            requestAnimationFrame(() => {
              messageEl.style.opacity = '1';
              messageEl.style.transform = 'translateY(0)';
            });
          }
          await saveAIMessagesToDB(aiMessages, conversationRef);
        }
        // 显示拉黑通知
        const isEnglish = currentLanguage === 'en';
        showPhoneNotification({
          title: 'X',
          message: isEnglish ? 'You have been blocked by this user' : '对方已将你拉黑',
          leftIcon: 'x',
          duration: 3000,
        });
        userMessageQueue = []; // 启用发送按钮（虽然已禁用输入框）
        if (sendBtn) {
          sendBtn.disabled = false;
          sendBtn.style.opacity = '1';
        }
        return;
      }
      // ⏰ 处理暂时离开情况
      if (hasAwayMessage) {
        console.log('⏰ [离开] 对方暂时离开');
        const awayMessage = aiMessages.find(msg => msg.type === 'system' && msg.systemType === 'away');
        const awayDuration = awayMessage.awayDuration || 60; // 默认60分钟
        // 保存离开状态到对话数据
        try {
          const xDb = getXDB();
          const conversationId = `messageConversation_${currentAccountId || 'main'}_${conversationRef.id}`;
          const savedConversation = await xDb.xAccountProfiles.get(conversationId);
          if (savedConversation) {
            savedConversation.isAway = true;
            savedConversation.awayUntil = new Date(Date.now() + awayDuration * 60 * 1000).toISOString();
            savedConversation.awayDuration = awayDuration;
            await xDb.xAccountProfiles.put(savedConversation);
            console.log(`✅ [离开] 离开状态已保存，将在${awayDuration}分钟后恢复`);
          }
        } catch (error) {
          console.error('❌ [离开] 保存离开状态失败:', error);
        }
        // 显示离开消息并保存
        if (aiMessages && aiMessages.length > 0) {
          const contentContainer = document.getElementById('message-detail-content');
          if (contentContainer) {
            const currentMessageCount = contentContainer.querySelectorAll(
              '.message-item:not(#typing-indicator)',
            ).length;
            const messageEl = renderMessageItem(aiMessages[0], false, currentMessageCount, true);
            contentContainer.appendChild(messageEl);
            requestAnimationFrame(() => {
              messageEl.style.opacity = '1';
              messageEl.style.transform = 'translateY(0)';
            });
          }
          await saveAIMessagesToDB(aiMessages, conversationRef);
        }
        // 设置定时器，离开时间结束后触发自动消息
        setTimeout(() => {
          console.log(`⏰ [离开] 离开时间结束，准备触发自动消息`); // 触发自动消息机制
          if (typeof triggerAutoMessageAfterAway === 'function') {
            triggerAutoMessageAfterAway(conversationRef.id);
          }
        }, awayDuration * 60 * 1000); // 显示离开通知
        const isEnglish = currentLanguage === 'en';
        showPhoneNotification({
          title: 'X',
          message: awayMessage.content,
          leftIcon: 'x',
          duration: 3000,
        });
        userMessageQueue = []; // 恢复发送按钮
        const sendBtn = document.getElementById('message-send-btn');
        if (sendBtn) {
          sendBtn.disabled = false;
          sendBtn.style.opacity = '1';
        }
        return;
      }
      if (aiMessages && aiMessages.length > 0) {
        // 渲染AI回复（只有在用户还在详情页时才渲染）
        const contentContainer = document.getElementById('message-detail-content');
        if (contentContainer) {
          // 获取当前消息总数（排除typing-indicator）
          let currentMessageCount = contentContainer.querySelectorAll('.message-item:not(#typing-indicator)').length; // 将AI消息分组并标记最后一条
          const messageElements = [];
          const aiMessagesCount = aiMessages.length;
          aiMessages.forEach((message, index) => {
            const isLastMessage = index === aiMessagesCount - 1;
            const messageEl = renderMessageItem(message, false, currentMessageCount, isLastMessage);
            contentContainer.appendChild(messageEl);
            messageElements.push(messageEl);
            currentMessageCount++;
          }); // 逐条弹出动画
          await animateMessagesOneByOne(messageElements, 400);
        }
        // 保存AI回复到数据库（使用保存的引用，即使用户已离开页面也能保存）
        await saveAIMessagesToDB(aiMessages, conversationRef);

        // 🎯 处理粉丝群加入逻辑（从数据库读取对话记录）
        await handleFanGroupJoinAfterAIResponse(conversationRef);

        // 处理 AI 对用户转账的响应
        await handleAITransferResponse(aiMessages, conversationRef); // 清空用户消息队列
        userMessageQueue = []; // 立即显示私信回复通知（不等待New Tweet检测）
        if (document.getElementById('x-message-detail-page')?.style.display !== 'none') {
          // 在详情页内也显示手机样式通知
          // 🎯 兼容粉丝群和普通私信的不同数据结构
          const displayName = conversationRef.user?.name || conversationRef.userName || conversationRef.groupName;
          const displayAvatar =
            conversationRef.user?.avatar || conversationRef.userAvatar || conversationRef.groupAvatar;
          showMessageNotification(displayName, displayAvatar, aiMessages.length);
        } else {
          console.log('✅ AI回复已保存（用户已离开详情页）'); // 如果用户不在详情页，标记为未读并显示提醒
          try {
            const xDb = getXDB();
            const dataId = `messagesList_${currentAccountId || 'main'}`;
            const savedData = await xDb.xAccountProfiles.get(dataId);
            if (savedData && savedData.data) {
              const messagesList = savedData.data;
              const messageIndex = messagesList.findIndex(msg => msg.id === conversationRef.id);
              if (messageIndex !== -1) {
                // 标记为未读
                messagesList[messageIndex].unread = true;
                messagesList[messageIndex].unreadCount =
                  (messagesList[messageIndex].unreadCount || 0) + aiMessages.length; // 保存回数据库
                await xDb.xAccountProfiles.put({
                  handle: dataId,
                  name: 'messagesList',
                  data: messagesList,
                  updatedAt: new Date().toISOString(),
                }); // 同步更新全局数据
                sampleMessagesData = messagesList; // 显示手机样式通知
                // 🎯 兼容粉丝群和普通私信的不同数据结构
                const displayName = conversationRef.user?.name || conversationRef.userName || conversationRef.groupName;
                const displayAvatar =
                  conversationRef.user?.avatar || conversationRef.userAvatar || conversationRef.groupAvatar;
                showMessageNotification(displayName, displayAvatar, aiMessages.length); // 显示私信提醒点
                showNavNotificationDot('messages');
                console.log('✅ 已标记为未读并显示提醒');
              }
            }
          } catch (error) {
            console.error('标记未读失败:', error);
          }
        }
        // 在所有通知显示完成后，异步检测New Tweet（不阻塞）
        (async () => {
          try {
            const xDb = getXDB(); // 🔧 多账户隔离：包含账户ID
            const conversationId = `messageConversation_${currentAccountId || 'main'}_${conversationRef.id}`;
            const savedConversation = await xDb.xAccountProfiles.get(conversationId);
            if (savedConversation && savedConversation.data && savedConversation.data.messages) {
              // 检测并生成 New Tweet 通知（异步执行，不阻塞主流程）
              await detectAndGenerateNewTweetNotification(conversationRef, savedConversation.data.messages);
            }
          } catch (error) {
            console.error('New Tweet 检测失败:', error);
          }
        })();
      } else {
        // 📭 AI决定不回复（返回空数组）
        console.log('📭 [不回复] AI决定不回复用户消息'); // 显示发送成功提示
        const isEnglish = currentLanguage === 'en';
        showPhoneNotification({
          title: 'X',
          message: isEnglish ? 'Message delivered' : '消息已送达',
          leftIcon: 'x',
          duration: 2000,
        }); // 清空用户消息队列
        userMessageQueue = [];
      }
    } catch (error) {
      console.error('获取AI回复失败:', error); // 隐藏"正在输入中"气泡
      hideTypingIndicator();
      if (document.getElementById('x-message-detail-page')?.style.display !== 'none') {
        showXToast(`获取回复失败: ${error.message}`, 'error');
      }
    } finally {
      // 恢复发送按钮（只有在按钮还存在时）
      if (sendBtn) {
        sendBtn.disabled = false;
        sendBtn.style.opacity = '1';
      }
    }
  }; // 保存AI回复到数据库
  async function saveAIMessagesToDB(aiMessages, conversationRef = null) {
    // 使用传入的引用或全局变量
    const conversation = conversationRef || currentMessageConversation;
    if (!conversation || !aiMessages || aiMessages.length === 0) return;
    try {
      const xDb = getXDB(); // 🔧 多账户隔离：包含账户ID
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${conversation.id}`; // 读取现有对话数据
      const savedConversation = await xDb.xAccountProfiles.get(conversationId);
      if (savedConversation && savedConversation.data) {
        // 添加AI消息到messages数组（添加时间戳）
        if (!savedConversation.data.messages) {
          savedConversation.data.messages = [];
        }
        // 将所有等待AI回复的用户消息标记为已回复
        savedConversation.data.messages.forEach(msg => {
          if (msg.isOwn && msg.waitingForAIResponse) {
            msg.waitingForAIResponse = false;
          }
        }); // 为每条AI消息添加timestamp（如果没有的话）
        aiMessages.forEach(msg => {
          if (!msg.timestamp) {
            msg.timestamp = new Date().toISOString();
          }
        });
        savedConversation.data.messages.push(...aiMessages); // 更新数据库
        savedConversation.updatedAt = new Date().toISOString();
        await xDb.xAccountProfiles.put(savedConversation);
        console.log('✅ AI回复已保存到数据库');
      }
    } catch (error) {
      console.error('保存AI回复失败:', error);
    }
  }
  // 从私信详情页打开账户主页
  window.openAccountProfileFromDM = async function (messageData, conversationData) {
    try {
      console.log('🔍 从私信详情页打开账户主页:', messageData.user.name); // 收集现有资料
      const existingInfo = {
        name: messageData.user.name,
        handle: messageData.user.handle,
        avatar: messageData.user.avatar,
        verified: messageData.user.verified || false,
      }; // 从conversationData中获取额外信息
      if (conversationData && conversationData.senderProfile) {
        if (conversationData.senderProfile.bio) {
          existingInfo.bio = conversationData.senderProfile.bio;
        }
        if (conversationData.senderProfile.followers) {
          existingInfo.followersCount = conversationData.senderProfile.followers.toString();
        }
        if (conversationData.senderProfile.verified !== undefined) {
          existingInfo.verified = conversationData.senderProfile.verified;
        }
      }
      console.log('📋 现有资料:', existingInfo); // 切换到账户主页，调用第七个情景
      await openAccountProfile(existingInfo.name, existingInfo.handle, existingInfo.avatar, {
        source: 'dm',
        existingInfo: existingInfo,
        messagePreview: messageData.preview,
      });
    } catch (error) {
      console.error('从私信详情页打开账户主页失败:', error);
      showXToast(`打开主页失败: ${error.message}`, 'error');
    }
  }; // 从转发的账户名片打开账户主页
  window.openAccountProfileFromQuoteProfile = async function (profileData) {
    try {
      console.log('🔍 从账户名片打开主页:', profileData.name); // 收集现有资料
      const existingInfo = {
        name: profileData.name,
        handle: profileData.handle,
        avatar: profileData.avatar,
        verified: profileData.verified || false,
      };
      if (profileData.bio) {
        existingInfo.bio = profileData.bio;
      }
      if (profileData.followers) {
        existingInfo.followersCount = profileData.followers.toString();
      }
      console.log('📋 现有资料:', existingInfo);

      // 🆕 收集当前对话上下文（如果在私信详情页）
      let conversationContext = null;
      if (currentMessageConversation) {
        console.log('📝 [名片点击] 检测到当前对话:', currentMessageConversation.userName);
        conversationContext = {
          currentConversationHandle: currentMessageConversation.userHandle || currentMessageConversation.handle,
          currentConversationName: currentMessageConversation.userName || currentMessageConversation.name,
          messageId: currentMessageConversation.id,
        };
      }

      // 切换到账户主页，调用第七个情景
      await openAccountProfile(existingInfo.name, existingInfo.handle, existingInfo.avatar, {
        source: 'dm_quote_profile',
        existingInfo: existingInfo,
        conversationContext: conversationContext, // 🆕 传递对话上下文
      });
    } catch (error) {
      console.error('从账户名片打开主页失败:', error);
      showXToast(`打开主页失败: ${error.message}`, 'error');
    }
  }; // ============================================
  // 私信列表功能
  // ============================================
  // 私信数据（动态管理）
  let sampleMessagesData = []; // 加载私信列表
  async function loadMessagesList() {
    console.log('📨 加载私信列表');
    try {
      // 从数据库加载私信列表
      const xDb = getXDB();
      const dataId = `messagesList_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(dataId);
      if (savedData && savedData.data) {
        sampleMessagesData = savedData.data;
        console.log('✅ 从数据库加载私信列表，共', sampleMessagesData.length, '条');
      } else {
        console.log('📨 数据库中没有私信列表数据，使用空列表');
        sampleMessagesData = [];
      }
      // 渲染私信列表
      renderMessagesList(sampleMessagesData);
    } catch (error) {
      console.error('加载私信列表失败:', error);
      showXToast('加载私信失败', 'error');
    }
  }
  // 渲染私信列表
  async function renderMessagesList(messages) {
    const container = document.getElementById('messages-list-container');
    if (!container) {
      console.error('私信列表容器不存在');
      return;
    }
    // 清空容器
    container.innerHTML = ''; // 如果没有消息,显示空状态
    if (!messages || messages.length === 0) {
      container.innerHTML = `
 <div style="flex: 1; display: flex; flex-direction: column; justify-content: center; align-items: center; padding: 32px; text-align: center; ">
 <svg viewBox="0 0 24 24" style="width: 56px; height: 56px; fill: var(--x-text-secondary); margin-bottom: 16px;">
 <g><path d="M1.998 5.5c0-1.381 1.119-2.5 2.5-2.5h15c1.381 0 2.5 1.119 2.5 2.5v13c0 1.381-1.119 2.5-2.5 2.5h-15c-1.381 0-2.5-1.119-2.5-2.5v-13zm2.5-.5c-.276 0-.5.224-.5.5v2.764l8 3.638 8-3.636V5.5c0-.276-.224-.5-.5-.5h-15zm15.5 5.463l-8 3.636-8-3.638V18.5c0 .276.224.5.5.5h15c.276 0 .5-.224.5-.5v-8.037z"></path></g>
 </svg>
 <div style="font-size: 28px; font-weight: 700; color:var(--x-text-primary); margin-bottom: 8px; " data-i18n="messagesEmpty">暂无私信</div>
 <div style="font-size: 14px; color:var(--x-text-secondary); max-width: 320px; " data-i18n="messagesEmptyDesc">发送私信与朋友保持联系</div>
 </div>
 `;
      return;
    }
    // 渲染每条私信（异步创建）
    for (const message of messages) {
      const messageItem = await createMessageItem(message);
      container.appendChild(messageItem);
    }
  }
  // 创建私信列表项
  async function createMessageItem(message) {
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message-item';
    messageDiv.style.cssText = `
 display: flex; align-items: center; padding: 16px; border-bottom: 1px solid var(--x-border-color); cursor: pointer; transition: background-color 0.2s;
`; // 获取最新头像（对于绑定角色，从X资料读取）
    let currentAvatar = message.userAvatar;
    const isCharacterMessage = message.id && message.id.startsWith('msg_') && message.id !== 'msg_001';
    if (isCharacterMessage) {
      try {
        const xDb = getXDB();
        const characterId = message.id.replace('msg_', '');
        const xProfile = await xDb.xCharacterProfiles.get(characterId);
        if (xProfile && xProfile.xAvatar) {
          currentAvatar = xProfile.xAvatar;
        }
      } catch (error) {
        console.warn('读取角色头像失败:', error);
      }
    }
    // 获取最新消息内容
    let lastMessageText = message.lastMessage || '';
    let lastMessageTime = message.timestamp; // 尝试从数据库获取最新消息
    try {
      const xDb = getXDB(); // 🔧 多账户隔离：包含账户ID
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${message.id}`;
      const savedConversation = await xDb.xAccountProfiles.get(conversationId);
      if (savedConversation && savedConversation.data && savedConversation.data.messages) {
        const messages = savedConversation.data.messages;
        if (messages.length > 0) {
          const latestMsg = messages[messages.length - 1]; // 根据消息类型显示不同的预览文本
          if (latestMsg.type === 'text') {
            lastMessageText = latestMsg.content;
          } else if (latestMsg.type === 'image') {
            lastMessageText = '[图片]';
          } else if (latestMsg.type === 'voice') {
            lastMessageText = '[语音]';
          } else if (latestMsg.type === 'link') {
            lastMessageText = '[链接]';
          } else if (latestMsg.type === 'quoteTweet') {
            lastMessageText = '[转发推文]';
          } else if (latestMsg.type === 'quoteProfile') {
            lastMessageText = '[转发主页]';
          }
          // 如果有时间戳，使用最新的时间
          if (latestMsg.timestamp) {
            lastMessageTime = latestMsg.timestamp;
          }
        }
      }
    } catch (error) {
      console.warn('获取最新消息失败:', error);
    }
    // 格式化时间
    const timeStr = formatMessageTime(lastMessageTime);
    messageDiv.innerHTML = `

 <div style="position: relative; flex-shrink: 0; margin-right: 12px;">

 <img src="${currentAvatar}"
 alt="${message.userName}"
 style="width: 48px; height: 48px; border-radius: 50%; object-fit: cover; ">

 ${
   message.unread
     ? `
 <div style="position: absolute; top: -2px; right: -2px; width: 12px; height: 12px; background-color: var(--x-accent); border: 2px solid var(--x-bg-primary); border-radius: 50%; "></div>
 `
     : ''
 }
 </div>

 <div style="flex: 1; min-width: 0;">

 <div style="display: flex; align-items: center; margin-bottom: 4px;">
 <span style="font-size: 15px; font-weight: ${
   message.unread ? '700' : '700'
 }; color:var(--x-text-primary); margin-right: 4px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; ">${
      message.userName
    }</span>
 <span style="font-size: 15px; color:var(--x-text-secondary); margin-right: 4px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; ">@${
   message.userHandle
 }</span>
 <span style="font-size: 15px; color:var(--x-text-secondary); margin-left: auto; flex-shrink: 0; ">· ${timeStr}</span>
 </div>

 <div style="font-size: 15px; color: ${
   message.unread ? 'var(--x-text-primary)' : 'var(--x-text-secondary)'
 }; font-weight: ${
      message.unread ? '600' : 'normal'
    }; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; ">${lastMessageText || '开始对话'}</div>
 </div>
`; // 添加悬停效果
    messageDiv.addEventListener('mouseenter', () => {
      messageDiv.style.backgroundColor = 'var(--x-bg-hover)';
    });
    messageDiv.addEventListener('mouseleave', () => {
      messageDiv.style.backgroundColor = 'transparent';
    }); // 点击打开私信详情
    messageDiv.addEventListener('click', () => {
      window.openMessageDetail(message);
    });
    return messageDiv;
  }
  // 格式化消息时间
  function formatMessageTime(timestamp) {
    const now = new Date();
    const time = new Date(timestamp);
    const diff = now - time;
    const seconds = Math.floor(diff / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);
    const isEnglish = currentLanguage === 'en';
    if (seconds < 60) {
      return isEnglish ? 'now' : '刚刚';
    } else if (minutes < 60) {
      return isEnglish ? `${minutes}m` : `${minutes}分钟`;
    } else if (hours < 24) {
      return isEnglish ? `${hours}h` : `${hours}小时`;
    } else if (days < 7) {
      return isEnglish ? `${days}d` : `${days}天`;
    } else {
      // 显示具体日期
      if (isEnglish) {
        const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        return `${months[time.getMonth()]} ${time.getDate()}`;
      } else {
        const month = time.getMonth() + 1;
        const day = time.getDate();
        return `${month}月${day}日`;
      }
    }
  }
  // 打开新建私信弹窗
  async function openNewMessageModal() {
    console.log('📨 打开新建私信弹窗');
    try {
      // 获取已绑定的角色列表
      const db = getDB();
      const xDb = getXDB(); // 获取X设置中的绑定角色（使用当前账号的设置）
      const settingsId = `xSettings_${currentAccountId || 'main'}`;
      const xSettings = await xDb.xSettings.get(settingsId);
      const boundCharacters = xSettings?.boundCharacters || [];
      console.log(`📨 绑定角色数: ${boundCharacters.length}`); // 获取所有聊天角色
      const allChats = await db.chats.toArray();
      const characters = allChats.filter(chat => !chat.isGroup && boundCharacters.includes(chat.id)); // 筛选出已绑定X资料的角色
      const charactersWithXProfile = [];
      for (const character of characters) {
        const xProfile = await xDb.xCharacterProfiles.get(character.id);
        if (xProfile) {
          charactersWithXProfile.push({
            id: character.id,
            name: character.name,
            xProfile: xProfile,
          });
        }
      }
      console.log(`📨 可选择角色数: ${charactersWithXProfile.length}`); // 显示选择角色弹窗（即使没有角色也可以创建粉丝群）
      showNewMessageModal(charactersWithXProfile);
    } catch (error) {
      console.error('打开新建私信弹窗失败:', error);
      showXToast('打开弹窗失败', 'error');
    }
  }
  // 显示新建私信选择角色弹窗
  function showNewMessageModal(characters) {
    // 创建弹窗
    const modal = document.createElement('div');
    modal.id = 'new-message-modal';
    modal.style.cssText = `
 display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: var(--x-modal-overlay); z-index: 1000; align-items: center; justify-content: center; backdrop-filter: blur(4px);
`;
    modal.innerHTML = `
 <div class="modal-content" onclick="event.stopPropagation()" style="background-color:var(--x-bg-primary); border-radius: 16px; width: 90%; max-width: 500px; max-height: 70vh; overflow: hidden; border: 1px solid var(--x-border-color); ">

 <div class="modal-header" style="display: flex; align-items: center; justify-content: space-between; padding: 16px 20px; border-bottom: 1px solid var(--x-border-color); background-color:var(--x-bg-primary); ">
 <div style="display: flex; align-items: center; gap: 20px;">

 <div class="modal-close-btn" onclick="closeNewMessageModal()" style="cursor: pointer; padding: 8px; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-text-primary);">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </div>

 <h2 style="color:var(--x-text-primary); font-size: 20px; font-weight: 700; margin: 0; ">新建私信</h2>
 </div>
 </div>

 <div class="modal-body" style="padding: 16px 20px; overflow-y: auto; max-height: calc(70vh - 80px); ">

 <div style="color:var(--x-text-secondary); font-size: 14px; margin-bottom: ${
   characters.length > 0 ? '16px' : '8px'
 }; line-height: 1.4; ">
 ${characters.length > 0 ? '选择要发送私信的角色' : '暂无可用角色，可以创建粉丝群'}
 </div>

 <div id="new-message-characters-list" style="display: flex; flex-direction: column; gap: 0; ">
 ${characters
   .map(
     character => `
 <div class="character-select-item" data-character-id="${character.id}" onclick="selectCharacterForMessage('${
       character.id
     }')" style="display: flex; align-items: center; gap: 12px; padding: 12px; border-radius: 8px; cursor: pointer; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">

 <img src="${character.xProfile.xAvatar}"
 alt="${character.xProfile.xName}"
 style="width: 40px; height: 40px; border-radius: 50%; flex-shrink: 0; object-fit: cover; ">

 <div style="flex: 1; min-width: 0;">
 <div style="display: flex; align-items: center; gap: 4px; margin-bottom: 2px; ">
 <span style="font-size: 15px; font-weight: 700; color:var(--x-text-primary); ">${character.xProfile.xName}</span>
 ${
   character.xProfile.xVerified
     ? `
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: var(--x-accent);">
 <path d="M22.5 12.5c0-1.58-.875-2.95-2.148-3.6.154-.435.238-.905.238-1.4 0-2.21-1.71-3.998-3.818-3.998-.47 0-.92.084-1.336.25C14.818 2.415 13.51 1.5 12 1.5s-2.816.917-3.437 2.25c-.415-.165-.866-.25-1.336-.25-2.11 0-3.818 1.79-3.818 4 0 .494.083.964.237 1.4-1.272.65-2.147 2.018-2.147 3.6 0 1.495.782 2.798 1.942 3.486-.02.17-.032.34-.032.514 0 2.21 1.708 4 3.818 4 .47 0 .92-.086 1.335-.25.62 1.334 1.926 2.25 3.437 2.25 1.512 0 2.818-.916 3.437-2.25.415.163.865.248 1.336.248 2.11 0 3.818-1.79 3.818-4 0-.174-.012-.344-.033-.513 1.158-.687 1.943-1.99 1.943-3.484zm-6.616-3.334l-4.334 6.5c-.145.217-.382.334-.625.334-.143 0-.288-.04-.416-.126l-2.5-1.668c-.326-.217-.413-.656-.196-.982.217-.326.656-.414.982-.196l1.875 1.25 3.75-5.625c.22-.33.66-.418.99-.196.33.22.418.66.196.99z"/>
 </svg>
 `
     : ''
 }
 </div>
 <div style="font-size: 15px; color:var(--x-text-secondary); ">@${character.xProfile.xHandle}</div>
 </div>
 </div>
 `,
   )
   .join('')}
 </div>
 ${
   characters.length > 0
     ? `

 <div style="height: 1px; background-color: var(--x-border-color); margin: 16px 0; "></div>
 `
     : ''
 }

 <div onclick="createFanGroup()" style="display: flex; align-items: center; gap: 12px; padding: 12px; border-radius: 8px; cursor: pointer; transition: background-color 0.2s; border: 2px dashed var(--x-border-color); " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'; this.style.borderColor='var(--x-accent)'"
 onmouseout="this.style.backgroundColor='transparent'; this.style.borderColor='var(--x-border-color)'">

 <div style="width: 40px; height: 40px; border-radius: 50%; background-color:var(--x-bg-secondary); display: flex; align-items: center; justify-content: center; flex-shrink: 0; ">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-accent);">
 <g><path d="M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5z"></path></g>
 </svg>
 </div>

 <div style="flex: 1; min-width: 0;">
 <div style="font-size: 15px; font-weight: 700; color:var(--x-text-primary); margin-bottom: 2px; ">创建粉丝群</div>
 <div style="font-size: 13px; color:var(--x-text-secondary); ">与你的粉丝群组互动</div>
 </div>
 </div>
 </div>
 </div>
`; // 将弹窗添加到X应用容器内，以便继承CSS变量
    const xSocialScreen = document.getElementById('x-social-screen');
    if (xSocialScreen) {
      xSocialScreen.appendChild(modal);
    } else {
      document.body.appendChild(modal);
    }
    // 点击背景关闭弹窗
    modal.addEventListener('click', e => {
      if (e.target === modal) {
        closeNewMessageModal();
      }
    });
  }
  // 关闭新建私信弹窗
  function closeNewMessageModal() {
    const modal = document.getElementById('new-message-modal');
    if (modal) {
      modal.remove();
    }
  }
  // 选择角色创建私信
  async function selectCharacterForMessage(characterId) {
    console.log('📨 选择角色创建私信:', characterId);
    try {
      const db = getDB();
      const xDb = getXDB(); // 获取角色信息
      const character = await db.chats.get(characterId);
      const xProfile = await xDb.xCharacterProfiles.get(characterId);
      if (!character || !xProfile) {
        showXToast('无法获取角色信息', 'error');
        return;
      }
      // 检查是否已存在该角色的私信
      const existingIndex = sampleMessagesData.findIndex(msg => msg.id === `msg_${characterId}`);
      if (existingIndex === -1) {
        // 添加新私信到列表
        const newMessage = {
          id: `msg_${characterId}`,
          userName: xProfile.xName,
          userHandle: xProfile.xHandle,
          userAvatar: xProfile.xAvatar,
          lastMessage: '',
          timestamp: new Date().toISOString(),
          unread: false,
        }; // 添加到数组开头
        sampleMessagesData.unshift(newMessage);
        console.log('✅ 已添加新私信:', newMessage); // 保存到数据库
        try {
          const dataId = `messagesList_${currentAccountId || 'main'}`;
          await xDb.xAccountProfiles.put({
            handle: dataId,
            name: 'messagesList',
            data: sampleMessagesData,
            updatedAt: new Date().toISOString(),
          });
          console.log('✅ 私信列表已保存到数据库');
        } catch (saveError) {
          console.error('保存私信列表失败:', saveError);
        }
      } else {
        console.log('⚠️ 该角色的私信已存在');
      }
      // 关闭弹窗
      closeNewMessageModal(); // 重新渲染私信列表
      renderMessagesList(sampleMessagesData);
      showXToast(`已添加与 ${xProfile.xName} 的私信`, 'success');
    } catch (error) {
      console.error('选择角色失败:', error);
      showXToast('操作失败', 'error');
    }
  }
  // ============================================
  // 陌生人私信设置功能
  // ============================================
  // 打开消息联系人设置弹窗（通用版本，适配账户/陌生人）
  async function openMessageContactSettings(messageData, profileData) {
    // 检查是否已添加到联系人
    const isInContactList = sampleMessagesData.some(msg => msg.id === messageData.id); // 检查是否启用了自动发信息
    let autoMessageEnabled = false;
    let autoMessageInterval = 60; // 默认60秒
    let customAvatar = messageData.user.avatar;
    try {
      const xDb = getXDB();
      const settingsId = `strangerSettings_${currentAccountId || 'main'}_${messageData.id}`;
      const settings = await xDb.xAccountProfiles.get(settingsId);
      if (settings) {
        autoMessageEnabled = settings.autoMessageEnabled || false;
        autoMessageInterval = settings.autoMessageInterval || 60;
        customAvatar = settings.customAvatar || messageData.user.avatar;
      }
    } catch (error) {
      console.error('读取设置失败:', error);
    }
    // 创建设置弹窗
    const modal = document.createElement('div');
    modal.id = 'stranger-message-settings-modal';
    modal.style.cssText = `
 position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background-color: rgba(0, 0, 0, 0.5); display: flex; align-items: center; justify-content: center; z-index: 25; backdrop-filter: blur(4px);
`;
    modal.innerHTML = `
 <div style="background-color:var(--x-bg-primary); border-radius: 16px; width: 90%; max-width: 500px; max-height: 80vh; overflow: hidden; border: 1px solid var(--x-border-color); display: flex; flex-direction: column; " onclick="event.stopPropagation()">

 <div style="padding: 16px 20px; border-bottom: 1px solid var(--x-border-color); display: flex; align-items: center; justify-content: space-between; ">
 <div style="display: flex; align-items: center; gap: 12px;">
 <img src="${messageData.user.avatar}" style="width: 40px; height: 40px; border-radius: 50%;">
 <div>
 <div style="font-size: 18px; font-weight: 700; color:var(--x-text-primary);">${messageData.user.name}</div>
 <div style="font-size: 14px; color:var(--x-text-secondary);">${messageData.user.handle}</div>
 </div>
 </div>
 <div onclick="closeStrangerMessageSettings()" style="cursor: pointer; padding: 8px; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-text-primary);">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </div>
 </div>

 <div style="flex: 1; overflow-y: auto; padding: 20px; ">

 <div style="margin-bottom: 24px;">
 <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 8px; ">
 <div>
 <div style="font-size: 16px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 4px;">
 添加到联系人
 </div>
 <div style="font-size: 13px; color:var(--x-text-secondary);">
 添加后可在私信列表中快速找到
 </div>
 </div>
 <div class="x-toggle" id="contact-toggle" onclick="toggleStrangerContact('${
   messageData.id
 }')" style="cursor: pointer;">
 <div class="toggle-switch" style="width: 50px; height: 30px; background-color: ${
   isInContactList ? 'var(--x-accent)' : '#333'
 }; border-radius: 15px; position: relative; transition: all 0.3s ease; ">
 <div class="toggle-circle" style="width: 26px; height: 26px; background-color:#fff; border-radius: 50%; position: absolute; top: 2px; left: ${
   isInContactList ? '22px' : '2px'
 }; transition: all 0.3s ease; "></div>
 </div>
 </div>
 </div>
 </div>

 <div style="margin-bottom: 24px;">
 <div style="font-size: 16px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 12px;">
 更换头像
 </div>
 <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 12px;">
 <img id="stranger-avatar-preview" src="${customAvatar}" style="width: 64px; height: 64px; border-radius: 50%; object-fit: cover; ">
 </div>
 <div style="display: flex; gap: 8px;">
 <input
 type="text"
 id="stranger-avatar-url-input"
 placeholder="输入图片链接地址"
 value="${customAvatar}"
 style="flex: 1; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 20px; padding: 10px 16px; font-size: 14px; color:var(--x-text-primary); outline: none; "
 onfocus="this.style.borderColor='var(--x-accent)'"
 onblur="this.style.borderColor='var(--x-border-color)'"
 >
 <button onclick="updateStrangerAvatar('${
   messageData.id
 }')" style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 20px; padding: 10px 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: opacity 0.2s; white-space: nowrap; " onmouseover="this.style.opacity='0.9'" onmouseout="this.style.opacity='1'">
 更新
 </button>
 </div>
 </div>

 <div style="margin-bottom: 24px;">
 <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 8px; ">
 <div>
 <div style="font-size: 16px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 4px;">
 自动发信息
 </div>
 <div style="font-size: 13px; color:var(--x-text-secondary);">
 ${isInContactList ? '启用后该账户会自动发送私信和推文' : '需先添加到联系人后才能启用'}
 </div>
 </div>
 <div class="x-toggle" id="auto-message-toggle" onclick="${
   isInContactList ? `toggleStrangerAutoMessage('${messageData.id}')` : "showXToast('请先添加到联系人', 'warning')"
 }" style="cursor: ${isInContactList ? 'pointer' : 'not-allowed'}; opacity: ${isInContactList ? '1' : '0.5'};">
 <div class="toggle-switch" style="width: 50px; height: 30px; background-color: ${
   autoMessageEnabled ? 'var(--x-accent)' : '#333'
 }; border-radius: 15px; position: relative; transition: all 0.3s ease; ">
 <div class="toggle-circle" style="width: 26px; height: 26px; background-color:#fff; border-radius: 50%; position: absolute; top: 2px; left: ${
   autoMessageEnabled ? '22px' : '2px'
 }; transition: all 0.3s ease; "></div>
 </div>
 </div>
 </div>

 ${
   isInContactList
     ? `
 <div style="margin-top: 12px;">
 <div style="font-size: 14px; color:var(--x-text-secondary); margin-bottom: 8px;">
 发送间隔（秒）
 </div>
 <input
 type="number"
 id="stranger-interval-input"
 min="10"
 max="3600"
 value="${autoMessageInterval}"
 style="width: 100%; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 8px; padding: 10px 12px; font-size: 14px; color:var(--x-text-primary); outline: none; "
 onfocus="this.style.borderColor='var(--x-accent)'"
 onblur="this.style.borderColor='var(--x-border-color)'"
 onchange="updateStrangerInterval('${messageData.id}', this.value)"
 >
 <div style="font-size: 12px; color:var(--x-text-secondary); margin-top: 4px;">
 建议：60-300秒之间
 </div>
 </div>
 `
     : ''
 }
 </div>
 </div>
 </div>
`; // 添加到DOM
    const xSocialScreen = document.getElementById('x-social-screen');
    if (xSocialScreen) {
      xSocialScreen.appendChild(modal);
    } else {
      document.body.appendChild(modal);
    }
    // 点击背景关闭
    modal.onclick = e => {
      if (e.target === modal) {
        closeStrangerMessageSettings();
      }
    }; // 保存当前设置数据到全局，供其他函数使用
    window.currentStrangerSettings = {
      messageData: messageData,
      conversationData: profileData,
    };
  }
  // 打开陌生人私信设置弹窗
  async function openStrangerMessageSettings(messageData, conversationData) {
    // 检查是否已添加到联系人
    const isInContactList = sampleMessagesData.some(msg => msg.id === messageData.id); // 检查是否启用了自动发信息
    let autoMessageEnabled = false;
    let autoMessageInterval = 60; // 默认60秒
    let customAvatar = messageData.user.avatar;
    try {
      const xDb = getXDB();
      const settingsId = `strangerSettings_${currentAccountId || 'main'}_${messageData.id}`;
      const settings = await xDb.xAccountProfiles.get(settingsId);
      if (settings) {
        autoMessageEnabled = settings.autoMessageEnabled || false;
        autoMessageInterval = settings.autoMessageInterval || 60;
        customAvatar = settings.customAvatar || messageData.user.avatar;
      }
    } catch (error) {
      console.error('读取陌生人设置失败:', error);
    }
    // 创建设置弹窗
    const modal = document.createElement('div');
    modal.id = 'stranger-message-settings-modal';
    modal.style.cssText = `
 position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background-color: rgba(0, 0, 0, 0.5); display: flex; align-items: center; justify-content: center; z-index: 25; backdrop-filter: blur(4px);
`;
    modal.innerHTML = `
 <div style="background-color:var(--x-bg-primary); border-radius: 16px; width: 90%; max-width: 500px; max-height: 80vh; overflow: hidden; border: 1px solid var(--x-border-color); display: flex; flex-direction: column; " onclick="event.stopPropagation()">

 <div style="padding: 16px 20px; border-bottom: 1px solid var(--x-border-color); display: flex; align-items: center; justify-content: space-between; ">
 <div style="display: flex; align-items: center; gap: 12px;">
 <img src="${messageData.user.avatar}" style="width: 40px; height: 40px; border-radius: 50%;">
 <div>
 <div style="font-size: 18px; font-weight: 700; color:var(--x-text-primary);">${messageData.user.name}</div>
 <div style="font-size: 14px; color:var(--x-text-secondary);">${messageData.user.handle}</div>
 </div>
 </div>
 <div onclick="closeStrangerMessageSettings()" style="cursor: pointer; padding: 8px; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-text-primary);">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </div>
 </div>

 <div style="flex: 1; overflow-y: auto; padding: 20px; ">

 <div style="margin-bottom: 24px;">
 <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 8px; ">
 <div>
 <div style="font-size: 16px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 4px;">
 添加到联系人
 </div>
 <div style="font-size: 13px; color:var(--x-text-secondary);">
 添加后可在私信列表中快速找到
 </div>
 </div>
 <div class="x-toggle" id="contact-toggle" onclick="toggleStrangerContact('${
   messageData.id
 }')" style="cursor: pointer;">
 <div class="toggle-switch" style="width: 50px; height: 30px; background-color: ${
   isInContactList ? 'var(--x-accent)' : '#333'
 }; border-radius: 15px; position: relative; transition: all 0.3s ease; ">
 <div class="toggle-circle" style="width: 26px; height: 26px; background-color:#fff; border-radius: 50%; position: absolute; top: 2px; left: ${
   isInContactList ? '22px' : '2px'
 }; transition: all 0.3s ease; "></div>
 </div>
 </div>
 </div>
 </div>

 <div style="margin-bottom: 24px;">
 <div style="font-size: 16px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 12px;">
 更换头像
 </div>
 <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 12px;">
 <img id="stranger-avatar-preview" src="${customAvatar}" style="width: 64px; height: 64px; border-radius: 50%; object-fit: cover; ">
 </div>
 <div style="display: flex; gap: 8px;">
 <input
 type="text"
 id="stranger-avatar-url-input"
 placeholder="输入图片链接地址"
 value="${customAvatar}"
 style="flex: 1; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 20px; padding: 10px 16px; font-size: 14px; color:var(--x-text-primary); outline: none; "
 onfocus="this.style.borderColor='var(--x-accent)'"
 onblur="this.style.borderColor='var(--x-border-color)'"
 >
 <button onclick="updateStrangerAvatar('${
   messageData.id
 }')" style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 20px; padding: 10px 20px; font-size: 14px; font-weight: 600; cursor: pointer; transition: opacity 0.2s; white-space: nowrap; " onmouseover="this.style.opacity='0.9'" onmouseout="this.style.opacity='1'">
 更新
 </button>
 </div>
 </div>

 <div style="margin-bottom: 24px;">
 <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 8px; ">
 <div>
 <div style="font-size: 16px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 4px;">
 自动发信息
 </div>
 <div style="font-size: 13px; color:var(--x-text-secondary);">
 ${isInContactList ? '启用后该账户会自动发送私信' : '需先添加到联系人后才能启用'}
 </div>
 </div>
 <div class="x-toggle" id="auto-message-toggle" onclick="${
   isInContactList ? `toggleStrangerAutoMessage('${messageData.id}')` : "showXToast('请先添加到联系人', 'warning')"
 }" style="cursor: ${isInContactList ? 'pointer' : 'not-allowed'}; opacity: ${isInContactList ? '1' : '0.5'};">
 <div class="toggle-switch" style="width: 50px; height: 30px; background-color: ${
   autoMessageEnabled ? 'var(--x-accent)' : '#333'
 }; border-radius: 15px; position: relative; transition: all 0.3s ease; ">
 <div class="toggle-circle" style="width: 26px; height: 26px; background-color:#fff; border-radius: 50%; position: absolute; top: 2px; left: ${
   autoMessageEnabled ? '22px' : '2px'
 }; transition: all 0.3s ease; "></div>
 </div>
 </div>
 </div>

 ${
   isInContactList
     ? `
 <div style="margin-top: 12px;">
 <div style="font-size: 14px; color:var(--x-text-secondary); margin-bottom: 8px;">
 发送间隔（秒）
 </div>
 <input
 type="number"
 id="stranger-interval-input"
 min="10"
 max="3600"
 value="${autoMessageInterval}"
 style="width: 100%; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 8px; padding: 10px 12px; font-size: 14px; color:var(--x-text-primary); outline: none; "
 onfocus="this.style.borderColor='var(--x-accent)'"
 onblur="this.style.borderColor='var(--x-border-color)'"
 onchange="updateStrangerInterval('${messageData.id}', this.value)"
 >
 <div style="font-size: 12px; color:var(--x-text-secondary); margin-top: 4px;">
 建议：60-300秒之间
 </div>
 </div>
 `
     : ''
 }
 </div>
 </div>
 </div>
`; // 添加到DOM
    const xSocialScreen = document.getElementById('x-social-screen');
    if (xSocialScreen) {
      xSocialScreen.appendChild(modal);
    } else {
      document.body.appendChild(modal);
    }
    // 点击背景关闭
    modal.onclick = e => {
      if (e.target === modal) {
        closeStrangerMessageSettings();
      }
    }; // 保存当前设置数据到全局，供其他函数使用
    window.currentStrangerSettings = {
      messageData: messageData,
      conversationData: conversationData,
    };
  }
  // 关闭设置弹窗
  function closeStrangerMessageSettings() {
    const modal = document.getElementById('stranger-message-settings-modal');
    if (modal) {
      modal.remove();
    }
    window.currentStrangerSettings = null;
  }
  // 切换联系人状态
  async function toggleStrangerContact(messageId) {
    try {
      const xDb = getXDB();
      const dataId = `messagesList_${currentAccountId || 'main'}`; // 🔧 重要：先从数据库加载最新的私信列表，避免覆盖现有数据
      const savedData = await xDb.xAccountProfiles.get(dataId);
      let messagesList = savedData?.data || [];
      console.log('📝 [联系人] 当前私信列表数量:', messagesList.length); // 查找是否已存在
      const existingIndex = messagesList.findIndex(msg => msg.id === messageId);
      const toggle = document.getElementById('contact-toggle');
      const toggleSwitch = toggle.querySelector('.toggle-switch');
      const toggleCircle = toggle.querySelector('.toggle-circle');
      if (existingIndex !== -1) {
        // 已存在，移除
        messagesList.splice(existingIndex, 1);
        console.log('📝 [联系人] 移除后私信列表数量:', messagesList.length); // 更新UI
        toggleSwitch.style.backgroundColor = '#333';
        toggleCircle.style.left = '2px'; // 同时禁用自动发信息
        const settingsId = `strangerSettings_${currentAccountId || 'main'}_${messageId}`;
        await xDb.xAccountProfiles.delete(settingsId); // 更新自动发信息开关UI
        const autoToggle = document.getElementById('auto-message-toggle');
        if (autoToggle) {
          const autoSwitch = autoToggle.querySelector('.toggle-switch');
          const autoCircle = autoToggle.querySelector('.toggle-circle');
          autoSwitch.style.backgroundColor = '#333';
          autoCircle.style.left = '2px';
          autoToggle.style.opacity = '0.5';
          autoToggle.style.cursor = 'not-allowed';
          autoToggle.onclick = () => showXToast('请先添加到联系人', 'warning');
        }
        showXToast('已从联系人移除', 'success');
      } else {
        // 不存在，添加
        const messageData = window.currentStrangerSettings.messageData;
        const newMessage = {
          id: messageId,
          userName: messageData.user.name,
          userHandle: messageData.user.handle.replace('@', ''),
          userAvatar: messageData.user.avatar,
          lastMessage: messageData.preview || '',
          timestamp: new Date().toISOString(),
          unread: false,
        };
        messagesList.unshift(newMessage);
        console.log('📝 [联系人] 添加后私信列表数量:', messagesList.length); // 更新UI
        toggleSwitch.style.backgroundColor = 'var(--x-accent)';
        toggleCircle.style.left = '22px'; // 更新自动发信息开关UI（变为可用）
        const autoToggle = document.getElementById('auto-message-toggle');
        if (autoToggle) {
          autoToggle.style.opacity = '1';
          autoToggle.style.cursor = 'pointer';
          autoToggle.onclick = () => toggleStrangerAutoMessage(messageId);
        }
        showXToast('已添加到联系人', 'success');
      }
      // 保存到数据库
      await xDb.xAccountProfiles.put({
        handle: dataId,
        name: 'messagesList',
        data: messagesList,
        updatedAt: new Date().toISOString(),
      });
      console.log('✅ [联系人] 已保存到数据库，列表数量:', messagesList.length); // 同步更新全局变量
      sampleMessagesData = messagesList; // 如果当前在私信列表页面，刷新显示
      const messagesPage = document.getElementById('x-messages-page');
      if (messagesPage && messagesPage.style.display === 'flex') {
        await loadMessagesList();
      }
    } catch (error) {
      console.error('切换联系人状态失败:', error);
      showXToast('操作失败', 'error');
    }
  }
  // 更新陌生人头像（使用链接）
  async function updateStrangerAvatar(messageId) {
    const input = document.getElementById('stranger-avatar-url-input');
    if (!input) return;
    const newAvatarUrl = input.value.trim();
    if (!newAvatarUrl) {
      showXToast('请输入头像链接', 'warning');
      return;
    }
    try {
      // 更新预览
      const preview = document.getElementById('stranger-avatar-preview');
      if (preview) preview.src = newAvatarUrl; // 更新顶部小头像
      const topAvatar = document.getElementById('message-detail-top-avatar');
      if (topAvatar) topAvatar.src = newAvatarUrl; // 更新大头像
      const detailAvatar = document.getElementById('message-detail-avatar');
      if (detailAvatar) detailAvatar.src = newAvatarUrl; // 保存到数据库
      const xDb = getXDB(); // 保存到陌生人设置
      const settingsId = `strangerSettings_${currentAccountId || 'main'}_${messageId}`;
      const settings = (await xDb.xAccountProfiles.get(settingsId)) || {
        handle: settingsId,
        id: settingsId,
        messageId: messageId,
      };
      settings.customAvatar = newAvatarUrl;
      settings.updatedAt = new Date().toISOString();
      await xDb.xAccountProfiles.put(settings); // 更新私信列表中的头像
      const messageIndex = sampleMessagesData.findIndex(msg => msg.id === messageId);
      if (messageIndex !== -1) {
        sampleMessagesData[messageIndex].userAvatar = newAvatarUrl;
        const dataId = `messagesList_${currentAccountId || 'main'}`;
        await xDb.xAccountProfiles.put({
          handle: dataId,
          name: 'messagesList',
          data: sampleMessagesData,
          updatedAt: new Date().toISOString(),
        }); // 刷新私信列表显示
        const messagesPage = document.getElementById('x-messages-page');
        if (messagesPage && messagesPage.style.display === 'flex') {
          await loadMessagesList();
        }
      }
      // 更新当前设置数据
      if (window.currentStrangerSettings && window.currentStrangerSettings.messageData) {
        window.currentStrangerSettings.messageData.user.avatar = newAvatarUrl;
      }
      showXToast('头像已更新', 'success');
    } catch (error) {
      console.error('更新头像失败:', error);
      showXToast('更新失败', 'error');
    }
  }
  // 更新时间间隔
  async function updateStrangerInterval(messageId, interval) {
    try {
      const intervalNum = parseInt(interval);
      if (isNaN(intervalNum) || intervalNum < 10 || intervalNum > 3600) {
        showXToast('时间间隔必须在10-3600秒之间', 'warning');
        return;
      }
      const xDb = getXDB();
      const settingsId = `strangerSettings_${currentAccountId || 'main'}_${messageId}`;
      const settings = (await xDb.xAccountProfiles.get(settingsId)) || {
        handle: settingsId,
        id: settingsId,
        messageId: messageId,
      };
      settings.autoMessageInterval = intervalNum;
      settings.updatedAt = new Date().toISOString();
      await xDb.xAccountProfiles.put(settings);
      showXToast(`已设置间隔为 ${intervalNum} 秒`, 'success');
    } catch (error) {
      console.error('更新时间间隔失败:', error);
      showXToast('更新失败', 'error');
    }
  }
  // 切换自动发信息
  async function toggleStrangerAutoMessage(messageId) {
    try {
      const xDb = getXDB();
      const settingsId = `strangerSettings_${currentAccountId || 'main'}_${messageId}`; // 读取当前状态
      const settings = await xDb.xAccountProfiles.get(settingsId);
      const currentEnabled = settings && settings.autoMessageEnabled;
      const toggle = document.getElementById('auto-message-toggle');
      const toggleSwitch = toggle.querySelector('.toggle-switch');
      const toggleCircle = toggle.querySelector('.toggle-circle');
      if (currentEnabled) {
        // 当前已启用，禁用
        settings.autoMessageEnabled = false;
        await xDb.xAccountProfiles.put(settings);
        toggleSwitch.style.backgroundColor = '#333';
        toggleCircle.style.left = '2px';
        showXToast('已关闭自动发信息', 'success');
      } else {
        // 当前未启用，启用
        const newSettings = settings || {
          handle: settingsId,
          id: settingsId,
          messageId: messageId,
          autoMessageInterval: 60, // 默认60秒
        };
        newSettings.autoMessageEnabled = true;
        newSettings.updatedAt = new Date().toISOString();
        await xDb.xAccountProfiles.put(newSettings);
        toggleSwitch.style.backgroundColor = 'var(--x-accent)';
        toggleCircle.style.left = '22px';
        showXToast('已开启自动发信息', 'success');
      }
    } catch (error) {
      console.error('切换自动发信息失败:', error);
      showXToast('操作失败', 'error');
    }
  }
  // 暴露函数到全局
  window.closeStrangerMessageSettings = closeStrangerMessageSettings;
  window.toggleStrangerContact = toggleStrangerContact;
  window.updateStrangerAvatar = updateStrangerAvatar;
  window.updateStrangerInterval = updateStrangerInterval;
  window.toggleStrangerAutoMessage = toggleStrangerAutoMessage; // ============================================
  // 粉丝群功能
  // ============================================
  // 创建粉丝群
  async function createFanGroup() {
    try {
      const xDb = getXDB();
      const dataId = `messagesList_${currentAccountId || 'main'}`; // 从数据库加载最新的私信列表
      const savedData = await xDb.xAccountProfiles.get(dataId);
      let messagesList = savedData?.data || []; // 生成唯一ID
      const groupId = `fangroup_${Date.now()}`; // 创建新粉丝群数据
      const newFanGroup = {
        id: groupId,
        type: 'fangroup',
        userName: '我的粉丝群',
        userHandle: 'fangroup',
        userAvatar: 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg', // 默认头像
        lastMessage: '',
        timestamp: new Date().toISOString(),
        unread: false,
        // 粉丝群特有属性
        groupName: '我的粉丝群',
        groupThreshold: '', // 入群门槛
        memberCount: 0, // 成员数量
        members: [], // 成员列表
      }; // 添加到列表开头
      messagesList.unshift(newFanGroup); // 保存到数据库
      await xDb.xAccountProfiles.put({
        handle: dataId,
        name: 'messagesList',
        data: messagesList,
        updatedAt: new Date().toISOString(),
      });
      console.log('✅ [粉丝群] 已创建新粉丝群:', groupId); // 关闭弹窗
      closeNewMessageModal(); // 更新全局变量
      sampleMessagesData = messagesList; // 刷新私信列表
      await loadMessagesList();
      showXToast('已创建粉丝群', 'success'); // 自动打开粉丝群私信
      setTimeout(() => {
        window.openMessageDetail(newFanGroup);
      }, 300);
    } catch (error) {
      console.error('❌ [粉丝群] 创建失败:', error);
      showXToast('创建粉丝群失败', 'error');
    }
  }
  // 打开粉丝群设置弹窗
  async function openFanGroupSettings(groupData) {
    console.log('🎯 [粉丝群] 打开设置弹窗', groupData);
    try {
      const xDb = getXDB();
      const dataId = `messagesList_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(dataId);
      const messagesList = savedData?.data || []; // 找到当前粉丝群数据
      const fanGroup = messagesList.find(msg => msg.id === groupData.id);
      if (!fanGroup) {
        showXToast('未找到粉丝群数据', 'error');
        return;
      }
      // 读取自动发信息设置
      let autoMessageEnabled = false;
      let autoMessageInterval = 120; // 默认120秒
      const fanGroupSettingsId = `fanGroupSettings_${currentAccountId || 'main'}_${groupData.id}`;
      const fanGroupSettings = await xDb.xAccountProfiles.get(fanGroupSettingsId);
      if (fanGroupSettings && fanGroupSettings.data) {
        autoMessageEnabled = fanGroupSettings.data.autoMessageEnabled || false;
        autoMessageInterval = fanGroupSettings.data.autoMessageInterval || 120;
      }
      // 创建设置弹窗
      const modal = document.createElement('div');
      modal.id = 'fangroup-settings-modal';
      modal.style.cssText = `
 position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background-color: rgba(0, 0, 0, 0.5); display: flex; align-items: center; justify-content: center; z-index: 25; backdrop-filter: blur(4px); `;
      modal.innerHTML = `
 <div style="background-color:var(--x-bg-primary); border-radius: 16px; width: 90%; max-width: 480px; max-height: 85vh; overflow: hidden; border: 1px solid var(--x-border-color); display: flex; flex-direction: column; " onclick="event.stopPropagation()">

 <div style="padding: 14px 16px; border-bottom: 1px solid var(--x-border-color); display: flex; align-items: center; justify-content: space-between; ">
 <div style="font-size: 17px; font-weight: 700; color:var(--x-text-primary);">粉丝群设置</div>
 <div style="display: flex; align-items: center; gap: 4px;">
 <div onclick="openFanGroupShareModal('${
   groupData.id
 }')" style="cursor: pointer; padding: 6px; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'"
 title="转发粉丝群">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: var(--x-accent);">
 <g><path d="M4.5 3.88l4.432 4.14-1.364 1.46L5.5 7.55V16c0 1.1.896 2 2 2H13v2H7.5c-2.209 0-4-1.791-4-4V7.55L1.432 9.48.068 8.02 4.5 3.88zM16.5 6H11V4h5.5c2.209 0 4 1.791 4 4v8.45l2.068-1.93 1.364 1.46-4.432 4.14-4.432-4.14 1.364-1.46 2.068 1.93V8c0-1.1-.896-2-2-2z"></path></g>
 </svg>
 </div>
 <div onclick="closeFanGroupSettings()" style="cursor: pointer; padding: 6px; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: var(--x-text-secondary);">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </div>
 </div>
 </div>

 <div style="flex: 1; overflow-y: auto; padding: 16px; ">

 <div style="margin-bottom: 18px;">
 <div style="font-size: 14px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 10px;">
 群头像
 </div>
 <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
 <img id="fangroup-avatar-preview" src="${
   fanGroup.userAvatar || fanGroup.groupAvatar || 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg'
 }" style="width: 52px; height: 52px; border-radius: 50%; object-fit: cover; ">
 </div>
 <div style="display: flex; gap: 6px;">
 <input
 type="text"
 id="fangroup-avatar-input"
 placeholder="输入图片链接地址"
 value="${fanGroup.userAvatar || fanGroup.groupAvatar || ''}"
 style="flex: 1; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 8px; padding: 8px 12px; font-size: 13px; color:var(--x-text-primary); outline: none; "
 onfocus="this.style.borderColor='var(--x-accent)'"
 onblur="this.style.borderColor='var(--x-border-color)'"
 oninput="updateFanGroupAvatarPreview(this.value)"
 >
 <button onclick="saveFanGroupAvatar('${
   groupData.id
 }')" style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 8px; padding: 8px 14px; font-size: 13px; font-weight: 600; cursor: pointer; transition: opacity 0.2s; white-space: nowrap; " onmouseover="this.style.opacity='0.9'" onmouseout="this.style.opacity='1'">
 更新
 </button>
 </div>
 </div>

 <div style="margin-bottom: 18px;">
 <div style="font-size: 14px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 10px;">
 群名称
 </div>
 <input
 type="text"
 id="fangroup-name-input"
 placeholder="输入群名称"
 value="${fanGroup.userName || fanGroup.groupName || '我的粉丝群'}"
 maxlength="30"
 style="width: 100%; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 8px; padding: 10px 12px; font-size: 13px; color:var(--x-text-primary); outline: none; "
 onfocus="this.style.borderColor='var(--x-accent)'"
 onblur="this.style.borderColor='var(--x-border-color)'"
 >
 </div>

 <div style="margin-bottom: 18px;">
 <div style="font-size: 14px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 10px;">
 入群门槛
 </div>
 <textarea
 id="fangroup-threshold-input"
 placeholder="例如：关注满30天、互动次数达到10次等..."
 maxlength="200"
 style="width: 100%; min-height: 80px; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 8px; padding: 10px 12px; font-size: 13px; color:var(--x-text-primary); outline: none; resize: vertical; font-family: inherit; line-height: 1.5; "
 onfocus="this.style.borderColor='var(--x-accent)'"
 onblur="this.style.borderColor='var(--x-border-color)'"
 >${fanGroup.groupThreshold || ''}</textarea>
 <div style="text-align: right; margin-top: 4px;">
 <span style="font-size: 11px; color:var(--x-text-secondary);">设置粉丝需要满足的条件才能进群</span>
 </div>
 </div>

 <div style="margin-bottom: 24px;">
 <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 8px; ">
 <div>
 <div style="font-size: 16px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 4px;">
 后台自动发信息
 </div>
 <div style="font-size: 13px; color:var(--x-text-secondary);">
 启用后群成员会自动交流
 </div>
 </div>
 <div class="x-toggle" id="fangroup-auto-message-toggle" onclick="toggleFanGroupAutoMessage('${
   groupData.id
 }')" style="cursor: pointer;">
 <div class="toggle-switch" style="width: 50px; height: 30px; background-color: ${
   autoMessageEnabled ? 'var(--x-accent)' : '#333'
 }; border-radius: 15px; position: relative; transition: all 0.3s ease; ">
 <div class="toggle-circle" style="width: 26px; height: 26px; background-color:#fff; border-radius: 50%; position: absolute; top: 2px; left: ${
   autoMessageEnabled ? '22px' : '2px'
 }; transition: all 0.3s ease; "></div>
 </div>
 </div>
 </div>

 <div style="margin-top: 12px;">
 <div style="font-size: 14px; color:var(--x-text-secondary); margin-bottom: 8px;">
 发送间隔（秒）
 </div>
 <input
 type="number"
 id="fangroup-interval-input"
 min="60"
 max="3600"
 value="${autoMessageInterval}"
 style="width: 100%; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 8px; padding: 10px 12px; font-size: 14px; color:var(--x-text-primary); outline: none; "
 onfocus="this.style.borderColor='var(--x-accent)'"
 onblur="this.style.borderColor='var(--x-border-color)'"
 onchange="updateFanGroupInterval('${groupData.id}', this.value)"
 >
 <div style="font-size: 12px; color:var(--x-text-secondary); margin-top: 4px;">
 建议：120-600秒之间
 </div>
 </div>
 </div>

 <div style="margin-bottom: 18px;">
 <div style="font-size: 14px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 10px; display: flex; align-items: center; justify-content: space-between;">
 <span>群成员</span>
 <span style="font-size: 13px; color: var(--x-accent); font-weight: 700;">${fanGroup.members?.length || 0} 人</span>
 </div>
 <div style="max-height: 240px; overflow-y: auto; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 8px; padding: 6px; ">
 ${
   fanGroup.members && fanGroup.members.length > 0
     ? fanGroup.members
         .map(
           member => `
 <div style="display: flex; align-items: center; gap: 10px; padding: 6px; border-radius: 6px; transition: background-color 0.2s; margin-bottom: 2px; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <img src="${member.avatar}" style="width: 32px; height: 32px; border-radius: 50%; object-fit: cover; ">
 <div style="flex: 1; min-width: 0;">
 <div style="color:var(--x-text-primary); font-size: 13px; font-weight: 600;">
 ${member.name}
 </div>
 <div style="color:var(--x-text-secondary); font-size: 11px;">
 ${member.handle}
 </div>
 </div>
 <button onclick="kickFanGroupMember('${groupData.id}', '${member.id}', '${member.name}')" style="background-color: transparent; color: #ef4444; border: 1px solid #ef4444; border-radius: 6px; padding: 4px 10px; font-size: 11px; font-weight: 600; cursor: pointer; transition: all 0.2s; white-space: nowrap; " onmouseover="this.style.backgroundColor='#ef444410'"
 onmouseout="this.style.backgroundColor='transparent'">
 踢出
 </button>
 </div>
 `,
         )
         .join('')
     : `<div style="text-align: center; padding: 20px; color:var(--x-text-secondary); font-size: 12px; ">暂无成员</div>`
 }
 </div>
 </div>
 </div>

 <div style="padding: 12px 16px; border-top: 1px solid var(--x-border-color); display: flex; flex-direction: column; gap: 8px;">

 <button onclick="openFanGroupApplicationsModal('${
   groupData.id
 }')" style="background-color:var(--x-bg-secondary); color:var(--x-text-primary); border: none; border-radius: 8px; padding: 10px 16px; font-size: 13px; font-weight: 600; cursor: pointer; display: flex; align-items: center; justify-content: center; gap: 6px; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'" onmouseout="this.style.backgroundColor='var(--x-bg-secondary)'">
 <svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: var(--x-accent);">
 <g><path d="M17.5 4.5c-1.95-1.96-5.11-1.96-7.07 0-1.96 1.96-1.96 5.11 0 7.07 1.95 1.96 5.11 1.96 7.07 0 1.96-1.96 1.96-5.11 0-7.07zM14 9c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1z M12 14H6c-1.1 0-2 .9-2 2v5h16v-5c0-1.1-.9-2-2-2h-6z"></path></g>
 </svg>
 查看入群申请
 </button>

 <div style="display: flex; gap: 6px;">
 <button onclick="dissolveFanGroup('${
   groupData.id
 }')" style="background-color: transparent; color: #ef4444; border: 1px solid #ef4444; border-radius: 8px; padding: 9px 14px; font-size: 13px; font-weight: 600; cursor: pointer; transition: all 0.2s; white-space: nowrap; " onmouseover="this.style.backgroundColor='#ef444410'"
 onmouseout="this.style.backgroundColor='transparent'">
 解散群聊
 </button>
 <button onclick="closeFanGroupSettings()" style="flex: 1; background-color:var(--x-bg-secondary); color:var(--x-text-secondary); border: none; border-radius: 8px; padding: 9px 14px; font-size: 13px; font-weight: 600; cursor: pointer; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'" onmouseout="this.style.backgroundColor='var(--x-bg-secondary)'">取消</button>
 <button onclick="saveFanGroupSettings('${
   groupData.id
 }')" style="flex: 1; background-color: var(--x-accent); color: #fff; border: none; border-radius: 8px; padding: 9px 14px; font-size: 13px; font-weight: 600; cursor: pointer; transition: opacity 0.2s; " onmouseover="this.style.opacity='0.9'" onmouseout="this.style.opacity='1'">保存</button>
 </div>
 </div>
 </div>
 `; // 添加到DOM
      const xSocialScreen = document.getElementById('x-social-screen');
      if (xSocialScreen) {
        xSocialScreen.appendChild(modal);
      } else {
        document.body.appendChild(modal);
      }
      // 点击背景关闭
      modal.onclick = e => {
        if (e.target === modal) {
          closeFanGroupSettings();
        }
      };
    } catch (error) {
      console.error('❌ [粉丝群] 打开设置失败:', error);
      showXToast('打开设置失败', 'error');
    }
  }
  // 关闭粉丝群设置弹窗
  function closeFanGroupSettings() {
    const modal = document.getElementById('fangroup-settings-modal');
    if (modal) {
      modal.remove();
    }
  }
  // 更新粉丝群头像预览
  function updateFanGroupAvatarPreview(avatarUrl) {
    const preview = document.getElementById('fangroup-avatar-preview');
    if (preview && avatarUrl) {
      preview.src = avatarUrl;
    }
  }
  // 保存粉丝群头像
  async function saveFanGroupAvatar(groupId) {
    const avatarInput = document.getElementById('fangroup-avatar-input');
    if (!avatarInput) return;
    const newAvatar = avatarInput.value.trim();
    if (!newAvatar) {
      showXToast('请输入头像链接', 'warning');
      return;
    }
    try {
      const xDb = getXDB();
      const dataId = `messagesList_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(dataId);
      let messagesList = savedData?.data || []; // 找到并更新粉丝群
      const groupIndex = messagesList.findIndex(msg => msg.id === groupId);
      if (groupIndex !== -1) {
        messagesList[groupIndex].userAvatar = newAvatar;
        messagesList[groupIndex].groupAvatar = newAvatar; // 保存到数据库
        await xDb.xAccountProfiles.put({
          handle: dataId,
          name: 'messagesList',
          data: messagesList,
          updatedAt: new Date().toISOString(),
        }); // 更新全局变量
        sampleMessagesData = messagesList; // 更新私信详情页的头像（如果正在查看）
        const topAvatar = document.getElementById('message-detail-top-avatar');
        if (topAvatar && currentMessageConversation?.id === groupId) {
          topAvatar.src = newAvatar;
        }
        // 刷新私信列表
        await loadMessagesList();
        showXToast('头像已更新', 'success');
      }
    } catch (error) {
      console.error('❌ [粉丝群] 保存头像失败:', error);
      showXToast('保存失败', 'error');
    }
  }
  // 保存粉丝群设置
  async function saveFanGroupSettings(groupId) {
    try {
      const nameInput = document.getElementById('fangroup-name-input');
      const thresholdInput = document.getElementById('fangroup-threshold-input');
      if (!nameInput) return;
      const newName = nameInput.value.trim();
      const newThreshold = thresholdInput ? thresholdInput.value.trim() : '';
      if (!newName) {
        showXToast('请输入群名称', 'warning');
        return;
      }
      const xDb = getXDB();
      const dataId = `messagesList_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(dataId);
      let messagesList = savedData?.data || []; // 找到并更新粉丝群
      const groupIndex = messagesList.findIndex(msg => msg.id === groupId);
      if (groupIndex !== -1) {
        messagesList[groupIndex].userName = newName;
        messagesList[groupIndex].groupName = newName;
        messagesList[groupIndex].groupThreshold = newThreshold; // 保存到数据库
        await xDb.xAccountProfiles.put({
          handle: dataId,
          name: 'messagesList',
          data: messagesList,
          updatedAt: new Date().toISOString(),
        }); // 更新全局变量
        sampleMessagesData = messagesList; // 更新私信详情页的名称（如果正在查看）
        const topName = document.getElementById('message-detail-top-name');
        if (topName && currentMessageConversation?.id === groupId) {
          topName.textContent = newName;
        }
        // 刷新私信列表
        await loadMessagesList();
        showXToast('设置已保存', 'success');
        closeFanGroupSettings();
      }
    } catch (error) {
      console.error('❌ [粉丝群] 保存设置失败:', error);
      showXToast('保存失败', 'error');
    }
  }
  // 切换粉丝群自动发信息
  async function toggleFanGroupAutoMessage(groupId) {
    try {
      const xDb = getXDB();
      const settingsId = `fanGroupSettings_${currentAccountId || 'main'}_${groupId}`;
      const settings = await xDb.xAccountProfiles.get(settingsId);
      const currentState = settings?.data?.autoMessageEnabled || false;
      const newState = !currentState;
      // 保存设置
      await xDb.xAccountProfiles.put({
        handle: settingsId,
        name: 'fanGroupSettings',
        data: {
          autoMessageEnabled: newState,
          autoMessageInterval: settings?.data?.autoMessageInterval || 120,
          groupId: groupId,
        },
        updatedAt: new Date().toISOString(),
      });
      console.log(`🤖 [粉丝群] 自动发信息已${newState ? '启用' : '禁用'}`);
      // 更新UI
      const toggle = document.getElementById('fangroup-auto-message-toggle');
      if (toggle) {
        const toggleSwitch = toggle.querySelector('.toggle-switch');
        const toggleCircle = toggle.querySelector('.toggle-circle');
        toggleSwitch.style.backgroundColor = newState ? 'var(--x-accent)' : '#333';
        toggleCircle.style.left = newState ? '22px' : '2px';
      }
      showXToast(newState ? '已启用后台自动发信息' : '已禁用后台自动发信息', 'success');
    } catch (error) {
      console.error('❌ [粉丝群] 切换自动发信息失败:', error);
      showXToast('操作失败', 'error');
    }
  }
  // 更新粉丝群自动发信息间隔
  async function updateFanGroupInterval(groupId, interval) {
    try {
      const xDb = getXDB();
      const settingsId = `fanGroupSettings_${currentAccountId || 'main'}_${groupId}`;
      const settings = await xDb.xAccountProfiles.get(settingsId);
      const newInterval = Math.max(60, Math.min(3600, parseInt(interval) || 120));
      // 保存设置
      await xDb.xAccountProfiles.put({
        handle: settingsId,
        name: 'fanGroupSettings',
        data: {
          autoMessageEnabled: settings?.data?.autoMessageEnabled || false,
          autoMessageInterval: newInterval,
          groupId: groupId,
        },
        updatedAt: new Date().toISOString(),
      });
      console.log(`🤖 [粉丝群] 自动发信息间隔已更新: ${newInterval}秒`);
      showXToast(`间隔已更新为 ${newInterval} 秒`, 'success');
    } catch (error) {
      console.error('❌ [粉丝群] 更新间隔失败:', error);
      showXToast('更新失败', 'error');
    }
  }
  // 处理私信详情页小头像点击
  window.handleMessageDetailAvatarClick = function () {
    console.log('🖱️ [头像点击] 触发头像点击事件');
    if (!currentMessageConversation) {
      console.warn('⚠️ [头像点击] currentMessageConversation 为空');
      return;
    }

    console.log('🖱️ [头像点击] 当前对话类型:', currentMessageConversation.type, currentMessageConversation.id);

    // 🔧 检查是否为粉丝群（同时检查ID前缀以确保准确性）
    const isFanGroup =
      currentMessageConversation.type === 'fangroup' ||
      (currentMessageConversation.id && currentMessageConversation.id.startsWith('fangroup_'));

    if (isFanGroup) {
      console.log('🖱️ [头像点击] 检测到粉丝群，打开设置');
      // 打开粉丝群设置
      openFanGroupSettings(currentMessageConversation);
      return;
    }
    // 检查是否为角色私信（角色私信不支持设置功能）
    const isCharacterMessage =
      currentMessageConversation.id &&
      currentMessageConversation.id.startsWith('msg_') &&
      currentMessageConversation.id !== 'msg_001';
    if (isCharacterMessage) {
      console.log('🖱️ [头像点击] 角色对话不支持设置');
      return;
    }
    // 其他类型（账户/NPC/关系NPC/陌生人）：打开联系人设置
    console.log('🖱️ [头像点击] 打开联系人设置，类型:', currentMessageConversation._accountType || 'stranger');
    // 构建标准的 messageData 格式
    const messageData = {
      id: currentMessageConversation.id,
      user: {
        name: currentMessageConversation.userName || currentMessageConversation.name,
        handle: currentMessageConversation.userHandle || currentMessageConversation.handle,
        avatar: currentMessageConversation.userAvatar || currentMessageConversation.avatar,
      },
      preview: currentMessageConversation.lastMessage || '',
      _accountType: currentMessageConversation._accountType || 'stranger',
    }; // 打开通用联系人设置弹窗
    openMessageContactSettings(messageData, null);
  };
  // 调整粉丝群详情页显示（隐藏大头像和详细信息区域）
  function adjustFanGroupDetailPage(isFanGroup) {
    const scrollableContainer = document.getElementById('message-detail-scrollable');
    if (!scrollableContainer) return; // 找到用户详细信息区域（第一个子元素）
    const userInfoSection = scrollableContainer.children[0];
    if (!userInfoSection) return; // 控制自反应按钮的显示
    const autoReactionBtn = document.getElementById('fangroup-auto-reaction-btn');
    // 控制群公告按钮的显示
    const announcementBtn = document.getElementById('fangroup-announcement-btn');
    // 控制群文件按钮的显示
    const filesBtn = document.getElementById('fangroup-files-btn');
    if (isFanGroup) {
      // 粉丝群：隐藏用户详细信息区域，显示自反应按钮、群公告按钮和群文件按钮
      userInfoSection.style.display = 'none';
      if (autoReactionBtn) {
        autoReactionBtn.style.display = 'flex';
      }
      if (announcementBtn) {
        announcementBtn.style.display = 'flex';
      }
      if (filesBtn) {
        filesBtn.style.display = 'flex';
      }
      console.log('🎯 [粉丝群] 已隐藏详细信息区域，显示自反应按钮、群公告按钮和群文件按钮');
    } else {
      // 普通对话：显示用户详细信息区域，隐藏自反应按钮、群公告按钮和群文件按钮
      userInfoSection.style.display = 'flex';
      if (autoReactionBtn) {
        autoReactionBtn.style.display = 'none';
      }
      if (announcementBtn) {
        announcementBtn.style.display = 'none';
      }
      if (filesBtn) {
        filesBtn.style.display = 'none';
      }
    }
  }
  // 打开粉丝群转发选项弹窗
  async function openFanGroupShareModal(groupId) {
    console.log('📤 [粉丝群转发] 打开转发选项', groupId);
    try {
      const xDb = getXDB();
      const dataId = `messagesList_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(dataId);
      const messagesList = savedData?.data || []; // 找到粉丝群数据
      const fanGroup = messagesList.find(msg => msg.id === groupId);
      if (!fanGroup) {
        showXToast('未找到粉丝群数据', 'error');
        return;
      }
      // 创建转发选项弹窗
      const modal = document.createElement('div');
      modal.id = 'fangroup-share-modal';
      modal.style.cssText = `
 position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background-color: rgba(0, 0, 0, 0.5); display: flex; align-items: center; justify-content: center; z-index: 30; backdrop-filter: blur(4px); `;
      modal.innerHTML = `
 <div style="background-color:var(--x-bg-primary); border-radius: 16px; width: 90%; max-width: 400px; border: 1px solid var(--x-border-color); overflow: hidden; " onclick="event.stopPropagation()">

 <div style="padding: 20px; border-bottom: 1px solid var(--x-border-color); ">
 <div style="font-size: 20px; font-weight: 700; color:var(--x-text-primary); text-align: center;">
 转发粉丝群
 </div>
 </div>

 <div style="padding: 20px; border-bottom: 1px solid var(--x-border-color);">
 <div style="display: flex; align-items: center; gap: 12px;">
 <img src="${fanGroup.userAvatar || fanGroup.groupAvatar || 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg'}"
 style="width: 48px; height: 48px; border-radius: 50%; object-fit: cover;">
 <div style="flex: 1;">
 <div style="color:var(--x-text-primary); font-size: 16px; font-weight: 600; margin-bottom: 4px;">
 ${fanGroup.userName || fanGroup.groupName || '我的粉丝群'}
 </div>
 <div style="color:var(--x-text-secondary); font-size: 13px;">
 ${fanGroup.memberCount || 0} 位成员
 </div>
 </div>
 </div>
 ${
   fanGroup.groupThreshold
     ? `
 <div style="margin-top: 12px; padding: 10px; background-color:var(--x-bg-secondary); border-radius: 8px; color:var(--x-text-secondary); font-size: 13px; line-height: 1.4; ">
 <div style="color:var(--x-text-primary); font-weight: 600; margin-bottom: 4px;">入群门槛</div>
 ${fanGroup.groupThreshold}
 </div>
 `
     : ''
 }
 </div>

 <div style="padding: 12px;">

 <div onclick="shareFanGroupToContact('${groupId}')" style="display: flex; align-items: center; gap: 16px; padding: 16px; border-radius: 12px; cursor: pointer; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <div style="width: 40px; height: 40px; border-radius: 50%; background-color:var(--x-bg-secondary); display: flex; align-items: center; justify-content: center; ">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-accent);">
 <g><path d="M1.998 5.5c0-1.381 1.119-2.5 2.5-2.5h15c1.381 0 2.5 1.119 2.5 2.5v13c0 1.381-1.119 2.5-2.5 2.5h-15c-1.381 0-2.5-1.119-2.5-2.5v-13zm2.5-.5c-.276 0-.5.224-.5.5v2.764l8 3.638 8-3.636V5.5c0-.276-.224-.5-.5-.5h-15zm15.5 5.463l-8 3.636-8-3.638V18.5c0 .276.224.5.5.5h15c.276 0 .5-.224.5-.5v-8.037z"></path></g>
 </svg>
 </div>
 <div style="flex: 1;">
 <div style="color:var(--x-text-primary); font-size: 15px; font-weight: 600; margin-bottom: 2px;">
 转发到联系人
 </div>
 <div style="color:var(--x-text-secondary); font-size: 13px;">
 分享给你的私信联系人
 </div>
 </div>
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-text-secondary);">
 <g><path d="M8.58 7.17l4.24 4.24-4.24 4.24 1.42 1.42 5.66-5.66-5.66-5.66z"></path></g>
 </svg>
 </div>

 <div onclick="shareFanGroupToPost('${groupId}')" style="display: flex; align-items: center; gap: 16px; padding: 16px; border-radius: 12px; cursor: pointer; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <div style="width: 40px; height: 40px; border-radius: 50%; background-color:var(--x-bg-secondary); display: flex; align-items: center; justify-content: center; ">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-accent);">
 <g><path d="M8.8 7.2H5.6V3.9c0-.4-.3-.8-.8-.8s-.7.4-.7.8v3.3H.8c-.4 0-.8.3-.8.8s.3.8.8.8h3.3v3.3c0 .4.3.8.8.8s.8-.3.8-.8V8.7H9c.4 0 .8-.3.8-.8s-.5-.7-1-.7zm15-4.9v-.1h-.1c-.1 0-9.2 1.2-14.4 11.7-3.8 7.6-3.6 9.9-3.3 9.9.3.1 3.4-6.5 6.7-9.2 5.2-1.1 6.6-3.6 6.6-3.6s-1.5.2-2.1.2c-.8 0-1.4-.2-1.7-.3 1.3-1.2 2.4-1.5 3.5-1.7.9-.2 1.8-.4 3-1.2 2.2-1.6 1.9-5.5 1.8-5.7z"></path></g>
 </svg>
 </div>
 <div style="flex: 1;">
 <div style="color:var(--x-text-primary); font-size: 15px; font-weight: 600; margin-bottom: 2px;">
 转发到推文
 </div>
 <div style="color:var(--x-text-secondary); font-size: 13px;">
 发布推文并引用粉丝群
 </div>
 </div>
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-text-secondary);">
 <g><path d="M8.58 7.17l4.24 4.24-4.24 4.24 1.42 1.42 5.66-5.66-5.66-5.66z"></path></g>
 </svg>
 </div>
 </div>

 <div style="padding: 12px 20px 20px 20px;">
 <button onclick="closeFanGroupShareModal()" style="width: 100%; background-color:var(--x-bg-secondary); color:var(--x-text-primary); border: none; border-radius: 20px; padding: 12px 20px; font-size: 15px; font-weight: 600; cursor: pointer; transition: opacity 0.2s; " onmouseover="this.style.opacity='0.8'" onmouseout="this.style.opacity='1'">
 取消
 </button>
 </div>
 </div>
 `; // 添加到DOM
      const xSocialScreen = document.getElementById('x-social-screen');
      if (xSocialScreen) {
        xSocialScreen.appendChild(modal);
      } else {
        document.body.appendChild(modal);
      }
      // 点击背景关闭
      modal.onclick = e => {
        if (e.target === modal) {
          closeFanGroupShareModal();
        }
      };
    } catch (error) {
      console.error('❌ [粉丝群转发] 打开转发选项失败:', error);
      showXToast('打开转发选项失败', 'error');
    }
  }
  // 关闭粉丝群转发选项弹窗
  function closeFanGroupShareModal() {
    const modal = document.getElementById('fangroup-share-modal');
    if (modal) {
      modal.remove();
    }
  }
  // 转发粉丝群到联系人
  async function shareFanGroupToContact(groupId) {
    console.log('📤 [粉丝群转发] 转发到联系人', groupId);
    try {
      const xDb = getXDB();
      const dataId = `messagesList_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(dataId);
      const messagesList = savedData?.data || [];

      // 找到粉丝群数据
      const fanGroup = messagesList.find(msg => msg.id === groupId);
      if (!fanGroup) {
        showXToast('未找到粉丝群数据', 'error');
        return;
      }

      // 关闭转发选项弹窗
      closeFanGroupShareModal();

      // 获取所有联系人（排除当前粉丝群自己）
      const contacts = messagesList.filter(msg => msg.id !== groupId);
      if (contacts.length === 0) {
        showXToast('暂无其他联系人', 'info');
        return;
      }

      // 创建联系人选择弹窗
      const modal = document.createElement('div');
      modal.id = 'fangroup-contact-select-modal';
      modal.style.cssText = `
 position: fixed;
 top: 0;
 left: 0;
 width: 100vw;
 height: 100vh;
 background-color: rgba(0, 0, 0, 0.5);
 display: flex;
 align-items: center;
 justify-content: center;
 z-index: 35;
 backdrop-filter: blur(4px);
 `;

      modal.innerHTML = `
 <div style="
 background-color:var(--x-bg-primary);
 border-radius: 16px;
 width: 90%;
 max-width: 500px;
 max-height: 80vh;
 border: 1px solid var(--x-border-color);
 display: flex;
 flex-direction: column;
 overflow: hidden;
 " onclick="event.stopPropagation()">

 <div style="
 padding: 16px 20px;
 border-bottom: 1px solid var(--x-border-color);
 display: flex;
 align-items: center;
 justify-content: space-between;
 ">
 <div style="font-size: 18px; font-weight: 700; color:var(--x-text-primary);">
 选择转发对象
 </div>
 <div onclick="closeFanGroupContactSelectModal()" style="
 cursor: pointer;
 padding: 8px;
 border-radius: 50%;
 transition: background-color 0.2s;
 " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-text-primary);">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </div>
 </div>

 <div style="
 padding: 16px 20px;
 background-color:var(--x-bg-secondary);
 border-bottom: 1px solid var(--x-border-color);
 ">
 <div style="font-size: 13px; color:var(--x-text-secondary); margin-bottom: 8px;">
 将要转发的粉丝群
 </div>
 <div style="display: flex; align-items: center; gap: 12px;">
 <img src="${fanGroup.userAvatar || fanGroup.groupAvatar || 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg'}"
 style="width: 40px; height: 40px; border-radius: 50%; object-fit: cover;">
 <div style="flex: 1;">
 <div style="color:var(--x-text-primary); font-size: 15px; font-weight: 600;">
 ${fanGroup.userName || fanGroup.groupName || '我的粉丝群'}
 </div>
 <div style="color:var(--x-text-secondary); font-size: 13px;">
 ${fanGroup.memberCount || 0} 位成员
 </div>
 </div>
 </div>
 </div>

 <div id="fangroup-contact-list" style="
 flex: 1;
 overflow-y: auto;
 padding: 12px;
 ">
 ${contacts
   .map(
     contact => `
 <div class="fangroup-contact-item" data-contact-id="${contact.id}" style="
 display: flex;
 align-items: center;
 gap: 12px;
 padding: 12px;
 border-radius: 12px;
 cursor: pointer;
 transition: background-color 0.2s;
 margin-bottom: 8px;
 " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="if(!this.classList.contains('selected')) this.style.backgroundColor='transparent'"
 onclick="toggleContactSelection('${contact.id}')">

 <div class="contact-checkbox" style="
 width: 20px;
 height: 20px;
 border-radius: 50%;
 border: 2px solid var(--x-border-color);
 background-color: var(--x-bg-primary);
 flex-shrink: 0;
 transition: all 0.2s;
 "></div>

 <img src="${contact.userAvatar || contact.avatar || 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg'}"
 style="width: 40px; height: 40px; border-radius: 50%; object-fit: cover; flex-shrink: 0;">

 <div style="flex: 1; min-width: 0;">
 <div style="display: flex; align-items: center; gap: 6px; margin-bottom: 2px;">
 <span style="color:var(--x-text-primary); font-size: 15px; font-weight: 600; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
 ${contact.userName || contact.name || '未知用户'}
 </span>
 ${
   contact.type === 'fangroup'
     ? `
 <span style="
 padding: 2px 6px;
 background-color:var(--x-bg-secondary);
 color:var(--x-text-secondary);
 font-size: 10px;
 border-radius: 4px;
 font-weight: 600;
 ">粉丝群</span>
 `
     : ''
 }
 </div>
 <div style="color:var(--x-text-secondary); font-size: 13px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
 ${contact.lastMessage || contact.userHandle || ''}
 </div>
 </div>
 </div>
 `,
   )
   .join('')}
 </div>

 <div style="
 padding: 16px 20px;
 border-top: 1px solid var(--x-border-color);
 display: flex;
 gap: 12px;
 ">
 <button onclick="closeFanGroupContactSelectModal()" style="
 flex: 1;
 background-color:var(--x-bg-secondary);
 color:var(--x-text-primary);
 border: none;
 border-radius: 20px;
 padding: 12px 20px;
 font-size: 15px;
 font-weight: 600;
 cursor: pointer;
 transition: opacity 0.2s;
 " onmouseover="this.style.opacity='0.8'"
 onmouseout="this.style.opacity='1'">
 取消
 </button>
 <button id="fangroup-contact-confirm-btn" onclick="confirmFanGroupContactShare('${groupId}')" style="
 flex: 1;
 background-color: var(--x-accent);
 color: #fff;
 border: none;
 border-radius: 20px;
 padding: 12px 20px;
 font-size: 15px;
 font-weight: 600;
 cursor: pointer;
 transition: opacity 0.2s;
 opacity: 0.5;
 " disabled>
 转发 (0)
 </button>
 </div>
 </div>
 `;

      // 添加到DOM
      const xSocialScreen = document.getElementById('x-social-screen');
      if (xSocialScreen) {
        xSocialScreen.appendChild(modal);
      } else {
        document.body.appendChild(modal);
      }

      // 点击背景关闭
      modal.onclick = e => {
        if (e.target === modal) {
          closeFanGroupContactSelectModal();
        }
      };
    } catch (error) {
      console.error('❌ [粉丝群转发] 打开联系人选择失败:', error);
      showXToast('打开联系人选择失败', 'error');
    }
  }
  // 转发粉丝群到发帖
  async function shareFanGroupToPost(groupId) {
    console.log('📤 [粉丝群转发] 转发到发帖', groupId);
    try {
      const xDb = getXDB();
      const dataId = `messagesList_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(dataId);
      const messagesList = savedData?.data || []; // 找到粉丝群数据
      const fanGroup = messagesList.find(msg => msg.id === groupId);
      if (!fanGroup) {
        showXToast('未找到粉丝群数据', 'error');
        return;
      }
      // 关闭转发选项弹窗和设置弹窗
      closeFanGroupShareModal();
      closeFanGroupSettings(); // 先打开发帖弹窗（会触发重置，清空旧的引用）
      openComposeTweetModal(); // 等待弹窗完全打开并重置完成后，再设置粉丝群引用数据
      setTimeout(() => {
        // 构建粉丝群引用数据
        window.currentQuoteFanGroup = {
          id: fanGroup.id,
          name: fanGroup.userName || fanGroup.groupName || '我的粉丝群',
          avatar:
            fanGroup.userAvatar || fanGroup.groupAvatar || 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
          memberCount: fanGroup.memberCount || 0,
          threshold: fanGroup.groupThreshold || '',
        };
        console.log('📤 [粉丝群转发] 粉丝群引用数据已设置:', window.currentQuoteFanGroup); // 添加引用内容显示
        addFanGroupQuoteToCompose();
        showXToast('已添加粉丝群引用，请编写推文内容', 'success');
      }, 150);
    } catch (error) {
      console.error('❌ [粉丝群转发] 转发到发帖失败:', error);
      showXToast('转发失败: ' + error.message, 'error');
    }
  }
  // 在发帖弹窗中添加粉丝群引用显示
  function addFanGroupQuoteToCompose() {
    console.log('🔍 [粉丝群转发] 开始添加引用区域...');
    if (!window.currentQuoteFanGroup) {
      console.warn('⚠️ [粉丝群转发] currentQuoteFanGroup 为空');
      return;
    }
    const fanGroup = window.currentQuoteFanGroup;
    console.log('📤 [粉丝群转发] 粉丝群数据:', fanGroup);
    const modal = document.getElementById('compose-tweet-modal');
    if (!modal) {
      console.error('❌ [粉丝群转发] 找不到发帖弹窗');
      return;
    }
    // 检查是否已存在引用区域
    let quoteSection = document.getElementById('compose-fangroup-quote-section');
    if (quoteSection) {
      console.log('🗑️ [粉丝群转发] 移除旧的引用区域');
      quoteSection.remove();
    }
    // 创建粉丝群引用区域
    quoteSection = document.createElement('div');
    quoteSection.id = 'compose-fangroup-quote-section';
    quoteSection.style.cssText = `
 margin: 16px 0 0 0; padding: 12px; border: 1px solid var(--x-border-color); border-radius: 12px; background-color: var(--x-bg-hover);
`;
    quoteSection.innerHTML = `
 <div style="display: flex; align-items: flex-start; gap: 12px;">
 <img src="${fanGroup.avatar}" style="width: 40px; height: 40px; border-radius: 50%; object-fit: cover;">
 <div style="flex: 1; min-width: 0;">
 <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 4px;">
 <span style="color:var(--x-text-primary); font-size: 15px; font-weight: 700;">${fanGroup.name}</span>
 <span style="padding: 2px 8px; background-color:var(--x-bg-secondary); color:var(--x-text-secondary); font-size: 11px; border-radius: 4px; font-weight: 600; ">粉丝群</span>
 </div>
 <div style="color:var(--x-text-secondary); font-size: 13px; margin-bottom: 8px;">
 ${fanGroup.memberCount} 位成员
 </div>
 ${
   fanGroup.threshold
     ? `
 <div style="padding: 8px; background-color:var(--x-bg-secondary); border-radius: 6px; color:var(--x-text-secondary); font-size: 12px; line-height: 1.4; ">
 <div style="color:var(--x-text-primary); font-weight: 600; margin-bottom: 2px; font-size: 11px;">入群门槛</div>
 ${fanGroup.threshold.length > 60 ? fanGroup.threshold.substring(0, 60) + '...' : fanGroup.threshold}
 </div>
 `
     : ''
 }
 </div>
 <div onclick="removeFanGroupQuote()" style="cursor: pointer; padding: 4px; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-secondary)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: var(--x-text-secondary);">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </div>
 </div>
`; // 找到文本输入框所在的容器
    const textInput = modal.querySelector('#compose-text-input');
    if (!textInput) {
      console.error('❌ [粉丝群转发] 找不到文本输入框');
      return;
    }
    // 获取包含textarea的父容器 (flex: 1; min-width: 0;)
    const inputContainer = textInput.parentElement;
    console.log('📍 [粉丝群转发] 找到输入容器:', inputContainer); // 将引用区域插入到textarea之后、引用预览区域之前
    const quotePreview = modal.querySelector('#quote-content-preview');
    if (quotePreview) {
      inputContainer.insertBefore(quoteSection, quotePreview);
      console.log('✅ [粉丝群转发] 引用区域已插入到引用预览区域之前');
    } else {
      // 如果没有引用预览区域，插入到textarea之后
      inputContainer.insertBefore(quoteSection, textInput.nextSibling);
      console.log('✅ [粉丝群转发] 引用区域已插入到textarea之后');
    }
    console.log('✅ [粉丝群转发] 引用区域添加完成！');
  }
  // 移除粉丝群引用
  window.removeFanGroupQuote = function () {
    console.log('🗑️ [粉丝群转发] 移除引用'); // 清除全局变量
    window.currentQuoteFanGroup = null; // 移除引用区域
    const quoteSection = document.getElementById('compose-fangroup-quote-section');
    if (quoteSection) {
      quoteSection.remove();
      console.log('✅ [粉丝群转发] 引用区域已移除');
    }
    showXToast('已移除粉丝群引用', 'info');
  }; // 踢出群成员
  window.kickFanGroupMember = async function (groupId, memberId, memberName) {
    console.log('🚫 [粉丝群] 踢出成员', groupId, memberId, memberName);
    try {
      // 确认操作
      if (!confirm(`确定要将 ${memberName} 踢出粉丝群吗？`)) {
        return;
      }
      const xDb = getXDB();
      const dataId = `messagesList_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(dataId);
      let messagesList = savedData?.data || []; // 找到粉丝群
      const groupIndex = messagesList.findIndex(msg => msg.id === groupId);
      if (groupIndex === -1) {
        showXToast('未找到粉丝群数据', 'error');
        return;
      }
      const fanGroup = messagesList[groupIndex]; // 从成员列表中移除
      if (!fanGroup.members) {
        fanGroup.members = [];
      }
      const memberIndex = fanGroup.members.findIndex(m => m.id === memberId);
      if (memberIndex === -1) {
        showXToast('未找到该成员', 'error');
        return;
      }
      fanGroup.members.splice(memberIndex, 1); // 更新成员数
      fanGroup.memberCount = fanGroup.members.length; // 保存到数据库
      await xDb.xAccountProfiles.put({
        handle: dataId,
        name: 'messagesList',
        data: messagesList,
        updatedAt: new Date().toISOString(),
      });
      console.log('✅ [粉丝群] 成员已移除，当前成员数:', fanGroup.memberCount); // 在粉丝群私信中添加系统通知
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${groupId}`;
      const savedConversation = await xDb.xAccountProfiles.get(conversationId);
      if (savedConversation && savedConversation.data && savedConversation.data.messages) {
        const systemMessage = {
          type: 'system',
          systemType: 'memberKicked',
          content: `${memberName} 被移出了粉丝群`,
          timestamp: new Date().toISOString(),
          time: '刚刚',
        };
        savedConversation.data.messages.push(systemMessage);
        await xDb.xAccountProfiles.put(savedConversation);
        console.log('✅ [粉丝群] 已添加踢出系统通知'); // 如果当前正在查看该粉丝群聊天，刷新消息显示
        if (currentMessageConversation && currentMessageConversation.id === groupId) {
          await window.openMessageDetail(fanGroup);
        }
      }
      showXToast('已将成员移出粉丝群', 'success'); // 关闭并重新打开设置弹窗以刷新成员列表
      closeFanGroupSettings();
      setTimeout(() => {
        openFanGroupSettings(fanGroup);
      }, 300);
    } catch (error) {
      console.error('❌ [粉丝群] 踢出成员失败:', error);
      showXToast('操作失败: ' + error.message, 'error');
    }
  }; // 解散粉丝群
  window.dissolveFanGroup = async function (groupId) {
    console.log('💥 [粉丝群] 解散群聊', groupId);
    try {
      // 确认操作
      if (!confirm('确定要解散此粉丝群吗？\n\n解散后将删除所有成员、申请记录和聊天记录，此操作不可撤销！')) {
        return;
      }
      const xDb = getXDB(); // 1. 从私信列表中删除粉丝群
      const dataId = `messagesList_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(dataId);
      let messagesList = savedData?.data || [];
      const groupIndex = messagesList.findIndex(msg => msg.id === groupId);
      if (groupIndex === -1) {
        showXToast('未找到粉丝群数据', 'error');
        return;
      }
      const fanGroupName = messagesList[groupIndex].userName || messagesList[groupIndex].groupName;
      messagesList.splice(groupIndex, 1); // 保存更新后的私信列表
      await xDb.xAccountProfiles.put({
        handle: dataId,
        name: 'messagesList',
        data: messagesList,
        updatedAt: new Date().toISOString(),
      }); // 更新全局变量
      sampleMessagesData = messagesList;
      console.log('✅ [粉丝群] 已从私信列表中删除'); // 2. 删除粉丝群申请数据
      const applicationsId = `fanGroupApplications_${currentAccountId || 'main'}_${groupId}`;
      try {
        await xDb.xAccountProfiles.delete(applicationsId);
        console.log('✅ [粉丝群] 已删除申请数据');
      } catch (error) {
        console.warn('⚠️ [粉丝群] 删除申请数据时出错（可能不存在）:', error);
      }
      // 3. 删除粉丝群聊天记录
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${groupId}`;
      try {
        await xDb.xAccountProfiles.delete(conversationId);
        console.log('✅ [粉丝群] 已删除聊天记录');
      } catch (error) {
        console.warn('⚠️ [粉丝群] 删除聊天记录时出错（可能不存在）:', error);
      }
      // 4. 关闭所有相关弹窗
      closeFanGroupSettings();
      closeFanGroupApplicationsModal(); // 5. 如果当前正在查看该粉丝群，返回到私信列表
      if (currentMessageConversation && currentMessageConversation.id === groupId) {
        currentMessageConversation = null;
        const messageDetailView = document.getElementById('message-detail-view');
        if (messageDetailView) {
          messageDetailView.style.display = 'none';
        }
      }
      // 6. 刷新私信列表
      await loadMessagesList();
      showXToast(`已解散粉丝群"${fanGroupName}"`, 'success');
    } catch (error) {
      console.error('❌ [粉丝群] 解散失败:', error);
      showXToast('解散失败: ' + error.message, 'error');
    }
  };

  // 关闭联系人选择弹窗
  window.closeFanGroupContactSelectModal = function () {
    const modal = document.getElementById('fangroup-contact-select-modal');
    if (modal) {
      modal.remove();
    }
    // 清空选择状态
    window.selectedFanGroupContacts = new Set();
  };

  // 切换联系人选择状态
  window.toggleContactSelection = function (contactId) {
    if (!window.selectedFanGroupContacts) {
      window.selectedFanGroupContacts = new Set();
    }

    const contactItem = document.querySelector(`.fangroup-contact-item[data-contact-id="${contactId}"]`);
    const checkbox = contactItem?.querySelector('.contact-checkbox');

    if (!contactItem || !checkbox) return;

    if (window.selectedFanGroupContacts.has(contactId)) {
      // 取消选择
      window.selectedFanGroupContacts.delete(contactId);
      contactItem.classList.remove('selected');
      checkbox.style.backgroundColor = 'var(--x-bg-primary)';
      checkbox.style.borderColor = 'var(--x-border-color)';
      checkbox.innerHTML = '';
    } else {
      // 选择
      window.selectedFanGroupContacts.add(contactId);
      contactItem.classList.add('selected');
      checkbox.style.backgroundColor = 'var(--x-accent)';
      checkbox.style.borderColor = 'var(--x-accent)';
      checkbox.innerHTML = `
 <svg viewBox="0 0 24 24" style="width: 12px; height: 12px; fill: #fff;">
 <g><path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"></path></g>
 </svg>
 `;
    }

    // 更新确认按钮状态
    const confirmBtn = document.getElementById('fangroup-contact-confirm-btn');
    if (confirmBtn) {
      const selectedCount = window.selectedFanGroupContacts.size;
      confirmBtn.textContent = `转发 (${selectedCount})`;

      if (selectedCount > 0) {
        confirmBtn.disabled = false;
        confirmBtn.style.opacity = '1';
      } else {
        confirmBtn.disabled = true;
        confirmBtn.style.opacity = '0.5';
      }
    }
  };

  // 确认转发粉丝群到选中的联系人
  window.confirmFanGroupContactShare = async function (groupId) {
    if (!window.selectedFanGroupContacts || window.selectedFanGroupContacts.size === 0) {
      showXToast('请至少选择一个联系人', 'warning');
      return;
    }

    try {
      const xDb = getXDB();
      const dataId = `messagesList_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(dataId);
      const messagesList = savedData?.data || [];

      // 找到粉丝群数据
      const fanGroup = messagesList.find(msg => msg.id === groupId);
      if (!fanGroup) {
        showXToast('未找到粉丝群数据', 'error');
        return;
      }

      console.log(`📤 [粉丝群转发] 开始转发到 ${window.selectedFanGroupContacts.size} 个联系人`);

      // 构建粉丝群分享消息
      const fanGroupShareMessage = {
        type: 'quoteFanGroup',
        fanGroup: {
          id: fanGroup.id,
          name: fanGroup.userName || fanGroup.groupName || '我的粉丝群',
          avatar:
            fanGroup.userAvatar || fanGroup.groupAvatar || 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
          memberCount: fanGroup.memberCount || 0,
          threshold: fanGroup.groupThreshold || '',
        },
        timestamp: new Date().toISOString(),
        time: '刚刚',
        isOwn: true,
      };

      // 转发到每个选中的联系人
      let successCount = 0;
      for (const contactId of window.selectedFanGroupContacts) {
        try {
          const conversationId = `messageConversation_${currentAccountId || 'main'}_${contactId}`;
          const savedConversation = await xDb.xAccountProfiles.get(conversationId);

          if (savedConversation && savedConversation.data) {
            // 已存在对话，追加消息
            if (!savedConversation.data.messages) {
              savedConversation.data.messages = [];
            }
            savedConversation.data.messages.push(fanGroupShareMessage);
            await xDb.xAccountProfiles.put(savedConversation);
          } else {
            // 新对话，创建初始消息
            await xDb.xAccountProfiles.put({
              handle: conversationId,
              name: 'messageConversation',
              data: {
                messages: [fanGroupShareMessage],
              },
              messageId: contactId,
              accountId: currentAccountId || 'main',
              updatedAt: new Date().toISOString(),
            });
          }

          // 更新私信列表中的最后消息
          const contact = messagesList.find(msg => msg.id === contactId);
          if (contact) {
            contact.lastMessage = `[粉丝群] ${fanGroup.userName || fanGroup.groupName || '我的粉丝群'}`;
            contact.timestamp = new Date().toISOString();
            contact.unread = false; // 用户发送的消息不标记为未读
          }

          successCount++;
          console.log(`✅ [粉丝群转发] 已转发到联系人: ${contactId}`);
        } catch (error) {
          console.error(`❌ [粉丝群转发] 转发到联系人 ${contactId} 失败:`, error);
        }
      }

      // 保存更新后的私信列表
      await xDb.xAccountProfiles.put({
        handle: dataId,
        name: 'messagesList',
        data: messagesList,
        updatedAt: new Date().toISOString(),
      });

      // 刷新私信列表
      await loadMessagesList();

      // 关闭弹窗
      closeFanGroupContactSelectModal();
      closeFanGroupSettings(); // 也关闭设置弹窗

      // 显示成功提示
      showXToast(`已转发到 ${successCount} 个联系人`, 'success');

      console.log(`✅ [粉丝群转发] 转发完成，成功 ${successCount}/${window.selectedFanGroupContacts.size}`);
    } catch (error) {
      console.error('❌ [粉丝群转发] 确认转发失败:', error);
      showXToast('转发失败: ' + error.message, 'error');
    }
  };

  // ============================================
  // 第11个情景：粉丝群私信详情页生成器
  // ============================================
  /**
   * 粉丝群私信对话生成器（第11个情景）
   * @param {Object} fanGroupData - 粉丝群数据
   * @param {boolean} isContinueMode - 是否为续写模式
   * @param {Object} options - 可选参数
   * @returns {Array} AI生成的消息数组
   */
  async function generateFanGroupConversation(fanGroupData, isContinueMode = false, options = {}) {
    console.log('💬 [第11情景] 粉丝群私信生成器启动', {
      groupId: fanGroupData.id,
      groupName: fanGroupData.userName || fanGroupData.groupName,
      isContinueMode,
    });
    try {
      // 🔧 使用统一的API配置加载工具
      const { apiConfig, xSettings, xDb } = await APIUtils.loadConfigAndSettings();
      const { userPrompt, worldSetting } = xSettings;
      // 3. 获取用户X平台资料
      const userXProfileInfo = StringBuilders.buildUserXProfileInfo(window.userProfileData); // 4. 读取用户最近3条推文
      const userTweetsId = `userTweets_${currentAccountId || 'main'}`;
      const userTweetsData = await xDb.xUserTweets.get(userTweetsId);
      const recentUserTweets = userTweetsData?.tweets?.slice(0, 3) || [];
      console.log('📋 [第11情景] 用户资料:', userXProfileInfo);
      console.log('📋 [第11情景] 用户推文数:', recentUserTweets.length); // 5. 读取粉丝群详细信息
      const dataId = `messagesList_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(dataId);
      const messagesList = savedData?.data || [];
      const fanGroup = messagesList.find(msg => msg.id === fanGroupData.id);
      if (!fanGroup) {
        showXToast('未找到粉丝群数据', 'error');
        return [];
      }
      // 6. 读取群成员资料和入群申请
      const members = fanGroup.members || [];
      const memberProfiles = [];
      const memberApplications = [];
      console.log('👥 [第11情景] 群成员数:', members.length); // 读取入群申请数据
      const applicationsId = `fanGroupApplications_${currentAccountId || 'main'}_${fanGroup.id}`;
      const applicationsData = await xDb.xAccountProfiles.get(applicationsId);
      const allApplications = applicationsData?.data || [];
      for (const member of members) {
        // 使用统一资料系统获取成员资料（传入messageId以支持陌生人自定义头像）
        const memberProfile = await StringBuilders.getUnifiedProfile(member.handle, {
          userProfileInfo: userXProfileInfo,
          messageId: member.id, // 🎯 传入成员ID，用于读取陌生人自定义设置
        });
        if (memberProfile) {
          // 🎯 只保留1条最近推文（节省token）
          if (memberProfile.tweets && memberProfile.tweets.length > 0) {
            memberProfile.tweets = [memberProfile.tweets[0]]; // 只保留第一条
          }
          memberProfiles.push(memberProfile);
        }
        // 查找该成员的入群申请
        const application = allApplications.find(app => app.id === member.id && app.status === 'approved');
        if (application) {
          memberApplications.push({
            memberId: member.id,
            memberName: member.name,
            memberHandle: member.handle,
            reason: application.reason,
            type: application.type,
            amount: application.amount,
          });
        }
      }
      console.log('📊 [第11情景] 已加载成员资料:', memberProfiles.length);
      console.log('📊 [第11情景] 已加载入群申请:', memberApplications.length); // Token计数器
      let tokenCount = 0; // 7. 构建基础系统提示词
      let systemPrompt = StringBuilders.buildBaseSystemPrompt({
        userPrompt,
        worldSetting,
      });
      tokenCount = TokenUtils.logTokenUsage('第11情景-粉丝群私信', '基础系统提示词', systemPrompt, tokenCount); // 8. 获取适用的世界书（使用全局对话场景）
      const worldBooksContent = await StringBuilders.getApplicableWorldBooks('messages', {
        boundCharacters: [],
      });
      if (worldBooksContent) {
        systemPrompt += worldBooksContent;
        tokenCount = TokenUtils.logTokenUsage('第11情景-粉丝群私信', '世界书内容', worldBooksContent, tokenCount);
      }
      // 9. 添加用户资料信息
      systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📋 用户完整资料（粉丝群主）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
- 用户名：${userXProfileInfo.name}
- 用户句柄：${userXProfileInfo.handle}
- 认证状态：${userXProfileInfo.verified ? '已认证' : '未认证'}
${
  userXProfileInfo.verificationType && userXProfileInfo.verificationType !== 'none'
    ? `- 认证类型：${
        userXProfileInfo.verificationType === 'verified'
          ? '蓝色勾标认证'
          : userXProfileInfo.verificationType === 'couple'
          ? '情侣认证'
          : userXProfileInfo.verificationType === 'married'
          ? '已婚认证'
          : userXProfileInfo.verificationType === 'vip'
          ? 'VIP认证'
          : '无'
      }`
    : ''
}
${userXProfileInfo.publicIdentity ? `- 公众身份：${userXProfileInfo.publicIdentity}` : ''}
${userXProfileInfo.bio ? `- 个人简介：${userXProfileInfo.bio}` : ''}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`; // 添加用户近期推文
      if (recentUserTweets.length > 0) {
        systemPrompt += `
【用户近期推文】（${recentUserTweets.length}条，了解群主风格）：
`;
        recentUserTweets.forEach((tweet, index) => {
          systemPrompt += `${index + 1}. "${tweet.content}"
- 时间：${tweet.time || '最近'}
- 互动：${tweet.stats?.likes || 0}喜欢，${tweet.stats?.retweets || 0}转发，${tweet.stats?.comments || 0}评论
`;
        });
      }
      // 10. 添加粉丝群信息
      systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
👥 粉丝群信息
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
- 群名：${fanGroup.userName || fanGroup.groupName}
- 群主：${userXProfileInfo.name} (${userXProfileInfo.handle})
- 当前成员数：${members.length} 人
${fanGroup.groupThreshold ? `- 入群门槛：${fanGroup.groupThreshold}` : '- 入群门槛：无'}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;

      // 10.5. 添加群公告信息
      try {
        const announcementsId = `fanGroupAnnouncements_${currentAccountId || 'main'}_${fanGroup.id}`;
        const savedAnnouncements = await xDb.xAccountProfiles.get(announcementsId);
        const announcements = savedAnnouncements?.data || [];

        if (announcements.length > 0) {
          systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📢 粉丝群公告（${announcements.length}条）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
⚠️ 重要：请注意以下群公告内容，这些是群主发布的重要信息，成员的对话可能会涉及这些公告内容。
`;
          // 按时间倒序（最新的在前），最多显示10条
          const recentAnnouncements = announcements.slice(0, 10);
          recentAnnouncements.forEach((announcement, index) => {
            const createdDate = new Date(announcement.createdAt);
            const formattedDate = `${createdDate.getFullYear()}年${
              createdDate.getMonth() + 1
            }月${createdDate.getDate()}日 ${String(createdDate.getHours()).padStart(2, '0')}:${String(
              createdDate.getMinutes(),
            ).padStart(2, '0')}`;
            systemPrompt += `
【公告 ${index + 1}】
发布时间：${formattedDate}
公告内容：${announcement.content}
`;
          });
          systemPrompt += `━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
          console.log(`📢 [第11情景] 已加载群公告: ${announcements.length}条`);
        }
      } catch (error) {
        console.warn('⚠️ [第11情景] 加载群公告失败:', error);
      }

      // 10.6. 添加群文件信息
      try {
        // 获取文件夹列表
        const foldersId = `fanGroupFolders_${currentAccountId || 'main'}_${fanGroup.id}`;
        const foldersData = await xDb.xAccountProfiles.get(foldersId);
        const folders = foldersData?.data || [];

        // 获取文件列表
        const files = await getFanGroupFiles(fanGroup.id);

        systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📁 粉丝群文件库
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
⚠️ 重要：以下是群内的文件管理系统，成员可以在对话中引用、讨论或上传新文件。
`;

        // 显示文件夹列表
        if (folders.length > 0) {
          systemPrompt += `
【文件夹列表】（${folders.length}个）
⚠️ 上传文件时可以选择放入以下文件夹，也可以不放入任何文件夹（散落显示）
`;
          folders.forEach((folder, index) => {
            const filesInFolder = files.filter(f => f.folderId === folder.id);
            systemPrompt += `${index + 1}. 文件夹「${folder.name}」
 - 文件夹ID: ${folder.id}（上传文件时使用此ID）
 - 包含文件数: ${filesInFolder.length}个
`;
          });
        } else {
          systemPrompt += `
【文件夹列表】
暂无文件夹，上传的文件将显示为未分类状态
`;
        }

        if (files.length > 0) {
          systemPrompt += `
【已上传文件】（${files.length}个）
`;
          // 最多显示20个文件
          const recentFiles = files.slice(0, 20);
          recentFiles.forEach((file, index) => {
            const uploadDate = new Date(file.uploadedAt);
            const formattedDate = `${uploadDate.getMonth() + 1}/${uploadDate.getDate()} ${String(
              uploadDate.getHours(),
            ).padStart(2, '0')}:${String(uploadDate.getMinutes()).padStart(2, '0')}`;
            const fileTypeText =
              file.type === 'text'
                ? '文本文档'
                : file.type === 'image'
                ? '图片文件'
                : file.type === 'video'
                ? '视频文件'
                : file.type === 'link'
                ? '链接'
                : '文件';

            systemPrompt += `
【文件 ${index + 1}】
文件名：${file.name}
类型：${fileTypeText}
上传者：${file.uploadedBy}
上传时间：${formattedDate}
所属文件夹：${file.folderName}
内容摘要：${file.content.substring(0, 150)}${file.content.length > 150 ? '...' : ''}
`;
          });
        }

        systemPrompt += `━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
        console.log(`📁 [第11情景] 已加载群文件: ${files.length}个, 文件夹: ${folders.length}个`);
      } catch (error) {
        console.warn('⚠️ [第11情景] 加载群文件失败:', error);
      }

      // 11. 添加群成员资料（使用统一资料格式化系统）
      if (members.length > 0) {
        systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
👥 群成员资料（${members.length}人）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
⚠️ 重要：每个成员必须使用以下准确的ID、昵称和句柄，不得自创！
`;
        members.forEach((member, index) => {
          systemPrompt += `
【群成员 ${index + 1}】
- 成员ID: ${member.id}（生成消息时必须使用此ID作为senderId）
- 昵称: ${member.name}（生成消息时必须使用此昵称作为senderName）
- 句柄: ${member.handle}（生成消息时必须使用此句柄作为senderHandle）
- 头像: ${member.avatar}（生成消息时必须使用此头像作为senderAvatar）
`;
          // 🎯 查找该成员的完整资料
          const memberProfile = memberProfiles.find(p => p.handle === member.handle);
          if (memberProfile) {
            // 🎯 使用统一资料格式化系统展示完整资料
            const formattedProfile = StringBuilders.formatProfileForPrompt(memberProfile, {
              includeType: false, // 不显示类型标识（已经在群成员标题显示）
              includeTweets: true, // 只显示1条最近推文（已在上面设置）
              includeRelationships: true, // 显示关系信息
            });
            systemPrompt += formattedProfile;
          } else {
            // 如果没有获取到资料，显示基本信息
            systemPrompt += `⚠️ 未能获取该成员的详细资料\n`;
          }

          // 添加入群申请信息（了解成员加群动机）
          const application = memberApplications.find(app => app.memberHandle === member.handle);
          if (application) {
            systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📝 入群申请信息（了解该成员加群动机）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
申请理由：${application.reason}
申请类型：${application.type === 'sincere' ? '真诚粉丝' : application.type === 'normal' ? '普通申请' : '可疑申请'}
${application.amount > 0 ? `入群费用：$${application.amount.toFixed(2)}` : '免费入群'}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
          }
          systemPrompt += `\n`;
        });
        systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
⚠️ 生成消息时的成员身份使用规则
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
必须从上述群成员列表中选择，使用准确的ID和身份信息：
- senderId：必须使用【成员ID】（例如：${members[0]?.id}）
- senderName：必须使用【昵称】（例如：${members[0]?.name}）
- senderHandle：必须使用【句柄】（例如：${members[0]?.handle}）
- senderAvatar：必须使用【头像】（例如：${members[0]?.avatar}）

🚨 禁止自创成员身份！所有发言者必须是上述列出的群成员！
⚠️ 如果某成员已被踢出（在聊天记录中看到"XX 被移出了粉丝群"），则该成员不得再发言！
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
      }
      // 12. 读取现有对话上下文（包括系统通知）
      let existingMessages = [];
      if (isContinueMode) {
        const conversationId = `messageConversation_${currentAccountId || 'main'}_${fanGroup.id}`;
        const savedConversation = await xDb.xAccountProfiles.get(conversationId);
        if (savedConversation && savedConversation.data && savedConversation.data.messages) {
          // 🎯 包含所有消息（包括系统通知），让AI知道成员加入/被踢出等事件
          existingMessages = savedConversation.data.messages;
        }
      }
      console.log('📖 [第11情景] 现有对话记录:', existingMessages.length, '条（包括系统通知）'); // 添加现有对话上下文
      if (isContinueMode && existingMessages.length > 0) {
        systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
💬 粉丝群聊天记录（当前私信的历史记录，包括系统通知）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`; // 显示最近30条消息（包括系统通知）
        const recentMessages = existingMessages.slice(-30);
        recentMessages.forEach((msg, index) => {
          let content = '';

          // 🎯 处理系统通知
          if (msg.type === 'system') {
            content = `[系统通知] ${msg.content}`;
            systemPrompt += `${content}\n`;
            return;
          }

          // 普通消息
          const senderName = msg.isOwn ? userXProfileInfo.name : msg.senderName || '群成员';
          if (msg.type === 'text') {
            content = msg.content || '';
          } else if (msg.type === 'image') {
            // 用户发送的图片（有imageData）或AI发送的图片（有imageDescription）
            if (msg.isOwn && msg.imageData) {
              content = `[用户发送了图片]`;
            } else if (msg.imageDescription) {
              content = `[图片: ${msg.imageDescription}]`;
            } else {
              content = `[图片]`;
            }
          } else if (msg.type === 'voice') {
            content = `[语音: ${msg.voiceText || '语音消息'}]`;
          } else if (msg.type === 'sticker') {
            // 用户发送的表情包（有stickerDescription）或AI发送的表情包（有stickerUrl）
            if (msg.isOwn && msg.stickerDescription) {
              content = `[用户发送的表情包: ${msg.stickerDescription}]`;
            } else if (msg.stickerUrl) {
              content = `[表情包: ${msg.stickerUrl}]`;
            } else {
              content = `[表情包]`;
            }
          } else if (msg.type === 'transfer') {
            // 转账消息（仅普通转账，粉丝群不支持商业转账）
            const amount = parseFloat(msg.amount || 0).toFixed(2);
            const note = msg.note ? ` (${msg.note})` : '';
            const direction = msg.isOwn ? '转出' : '转入';
            content = `[${direction}: $${amount}${note}]`;
          } else if (msg.type === 'link') {
            // 显示文章完整信息
            content = `[文章链接]\n标题：${msg.title}\n简介：${msg.description || ''}\n作者：${
              msg.author || ''
            }\n来源：${msg.source || ''}\n正文：${msg.body || msg.description || ''}`;
          } else if (msg.type === 'quoteTweet') {
            content = `[转发推文: ${msg.tweet?.content || ''}]`;
          } else if (msg.type === 'quoteProfile') {
            content = `[分享主页: ${msg.profile?.name || ''}]`;
          } else if (msg.type === 'quoteFanGroup') {
            content = `[分享粉丝群: ${msg.fanGroup?.name || ''}（${msg.fanGroup?.memberCount || 0}人）${
              msg.fanGroup?.threshold ? `，入群门槛：${msg.fanGroup.threshold}` : ''
            }]`;
          } else if (msg.type === 'groupFile') {
            // 群文件消息
            const fileTypeText =
              msg.file?.type === 'text'
                ? '文本文档'
                : msg.file?.type === 'image'
                ? '图片'
                : msg.file?.type === 'video'
                ? '视频'
                : msg.file?.type === 'link'
                ? '链接'
                : '文件';
            content = `[群文件: ${msg.file?.name || '未命名文件'}]\n类型：${fileTypeText}\n上传者：${
              msg.file?.uploadedBy || '未知'
            }\n内容：${msg.file?.content?.substring(0, 100) || ''}${msg.file?.content?.length > 100 ? '...' : ''}`;
          } else if (msg.type === 'forward') {
            // 转发推文或评论，显示完整上下文
            if (msg.forwardType === 'tweet') {
              content = `[转发了推文]\n`;
              if (msg.fullContext && msg.fullContext.tweet) {
                const tweet = msg.fullContext.tweet;
                content += `推文作者：${tweet.user?.name || '未知'}\n推文内容：${tweet.content || ''}\n`;
                if (msg.fullContext.comments && msg.fullContext.comments.length > 0) {
                  content += `评论区（${msg.fullContext.comments.length}条评论）：\n`;
                  msg.fullContext.comments.slice(0, 3).forEach((c, i) => {
                    content += ` ${i + 1}. ${c.user?.name || '未知'}: ${c.content || ''}\n`;
                  });
                  if (msg.fullContext.comments.length > 3) {
                    content += ` ...还有${msg.fullContext.comments.length - 3}条评论\n`;
                  }
                }
              } else {
                content += `${msg.forwardContent?.content || ''}`;
              }
            } else if (msg.forwardType === 'comment') {
              content = `[转发了评论]\n`;
              if (msg.fullContext) {
                if (msg.fullContext.parentTweet) {
                  content += `原推文作者：${msg.fullContext.parentTweet.user?.name || '未知'}\n原推文内容：${
                    msg.fullContext.parentTweet.content || ''
                  }\n\n`;
                }
                if (msg.fullContext.comment) {
                  content += `评论作者：${msg.fullContext.comment.user?.name || '未知'}\n评论内容：${
                    msg.fullContext.comment.content || ''
                  }`;
                }
              } else {
                content += `${msg.forwardContent?.content || ''}`;
              }
            }
          } else {
            content = `[${msg.type}消息]`;
          }
          if (content) {
            const displayContent = content.length > 100 ? `${content.substring(0, 100)}...` : content;
            systemPrompt += `${senderName}: ${displayContent}\n`;
          }
        });
        systemPrompt += `
⚠️ 以上是现有对话记录（包括系统通知），请保持对话的连贯性和一致性
⚠️ 注意：如果看到"XX 被移出了粉丝群"的系统通知，该成员不得再发言！
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
      }
      // 13. 添加核心任务说明
      const isAutoTrigger = options.isAutoTrigger || false;
      const newMemberCount = options.newMemberCount || 0;
      systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 核心任务：粉丝群对话生成 🎯
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
你是X社交平台的粉丝群私信对话生成器。
**群聊场景**：
- 📱 这是X社交平台的粉丝群私信功能
- 👥 这是一个群聊，有${members.length}位成员
- 👑 群主是${userXProfileInfo.name} (${userXProfileInfo.handle})
${
  isAutoTrigger
    ? `- 🎉 群成员数达到${newMemberCount}人，触发自动群聊`
    : `- 💬 用户${isContinueMode ? '刚刚在群里发言' : '打开了粉丝群聊天'}`
}
**生成要求**：
${
  isAutoTrigger
    ? `
1. 生成5-12条群成员的发言，庆祝群成员达到${newMemberCount}人
2. 成员发言应该多样化：祝贺、感谢群主、分享感受、互相交流等
3. 不同成员的发言风格应该根据其资料和入群申请体现差异
4. 可以@群主或其他成员（使用句柄，如 @${userXProfileInfo.handle}）
5. 🎯 **重要：成员之间要互相交流**，不要只是单向对群主说话
`
    : options.isAutoReaction
    ? `
1. 生成6-15条群成员之间的自发交流消息
2. 🎯 **核心：成员之间的互动交流，而不是对群主的回应**
3. 交流内容可以是：
- 成员之间互相打招呼、闲聊
- 讨论共同感兴趣的话题（根据成员资料推断）
- 分享最近的生活、工作、学习
- 互相@对方进行对话（使用句柄，如 @成员句柄）
- 对其他成员的推文或动态发表看法
- 讨论群主的最近推文（但不是直接@群主）
- 组织活动、约饭、游戏等
4. 每个成员的发言要符合其性格特点和入群申请体现的动机
5. 营造真实的粉丝群内部氛围，像真实的粉丝群一样有活力
6. 至少要有2-3组成员之间的对话往来（A说话->B回应->C插话）
`
    : isContinueMode
    ? `
1. 根据用户最新发言，生成3-8条群成员的回复
2. 🎯 **重要：不要所有成员都只回应群主**
3. 可以有以下几种情况：
- 部分成员直接回应群主的发言
- 部分成员之间互相交流、讨论群主的话题
- 部分成员@其他成员进行对话
4. 回复应该自然、多样，符合各成员的身份和性格
5. 不是每个成员都必须回复，根据话题相关性和成员特点选择
6. 营造真实的群聊氛围，而不是"群主发言->所有人回应"的模式
`
    : `
1. 生成4-8条群成员的日常发言
2. 发言内容可以是：打招呼、分享日常、讨论共同兴趣、询问群主等
3. 体现真实的粉丝群氛围
4. 成员之间可以互相交流，不要只是单向对群主说话
`
}
${options.isAutoReaction ? '6.' : '5.'} 🚨 只生成群成员的消息，不要生成用户（群主）的消息
${
  options.isAutoReaction ? '7.' : '6.'
} 每条消息必须包含senderId（成员ID）、senderName（成员昵称）、senderHandle（成员句柄）、senderAvatar（成员头像）
${options.isAutoReaction ? '8.' : '7.'} 消息类型包括多种，请根据实际需要自然选择
**消息类型使用原则**：
- ⭐ **以文本消息为主**：大部分消息（80-90%）应该是纯文本消息（type: "text"）
- 📷 **偶尔使用其他类型**：仅在特定情况下使用其他消息类型（10-20%）：
* image：当需要分享照片、图片或视觉内容时
* voice：当成员特别激动、情绪强烈时
* sticker：⚠️ **极少使用**（不超过5%）！只在情绪特别强烈且适合用表情包表达时才使用
* transfer：⚠️ **极少使用**！群成员可以发红包给群主或其他成员（5-30美元），需谨慎
* link：当需要分享文章、新闻或故事时
* quoteTweet：当提及或讨论某条推文时
* quoteProfile：当推荐某个账户或介绍某人时
- 🚫 **禁止每种类型都使用**：不要为了展示多样性而强行使用所有消息类型
- ✅ **自然使用**：根据对话内容和情境自然选择消息类型，不刻意
**JSON返回格式**：
\`\`\`json
{
"messages": [
{
 "senderId": "成员ID（从成员列表中选择）",
 "senderName": "成员昵称",
 "senderHandle": "成员句柄（如@username）",
 "senderAvatar": "成员头像URL",
 "type": "text",
 "content": "消息内容",
 "time": "刚刚"
}
]
}
\`\`\`
**消息类型详解**：
1. 文本消息（最常用，首选）：
{
"type": "text",
"content": "消息内容",
"time": "刚刚"
}
2. 图片消息：
{
"type": "image",
"imageDescription": "图片内容的文字描述",
"sensitive": false,
"time": "刚刚"
}
3. 语音消息：
{
"type": "voice",
"voiceText": "先用括号标注出对声音的形容，再是语音内容的文字",
"duration": "时长如0:15",
"time": "刚刚"
}
4. 表情包消息：
{
"type": "sticker",
"stickerUrl": "表情包图片链接（从世界书中选择）",
"time": "刚刚"
}
5. 转账消息（普通转账，群成员发红包）：
{
"type": "transfer",
"amount": 20.00,
"note": "感谢群主",
"status": "pending",
"time": "刚刚"
}
⚠️ 转账说明：
- amount：转账金额（数字类型），建议5-30美元
- note：转账备注，说明转账目的
- status：必须为"pending"
- 🚫 **不支持商业转账**：粉丝群中只能发普通转账（红包、礼物等）
- 🚫 **谨慎使用**：只有关系亲密或有明确理由时才转账
6. 文章链接消息：
{
"type": "link",
"url": "文章来源网址（可选）",
"title": "文章标题",
"description": "文章简介/摘要",
"author": "文章作者",
"source": "文章来源名称",
"body": "文章正文内容（完整内容，可使用**文本**加粗，__文本__下划线）",
"time": "刚刚"
}
7. 转发推文：
{
"type": "quoteTweet",
"tweet": {
"userName": "推文作者名",
"userHandle": "@handle",
"userAvatar": "https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg",
"verified": false,
"content": "推文内容",
"time": "推文时间"
},
"caption": "转发时的说明（可选）",
"time": "刚刚"
}
8. 转发主页：
{
"type": "quoteProfile",
"profile": {
"name": "账户名",
"handle": "@handle",
"avatar": "https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg",
"bio": "个人简介",
"followers": 关注者数量（数字）,
"verified": false
},
"caption": "转发时的说明（可选）",
"time": "刚刚"
}
9. 转发粉丝群：
{
"type": "quoteFanGroup",
"fanGroup": {
"id": "粉丝群ID",
"name": "粉丝群名称",
"avatar": "粉丝群头像链接",
"memberCount": 成员数量（数字）,
"threshold": "入群门槛说明（可选）"
},
"caption": "转发时的说明（可选）",
"time": "刚刚"
}
⚠️ 转发粉丝群说明：
- 这是用户转发粉丝群邀请时的消息类型
- 包含粉丝群的基本信息：名称、头像、成员数、入群门槛等
- 群成员可以根据粉丝群信息决定是否感兴趣、讨论这个群等
- AI不应该主动生成此类型消息（除非有合理的场景理由）
10. 群文件上传：
{
"type": "groupFile",
"file": {
"name": "文件名称",
"type": "文件类型（text/image/video/link）",
"content": "文件内容（完整文本内容、链接URL等）",
"folderId": "文件夹ID（可选）"
},
"time": "刚刚"
}
⚠️ 群文件说明：
- 成员可以上传文本文档、图片链接、视频链接、文章链接等各种资料到群文件
- file.type：文件类型（text文本、image图片、video视频、link链接）
- file.content：文件实际内容，对于文本是完整内容，对于链接是URL
- file.name：文件名，应该能够概括文件内容
- file.folderId：📂 **文件夹归类**（可选字段）
 * 如果要将文件放入特定文件夹，从上方【文件夹列表】中选择对应的文件夹ID
 * 例如：如果有文件夹「学习资料」ID为folder_123，设置"folderId": "folder_123"
 * 如果不指定或设为null，文件将显示为"未分类"状态
 * 💡 建议：相关主题的文件归入同一文件夹，方便查找和管理
- 📁 成员上传的文件会自动添加到群文件库，群主和其他成员可以在群文件中查看
- 🎯 使用场景：分享学习资料、工作文档、有用的链接、图片素材等
- 🎯 归类建议：根据内容类型选择合适的文件夹，如学习资料放入学习文件夹，图片素材放入素材文件夹
11. 转发推文/评论（forward）：
⚠️ **此类型禁止AI生成！这是用户手动转发操作产生的消息类型。**
如果在聊天记录中看到此类型消息，说明用户转发了推文或评论到群里，可以查看其中的完整内容：
- 转发推文时，包含完整推文内容和该推文的所有评论区内容
- 转发评论时，包含评论内容和该评论所属的推文内容
AI应该根据这些完整的上下文信息来理解用户分享的内容并给出回应。
⚠️ 重要规则：
- 群成员ID、昵称、句柄、头像必须从上方群成员资料中选择，不要自创
- 每个成员的发言要符合其资料和入群申请体现的性格特点
- 保持群聊的真实感和多样性，避免千篇一律
- ⚠️ image和sticker是完全不同的类型，不要混淆！
- ⚠️ link类型是文章链接，需要包含完整的文章内容
- 时间使用相对时间（如"刚刚"、"1分钟前"等）
- 所有头像统一使用成员列表中提供的头像URL
- verified字段必须是布尔值(true/false)
- followers等数字字段必须是纯数字
- 可选字段不使用时完全省略，不要设为null
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`; // 14. 添加通用约束
      const userConstraintsStart = systemPrompt.length;
      systemPrompt += StringBuilders.buildUniversalConstraints(userXProfileInfo);
      const userConstraints = systemPrompt.substring(userConstraintsStart);
      tokenCount = TokenUtils.logTokenUsage('第11情景-粉丝群私信', '用户约束', userConstraints, tokenCount);
      const messages = [{ role: 'user', content: '请生成粉丝群对话' }]; // 最终统计
      TokenUtils.logFinalPrompt('第11情景-粉丝群私信', systemPrompt, messages[0].content);
      // 🔧 使用统一的API请求工具
      const aiResponseContent = await APIUtils.sendAIRequest({
        apiConfig,
        systemPrompt,
        messages,
        temperature: 0.9,
      });
      console.log('🎯 [第11情景] AI响应长度:', aiResponseContent.length, '字符');
      console.log('🎯 [第11情景] AI完整响应:\n', aiResponseContent);
      // 🔧 使用统一的JSON解析工具
      let conversationData = APIUtils.parseJSONResponse(aiResponseContent);
      if (!conversationData.messages || !Array.isArray(conversationData.messages)) {
        throw new Error('AI返回的数据格式不正确');
      }
      console.log(`✅ [第11情景] 成功解析JSON，共${conversationData.messages.length}条消息`);
      console.log(
        '📋 [第11情景] 消息发送者列表:',
        conversationData.messages.map(m => `${m.senderName}(${m.senderId})`).join(', '),
      ); // 17. 处理生成的消息
      const generatedMessages = conversationData.messages.map(msg => ({
        type: msg.type || 'text',
        content: msg.content || '',
        isOwn: false, // 群成员消息
        time: msg.time || '刚刚',
        timestamp: new Date().toISOString(),
        // 群聊特有字段
        senderId: msg.senderId,
        senderName: msg.senderName,
        senderHandle: msg.senderHandle,
        senderAvatar: msg.senderAvatar,
        // 文本消息字段
        // (content 已在上面)
        // 图片消息字段
        imageDescription: msg.imageDescription,
        sensitive: msg.sensitive,
        // 表情包消息字段
        stickerUrl: msg.stickerUrl,
        // 语音消息字段
        voiceText: msg.voiceText,
        voiceDuration: msg.voiceDuration,
        duration: msg.duration,
        // 转账消息字段
        amount: msg.amount,
        note: msg.note,
        status: msg.status,
        // 文章链接字段
        title: msg.title,
        description: msg.description,
        author: msg.author,
        source: msg.source,
        body: msg.body,
        url: msg.url,
        // 转发推文字段
        tweet: msg.tweet,
        caption: msg.caption,
        // 转发主页字段
        profile: msg.profile,
        // 群文件字段
        file: msg.file
          ? {
              name: msg.file.name,
              type: msg.file.type,
              content: msg.file.content,
              folderId: msg.file.folderId || null,
              uploadedBy: msg.senderName,
              uploadedAt: new Date().toISOString(),
            }
          : undefined,
        // caption 已在上面
      }));
      console.log(`✅ [第11情景] 成功生成${generatedMessages.length}条群聊消息`);

      // 17.5. 处理AI生成的群文件消息，自动保存到群文件数据库
      const fileMessages = generatedMessages.filter(msg => msg.type === 'groupFile' && msg.file);
      if (fileMessages.length > 0) {
        console.log(`📁 [第11情景] 检测到${fileMessages.length}个AI生成的群文件，正在保存...`);
        try {
          const filesId = `fanGroupFiles_${currentAccountId || 'main'}_${fanGroup.id}`;
          const savedData = await xDb.xAccountProfiles.get(filesId);
          let files = savedData?.data || [];

          for (const msg of fileMessages) {
            const newFile = {
              id: `file_ai_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
              name: msg.file.name,
              type: msg.file.type,
              content: msg.file.content,
              folderId: msg.file.folderId || null,
              uploadedBy: msg.senderName,
              uploadedAt: msg.file.uploadedAt || new Date().toISOString(),
            };

            files.push(newFile);

            // 更新消息中的文件ID
            msg.file.id = newFile.id;

            console.log(`✅ [群文件] AI上传文件: ${newFile.name} (${msg.senderName})`);
          }

          await xDb.xAccountProfiles.put({
            handle: filesId,
            name: 'fanGroupFiles',
            data: files,
            updatedAt: new Date().toISOString(),
          });

          console.log(`✅ [第11情景] 已保存${fileMessages.length}个AI生成的群文件到数据库`);
        } catch (error) {
          console.error('❌ [第11情景] 保存AI生成的群文件失败:', error);
        }
      }

      // 18. 头像修正
      const avatarCorrectedData = await StringBuilders.enforceAvatarRules({ messages: generatedMessages });
      return avatarCorrectedData.messages || generatedMessages;
    } catch (error) {
      console.error('❌ [第11情景] 生成粉丝群对话失败:', error);
      showXToast('生成对话失败: ' + error.message, 'error');
      return [];
    }
  }
  // 触发粉丝群自反应（成员自发交流）
  window.triggerFanGroupAutoReaction = async function () {
    console.log('🎭 [粉丝群自反应] 开始触发');
    if (!currentMessageConversation) {
      showXToast('会话数据丢失', 'error');
      return;
    }
    // 检查是否是粉丝群
    const isFanGroup =
      currentMessageConversation.type === 'fangroup' ||
      (currentMessageConversation.id && currentMessageConversation.id.startsWith('fangroup_'));
    if (!isFanGroup) {
      showXToast('只有粉丝群支持自反应功能', 'info');
      return;
    }
    // 保存当前会话引用
    const conversationRef = currentMessageConversation; // 禁用按钮
    const autoReactionBtn = document.getElementById('fangroup-auto-reaction-btn');
    const sendBtn = document.getElementById('message-send-btn');
    if (autoReactionBtn) {
      autoReactionBtn.disabled = true;
      autoReactionBtn.style.opacity = '0.5';
    }
    if (sendBtn) {
      sendBtn.disabled = true;
      sendBtn.style.opacity = '0.5';
    }
    try {
      // 显示"正在输入中"气泡
      console.log('📤 [粉丝群自反应] 显示输入气泡');
      showTypingIndicator(); // 显示提示
      showXToast('群成员正在交流中...', 'info'); // 调用第11个情景生成器（自反应模式）
      console.log('📤 [粉丝群自反应] 调用第11个情景生成器');
      const aiMessages = await generateFanGroupConversation(conversationRef, true, {
        isAutoReaction: true, // 自反应模式标记
      });
      console.log(`📤 [粉丝群自反应] AI返回了 ${aiMessages ? aiMessages.length : 0} 条消息`); // 隐藏"正在输入中"气泡
      hideTypingIndicator();
      if (!aiMessages || aiMessages.length === 0) {
        showXToast('群成员暂时没有发言', 'info');
        return;
      }
      // 读取现有对话数据
      const xDb = getXDB();
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${conversationRef.id}`;
      const savedConversation = await xDb.xAccountProfiles.get(conversationId);
      let allMessages = [];
      if (savedConversation && savedConversation.data && savedConversation.data.messages) {
        allMessages = savedConversation.data.messages;
      }
      // 追加AI生成的消息
      allMessages.push(...aiMessages); // 保存到数据库
      await xDb.xAccountProfiles.put({
        handle: conversationId,
        name: 'conversation',
        data: {
          messages: allMessages,
        },
        updatedAt: new Date().toISOString(),
      });
      console.log('📤 [粉丝群自反应] 消息已保存到数据库'); // 更新私信列表的预览
      const dataId = `messagesList_${currentAccountId || 'main'}`;
      const messagesList = await xDb.xAccountProfiles.get(dataId);
      if (messagesList && messagesList.data) {
        const groupIndex = messagesList.data.findIndex(msg => msg.id === conversationRef.id);
        if (groupIndex !== -1) {
          const lastMsg = aiMessages[aiMessages.length - 1];
          const lastMsgContent = lastMsg.content || lastMsg.voiceText || lastMsg.imageDescription || '[消息]';
          messagesList.data[groupIndex].lastMessage = `${lastMsg.senderName}: ${lastMsgContent}`;
          messagesList.data[groupIndex].timestamp = new Date().toISOString();
          await xDb.xAccountProfiles.put(messagesList);
          console.log('📤 [粉丝群自反应] 私信列表预览已更新');
        }
      }
      // 渲染AI消息到页面（带动画）
      const contentContainer = document.getElementById('message-detail-content');
      if (contentContainer) {
        const messageElements = [];
        aiMessages.forEach((msg, index) => {
          const msgEl = renderMessageItem(msg, false, allMessages.length - aiMessages.length + index, true, true);
          contentContainer.appendChild(msgEl);
          messageElements.push(msgEl);
        }); // 逐条弹出动画
        await animateMessagesOneByOne(messageElements, 300);
      }
      showXToast(`群内产生了 ${aiMessages.length} 条新对话`, 'success');
    } catch (error) {
      console.error('❌ [粉丝群自反应] 生成失败:', error);
      hideTypingIndicator();
      showXToast('生成失败: ' + error.message, 'error');
    } finally {
      // 恢复按钮状态
      if (autoReactionBtn) {
        autoReactionBtn.disabled = false;
        autoReactionBtn.style.opacity = '1';
      }
      if (sendBtn) {
        sendBtn.disabled = false;
        sendBtn.style.opacity = '1';
      }
    }
  }; // 粉丝群成员数自动触发机制
  async function checkAndTriggerFanGroupAutoChat(groupId, newMemberCount) {
    console.log('🔍 [粉丝群] 检查自动触发条件', { groupId, newMemberCount }); // 触发条件：5、15、25、35...（每10人一次）
    const triggerPoints = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95];
    const shouldTrigger = triggerPoints.includes(newMemberCount);
    if (!shouldTrigger) {
      console.log('⏸️ [粉丝群] 未达到触发条件');
      return;
    }
    console.log(`🎉 [粉丝群] 成员数达到${newMemberCount}人，触发自动群聊！`);
    try {
      const xDb = getXDB();
      const dataId = `messagesList_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(dataId);
      const messagesList = savedData?.data || [];
      const fanGroup = messagesList.find(msg => msg.id === groupId);
      if (!fanGroup) {
        console.error('❌ [粉丝群] 未找到粉丝群数据');
        return;
      }
      // 调用第11情景生成器
      const aiMessages = await generateFanGroupConversation(fanGroup, true, {
        isAutoTrigger: true,
        newMemberCount: newMemberCount,
      });
      if (!aiMessages || aiMessages.length === 0) {
        console.error('❌ [粉丝群] AI未生成任何消息');
        return;
      }
      // 保存到数据库
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${groupId}`;
      const savedConversation = await xDb.xAccountProfiles.get(conversationId);
      if (!savedConversation || !savedConversation.data) {
        // 初始化对话
        await xDb.xAccountProfiles.put({
          handle: conversationId,
          name: 'conversation',
          data: {
            messages: aiMessages,
          },
          updatedAt: new Date().toISOString(),
        });
      } else {
        // 追加消息
        savedConversation.data.messages.push(...aiMessages);
        await xDb.xAccountProfiles.put(savedConversation);
      }
      console.log(`✅ [粉丝群] 已保存${aiMessages.length}条自动生成的群聊消息`); // 更新私信列表预览
      if (savedData && savedData.data) {
        const groupIndex = savedData.data.findIndex(msg => msg.id === groupId);
        if (groupIndex !== -1) {
          const lastMsg = aiMessages[aiMessages.length - 1];
          savedData.data[groupIndex].lastMessage =
            lastMsg.content || lastMsg.voiceText || lastMsg.imageDescription || '[消息]';
          savedData.data[groupIndex].timestamp = new Date().toISOString();
          savedData.data[groupIndex].unread = true;
          await xDb.xAccountProfiles.put(savedData);
          sampleMessagesData = savedData.data;
        }
      }
      // 刷新私信列表
      await loadMessagesList(); // 显示通知
      showPhoneNotification({
        title: fanGroup.userName || fanGroup.groupName,
        message: `群成员达到${newMemberCount}人啦！大家都在庆祝呢~`,
        avatar: fanGroup.userAvatar || 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
        leftIcon: 'custom',
        leftIconHtml: `
 <svg viewBox="0 0 24 24" style="width: 18px; height: 18px; fill: var(--x-accent);">
 <g><path d="M17.5 4.5c-1.95-1.96-5.11-1.96-7.07 0-1.96 1.96-1.96 5.11 0 7.07 1.95 1.96 5.11 1.96 7.07 0 1.96-1.96 1.96-5.11 0-7.07zM14 9c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1z M12 14H6c-1.1 0-2 .9-2 2v5h16v-5c0-1.1-.9-2-2-2h-6z"></path></g>
 </svg>
 `,
        duration: 5000,
        onClick: () => {
          window.openMessageDetail(fanGroup);
        },
      });
      showXToast(`粉丝群达到${newMemberCount}人！`, 'success');
    } catch (error) {
      console.error('❌ [粉丝群] 自动触发失败:', error);
    }
  }

  // ============================================
  // 粉丝群公告功能
  // ============================================
  // 打开群公告弹窗
  window.openFanGroupAnnouncementModal = async function () {
    // 检查是否是粉丝群
    const isFanGroup =
      currentMessageConversation &&
      (currentMessageConversation.type === 'fangroup' ||
        (currentMessageConversation.id && currentMessageConversation.id.startsWith('fangroup_')));

    if (!isFanGroup) {
      showXToast('当前不是粉丝群聊天', 'error');
      return;
    }

    console.log('📢 [群公告] 打开群公告弹窗', currentMessageConversation.id);

    try {
      // 显示弹窗
      const modal = document.getElementById('fangroup-announcement-modal');
      if (modal) {
        modal.style.display = 'flex';
      }

      // 加载公告列表
      await loadFanGroupAnnouncements();
    } catch (error) {
      console.error('❌ [群公告] 打开弹窗失败:', error);
      showXToast('打开失败: ' + error.message, 'error');
    }
  };

  // 关闭群公告弹窗
  window.closeFanGroupAnnouncementModal = function () {
    const modal = document.getElementById('fangroup-announcement-modal');
    if (modal) {
      modal.style.display = 'none';
    }
  };

  // 打开创建公告对话框
  window.openCreateAnnouncementDialog = function () {
    const dialog = document.getElementById('create-announcement-dialog');
    const contentInput = document.getElementById('announcement-content-input');
    const mentionCheckbox = document.getElementById('mention-all-checkbox');
    const counter = document.getElementById('announcement-counter');

    if (dialog) {
      dialog.style.display = 'flex';
    }

    // 重置表单
    if (contentInput) {
      contentInput.value = '';
    }
    if (mentionCheckbox) {
      mentionCheckbox.checked = false;
    }
    if (counter) {
      counter.textContent = '0 / 500';
    }
  };

  // 关闭创建公告对话框
  window.closeCreateAnnouncementDialog = function () {
    const dialog = document.getElementById('create-announcement-dialog');
    if (dialog) {
      dialog.style.display = 'none';
    }
  };

  // 更新公告内容字符计数
  window.updateAnnouncementCounter = function () {
    const contentInput = document.getElementById('announcement-content-input');
    const counter = document.getElementById('announcement-counter');
    if (contentInput && counter) {
      const length = contentInput.value.length;
      counter.textContent = `${length} / 500`;
    }
  };

  // 加载粉丝群公告列表
  async function loadFanGroupAnnouncements() {
    if (!currentMessageConversation) return;

    const groupId = currentMessageConversation.id;
    const container = document.getElementById('fangroup-announcements-container');
    if (!container) return;

    try {
      const xDb = getXDB();
      const announcementsId = `fanGroupAnnouncements_${currentAccountId || 'main'}_${groupId}`;
      const savedData = await xDb.xAccountProfiles.get(announcementsId);
      const announcements = savedData?.data || [];

      console.log('📢 [群公告] 加载公告列表', { groupId, count: announcements.length });

      // 清空容器
      container.innerHTML = '';

      if (announcements.length === 0) {
        // 显示空状态
        container.innerHTML = `
 <div style="width: 100%; text-align: center; color:var(--x-text-secondary); font-size: 14px; padding: 40px 20px; grid-column: 1 / -1;">
 📌 暂无公告，点击下方按钮创建第一条公告
 </div>
 `;
        return;
      }

      // 渲染公告卡片（便利贴风格）
      announcements.forEach((announcement, index) => {
        const card = renderAnnouncementCard(announcement, index);
        container.appendChild(card);
      });
    } catch (error) {
      console.error('❌ [群公告] 加载失败:', error);
      container.innerHTML = `
 <div style="width: 100%; text-align: center; color: #ef4444; font-size: 14px; padding: 40px 20px; grid-column: 1 / -1;">
 ❌ 加载失败，请重试
 </div>
 `;
    }
  }

  // 颜色辅助函数：加深颜色
  function darkenColor(hex, percent) {
    const num = parseInt(hex.replace('#', ''), 16);
    const amt = Math.round(2.55 * percent);
    const R = Math.max((num >> 16) - amt, 0);
    const G = Math.max(((num >> 8) & 0x00ff) - amt, 0);
    const B = Math.max((num & 0x0000ff) - amt, 0);
    return '#' + (0x1000000 + R * 0x10000 + G * 0x100 + B).toString(16).slice(1);
  }

  // 颜色辅助函数：减淡颜色
  function lightenColor(hex, percent) {
    const num = parseInt(hex.replace('#', ''), 16);
    const amt = Math.round(2.55 * percent);
    const R = Math.min((num >> 16) + amt, 255);
    const G = Math.min(((num >> 8) & 0x00ff) + amt, 255);
    const B = Math.min((num & 0x0000ff) + amt, 255);
    return '#' + (0x1000000 + R * 0x10000 + G * 0x100 + B).toString(16).slice(1);
  }

  // 颜色辅助函数：根据背景色计算对比色（自动选择黑或白）
  function getContrastColor(hex, opacity = 1) {
    const num = parseInt(hex.replace('#', ''), 16);
    const R = (num >> 16) & 0xff;
    const G = (num >> 8) & 0xff;
    const B = num & 0xff;
    // 计算亮度（感知亮度公式）
    const brightness = (R * 299 + G * 587 + B * 114) / 1000;
    // 根据亮度返回黑色或白色
    if (brightness > 128) {
      // 背景较亮，使用深色文字
      return opacity === 1 ? '#1f2937' : `rgba(31, 41, 55, ${opacity})`;
    } else {
      // 背景较暗，使用浅色文字
      return opacity === 1 ? '#f9fafb' : `rgba(249, 250, 251, ${opacity})`;
    }
  }

  // 渲染便利贴风格的公告卡片
  function renderAnnouncementCard(announcement, index) {
    const card = document.createElement('div');

    // 便利贴颜色池（统一使用用户提供的色系）
    const xSocialScreen = document.getElementById('x-social-screen');
    const isLightMode = xSocialScreen?.classList.contains('x-theme-light');

    const allColors = [
      '#EB9FAA',
      '#F7D2D5',
      '#FCEFF0',
      '#C0CEE4',
      '#F2E4E9',
      '#A0A0A3',
      '#BFBBBE',
      '#5F5F60',
      '#67B3DB',
      '#9EDAF1',
      '#CDEEF8',
      '#FFFBDD',
      '#D40D3E',
      '#FDF5DC',
      '#C9EAF8',
      '#DA2E53',
      '#FFEBD5',
      '#FFC4AF',
      '#FF8D65',
      '#8FDBE0',
    ];

    // 🎲 随机选择颜色（而不是按索引顺序）
    const randomColorIndex = Math.floor(Math.random() * allColors.length);
    const bgColor = allColors[randomColorIndex];
    const color = {
      bg: bgColor,
      border: isLightMode ? darkenColor(bgColor, 15) : lightenColor(bgColor, 15),
    };

    // 随机旋转角度（移动端减少旋转，避免偏移）
    const isMobile = window.innerWidth <= 640;
    const rotationRange = isMobile ? 1.5 : 3; // 移动端旋转范围 -1.5 到 1.5 度
    const rotation = (Math.random() * rotationRange * 2 - rotationRange).toFixed(2);

    // 随机决定装饰元素类型
    const decorationType = Math.random();
    const hasClip = decorationType < 0.3; // 30% 概率显示回形针
    const hasTape = decorationType >= 0.3 && decorationType < 0.6; // 30% 概率显示胶带
    const hasTear = decorationType >= 0.6; // 40% 概率显示撕边效果

    // 随机回形针位置和颜色
    const clipPosition = Math.random() > 0.5 ? 'left' : 'right';
    const clipColors = ['#c0c0c0', '#ffd700', '#ff6b6b', '#4ecdc4'];
    const clipColor = clipColors[Math.floor(Math.random() * clipColors.length)];

    // 随机添加褶皱效果
    const hasCrinkle = Math.random() > 0.5;
    const crinklePosition = `${Math.random() * 60 + 20}%`;
    const crinkleRotation = Math.random() > 0.5 ? '45deg' : '-45deg';

    // 格式化时间
    const createdDate = new Date(announcement.createdAt);
    const formattedDate = `${createdDate.getFullYear()}/${String(createdDate.getMonth() + 1).padStart(2, '0')}/${String(
      createdDate.getDate(),
    ).padStart(2, '0')} ${String(createdDate.getHours()).padStart(2, '0')}:${String(createdDate.getMinutes()).padStart(
      2,
      '0',
    )}`;

    // 撕边效果的 clip-path
    const tearEffect = hasTear
      ? `polygon(
 0% 2%, 3% 0%, 6% 2%, 9% 0%, 12% 1%, 15% 0%, 18% 2%, 21% 0%, 24% 1%, 27% 0%,
 30% 2%, 33% 0%, 36% 1%, 39% 0%, 42% 2%, 45% 0%, 48% 1%, 51% 0%, 54% 2%,
 57% 0%, 60% 1%, 63% 0%, 66% 2%, 69% 0%, 72% 1%, 75% 0%, 78% 2%, 81% 0%,
 84% 1%, 87% 0%, 90% 2%, 93% 0%, 96% 1%, 100% 0%, 100% 100%, 0% 100%
 )`
      : 'none';

    card.style.cssText = `
 width: 100%;
 max-width: 400px;
 min-height: 180px;
 margin: 0 auto;
 background-color: ${color.bg};
 background-image:
 repeating-linear-gradient(
 0deg,
 transparent,
 transparent 2px,
 rgba(0, 0, 0, 0.025) 2px,
 rgba(0, 0, 0, 0.025) 3px
 );
 border: none;
 border-radius: ${hasTear ? '0' : '3px'};
 padding: ${isMobile ? '16px' : '20px'};
 box-shadow:
 0 1px 3px rgba(0, 0, 0, 0.12),
 0 3px 6px rgba(0, 0, 0, 0.08),
 inset 0 1px 0 rgba(255, 255, 255, 0.15),
 inset 0 0 30px rgba(255, 255, 255, 0.05);
 cursor: pointer;
 transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
 transform: rotate(${rotation}deg);
 position: relative;
 overflow: visible;
 animation: announceCardFadeIn 0.5s ease-out ${index * 0.12}s both;
 clip-path: ${tearEffect};
 filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));
 `;

    // 根据背景颜色亮度决定文字颜色
    const textColor = getContrastColor(bgColor);
    const secondaryTextColor = getContrastColor(bgColor, 0.65);

    card.innerHTML = `
 ${
   hasTape
     ? `

 <div style="position: absolute; top: ${Math.random() * 10 - 5}px; left: ${
         Math.random() * 20 + 40
       }%; transform: translateX(-50%) rotate(${
         Math.random() * 6 - 3
       }deg); width: 80px; height: 25px; background: rgba(255, 255, 255, ${
         isLightMode ? '0.5' : '0.15'
       }); opacity: 0.7; border-left: 1px solid rgba(0, 0, 0, 0.05); border-right: 1px solid rgba(0, 0, 0, 0.05); z-index: 1;"></div>
 `
     : ''
 }

 ${
   hasClip
     ? `

 <div style="position: absolute; top: 8px; ${clipPosition}: 12px; width: 8px; height: 24px; border: 2px solid ${clipColor}; border-radius: 8px 8px 4px 4px; transform: rotate(${
         Math.random() * 20 - 10
       }deg); opacity: 0.8; box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.2);"></div>
 `
     : ''
 }

 ${
   hasCrinkle
     ? `

 <div style="position: absolute; top: 0; left: ${crinklePosition}; width: 1px; height: 100%; background: linear-gradient(to bottom, transparent, rgba(0, 0, 0, 0.06) 20%, rgba(0, 0, 0, 0.06) 80%, transparent); transform: rotate(${crinkleRotation}); pointer-events: none;"></div>
 `
     : ''
 }

 <div style="position: absolute; inset: 0; background: repeating-linear-gradient(90deg, transparent, transparent 1px, rgba(0,0,0,0.015) 1px, rgba(0,0,0,0.015) 2px), repeating-linear-gradient(0deg, transparent, transparent 1px, rgba(0,0,0,0.015) 1px, rgba(0,0,0,0.015) 2px); pointer-events: none; opacity: 0.6;"></div>

 <div style="position: relative; z-index: 2; color: ${textColor}; font-size: 14px; line-height: 1.8; margin-bottom: 16px; word-wrap: break-word; white-space: pre-wrap; font-family: 'Segoe UI', 'PingFang SC', 'Microsoft YaHei', sans-serif; text-shadow: 0 1px 0 rgba(255, 255, 255, 0.1);">
 ${announcement.content}
 </div>

 <div style="position: relative; z-index: 2; display: flex; align-items: center; justify-content: space-between; margin-top: 16px; padding-top: 12px; border-top: 1px dashed ${
   color.border
 };">
 <div style="font-size: 11px; color: ${secondaryTextColor}; font-style: italic; opacity: 0.8;">
 ${formattedDate}
 </div>
 <button onclick="event.stopPropagation(); deleteFanGroupAnnouncement('${
   announcement.id
 }')" style="background: rgba(0, 0, 0, 0.05); border: 1px solid ${
      color.border
    }; color: ${textColor}; cursor: pointer; padding: 5px 10px; border-radius: 6px; font-size: 12px; font-weight: 600; transition: all 0.2s;" onmouseover="this.style.backgroundColor='rgba(0, 0, 0, 0.15)'; this.style.transform='scale(1.05)'" onmouseout="this.style.backgroundColor='rgba(0, 0, 0, 0.05)'; this.style.transform='scale(1)'">
 🗑️
 </button>
 </div>
 `;

    // Hover效果 - 更自然的便利贴拿起效果
    card.addEventListener('mouseenter', () => {
      card.style.transform = `rotate(${parseFloat(rotation) * 0.5}deg) translateY(-12px) scale(1.03)`;
      card.style.filter = 'drop-shadow(0 8px 16px rgba(0, 0, 0, 0.2))';
      card.style.zIndex = '100';
    });

    card.addEventListener('mouseleave', () => {
      card.style.transform = `rotate(${rotation}deg) translateY(0) scale(1)`;
      card.style.filter = 'drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1))';
      card.style.zIndex = 'auto';
    });

    return card;
  }

  // 添加动画样式（如果尚未添加）
  if (!document.getElementById('announcement-card-animation-style')) {
    const style = document.createElement('style');
    style.id = 'announcement-card-animation-style';
    style.textContent = `
 @keyframes announceCardFadeIn {
 0% {
 opacity: 0;
 transform: translateY(-40px) translateX(-20px) rotate(-5deg) scale(0.9);
 filter: drop-shadow(0 0 0 rgba(0, 0, 0, 0));
 }
 60% {
 opacity: 1;
 transform: translateY(5px) translateX(2px) rotate(2deg) scale(1.02);
 }
 100% {
 opacity: 1;
 transform: translateY(0) translateX(0) rotate(var(--rotation, 0deg)) scale(1);
 filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));
 }
 }

 /* 移动端优化 */
 @media (max-width: 640px) {
 #fangroup-announcements-container {
 padding: 16px 12px !important;
 gap: 20px 12px !important;
 }
 }
 `;
    document.head.appendChild(style);
  }

  // 保存粉丝群公告
  window.saveFanGroupAnnouncement = async function () {
    // 检查是否是粉丝群
    const isFanGroup =
      currentMessageConversation &&
      (currentMessageConversation.type === 'fangroup' ||
        (currentMessageConversation.id && currentMessageConversation.id.startsWith('fangroup_')));

    if (!isFanGroup) {
      showXToast('当前不是粉丝群聊天', 'error');
      return;
    }

    const contentInput = document.getElementById('announcement-content-input');
    const mentionCheckbox = document.getElementById('mention-all-checkbox');
    const content = contentInput?.value?.trim();

    if (!content) {
      showXToast('请输入公告内容', 'warning');
      return;
    }

    const groupId = currentMessageConversation.id;
    const shouldMentionAll = mentionCheckbox?.checked || false;

    console.log('📢 [群公告] 保存新公告', { groupId, content, shouldMentionAll });

    try {
      const xDb = getXDB();
      const announcementsId = `fanGroupAnnouncements_${currentAccountId || 'main'}_${groupId}`;

      // 获取现有公告
      const savedData = await xDb.xAccountProfiles.get(announcementsId);
      const announcements = savedData?.data || [];

      // 创建新公告
      const newAnnouncement = {
        id: `announcement_${Date.now()}`,
        groupId: groupId,
        content: content,
        createdAt: new Date().toISOString(),
        createdBy: 'admin',
      };

      // 添加到列表开头（最新的在前）
      announcements.unshift(newAnnouncement);

      // 保存到数据库
      await xDb.xAccountProfiles.put({
        handle: announcementsId,
        name: 'fanGroupAnnouncements',
        data: announcements,
        updatedAt: new Date().toISOString(),
      });

      console.log('✅ [群公告] 公告已保存');

      // 在粉丝群聊天中添加系统通知
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${groupId}`;
      const savedConversation = await xDb.xAccountProfiles.get(conversationId);

      if (savedConversation && savedConversation.data && savedConversation.data.messages) {
        const systemMessage = {
          type: 'system',
          systemType: 'announcement',
          content: `📢 群主发布了新公告：${content}`,
          timestamp: new Date().toISOString(),
          time: '刚刚',
        };
        savedConversation.data.messages.push(systemMessage);
        await xDb.xAccountProfiles.put(savedConversation);

        console.log('✅ [群公告] 已添加系统通知');

        // 如果当前正在查看该粉丝群聊天，刷新消息显示
        if (currentMessageConversation && currentMessageConversation.id === groupId) {
          const contentContainer = document.getElementById('message-detail-content');
          if (contentContainer) {
            const msgEl = renderMessageItem(systemMessage, false, savedConversation.data.messages.length - 1, true);
            contentContainer.appendChild(msgEl);
            // 滚动到底部
            const scrollableContainer = document.getElementById('message-detail-scrollable');
            if (scrollableContainer) {
              scrollableContainer.scrollTop = scrollableContainer.scrollHeight;
            }
          }
        }
      }

      // 关闭创建对话框
      closeCreateAnnouncementDialog();

      // 刷新公告列表
      await loadFanGroupAnnouncements();

      showXToast('公告发布成功', 'success');

      // 如果选择了@全员，触发AI反应
      if (shouldMentionAll) {
        console.log('📢 [群公告] @全员，触发AI反应');
        closeFanGroupAnnouncementModal();

        // 延迟触发AI反应，让用户看到公告已发布
        setTimeout(async () => {
          try {
            // 调用自反应按钮的触发函数
            await window.triggerFanGroupAutoReaction();
            showXToast('已通知所有成员', 'success');
          } catch (error) {
            console.error('❌ [群公告] 触发AI反应失败:', error);
            showXToast('通知失败: ' + error.message, 'error');
          }
        }, 500);
      }
    } catch (error) {
      console.error('❌ [群公告] 保存失败:', error);
      showXToast('保存失败: ' + error.message, 'error');
    }
  };

  // 删除粉丝群公告
  window.deleteFanGroupAnnouncement = async function (announcementId) {
    // 检查是否是粉丝群
    const isFanGroup =
      currentMessageConversation &&
      (currentMessageConversation.type === 'fangroup' ||
        (currentMessageConversation.id && currentMessageConversation.id.startsWith('fangroup_')));

    if (!isFanGroup) {
      return;
    }

    if (!confirm('确定要删除这条公告吗？')) {
      return;
    }

    const groupId = currentMessageConversation.id;

    console.log('🗑️ [群公告] 删除公告', { groupId, announcementId });

    try {
      const xDb = getXDB();
      const announcementsId = `fanGroupAnnouncements_${currentAccountId || 'main'}_${groupId}`;

      // 获取现有公告
      const savedData = await xDb.xAccountProfiles.get(announcementsId);
      let announcements = savedData?.data || [];

      // 过滤掉要删除的公告
      announcements = announcements.filter(a => a.id !== announcementId);

      // 保存更新后的列表
      await xDb.xAccountProfiles.put({
        handle: announcementsId,
        name: 'fanGroupAnnouncements',
        data: announcements,
        updatedAt: new Date().toISOString(),
      });

      console.log('✅ [群公告] 公告已删除');

      // 刷新公告列表
      await loadFanGroupAnnouncements();

      showXToast('公告已删除', 'success');
    } catch (error) {
      console.error('❌ [群公告] 删除失败:', error);
      showXToast('删除失败: ' + error.message, 'error');
    }
  };

  // ============================================
  // 群文件管理功能
  // ============================================

  let currentFanGroupFolder = null; // 当前打开的文件夹

  // 动态创建群文件模态窗口
  function createFanGroupFilesModal() {
    // 如果已存在则先删除
    const existingModal = document.getElementById('fangroup-files-modal');
    if (existingModal) {
      existingModal.remove();
    }

    const modal = document.createElement('div');
    modal.id = 'fangroup-files-modal';
    modal.style.cssText = `
position: fixed;
top: 0;
left: 0;
width: 100vw;
height: 100vh;
background-color: rgba(0, 0, 0, 0.7);
display: flex;
align-items: center;
justify-content: center;
z-index: 35;
backdrop-filter: blur(10px);
padding: 0 8px;
box-sizing: border-box;
`;

    modal.innerHTML = `
<div style="background-color:var(--x-bg-primary); border-radius: 16px; width: 100%; max-width: 800px; max-height: 85vh; display: flex; flex-direction: column; box-shadow: 0 25px 50px rgba(0,0,0,0.3); overflow: hidden;" onclick="event.stopPropagation()">
<div style="padding: 16px; border-bottom: 1px solid var(--x-border-color); flex-shrink: 0;">
<div style="display: flex; align-items: center; justify-content: space-between;">
<div style="display: flex; align-items: center; gap: 10px;">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" style="width: 22px; height: 22px; fill: none; stroke: var(--x-accent); stroke-width: 2; stroke-linecap: round; stroke-linejoin: round;">
<path d="M5 4h4l3 3h7a2 2 0 0 1 2 2v8a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2v-11a2 2 0 0 1 2 -2" />
</svg>
<h3 style="margin: 0; color:var(--x-text-primary); font-size: 18px; font-weight: 700;" id="fangroup-files-header-title">群文件</h3>
</div>
<button onclick="closeFanGroupFilesModal()" style="background: transparent; border: none; color:var(--x-text-secondary); cursor: pointer; padding: 6px; border-radius: 50%; transition: background-color 0.2s; display: flex; align-items: center; justify-content: center;" onmouseover="this.style.backgroundColor='var(--x-bg-hover)'" onmouseout="this.style.backgroundColor='transparent'">
<svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: currentColor;">
<g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
</svg>
</button>
</div>
</div>
<div id="fangroup-files-container" style="flex: 1; overflow-y: auto; overflow-x: hidden; padding: 12px; display: grid; grid-template-columns: repeat(auto-fill, minmax(100px, 1fr)); gap: 10px; align-content: flex-start; justify-content: center; min-height: 200px; background-color: var(--x-bg-secondary);">
<div style="width: 100%; text-align: center; color:var(--x-text-secondary); font-size: 13px; padding: 30px 16px; grid-column: 1 / -1;">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" style="width: 32px; height: 32px; fill: none; stroke: var(--x-text-secondary); stroke-width: 1.5; stroke-linecap: round; stroke-linejoin: round; margin: 0 auto 12px; display: block; opacity: 0.7;">
<path d="M5 4h4l3 3h7a2 2 0 0 1 2 2v8a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2v-11a2 2 0 0 1 2 -2" />
</svg>
暂无文件，点击下方按钮创建文件夹或上传文件
</div>
</div>
<div style="padding: 12px 16px; border-top: 1px solid var(--x-border-color); flex-shrink: 0; display: flex; gap: 8px; flex-wrap: wrap;">
<div style="display: flex; gap: 8px; flex: 1;">
<button id="fangroup-files-back-btn" onclick="backToFilesList()" style="display: none; background-color:var(--x-bg-secondary); color:var(--x-text-primary); border: none; border-radius: 18px; padding: 8px 16px; font-size: 13px; font-weight: 500; cursor: pointer; transition: all 0.2s;" onmouseover="this.style.backgroundColor='var(--x-bg-hover)'" onmouseout="this.style.backgroundColor='var(--x-bg-secondary)'">
<svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: currentColor; margin-right: 4px; vertical-align: text-bottom;">
<path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"></path>
</svg>
返回
</button>
<button id="fangroup-files-batch-btn" onclick="toggleBatchMode()" style="display: none; background-color:var(--x-bg-secondary); color:var(--x-text-primary); border: 1px solid var(--x-border-color); border-radius: 18px; padding: 8px 12px; font-size: 13px; font-weight: 500; cursor: pointer; transition: all 0.2s;" onmouseover="this.style.backgroundColor='var(--x-bg-hover)'" onmouseout="this.style.backgroundColor='var(--x-bg-secondary)'">
批量管理
</button>
<button id="fangroup-files-cancel-batch-btn" onclick="toggleBatchMode()" style="display: none; background-color:var(--x-bg-secondary); color:var(--x-text-primary); border: none; border-radius: 18px; padding: 8px 12px; font-size: 13px; font-weight: 500; cursor: pointer; transition: all 0.2s;" onmouseover="this.style.backgroundColor='var(--x-bg-hover)'" onmouseout="this.style.backgroundColor='var(--x-bg-secondary)'">
取消
</button>
<button id="fangroup-files-delete-batch-btn" onclick="batchDeleteFiles()" style="display: none; background-color: rgba(220, 38, 38, 0.9); color: #fff; border: none; border-radius: 18px; padding: 8px 12px; font-size: 13px; font-weight: 600; cursor: pointer; transition: all 0.2s;" onmouseover="this.style.opacity='0.9'" onmouseout="this.style.opacity='1'">
删除选中 (0)
</button>
</div>
<div style="display: flex; gap: 8px; flex-wrap: nowrap;">
<button id="fangroup-files-create-folder-btn" onclick="openCreateFolderDialog()" style="background-color: var(--x-bg-secondary); color: var(--x-text-primary); border: 1px solid var(--x-border-color); border-radius: 18px; padding: 8px 12px; font-size: 13px; font-weight: 500; cursor: pointer; white-space: nowrap; transition: all 0.2s; display: flex; align-items: center; justify-content: center; gap: 4px;" onmouseover="this.style.backgroundColor='var(--x-bg-hover)'" onmouseout="this.style.backgroundColor='var(--x-bg-secondary)'">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" style="width: 14px; height: 14px; fill: none; stroke: currentColor; stroke-width: 2; stroke-linecap: round; stroke-linejoin: round;">
<path d="M5 4h4l3 3h7a2 2 0 0 1 2 2v8a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2v-11a2 2 0 0 1 2 -2" />
</svg>
<span>新建文件夹</span>
</button>
<button id="fangroup-files-upload-btn" onclick="openUploadFileDialog()" style="background-color: #2a2a2a; color: #fff; border: none; border-radius: 18px; padding: 8px 12px; font-size: 13px; font-weight: 500; white-space: nowrap; cursor: pointer; transition: all 0.2s; box-shadow: 0 1px 3px rgba(0,0,0,0.2); display: flex; align-items: center; justify-content: center; gap: 4px;" onmouseover="this.style.backgroundColor='#3a3a3a'" onmouseout="this.style.backgroundColor='#2a2a2a'">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" style="width: 14px; height: 14px; fill: none; stroke: currentColor; stroke-width: 2; stroke-linecap: round; stroke-linejoin: round;">
<path d="M12 5v10M7 9l5-5 5 5M19 15v4H5v-4"></path>
</svg>
<span>上传文件</span>
</button>
</div>
</div>
</div>
`;

    modal.onclick = () => closeFanGroupFilesModal();

    // 添加到x-social-screen容器内以确保主题样式正确应用
    const xSocialScreen = document.getElementById('x-social-screen');
    if (xSocialScreen) {
      xSocialScreen.appendChild(modal);
    } else {
      document.body.appendChild(modal);
    }
    return modal;
  }

  // 打开群文件弹窗
  window.openFanGroupFilesModal = async function () {
    const isFanGroup =
      currentMessageConversation &&
      (currentMessageConversation.type === 'fangroup' ||
        (currentMessageConversation.id && currentMessageConversation.id.startsWith('fangroup_')));

    if (!isFanGroup) {
      showXToast('当前不是粉丝群聊天', 'error');
      return;
    }

    console.log('📁 [群文件] 打开群文件弹窗');
    const modal = createFanGroupFilesModal();
    currentFanGroupFolder = null; // 重置当前文件夹
    await loadFanGroupFiles();
  };

  // 关闭群文件弹窗
  window.closeFanGroupFilesModal = function () {
    const modal = document.getElementById('fangroup-files-modal');
    if (modal) {
      modal.remove();
      currentFanGroupFolder = null;
    }
  };

  // 加载群文件列表
  async function loadFanGroupFiles() {
    const groupId = currentMessageConversation.id;
    const container = document.getElementById('fangroup-files-container');
    const backBtn = document.getElementById('fangroup-files-back-btn');
    const headerTitle = document.getElementById('fangroup-files-header-title');

    if (!container) return;

    try {
      const xDb = getXDB();

      // 加载文件夹
      const foldersId = `fanGroupFolders_${currentAccountId || 'main'}_${groupId}`;
      const foldersData = await xDb.xAccountProfiles.get(foldersId);
      const folders = foldersData?.data || [];

      // 加载文件
      const filesId = `fanGroupFiles_${currentAccountId || 'main'}_${groupId}`;
      const filesData = await xDb.xAccountProfiles.get(filesId);
      const allFiles = filesData?.data || [];

      let filesToShow = [];
      let foldersToShow = [];

      if (currentFanGroupFolder) {
        // 当前在某个文件夹内，显示该文件夹的文件
        filesToShow = allFiles.filter(f => f.folderId === currentFanGroupFolder.id);
        backBtn.style.display = 'flex';
        headerTitle.textContent = currentFanGroupFolder.name;
      } else {
        // 显示所有文件夹和未分类文件
        foldersToShow = folders;
        filesToShow = allFiles.filter(f => !f.folderId);
        backBtn.style.display = 'none';
        headerTitle.textContent = '群文件';
      }

      // 清空容器
      container.innerHTML = '';

      // 渲染文件夹
      foldersToShow.forEach(folder => {
        container.appendChild(createFolderCard(folder, allFiles));
      });

      // 渲染文件
      filesToShow.forEach(file => {
        container.appendChild(createFileCard(file));
      });

      // 如果没有内容，显示空状态
      if (foldersToShow.length === 0 && filesToShow.length === 0) {
        container.innerHTML = `
 <div style="width: 100%; text-align: center; color:var(--x-text-secondary); font-size: 13px; padding: 30px 16px; grid-column: 1 / -1;">
 <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" style="width: 28px; height: 28px; fill: none; stroke: var(--x-text-secondary); stroke-width: 1.5; stroke-linecap: round; stroke-linejoin: round; margin: 0 auto 12px; display: block; opacity: 0.6;">
 <path d="M5 4h4l3 3h7a2 2 0 0 1 2 2v8a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2v-11a2 2 0 0 1 2 -2" />
 ${currentFanGroupFolder ? '<path d="M9 13h6" />' : ''}
 </svg>
 ${currentFanGroupFolder ? '文件夹为空' : '暂无文件，点击下方按钮创建文件夹或上传文件'}
 </div>
 `;
      }

      // 显示/隐藏批量管理按钮
      const batchBtn = document.getElementById('fangroup-files-batch-btn');
      if (batchBtn) {
        // 只有在有文件时才显示批量管理按钮
        if (filesToShow.length > 0 && !isBatchMode) {
          batchBtn.style.display = 'flex';
        } else {
          batchBtn.style.display = 'none';
        }
      }

      console.log(`✅ [群文件] 已加载 ${foldersToShow.length} 个文件夹，${filesToShow.length} 个文件`);
    } catch (error) {
      console.error('❌ [群文件] 加载失败:', error);
      showXToast('加载失败', 'error');
    }
  }

  // 创建文件夹卡片 - 精确仿照第三张参考图片的立体效果
  function createFolderCard(folder, allFiles) {
    const filesInFolder = allFiles.filter(f => f.folderId === folder.id);
    const fileCount = filesInFolder.length;

    const card = document.createElement('div');
    card.style.cssText = `
 position: relative;
 width: 100%;
 cursor: pointer;
 transition: transform 0.2s ease, filter 0.2s ease, box-shadow 0.2s ease;
 margin-bottom: 6px;
 `;

    // 完全重新设计的文件夹，严格参照第三张图片
    card.innerHTML = `
 <div style="
 position: relative;
 padding-bottom: 100%;
 width: 100%;
 ">
 <div style="
 position: absolute;
 top: 0;
 left: 0;
 right: 0;
 bottom: 0;
 ">
 <!-- 文件夹整体容器 -->
 <div style="
 position: relative;
 width: 100%;
 height: 100%;
 ">
 <!-- 主文件夹 -->
 <div style="
 position: absolute;
 top: 20%;
 left: 0;
 width: 100%;
 height: 80%;
 background: #222222;
 border-radius: 8px;
 box-shadow: 0 4px 10px rgba(0,0,0,0.25);
 z-index: 1;
 ">
 <!-- 文件夹内部纹理 -->
 <div style="
 position: absolute;
 top: 0;
 left: 0;
 width: 100%;
 height: 100%;
 border-radius: 8px;
 background: linear-gradient(180deg, rgba(255,255,255,0.05) 0%, rgba(255,255,255,0) 100%);
 opacity: 0.5;
 "></div>

 <!-- 文件夹图标 -->
 <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" style="
 position: absolute;
 left: 50%;
 top: 50%;
 transform: translate(-50%, -50%);
 width: 22px;
 height: 22px;
 fill: none;
 stroke: rgba(255,255,255,0.5);
 stroke-width: 1.5;
 stroke-linecap: round;
 stroke-linejoin: round;
 ">
 <path d="M5 4h4l3 3h7a2 2 0 0 1 2 2v8a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2v-11a2 2 0 0 1 2 -2" />
 </svg>
 </div>

 <!-- 堆叠文档1 - 最下层 -->
 <div style="
 position: absolute;
 top: 10%;
 left: 8%;
 width: 84%;
 height: 25%;
 background: #fafafa;
 border-radius: 4px 4px 0 0;
 transform: rotate(-3deg);
 z-index: 2;
 box-shadow: 0 2px 6px rgba(0,0,0,0.1);
 overflow: hidden;
 ">
 <!-- 文档内容线条 -->
 <div style="
 position: absolute;
 top: 30%;
 left: 10%;
 width: 80%;
 height: 2px;
 background-color: rgba(0,0,0,0.06);
 "></div>
 <div style="
 position: absolute;
 top: 50%;
 left: 10%;
 width: 60%;
 height: 2px;
 background-color: rgba(0,0,0,0.06);
 "></div>
 <div style="
 position: absolute;
 top: 70%;
 left: 10%;
 width: 70%;
 height: 2px;
 background-color: rgba(0,0,0,0.06);
 "></div>
 </div>

 <!-- 堆叠文档2 - 中层 -->
 <div style="
 position: absolute;
 top: 5%;
 left: 10%;
 width: 80%;
 height: 25%;
 background: #f5f5f5;
 border-radius: 4px 4px 0 0;
 z-index: 3;
 box-shadow: 0 1px 3px rgba(0,0,0,0.1);
 overflow: hidden;
 ">
 <!-- 文档内容线条 -->
 <div style="
 position: absolute;
 top: 30%;
 left: 10%;
 width: 80%;
 height: 2px;
 background-color: rgba(0,0,0,0.06);
 "></div>
 <div style="
 position: absolute;
 top: 50%;
 left: 10%;
 width: 70%;
 height: 2px;
 background-color: rgba(0,0,0,0.06);
 "></div>
 <div style="
 position: absolute;
 top: 70%;
 left: 10%;
 width: 60%;
 height: 2px;
 background-color: rgba(0,0,0,0.06);
 "></div>
 </div>

 <!-- 堆叠文档3 - 顶层 -->
 <div style="
 position: absolute;
 top: 2%;
 left: 13%;
 width: 74%;
 height: 25%;
 background: white;
 border-radius: 4px 4px 0 0;
 transform: rotate(2deg);
 z-index: 4;
 box-shadow: 0 1px 4px rgba(0,0,0,0.1);
 overflow: hidden;
 ">
 <!-- 文档内容线条 -->
 <div style="
 position: absolute;
 top: 30%;
 left: 10%;
 width: 75%;
 height: 2px;
 background-color: rgba(0,0,0,0.06);
 "></div>
 <div style="
 position: absolute;
 top: 50%;
 left: 10%;
 width: 55%;
 height: 2px;
 background-color: rgba(0,0,0,0.06);
 "></div>
 <div style="
 position: absolute;
 top: 70%;
 left: 10%;
 width: 65%;
 height: 2px;
 background-color: rgba(0,0,0,0.06);
 "></div>
 </div>

 <!-- 删除按钮 -->
 <div onclick="deleteFanGroupFolder('${folder.id}'); event.stopPropagation();" style="
 position: absolute;
 top: 0;
 right: 0;
 width: 18px;
 height: 18px;
 border-radius: 50%;
 background-color: rgba(0,0,0,0.4);
 display: flex;
 align-items: center;
 justify-content: center;
 cursor: pointer;
 opacity: 0;
 transition: opacity 0.2s, background-color 0.2s;
 z-index: 5;
 " onmouseover="this.style.backgroundColor='rgba(200,50,50,0.9)'; this.style.opacity='1';"
 onmouseout="this.style.backgroundColor='rgba(0,0,0,0.4)'; this.style.opacity='0';">
 <svg viewBox="0 0 24 24" style="width: 10px; height: 10px; fill: white;">
 <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
 </svg>
 </div>
 </div>
 </div>
 </div>

 <!-- 文件夹名称 -->
 <div style="
 text-align: center;
 margin-top: 2px;
 padding: 0 2px;
 ">
 <div style="
 color: var(--x-text-primary);
 font-size: 11px;
 font-weight: 500;
 overflow: hidden;
 text-overflow: ellipsis;
 white-space: nowrap;
 ">${folder.name}</div>
 <div style="
 color: var(--x-text-secondary);
 font-size: 9px;
 margin-top: 1px;
 ">${fileCount}个文件</div>
 </div>
 `;

    // 精细的hover效果
    card.onmouseenter = () => {
      card.style.transform = 'translateY(-5px)';
      card.style.filter = 'brightness(1.1)';
      card.style.boxShadow = '0 5px 15px rgba(0,0,0,0.2)';
    };
    card.onmouseleave = () => {
      card.style.transform = 'translateY(0)';
      card.style.filter = 'brightness(1)';
      card.style.boxShadow = 'none';
    };

    // 点击打开文件夹
    card.onclick = () => openFolder(folder);

    return card;
  }

  // 创建文件卡片 - 与文件夹风格统一
  function createFileCard(file) {
    const card = document.createElement('div');
    card.style.cssText = `
 position: relative;
 width: 100%;
 cursor: pointer;
 transition: transform 0.2s ease, filter 0.2s ease, box-shadow 0.2s ease;
 margin-bottom: 6px;
 `;

    // 获取文件类型图标
    const fileIconSvg = getFileIcon(file.type);

    // 文件类型对应的底色 - 使用更柔和的颜色
    const bgColors = {
      text: '#2b303b',
      image: '#2e3440',
      video: '#262b36',
      link: '#272c36',
      default: '#252933',
    };

    const bgColor = bgColors[file.type] || bgColors.default;

    // 复选框 HTML (批量模式下显示) - 更小更紧凑
    const checkboxHtml = isBatchMode
      ? `
 <div id="file-checkbox-${file.id}" onclick="toggleFileSelection('${file.id}'); event.stopPropagation();" style="
 position: absolute;
 top: 6px;
 left: 6px;
 width: 16px;
 height: 16px;
 border-radius: 3px;
 border: 1px solid rgba(255,255,255,0.7);
 background-color: transparent;
 display: flex;
 align-items: center;
 justify-content: center;
 z-index: 10;
 transition: all 0.2s;
 "></div>
 `
      : '';

    card.innerHTML = `
 <div style="
 position: relative;
 padding-bottom: 100%;
 width: 100%;
 ">
 <div style="
 position: absolute;
 top: 0;
 left: 0;
 right: 0;
 bottom: 0;
 ">
 <!-- 文件卡片主体 -->
 <div style="
 position: relative;
 width: 100%;
 height: 100%;
 border-radius: 8px;
 background-color: ${bgColor};
 box-shadow: 0 2px 6px rgba(0,0,0,0.15);
 overflow: hidden;
 ">
 <!-- 背景纹理效果 -->
 <div style="
 position: absolute;
 top: 0;
 left: 0;
 width: 100%;
 height: 100%;
 background: linear-gradient(145deg, rgba(255,255,255,0.03) 0%, rgba(255,255,255,0) 70%);
 "></div>

 <!-- 文件类型角标 -->
 <div style="
 position: absolute;
 top: 0;
 right: 0;
 width: 0;
 height: 0;
 border-style: solid;
 border-width: 0 20px 20px 0;
 border-color: transparent rgba(255,255,255,0.1) transparent transparent;
 "></div>

 <!-- 文件图标 -->
 <div style="
 position: absolute;
 left: 50%;
 top: 50%;
 transform: translate(-50%, -50%);
 width: 34%;
 height: 34%;
 display: flex;
 align-items: center;
 justify-content: center;
 opacity: 0.85;
 ">
 ${fileIconSvg.replace('currentColor', 'rgba(255,255,255,0.7)')}
 </div>

 ${checkboxHtml}

 <!-- 删除按钮 - 非批量模式下显示 -->
 ${
   !isBatchMode
     ? `
 <div onclick="deleteFanGroupFile('${file.id}'); event.stopPropagation();" style="
 position: absolute;
 top: 4px;
 right: 4px;
 width: 18px;
 height: 18px;
 border-radius: 50%;
 background-color: rgba(0,0,0,0.3);
 display: flex;
 align-items: center;
 justify-content: center;
 cursor: pointer;
 opacity: 0;
 transition: opacity 0.2s, background-color 0.2s;
 z-index: 2;
 " onmouseover="this.style.backgroundColor='rgba(200,50,50,0.9)'; this.style.opacity='1';"
 onmouseout="this.style.backgroundColor='rgba(0,0,0,0.3)'; this.style.opacity='0';">
 <svg viewBox="0 0 24 24" style="width: 10px; height: 10px; fill: white;">
 <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
 </svg>
 </div>
 `
     : ''
 }
 </div>
 </div>
 </div>

 <!-- 文件名称 -->
 <div style="
 text-align: center;
 margin-top: 2px;
 padding: 0 2px;
 ">
 <div style="
 color: var(--x-text-primary);
 font-size: 11px;
 font-weight: 500;
 overflow: hidden;
 text-overflow: ellipsis;
 white-space: nowrap;
 ">${file.name}</div>
 <div style="
 color: var(--x-text-secondary);
 font-size: 9px;
 margin-top: 1px;
 ">${file.uploadedBy}</div>
 </div>
 `;

    // 与文件夹一致的hover效果
    card.onmouseenter = () => {
      card.style.transform = 'translateY(-5px)';
      card.style.filter = 'brightness(1.1)';
      card.style.boxShadow = '0 5px 15px rgba(0,0,0,0.2)';
    };
    card.onmouseleave = () => {
      card.style.transform = 'translateY(0)';
      card.style.filter = 'brightness(1)';
      card.style.boxShadow = 'none';
    };

    // 批量模式：点击选择，非批量模式：打开详情
    card.onclick = () => {
      if (isBatchMode) {
        toggleFileSelection(file.id);
      } else {
        openFileDetail(file);
      }
    };

    // 如果文件已被选中，更新复选框状态
    if (isBatchMode && selectedFiles.has(file.id)) {
      setTimeout(() => {
        toggleFileSelection(file.id);
      }, 10);
    }

    return card;
  }

  // 获取文件图标 (SVG图标，不使用emoji)
  function getFileIcon(type) {
    const icons = {
      text: `<svg viewBox="0 0 24 24" style="fill: none; stroke: currentColor; stroke-width: 2; stroke-linecap: round; stroke-linejoin: round">
 <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
 <polyline points="14 2 14 8 20 8"></polyline>
 <line x1="16" y1="13" x2="8" y2="13"></line>
 <line x1="16" y1="17" x2="8" y2="17"></line>
 <polyline points="10 9 9 9 8 9"></polyline>
 </svg>`,
      image: `<svg viewBox="0 0 24 24" style="fill: none; stroke: currentColor; stroke-width: 2; stroke-linecap: round; stroke-linejoin: round">
 <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
 <circle cx="8.5" cy="8.5" r="1.5"></circle>
 <polyline points="21 15 16 10 5 21"></polyline>
 </svg>`,
      video: `<svg viewBox="0 0 24 24" style="fill: none; stroke: currentColor; stroke-width: 2; stroke-linecap: round; stroke-linejoin: round">
 <rect x="2" y="2" width="20" height="20" rx="2.18" ry="2.18"></rect>
 <line x1="7" y1="2" x2="7" y2="22"></line>
 <line x1="17" y1="2" x2="17" y2="22"></line>
 <line x1="2" y1="12" x2="22" y2="12"></line>
 <line x1="2" y1="7" x2="7" y2="7"></line>
 <line x1="2" y1="17" x2="7" y2="17"></line>
 <line x1="17" y1="17" x2="22" y2="17"></line>
 <line x1="17" y1="7" x2="22" y2="7"></line>
 </svg>`,
      link: `<svg viewBox="0 0 24 24" style="fill: none; stroke: currentColor; stroke-width: 2; stroke-linecap: round; stroke-linejoin: round">
 <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path>
 <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path>
 </svg>`,
      default: `<svg viewBox="0 0 24 24" style="fill: none; stroke: currentColor; stroke-width: 2; stroke-linecap: round; stroke-linejoin: round">
 <path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path>
 <polyline points="13 2 13 9 20 9"></polyline>
 </svg>`,
    };
    return icons[type] || icons.default;
  }

  // 打开文件夹
  function openFolder(folder) {
    console.log('📂 [群文件] 打开文件夹:', folder.name);
    currentFanGroupFolder = folder;
    loadFanGroupFiles();
  }

  // 返回文件列表
  window.backToFilesList = function () {
    console.log('📁 [群文件] 返回文件列表');
    currentFanGroupFolder = null;
    loadFanGroupFiles();
  };

  // 动态创建文件夹对话框
  function createFolderDialog() {
    // 如果已存在则先删除
    const existingDialog = document.getElementById('create-folder-dialog');
    if (existingDialog) {
      existingDialog.remove();
    }

    const dialog = document.createElement('div');
    dialog.id = 'create-folder-dialog';
    dialog.style.cssText = `
position: fixed;
top: 0;
left: 0;
width: 100vw;
height: 100vh;
background-color: rgba(0, 0, 0, 0.7);
display: flex;
align-items: center;
justify-content: center;
z-index: 36;
backdrop-filter: blur(4px);
`;

    dialog.innerHTML = `
<div style="background-color:var(--x-bg-primary); border-radius: 16px; width: 90%; max-width: 450px; box-shadow: 0 12px 40px rgba(0,0,0,0.4); overflow: hidden;" onclick="event.stopPropagation()">
<div style="padding: 20px 24px; border-bottom: 1px solid var(--x-border-color);">
<h3 style="margin: 0; color:var(--x-text-primary); font-size: 20px; font-weight: 700;">新建文件夹</h3>
</div>
<div style="padding: 24px;">
<label style="display: block; font-size: 14px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 8px;">
文件夹名称 <span style="color: #ef4444;">*</span>
</label>
<input type="text" id="folder-name-input" placeholder="例如：学习资料、项目文档..." maxlength="50" style="width: 100%; padding: 12px; background-color:var(--x-bg-secondary); border: 2px solid var(--x-border-color); border-radius: 12px; color:var(--x-text-primary); font-size: 14px; outline: none; transition: border-color 0.2s;" onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='var(--x-border-color)'">
</div>
<div style="padding: 16px 24px; border-top: 1px solid var(--x-border-color); display: flex; gap: 12px; justify-content: flex-end;">
<button onclick="closeCreateFolderDialog()" style="background-color:var(--x-bg-secondary); color:var(--x-text-primary); border: none; border-radius: 20px; padding: 10px 20px; font-size: 14px; font-weight: 600; cursor: pointer;">取消</button>
<button onclick="saveFanGroupFolder()" style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 20px; padding: 10px 24px; font-size: 14px; font-weight: 700; cursor: pointer;">创建</button>
</div>
</div>
`;

    dialog.onclick = () => closeCreateFolderDialog();

    // 添加到x-social-screen容器内以确保主题样式正确应用
    const xSocialScreen = document.getElementById('x-social-screen');
    if (xSocialScreen) {
      xSocialScreen.appendChild(dialog);
    } else {
      document.body.appendChild(dialog);
    }
    return dialog;
  }

  // 打开创建文件夹对话框
  window.openCreateFolderDialog = function () {
    const dialog = createFolderDialog();
    const input = document.getElementById('folder-name-input');
    if (input) {
      input.value = '';
      setTimeout(() => input.focus(), 100);
    }
  };

  // 关闭创建文件夹对话框
  window.closeCreateFolderDialog = function () {
    const dialog = document.getElementById('create-folder-dialog');
    if (dialog) {
      dialog.remove();
    }
  };

  // 保存文件夹
  window.saveFanGroupFolder = async function () {
    const input = document.getElementById('folder-name-input');
    const name = input?.value?.trim();

    if (!name) {
      showXToast('请输入文件夹名称', 'warning');
      return;
    }

    const groupId = currentMessageConversation.id;

    try {
      const xDb = getXDB();
      const foldersId = `fanGroupFolders_${currentAccountId || 'main'}_${groupId}`;

      const savedData = await xDb.xAccountProfiles.get(foldersId);
      const folders = savedData?.data || [];

      const newFolder = {
        id: `folder_${Date.now()}`,
        name: name,
        createdAt: new Date().toISOString(),
      };

      folders.push(newFolder);

      await xDb.xAccountProfiles.put({
        handle: foldersId,
        name: 'fanGroupFolders',
        data: folders,
        updatedAt: new Date().toISOString(),
      });

      console.log('✅ [群文件] 文件夹已创建:', name);
      closeCreateFolderDialog();
      await loadFanGroupFiles();
      showXToast('文件夹创建成功', 'success');
    } catch (error) {
      console.error('❌ [群文件] 创建失败:', error);
      showXToast('创建失败', 'error');
    }
  };

  // 动态创建上传文件对话框
  async function createUploadFileDialog() {
    // 如果已存在则先删除
    const existingDialog = document.getElementById('upload-file-dialog');
    if (existingDialog) {
      existingDialog.remove();
    }

    const dialog = document.createElement('div');
    dialog.id = 'upload-file-dialog';
    dialog.style.cssText = `
position: fixed;
top: 0;
left: 0;
width: 100vw;
height: 100vh;
background-color: rgba(0, 0, 0, 0.7);
display: flex;
align-items: center;
justify-content: center;
z-index: 36;
backdrop-filter: blur(4px);
`;

    dialog.innerHTML = `
<div style="background-color:var(--x-bg-primary); border-radius: 16px; width: 90%; max-width: 550px; max-height: 85vh; overflow-y: auto; box-shadow: 0 12px 40px rgba(0,0,0,0.4);" onclick="event.stopPropagation()">
<div style="padding: 20px 24px; border-bottom: 1px solid var(--x-border-color);">
<h3 style="margin: 0; color:var(--x-text-primary); font-size: 20px; font-weight: 700;">上传文件</h3>
</div>
<div style="padding: 24px;">
<div style="margin-bottom: 20px;">
<label style="display: block; font-size: 14px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 8px;">
文件名称 <span style="color: #ef4444;">*</span>
</label>
<input type="text" id="file-name-input" placeholder="例如：项目文档.pdf、教程视频.mp4..." maxlength="100" style="width: 100%; padding: 12px; background-color:var(--x-bg-secondary); border: 2px solid var(--x-border-color); border-radius: 12px; color:var(--x-text-primary); font-size: 14px; outline: none; transition: border-color 0.2s;" onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='var(--x-border-color)'">
<div style="font-size: 12px; color:var(--x-text-secondary); margin-top: 4px;">提示：文件名需包含后缀（如 .pdf、.mp4、.jpg等）</div>
</div>
<div style="margin-bottom: 20px;">
<label style="display: block; font-size: 14px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 8px;">
文件类型 <span style="color: #ef4444;">*</span>
</label>
<select id="file-type-select" style="width: 100%; padding: 12px; background-color:var(--x-bg-secondary); border: 2px solid var(--x-border-color); border-radius: 12px; color:var(--x-text-primary); font-size: 14px; outline: none; cursor: pointer;" onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='var(--x-border-color)'">
<option value="text">文字/文档</option>
<option value="image">图片</option>
<option value="video">视频</option>
<option value="link">链接</option>
</select>
</div>
<div style="margin-bottom: 20px;">
<label style="display: block; font-size: 14px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 8px;">
文件内容/链接 <span style="color: #ef4444;">*</span>
</label>
<textarea id="file-content-input" placeholder="输入文件内容、描述或链接地址..." maxlength="5000" style="width: 100%; min-height: 150px; padding: 12px; background-color:var(--x-bg-secondary); border: 2px solid var(--x-border-color); border-radius: 12px; color:var(--x-text-primary); font-size: 14px; outline: none; resize: vertical; font-family: inherit; line-height: 1.6; transition: border-color 0.2s;" onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='var(--x-border-color)'" oninput="updateFileContentCounter()"></textarea>
<div style="text-align: right; margin-top: 6px;">
<span id="file-content-counter" style="font-size: 12px; color:var(--x-text-secondary);">0 / 5000</span>
</div>
</div>
<div id="file-folder-select-container" style="margin-bottom: 20px; display: none;">
<label style="display: block; font-size: 14px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 8px;">
选择文件夹（可选）
</label>
<select id="file-folder-select" style="width: 100%; padding: 12px; background-color:var(--x-bg-secondary); border: 2px solid var(--x-border-color); border-radius: 12px; color:var(--x-text-primary); font-size: 14px; outline: none; cursor: pointer;">
<option value="">不放入文件夹（散落显示）</option>
</select>
</div>
</div>
<div style="padding: 16px 24px; border-top: 1px solid var(--x-border-color); display: flex; gap: 12px; justify-content: flex-end;">
<button onclick="closeUploadFileDialog()" style="background-color:var(--x-bg-secondary); color:var(--x-text-primary); border: none; border-radius: 20px; padding: 10px 20px; font-size: 14px; font-weight: 600; cursor: pointer;">取消</button>
<button onclick="saveFanGroupFile()" style="background-color: var(--x-accent); color: #fff; border: none; border-radius: 20px; padding: 10px 24px; font-size: 14px; font-weight: 700; cursor: pointer;">上传</button>
</div>
</div>
`;

    dialog.onclick = () => closeUploadFileDialog();

    // 添加到x-social-screen容器内以确保主题样式正确应用
    const xSocialScreen = document.getElementById('x-social-screen');
    if (xSocialScreen) {
      xSocialScreen.appendChild(dialog);
    } else {
      document.body.appendChild(dialog);
    }
    return dialog;
  }

  // 打开上传文件对话框
  window.openUploadFileDialog = async function () {
    const dialog = await createUploadFileDialog();
    const nameInput = document.getElementById('file-name-input');
    const typeSelect = document.getElementById('file-type-select');
    const contentInput = document.getElementById('file-content-input');
    const folderSelectContainer = document.getElementById('file-folder-select-container');
    const folderSelect = document.getElementById('file-folder-select');

    // 重置输入
    if (nameInput) nameInput.value = '';
    if (typeSelect) typeSelect.value = 'text';
    if (contentInput) contentInput.value = '';

    // 加载文件夹选项
    const groupId = currentMessageConversation.id;
    const xDb = getXDB();
    const foldersId = `fanGroupFolders_${currentAccountId || 'main'}_${groupId}`;
    const foldersData = await xDb.xAccountProfiles.get(foldersId);
    const folders = foldersData?.data || [];

    if (folderSelect) {
      folderSelect.innerHTML = '<option value="">不放入文件夹（散落显示）</option>';
      folders.forEach(folder => {
        const option = document.createElement('option');
        option.value = folder.id;
        option.textContent = folder.name;
        if (currentFanGroupFolder && currentFanGroupFolder.id === folder.id) {
          option.selected = true;
        }
        folderSelect.appendChild(option);
      });
    }

    if (folderSelectContainer && folders.length > 0) {
      folderSelectContainer.style.display = 'block';
    }

    setTimeout(() => nameInput?.focus(), 100);
  };

  // 关闭上传文件对话框
  window.closeUploadFileDialog = function () {
    const dialog = document.getElementById('upload-file-dialog');
    if (dialog) {
      dialog.remove();
    }
  };

  // 更新文件内容计数器
  window.updateFileContentCounter = function () {
    const input = document.getElementById('file-content-input');
    const counter = document.getElementById('file-content-counter');
    if (input && counter) {
      counter.textContent = `${input.value.length} / 5000`;
    }
  };

  // 保存群文件
  window.saveFanGroupFile = async function () {
    const nameInput = document.getElementById('file-name-input');
    const typeSelect = document.getElementById('file-type-select');
    const contentInput = document.getElementById('file-content-input');
    const folderSelect = document.getElementById('file-folder-select');

    const name = nameInput?.value?.trim();
    const type = typeSelect?.value;
    const content = contentInput?.value?.trim();
    const folderId = folderSelect?.value || null;

    if (!name) {
      showXToast('请输入文件名称', 'warning');
      return;
    }
    if (!content) {
      showXToast('请输入文件内容', 'warning');
      return;
    }

    const groupId = currentMessageConversation.id;
    const uploadedBy = window.userProfileData?.name || '用户';

    try {
      const xDb = getXDB();
      const filesId = `fanGroupFiles_${currentAccountId || 'main'}_${groupId}`;

      const savedData = await xDb.xAccountProfiles.get(filesId);
      const files = savedData?.data || [];

      const newFile = {
        id: `file_${Date.now()}`,
        name: name,
        type: type,
        content: content,
        folderId: folderId,
        uploadedBy: uploadedBy,
        uploadedAt: new Date().toISOString(),
      };

      files.push(newFile);

      await xDb.xAccountProfiles.put({
        handle: filesId,
        name: 'fanGroupFiles',
        data: files,
        updatedAt: new Date().toISOString(),
      });

      console.log('✅ [群文件] 文件已上传:', name);

      // 在粉丝群聊天中添加文件消息（不是系统通知）
      await addFileMessageToConversation(groupId, newFile);

      closeUploadFileDialog();
      await loadFanGroupFiles();
      showXToast('文件上传成功', 'success');
    } catch (error) {
      console.error('❌ [群文件] 上传失败:', error);
      showXToast('上传失败', 'error');
    }
  };

  // 将文件消息添加到对话中
  async function addFileMessageToConversation(groupId, file) {
    try {
      const xDb = getXDB();
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${groupId}`;
      const savedConversation = await xDb.xAccountProfiles.get(conversationId);

      if (savedConversation && savedConversation.data && savedConversation.data.messages) {
        const fileMessage = {
          type: 'groupFile',
          file: {
            id: file.id,
            name: file.name,
            type: file.type,
            content: file.content,
            uploadedBy: file.uploadedBy,
            uploadedAt: file.uploadedAt,
            folderId: file.folderId || null,
          },
          timestamp: new Date().toISOString(),
          time: '刚刚',
          isOwn: true, // 用户上传
        };

        savedConversation.data.messages.push(fileMessage);
        await xDb.xAccountProfiles.put(savedConversation);

        console.log('[群文件] 文件消息已添加到对话');

        // 更新粉丝群的文件列表数据
        try {
          // 查找messagesList中的粉丝群数据
          const dataId = `messagesList_${currentAccountId || 'main'}`;
          const messagesData = await xDb.xAccountProfiles.get(dataId);
          if (messagesData && messagesData.data) {
            const messagesList = messagesData.data;
            const fanGroupIndex = messagesList.findIndex(msg => msg.id === groupId);

            if (fanGroupIndex !== -1) {
              // 获取最新的文件列表
              const files = await getFanGroupFiles(groupId);

              // 更新群数据中的文件列表
              messagesList[fanGroupIndex].files = files;

              // 保存回数据库
              await xDb.xAccountProfiles.put({
                ...messagesData,
                data: messagesList,
              });

              console.log('[群文件] 已更新粉丝群文件数据，文件总数:', files.length);
            }
          }
        } catch (err) {
          console.error('[群文件] 更新粉丝群文件列表失败:', err);
        }

        // 如果当前正在查看该粉丝群聊天，刷新消息显示
        if (currentMessageConversation && currentMessageConversation.id === groupId) {
          const contentContainer = document.getElementById('message-detail-content');
          if (contentContainer) {
            const msgEl = renderMessageItem(fileMessage, false, savedConversation.data.messages.length - 1, true);
            contentContainer.appendChild(msgEl);
            // 滚动到底部
            const scrollableContainer = document.getElementById('message-detail-scrollable');
            if (scrollableContainer) {
              scrollableContainer.scrollTop = scrollableContainer.scrollHeight;
            }
          }
        }
      }
    } catch (error) {
      console.error('[群文件] 添加文件消息失败:', error);
    }
  }

  // 动态创建文件详情模态窗口
  function createFileDetailModal() {
    // 如果已存在则先删除
    const existingModal = document.getElementById('file-detail-modal');
    if (existingModal) {
      existingModal.remove();
    }

    const modal = document.createElement('div');
    modal.id = 'file-detail-modal';
    modal.style.cssText = `
position: fixed;
top: 0;
left: 0;
width: 100vw;
height: 100vh;
background-color: rgba(0, 0, 0, 0.7);
display: flex;
align-items: center;
justify-content: center;
z-index: 37;
backdrop-filter: blur(4px);
`;

    modal.innerHTML = `
<div style="background-color:var(--x-bg-primary); border-radius: 16px; width: 90%; max-width: 600px; max-height: 85vh; overflow-y: auto; box-shadow: 0 12px 40px rgba(0,0,0,0.4);" onclick="event.stopPropagation()">
<div style="padding: 20px 24px; border-bottom: 1px solid var(--x-border-color); display: flex; align-items: center; justify-content: space-between;">
<h3 style="margin: 0; color:var(--x-text-primary); font-size: 20px; font-weight: 700;" id="file-detail-title">文件详情</h3>
<button onclick="closeFileDetailModal()" style="background: transparent; border: none; color:var(--x-text-secondary); cursor: pointer; padding: 8px; border-radius: 50%; transition: background-color 0.2s;" onmouseover="this.style.backgroundColor='var(--x-bg-hover)'" onmouseout="this.style.backgroundColor='transparent'">
<svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: currentColor;">
<g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
</svg>
</button>
</div>
<div id="file-detail-content" style="padding: 24px;">
</div>
</div>
`;

    modal.onclick = () => closeFileDetailModal();

    // 添加到x-social-screen容器内以确保主题样式正确应用
    const xSocialScreen = document.getElementById('x-social-screen');
    if (xSocialScreen) {
      xSocialScreen.appendChild(modal);
    } else {
      document.body.appendChild(modal);
    }
    return modal;
  }

  // 打开文件详情 - 重新设计
  function openFileDetail(file) {
    console.log('[群文件] 打开文件详情:', file.name);

    const modal = createFileDetailModal();
    const title = document.getElementById('file-detail-title');
    const content = document.getElementById('file-detail-content');

    if (!title || !content) return;

    title.textContent = file.name;

    // 获取适合详情页的SVG图标
    const fileIconSvg = getFileIcon(file.type);

    // 文件类型对应的颜色
    const typeColors = {
      text: '#3b4252',
      image: '#2e3440',
      video: '#434c5e',
      link: '#4c566a',
      default: '#3b4252',
    };

    const typeColor = typeColors[file.type] || typeColors.default;

    // 格式化上传日期
    const uploadDate = new Date(file.uploadedAt);
    const formattedDate = `${uploadDate.getFullYear()}.${String(uploadDate.getMonth() + 1).padStart(2, '0')}.${String(
      uploadDate.getDate(),
    ).padStart(2, '0')} ${String(uploadDate.getHours()).padStart(2, '0')}:${String(uploadDate.getMinutes()).padStart(
      2,
      '0',
    )}`;

    content.innerHTML = `
 <div style="display: flex; flex-direction: column; gap: 14px;">
 <!-- 文件信息头部 -->
 <div style="display: flex; align-items: flex-start; gap: 12px; padding-bottom: 12px; border-bottom: 1px solid var(--x-border-color);">
 <!-- 文件图标 -->
 <div style="
 width: 46px;
 height: 46px;
 border-radius: 6px;
 background-color: ${typeColor};
 display: flex;
 align-items: center;
 justify-content: center;
 flex-shrink: 0;
 box-shadow: 0 3px 6px rgba(0,0,0,0.12);
 ">
 <div style="width: 22px; height: 22px; color: #fff;">
 ${fileIconSvg.replace('currentColor', '#fff')}
 </div>
 </div>

 <!-- 文件信息 -->
 <div style="flex: 1; min-width: 0;">
 <div style="color:var(--x-text-primary); font-size: 15px; font-weight: 600; margin-bottom: 3px; line-height: 1.3;">
 ${file.name}
 </div>
 <div style="color:var(--x-text-secondary); font-size: 12px; margin-bottom: 4px;">
 上传者：${file.uploadedBy}
 </div>
 <div style="color:var(--x-text-secondary); font-size: 11px; display: flex; align-items: center; gap: 3px;">
 <svg viewBox="0 0 24 24" style="width: 11px; height: 11px; fill: var(--x-text-secondary);">
 <path d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm.5-13H11v6l5.2 3.2.8-1.3-4.5-2.7V7z"></path>
 </svg>
 <span>${formattedDate}</span>
 </div>
 </div>
 </div>

 <!-- 文件内容 -->
 <div>
 <div style="
 display: flex;
 justify-content: space-between;
 align-items: center;
 margin-bottom: 8px;
 ">
 <div style="color:var(--x-text-primary); font-size: 13px; font-weight: 600;">文件内容</div>
 <div style="
 color: var(--x-text-secondary);
 font-size: 11px;
 padding: 1px 6px;
 border: 1px solid var(--x-border-color);
 border-radius: 10px;
 ">
 ${
   file.type === 'text'
     ? '文本文档'
     : file.type === 'image'
     ? '图片文件'
     : file.type === 'video'
     ? '视频文件'
     : file.type === 'link'
     ? '链接'
     : '文件'
 }
 </div>
 </div>

 <div style="
 padding: 12px;
 background-color:var(--x-bg-secondary);
 border-radius: 6px;
 color:var(--x-text-primary);
 font-size: 13px;
 line-height: 1.5;
 max-height: 250px;
 overflow-y: auto;
 white-space: pre-wrap;
 word-wrap: break-word;
 border: 1px solid var(--x-border-color);
 ">${file.content}</div>
 </div>

 <!-- 操作按钮 -->
 <div style="display: flex; justify-content: flex-end; gap: 8px; margin-top: 2px;">
 <button onclick="deleteFanGroupFile('${file.id}'); closeFileDetailModal();" style="
 padding: 6px 12px;
 border-radius: 12px;
 border: none;
 background-color: rgba(0,0,0,0.12);
 color: #ff5252;
 font-size: 12px;
 font-weight: 500;
 cursor: pointer;
 transition: all 0.2s;
 " onmouseover="this.style.backgroundColor='rgba(0,0,0,0.2)'"
 onmouseout="this.style.backgroundColor='rgba(0,0,0,0.12)'">
 删除文件
 </button>
 </div>
 </div>
 `;

    // 模态窗口已动态创建并显示
  }

  // 关闭文件详情弹窗
  window.closeFileDetailModal = function () {
    const modal = document.getElementById('file-detail-modal');
    if (modal) {
      modal.remove();
    }
  };

  // 删除文件夹
  window.deleteFanGroupFolder = async function (folderId) {
    if (!confirm('确定要删除这个文件夹吗？文件夹内的文件将会散落显示。')) {
      return;
    }

    const groupId = currentMessageConversation.id;

    try {
      const xDb = getXDB();
      const foldersId = `fanGroupFolders_${currentAccountId || 'main'}_${groupId}`;
      const filesId = `fanGroupFiles_${currentAccountId || 'main'}_${groupId}`;

      // 删除文件夹
      const foldersData = await xDb.xAccountProfiles.get(foldersId);
      let folders = foldersData?.data || [];
      folders = folders.filter(f => f.id !== folderId);

      await xDb.xAccountProfiles.put({
        handle: foldersId,
        name: 'fanGroupFolders',
        data: folders,
        updatedAt: new Date().toISOString(),
      });

      // 将文件夹内的文件设为未分类
      const filesData = await xDb.xAccountProfiles.get(filesId);
      let files = filesData?.data || [];
      files.forEach(file => {
        if (file.folderId === folderId) {
          file.folderId = null;
        }
      });

      await xDb.xAccountProfiles.put({
        handle: filesId,
        name: 'fanGroupFiles',
        data: files,
        updatedAt: new Date().toISOString(),
      });

      console.log('✅ [群文件] 文件夹已删除');
      await loadFanGroupFiles();
      showXToast('文件夹已删除', 'success');
    } catch (error) {
      console.error('❌ [群文件] 删除失败:', error);
      showXToast('删除失败', 'error');
    }
  };

  // 删除文件
  window.deleteFanGroupFile = async function (fileId) {
    if (!confirm('确定要删除这个文件吗？')) {
      return;
    }

    const groupId = currentMessageConversation.id;

    try {
      const xDb = getXDB();
      const filesId = `fanGroupFiles_${currentAccountId || 'main'}_${groupId}`;

      const savedData = await xDb.xAccountProfiles.get(filesId);
      let files = savedData?.data || [];
      files = files.filter(f => f.id !== fileId);

      await xDb.xAccountProfiles.put({
        handle: filesId,
        name: 'fanGroupFiles',
        data: files,
        updatedAt: new Date().toISOString(),
      });

      console.log('✅ [群文件] 文件已删除');
      await loadFanGroupFiles();
      showXToast('文件已删除', 'success');
    } catch (error) {
      console.error('❌ [群文件] 删除失败:', error);
      showXToast('删除失败', 'error');
    }
  };

  // 获取粉丝群文件
  async function getFanGroupFiles(groupId) {
    try {
      const xDb = getXDB();
      const filesId = `fanGroupFiles_${currentAccountId || 'main'}_${groupId}`;
      const foldersId = `fanGroupFolders_${currentAccountId || 'main'}_${groupId}`;

      // 获取所有文件
      const filesData = await xDb.xAccountProfiles.get(filesId);
      const files = filesData?.data || [];

      // 获取所有文件夹
      const foldersData = await xDb.xAccountProfiles.get(foldersId);
      const folders = foldersData?.data || [];

      // 给文件添加文件夹名称
      const filesWithFolderNames = files.map(file => {
        if (file.folderId) {
          const folder = folders.find(f => f.id === file.folderId);
          if (folder) {
            return {
              ...file,
              folderName: folder.name,
            };
          }
        }
        return {
          ...file,
          folderName: '未分类',
        };
      });

      return filesWithFolderNames;
    } catch (error) {
      console.error('[群文件] 获取文件列表失败:', error);
      return [];
    }
  }

  // 批量管理模式
  let isBatchMode = false;
  let selectedFiles = new Set();

  // 切换批量管理模式
  window.toggleBatchMode = function () {
    isBatchMode = !isBatchMode;
    selectedFiles.clear();

    // 更新按钮显示
    const batchBtn = document.getElementById('fangroup-files-batch-btn');
    const cancelBatchBtn = document.getElementById('fangroup-files-cancel-batch-btn');
    const deleteBatchBtn = document.getElementById('fangroup-files-delete-batch-btn');
    const createFolderBtn = document.getElementById('fangroup-files-create-folder-btn');
    const uploadBtn = document.getElementById('fangroup-files-upload-btn');

    if (isBatchMode) {
      // 进入批量模式
      if (batchBtn) batchBtn.style.display = 'none';
      if (cancelBatchBtn) {
        cancelBatchBtn.style.display = 'flex';
        cancelBatchBtn.style.backgroundColor = 'var(--x-bg-secondary)';
        cancelBatchBtn.style.color = 'var(--x-text-primary)';
      }
      if (deleteBatchBtn) {
        deleteBatchBtn.style.display = 'flex';
        deleteBatchBtn.textContent = '删除选中 (0)';
        deleteBatchBtn.style.backgroundColor = 'rgba(0,0,0,0.12)';
        deleteBatchBtn.style.color = '#ff5252';
      }
      if (createFolderBtn) createFolderBtn.style.display = 'none';
      if (uploadBtn) uploadBtn.style.display = 'none';
    } else {
      // 退出批量模式
      if (batchBtn) batchBtn.style.display = 'flex';
      if (cancelBatchBtn) cancelBatchBtn.style.display = 'none';
      if (deleteBatchBtn) deleteBatchBtn.style.display = 'none';
      if (createFolderBtn) createFolderBtn.style.display = 'flex';
      if (uploadBtn) uploadBtn.style.display = 'flex';
    }

    // 重新加载文件列表以更新显示
    loadFanGroupFiles();
  };

  // 切换文件选择
  function toggleFileSelection(fileId) {
    if (selectedFiles.has(fileId)) {
      selectedFiles.delete(fileId);
    } else {
      selectedFiles.add(fileId);
    }

    // 更新删除按钮文本
    const deleteBatchBtn = document.getElementById('fangroup-files-delete-batch-btn');
    if (deleteBatchBtn) {
      deleteBatchBtn.textContent = `删除选中 (${selectedFiles.size})`;
    }

    // 更新复选框状态
    const checkbox = document.getElementById(`file-checkbox-${fileId}`);
    if (checkbox) {
      if (selectedFiles.has(fileId)) {
        checkbox.style.backgroundColor = 'rgba(255,255,255,0.9)';
        checkbox.style.borderColor = 'rgba(255,255,255,0.9)';
        checkbox.innerHTML = `
 <svg viewBox="0 0 24 24" style="width: 10px; height: 10px; fill: #333;">
 <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"></path>
 </svg>
 `;
      } else {
        checkbox.style.backgroundColor = 'transparent';
        checkbox.style.borderColor = 'rgba(255,255,255,0.7)';
        checkbox.innerHTML = '';
      }
    }
  }

  // 批量删除文件
  window.batchDeleteFiles = async function () {
    if (selectedFiles.size === 0) {
      showXToast('请选择要删除的文件', 'warning');
      return;
    }

    if (!confirm(`确定要删除选中的 ${selectedFiles.size} 个文件吗？`)) {
      return;
    }

    const groupId = currentMessageConversation.id;

    try {
      const xDb = getXDB();
      const filesId = `fanGroupFiles_${currentAccountId || 'main'}_${groupId}`;

      const savedData = await xDb.xAccountProfiles.get(filesId);
      let files = savedData?.data || [];

      // 过滤掉选中的文件
      files = files.filter(f => !selectedFiles.has(f.id));

      await xDb.xAccountProfiles.put({
        handle: filesId,
        name: 'fanGroupFiles',
        data: files,
        updatedAt: new Date().toISOString(),
      });

      console.log(`✅ [群文件] 已批量删除 ${selectedFiles.size} 个文件`);
      showXToast(`已删除 ${selectedFiles.size} 个文件`, 'success');

      selectedFiles.clear();
      await loadFanGroupFiles();
    } catch (error) {
      console.error('❌ [群文件] 批量删除失败:', error);
      showXToast('批量删除失败', 'error');
    }
  };

  // 暴露粉丝群函数到全局
  window.createFanGroup = createFanGroup;
  window.openFanGroupSettings = openFanGroupSettings;
  window.closeFanGroupSettings = closeFanGroupSettings;
  window.updateFanGroupAvatarPreview = updateFanGroupAvatarPreview;
  window.saveFanGroupAvatar = saveFanGroupAvatar;
  window.saveFanGroupSettings = saveFanGroupSettings;
  window.toggleFanGroupAutoMessage = toggleFanGroupAutoMessage;
  window.updateFanGroupInterval = updateFanGroupInterval;
  window.handleMessageDetailAvatarClick = handleMessageDetailAvatarClick;
  window.openFanGroupShareModal = openFanGroupShareModal;
  window.closeFanGroupShareModal = closeFanGroupShareModal;
  window.shareFanGroupToContact = shareFanGroupToContact;
  window.shareFanGroupToPost = shareFanGroupToPost;
  window.openFanGroupApplicationsModal = openFanGroupApplicationsModal;
  window.generateFanGroupConversation = generateFanGroupConversation;
  window.checkAndTriggerFanGroupAutoChat = checkAndTriggerFanGroupAutoChat; // 触发粉丝群申请生成器
  async function triggerFanGroupApplicationGenerator(tweetData) {
    console.log('🎯 [粉丝群申请生成器] 开始生成申请', {
      tweetId: tweetData.id,
      fanGroupId: tweetData.quotedFanGroup.id,
      fanGroupName: tweetData.quotedFanGroup.name,
    });
    try {
      // 🔧 使用统一的API配置加载工具
      const { apiConfig, xSettings, xDb } = await APIUtils.loadConfigAndSettings();
      const { userPrompt, worldSetting, boundCharacters } = xSettings;
      // 3. 获取粉丝群详细信息
      const dataId = `messagesList_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(dataId);
      const messagesList = savedData?.data || [];
      const fanGroup = messagesList.find(msg => msg.id === tweetData.quotedFanGroup.id);
      if (!fanGroup) {
        showXToast('未找到粉丝群数据', 'error');
        return;
      }
      // 4. 构建用户资料信息
      const userXProfileInfo = StringBuilders.buildUserXProfileInfo(window.userProfileData); // 4.5. 读取用户最近的3条推文
      const userTweetsId = `userTweets_${currentAccountId || 'main'}`;
      const userTweetsData = await xDb.xUserTweets.get(userTweetsId);
      const recentUserTweets = userTweetsData?.tweets?.slice(0, 3) || [];
      console.log('📋 [粉丝群申请生成器] 用户完整资料:', userXProfileInfo);
      console.log('📋 [粉丝群申请生成器] 最近推文数量:', recentUserTweets.length); // Token计数器
      let tokenCount = 0; // 5. 构建基础系统提示词
      let systemPrompt = StringBuilders.buildBaseSystemPrompt({
        userPrompt,
        worldSetting,
      });
      tokenCount = TokenUtils.logTokenUsage('粉丝群申请生成器', '基础系统提示词', systemPrompt, tokenCount); // 6. 获取适用的世界书内容
      const worldBooksContent = await StringBuilders.getApplicableWorldBooks('fanGroupApplication', {
        boundCharacters,
      });
      if (worldBooksContent) {
        systemPrompt += worldBooksContent;
        tokenCount = TokenUtils.logTokenUsage('粉丝群申请生成器', '世界书内容', worldBooksContent, tokenCount);
      }
      // 7. 添加核心任务说明
      const hasMoneyThreshold = fanGroup.groupThreshold && /钱|价|元|￥|\$|费|付/.test(fanGroup.groupThreshold);
      systemPrompt += `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 核心任务：粉丝群入群申请生成器 🎯
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
你是X社交平台的粉丝群申请生成器。用户 ${userXProfileInfo.name} (${
        userXProfileInfo.handle
      }) 发布了一条推文，转发了自己的粉丝群链接：
**推文内容**：
"${tweetData.content}"
**粉丝群信息**：
- 群名：${fanGroup.userName || fanGroup.groupName}
- 当前成员数：${fanGroup.memberCount || 0}
- 入群门槛：${fanGroup.groupThreshold || '无'}
**用户X平台完整资料**：
- 用户名：${userXProfileInfo.name}
- 用户句柄：${userXProfileInfo.handle}
- 认证状态：${userXProfileInfo.verified ? '已认证' : '未认证'}
${
  userXProfileInfo.verificationType && userXProfileInfo.verificationType !== 'none'
    ? `- 认证类型：${
        userXProfileInfo.verificationType === 'verified'
          ? '蓝色勾标认证'
          : userXProfileInfo.verificationType === 'couple'
          ? '情侣认证'
          : userXProfileInfo.verificationType === 'married'
          ? '已婚认证'
          : userXProfileInfo.verificationType === 'vip'
          ? 'VIP认证'
          : '无'
      }`
    : ''
}
${userXProfileInfo.publicIdentity ? `- 公众身份：${userXProfileInfo.publicIdentity}` : ''}
${userXProfileInfo.bio ? `- 个人简介：${userXProfileInfo.bio}` : ''}
${
  userXProfileInfo.verificationType === 'couple' && userXProfileInfo.coupleCharacterName
    ? `- 情侣关系：与${userXProfileInfo.coupleCharacterName}为公开情侣`
    : ''
}
- 影响力等级：${userXProfileInfo.publicIdentity ? '公众人物/有影响力' : '普通用户'}
${
  recentUserTweets.length > 0
    ? `**用户最近推文**（了解用户风格和影响力）：
${recentUserTweets
  .map(
    (tweet, i) => `${i + 1}. "${tweet.content}"
- 发布时间：${tweet.time || '最近'}
- 互动数据：${tweet.stats?.likes || 0}喜欢，${tweet.stats?.retweets || 0}转发，${tweet.stats?.comments || 0}评论，${
      tweet.stats?.views || 0
    }浏览`,
  )
  .join('\n')}`
    : '**用户最近推文**：暂无推文（新用户或较少发帖）'
}
你的任务是生成 3-8 个入群申请。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📋 申请生成规则 📋
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
**申请者类型分布**（必须多样化）：
1. 真诚粉丝（60-70%）：
- 真心喜欢用户，想加入粉丝群
- 申请理由真诚、具体
- 如果有门槛要求，会认真满足
2. 普通路人（20-30%）：
- 看到推文好奇想加入
- 申请理由较简单
- 可能不完全符合门槛要求
3. 恶意/骚扰者（10-20%）：
- 故意发送不当内容
- 申请理由奇怪、无礼、或包含骚扰内容
- 明显不符合门槛要求
- 可能是为了恶作剧或骚扰
**真实感要求**：
- 申请理由要多样化，不要千篇一律
- 恶意申请要自然，不要太过明显
- 申请者姓名要真实感，不要太夸张
${
  hasMoneyThreshold
    ? `
**金钱门槛特殊处理**：
⚠️ 检测到入群门槛与金钱相关："${fanGroup.groupThreshold}"
- 70-80% 的申请者会附带金额
- 金额范围：根据门槛要求决定（建议 $10-$100）
- 申请理由中要提到支付意愿
- 恶意申请者可能故意出价过低或过高来捣乱
- 真诚粉丝会出合理的价格
`
    : ''
}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📝 JSON返回格式 📝
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
\`\`\`json
{
"applications": [
{
 "applicantName": "申请者姓名",
 "applicantHandle": "@handle",
 "applicantAvatar": "https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg",
 "reason": "申请理由（要具体、真实）",
 "type": "sincere/normal/malicious",
 "amount": 50.00
}
]
}
\`\`\`
**字段说明**：
- applicantName: 申请者X姓名（真实感）
- applicantHandle: 申请者X句柄（格式：@username）
- applicantAvatar: 统一使用默认头像
- reason: 申请理由（20-80字，要真实、多样化）
- type: 申请类型（sincere真诚/normal普通/malicious恶意）
- amount: 附带金额（仅在有金钱门槛时需要，数字类型，保留两位小数）${!hasMoneyThreshold ? '，无金钱门槛时设为0' : ''}
**重要规则**：
1. 生成3-8个申请（根据用户影响力决定）
2. 申请理由要多样化，不要重复
3. 恶意申请要自然，不要太明显
4. type字段必须准确反映申请意图
5. 如果有金钱门槛，70-80%申请要带金额
6. 金额合理性：真诚粉丝出价合理，恶意者可能出价异常`;
      const taskSection = systemPrompt.substring(systemPrompt.lastIndexOf('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━'));
      tokenCount = TokenUtils.logTokenUsage('粉丝群申请生成器', '核心任务说明', taskSection, tokenCount); // 8. 添加用户资料约束
      const userConstraintsStart = systemPrompt.length;
      systemPrompt += StringBuilders.buildUniversalConstraints(userXProfileInfo);
      const userConstraints = systemPrompt.substring(userConstraintsStart);
      tokenCount = TokenUtils.logTokenUsage('粉丝群申请生成器', '用户资料约束', userConstraints, tokenCount);
      const messages = [{ role: 'user', content: '请生成粉丝群入群申请' }]; // 最终统计
      TokenUtils.logFinalPrompt('粉丝群申请生成器', systemPrompt, messages[0].content);
      // 🔧 使用统一的API请求工具
      const aiResponseContent = await APIUtils.sendAIRequest({
        apiConfig,
        systemPrompt,
        messages,
        temperature: 0.8,
      });
      console.log('🎯 [粉丝群申请生成器] AI响应:', aiResponseContent);
      // 🔧 使用统一的JSON解析工具
      let applicationData = APIUtils.parseJSONResponse(aiResponseContent);
      if (!applicationData.applications || !Array.isArray(applicationData.applications)) {
        throw new Error('AI返回的数据格式不正确');
      }
      // 11. 为申请添加ID和时间戳
      const timestamp = Date.now();
      applicationData.applications.forEach((app, index) => {
        app.id = `fangroup_app_${timestamp}_${index}`;
        app.timestamp = new Date().toISOString();
        app.status = 'pending'; // pending, approved, rejected
      }); // 12. 保存申请到数据库
      await saveFanGroupApplications(fanGroup.id, applicationData.applications);
      console.log(`✅ [粉丝群申请生成器] 成功生成${applicationData.applications.length}个申请`); // 13. 显示手机通知（使用X logo）
      setTimeout(() => {
        showPhoneNotification({
          title: `${fanGroup.userName || fanGroup.groupName}`,
          message: `有 ${applicationData.applications.length} 人申请加入粉丝群`,
          avatar: fanGroup.userAvatar || 'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
          leftIcon: 'custom',
          leftIconHtml: `
 <svg viewBox="0 0 24 24" style="width: 16px; height: 16px; fill: var(--x-accent);">
 <g><path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"></path></g>
 </svg>
 `,
          duration: 5000,
          onClick: () => {
            openFanGroupApplicationsModal(fanGroup.id);
          },
        });
      }, 1000);
    } catch (error) {
      console.error('❌ [粉丝群申请生成器] 生成失败:', error);
      showXToast('生成申请失败: ' + error.message, 'error');
    }
  }
  // 保存粉丝群申请到数据库
  async function saveFanGroupApplications(groupId, applications) {
    try {
      const xDb = getXDB();
      const dataId = `fanGroupApplications_${currentAccountId || 'main'}_${groupId}`;
      await xDb.xAccountProfiles.put({
        handle: dataId,
        name: 'fanGroupApplications',
        data: applications,
        updatedAt: new Date().toISOString(),
      });
      console.log('✅ [粉丝群申请] 申请数据已保存到数据库');
    } catch (error) {
      console.error('❌ [粉丝群申请] 保存申请失败:', error);
      throw error;
    }
  }
  // 读取粉丝群申请
  async function loadFanGroupApplications(groupId) {
    try {
      const xDb = getXDB();
      const dataId = `fanGroupApplications_${currentAccountId || 'main'}_${groupId}`;
      const savedData = await xDb.xAccountProfiles.get(dataId);
      return savedData?.data || [];
    } catch (error) {
      console.error('❌ [粉丝群申请] 读取申请失败:', error);
      return [];
    }
  }
  // 打开粉丝群申请弹窗
  async function openFanGroupApplicationsModal(groupId) {
    console.log('📋 [粉丝群申请] 打开申请弹窗', groupId);
    try {
      // 读取申请数据
      const applications = await loadFanGroupApplications(groupId);
      const pendingApplications = applications.filter(app => app.status === 'pending');
      if (pendingApplications.length === 0) {
        showXToast('暂无待处理的申请', 'info');
        return;
      }
      // 读取粉丝群信息
      const xDb = getXDB();
      const dataId = `messagesList_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(dataId);
      const messagesList = savedData?.data || [];
      const fanGroup = messagesList.find(msg => msg.id === groupId);
      if (!fanGroup) {
        showXToast('未找到粉丝群数据', 'error');
        return;
      }
      // 检测主题
      const xSocialScreen = document.getElementById('x-social-screen');
      const isLightMode = xSocialScreen && xSocialScreen.classList.contains('x-theme-light'); // 创建弹窗
      const modal = document.createElement('div');
      modal.id = 'fangroup-applications-modal';
      modal.style.cssText = `
 position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: ${
   isLightMode ? 'rgba(255, 255, 255, 0.85)' : 'rgba(0, 0, 0, 0.85)'
 }; display: flex; align-items: center; justify-content: center; z-index: 26; backdrop-filter: blur(12px); -webkit-backdrop-filter: blur(12px); `;
      modal.innerHTML = `
 <div style="background-color: ${
   isLightMode ? 'rgba(255, 255, 255, 0.95)' : 'rgba(0, 0, 0, 0.95)'
 }; backdrop-filter: blur(20px); -webkit-backdrop-filter: blur(20px); border-radius: 24px; width: 90%; max-width: 500px; max-height: 80vh; position: relative; overflow: hidden; box-shadow: ${
        isLightMode ? '0 20px 60px rgba(0, 0, 0, 0.15)' : '0 20px 60px rgba(0, 0, 0, 0.8)'
      }; border: 2px solid ${
        isLightMode ? 'rgba(0, 0, 0, 0.1)' : 'rgba(255, 255, 255, 0.1)'
      }; " onclick="event.stopPropagation()">

 <div style="background: linear-gradient(135deg, ${
   isLightMode ? 'rgba(0, 0, 0, 0.03)' : 'rgba(255, 255, 255, 0.05)'
 } 0%, ${
        isLightMode ? 'rgba(0, 0, 0, 0.01)' : 'rgba(255, 255, 255, 0.02)'
      } 100%); padding: 24px; text-align: center; border-bottom: 1px dashed ${
        isLightMode ? 'rgba(0, 0, 0, 0.15)' : 'rgba(255, 255, 255, 0.15)'
      }; position: relative; ">

 <div style="position: absolute; left: -10px; bottom: -10px; width: 20px; height: 20px; border-radius: 50%; background-color: ${
   isLightMode ? 'rgba(255, 255, 255, 0.85)' : 'rgba(0, 0, 0, 0.85)'
 }; "></div>
 <div style="position: absolute; right: -10px; bottom: -10px; width: 20px; height: 20px; border-radius: 50%; background-color: ${
   isLightMode ? 'rgba(255, 255, 255, 0.85)' : 'rgba(0, 0, 0, 0.85)'
 }; "></div>

 <button onclick="closeFanGroupApplicationsModal()" style="position: absolute; top: 16px; right: 16px; background: transparent; border: none; color:var(--x-text-secondary); cursor: pointer; padding: 8px; border-radius: 50%; transition: all 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: currentColor;">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </button>

 <div style="color:var(--x-text-primary); font-size: 20px; font-weight: 700; margin-bottom: 8px; ">入群申请</div>
 <div style="color:var(--x-text-secondary); font-size: 13px; margin-bottom: 12px; ">${
   fanGroup.userName || fanGroup.groupName
 }</div>
 <div style="color: var(--x-accent); font-size: 12px; font-weight: 700; letter-spacing: 1px; ">${
   pendingApplications.length
 } 人待审核</div>
 </div>

 <div id="applications-list-container" style="max-height: 50vh; overflow-y: auto; padding: 16px 24px; ">
 ${pendingApplications.map((app, index) => renderApplicationCard(app, index, groupId, isLightMode)).join('')}
 </div>
 </div>
 `;
      document.body.appendChild(modal);
      document.body.style.overflow = 'hidden'; // 点击背景关闭
      modal.onclick = e => {
        if (e.target === modal) {
          closeFanGroupApplicationsModal();
        }
      }; // 入场动画
      const card = modal.querySelector('div');
      card.style.transform = 'scale(0.8) translateY(20px)';
      card.style.opacity = '0';
      requestAnimationFrame(() => {
        card.style.transition = 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)';
        card.style.transform = 'scale(1) translateY(0)';
        card.style.opacity = '1';
      });
    } catch (error) {
      console.error('❌ [粉丝群申请] 打开弹窗失败:', error);
      showXToast('打开申请列表失败', 'error');
    }
  }
  // 渲染单个申请卡片
  function renderApplicationCard(app, index, groupId, isLightMode = false) {
    const typeColor =
      {
        sincere: '#22c55e',
        normal: '#3b82f6',
        malicious: '#ef4444',
      }[app.type] || '#71767b';
    const typeText =
      {
        sincere: '真诚粉丝',
        normal: '普通申请',
        malicious: '可疑申请',
      }[app.type] || '未知';
    return `
 <div id="app-card-${app.id}" style="margin-bottom: 14px; background-color: ${
      isLightMode ? 'rgba(0, 0, 0, 0.03)' : 'rgba(255, 255, 255, 0.04)'
    }; border: 1px solid ${
      isLightMode ? 'rgba(0, 0, 0, 0.08)' : 'rgba(255, 255, 255, 0.08)'
    }; border-radius: 12px; padding: 14px; position: relative; overflow: hidden; transition: all 0.2s; ">

 <div style="position: absolute; bottom: 8px; right: 8px; font-size: 28px; color: ${
   isLightMode ? 'rgba(0, 0, 0, 0.03)' : 'rgba(255, 255, 255, 0.03)'
 }; font-weight: 700; pointer-events: none; transform: rotate(-15deg); ">#${index + 1}</div>

 <div style="display: flex; align-items: flex-start; gap: 12px; margin-bottom: 12px;">
 <img src="${app.applicantAvatar}" style="width: 38px; height: 38px; border-radius: 50%; object-fit: cover; ">
 <div style="flex: 1; min-width: 0;">
 <div style="display: flex; align-items: center; gap: 6px; margin-bottom: 3px; flex-wrap: wrap;">
 <span style="color: ${isLightMode ? '#0f1419' : '#e7e9ea'}; font-size: 14px; font-weight: 700; ">${
      app.applicantName
    }</span>
 <span style="padding: 2px 7px; background-color: ${typeColor}${
      isLightMode ? '20' : '18'
    }; color: ${typeColor}; font-size: 10px; font-weight: 700; border-radius: 4px; border: 1px solid ${typeColor}${
      isLightMode ? '50' : '35'
    }; ">${typeText}</span>
 </div>
 <div style="color: ${isLightMode ? '#536471' : '#8b98a5'}; font-size: 12px; ">${app.applicantHandle}</div>
 </div>
 ${
   app.amount > 0
     ? `<div style="padding: 5px 11px; background-color: #22c55e${
         isLightMode ? '20' : '18'
       }; color: #22c55e; font-size: 13px; font-weight: 700; border-radius: 7px; border: 1px solid #22c55e${
         isLightMode ? '50' : '35'
       }; white-space: nowrap; ">$${app.amount.toFixed(2)}</div>`
     : ''
 }
 </div>

 <div style="color: ${
   isLightMode ? '#0f1419' : '#e7e9ea'
 }; font-size: 13px; line-height: 1.5; margin-bottom: 12px; padding: 11px; background-color: ${
      isLightMode ? 'rgba(0, 0, 0, 0.04)' : 'rgba(255, 255, 255, 0.05)'
    }; border-radius: 8px; border-left: 3px solid ${typeColor}; ">${app.reason}</div>

 <div style="display: flex; gap: 7px;">
 <button onclick="approveFanGroupApplication('${groupId}', '${app.id}')" style="flex: 1; background-color: ${
      isLightMode ? '#1d9bf0' : 'var(--x-accent)'
    }; color: #ffffff; border: none; border-radius: 8px; padding: 9px; font-size: 13px; font-weight: 700; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.opacity='0.9'"
 onmouseout="this.style.opacity='1'">
 ✓ 通过
 </button>
 <button onclick="rejectFanGroupApplication('${groupId}', '${
      app.id
    }')" style="flex: 1; background-color: transparent; color: #ef4444; border: 1px solid #ef4444; border-radius: 8px; padding: 9px; font-size: 13px; font-weight: 700; cursor: pointer; transition: all 0.2s; " onmouseover="this.style.backgroundColor='${
      isLightMode ? '#ef444415' : '#ef444412'
    }'"
 onmouseout="this.style.backgroundColor='transparent'">
 ✗ 拒绝
 </button>
 </div>
 </div>
`;
  }
  // 关闭粉丝群申请弹窗
  window.closeFanGroupApplicationsModal = function () {
    const modal = document.getElementById('fangroup-applications-modal');
    if (modal) {
      const card = modal.querySelector('div');
      card.style.transform = 'scale(0.9) translateY(20px)';
      card.style.opacity = '0';
      setTimeout(() => {
        modal.remove();
        document.body.style.overflow = 'auto';
      }, 200);
    }
  }; // 通过申请
  window.approveFanGroupApplication = async function (groupId, appId) {
    console.log('✅ [粉丝群申请] 通过申请', groupId, appId);
    try {
      const xDb = getXDB(); // 1. 读取申请数据
      const applications = await loadFanGroupApplications(groupId);
      const app = applications.find(a => a.id === appId);
      if (!app) {
        showXToast('未找到申请数据', 'error');
        return;
      }
      // 2. 更新申请状态
      app.status = 'approved';
      app.approvedAt = new Date().toISOString();
      await saveFanGroupApplications(groupId, applications); // 3. 如果有金额，添加到钱包
      if (app.amount && app.amount > 0) {
        await loadWalletData();
        if (!walletData.isActivated) {
          showXToast('请先激活钱包', 'error');
          return;
        }
        walletData.balance += app.amount;
        const transaction = {
          id: 'fangroup_' + Date.now(),
          description: `${app.applicantName} 的入群费用`,
          amount: app.amount,
          timestamp: new Date().toISOString(),
          type: 'fan_group_fee',
          applicant: {
            name: app.applicantName,
            handle: app.applicantHandle,
          },
        };
        walletData.transactions.unshift(transaction);
        await saveWalletData();
        console.log(`💰 [粉丝群申请] 入群费用已入账: +$${app.amount.toFixed(2)}`);
      }
      // 4. 添加到粉丝群成员列表
      const dataId = `messagesList_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(dataId);
      const messagesList = savedData?.data || [];
      const fanGroup = messagesList.find(msg => msg.id === groupId);
      if (fanGroup) {
        // 初始化members数组（如果不存在）
        if (!fanGroup.members) {
          fanGroup.members = [];
        }
        // 添加新成员
        const newMember = {
          id: app.id,
          name: app.applicantName,
          handle: app.applicantHandle,
          avatar: app.applicantAvatar,
          joinedAt: new Date().toISOString(),
        };
        fanGroup.members.push(newMember); // 更新成员数
        fanGroup.memberCount = fanGroup.members.length; // 保存
        await xDb.xAccountProfiles.put({
          handle: dataId,
          name: 'messagesList',
          data: messagesList,
          updatedAt: new Date().toISOString(),
        });
        console.log('✅ [粉丝群申请] 成员已添加，当前成员数:', fanGroup.memberCount); // 5. 在粉丝群私信中添加系统通知
        const conversationId = `messageConversation_${currentAccountId || 'main'}_${groupId}`;
        const savedConversation = await xDb.xAccountProfiles.get(conversationId);
        if (savedConversation && savedConversation.data && savedConversation.data.messages) {
          const systemMessage = {
            type: 'system',
            systemType: 'memberJoined',
            content: `${app.applicantName} 加入了粉丝群`,
            timestamp: new Date().toISOString(),
            time: '刚刚',
          };
          savedConversation.data.messages.push(systemMessage);
          await xDb.xAccountProfiles.put(savedConversation);
          console.log('✅ [粉丝群申请] 已添加入群系统通知');
        }
      }
      // 6. 如果当前正在查看该粉丝群聊天，刷新消息显示
      if (currentMessageConversation && currentMessageConversation.id === groupId) {
        const dataId = `messagesList_${currentAccountId || 'main'}`;
        const savedData = await xDb.xAccountProfiles.get(dataId);
        const messagesList = savedData?.data || [];
        const updatedFanGroup = messagesList.find(msg => msg.id === groupId);
        if (updatedFanGroup) {
          await window.openMessageDetail(updatedFanGroup);
        }
      }
      // 7. 移除卡片（动画）
      const card = document.getElementById(`app-card-${appId}`);
      if (card) {
        card.style.transform = 'translateX(100%)';
        card.style.opacity = '0';
        setTimeout(() => card.remove(), 300);
      }
      // 8. 检查是否还有待处理申请
      const remainingPending = applications.filter(a => a.status === 'pending' && a.id !== appId);
      if (remainingPending.length === 0) {
        setTimeout(() => {
          closeFanGroupApplicationsModal();
          showXToast('所有申请已处理完毕', 'success');
        }, 500);
      } else {
        showXToast(app.amount > 0 ? `已通过申请，收到 $${app.amount.toFixed(2)}` : '已通过申请', 'success');
      }
      // 9. 检查并触发自动群聊（5、15、25人等）
      if (fanGroup && fanGroup.members && fanGroup.members.length > 0) {
        setTimeout(() => {
          checkAndTriggerFanGroupAutoChat(groupId, fanGroup.members.length);
        }, 1000);
      }
    } catch (error) {
      console.error('❌ [粉丝群申请] 通过申请失败:', error);
      showXToast('操作失败: ' + error.message, 'error');
    }
  }; // 拒绝申请
  window.rejectFanGroupApplication = async function (groupId, appId) {
    console.log('❌ [粉丝群申请] 拒绝申请', groupId, appId);
    try {
      // 1. 读取申请数据
      const applications = await loadFanGroupApplications(groupId);
      const app = applications.find(a => a.id === appId);
      if (!app) {
        showXToast('未找到申请数据', 'error');
        return;
      }
      // 2. 更新申请状态
      app.status = 'rejected';
      app.rejectedAt = new Date().toISOString();
      await saveFanGroupApplications(groupId, applications); // 3. 移除卡片（动画）
      const card = document.getElementById(`app-card-${appId}`);
      if (card) {
        card.style.transform = 'translateX(-100%)';
        card.style.opacity = '0';
        setTimeout(() => card.remove(), 300);
      }
      // 4. 检查是否还有待处理申请
      const remainingPending = applications.filter(a => a.status === 'pending' && a.id !== appId);
      if (remainingPending.length === 0) {
        setTimeout(() => {
          closeFanGroupApplicationsModal();
          showXToast('所有申请已处理完毕', 'success');
        }, 500);
      } else {
        showXToast('已拒绝申请', 'info');
      }
    } catch (error) {
      console.error('❌ [粉丝群申请] 拒绝申请失败:', error);
      showXToast('操作失败: ' + error.message, 'error');
    }
  }; // 包装原始的 openMessageDetail 函数，添加粉丝群特殊处理
  const originalOpenMessageDetail = window.openMessageDetail;
  window.openMessageDetail = async function (messageData, isFromNotifications) {
    console.log('🎯 [粉丝群] 拦截器：检测消息类型', messageData); // 调用原始函数
    if (originalOpenMessageDetail) {
      await originalOpenMessageDetail(messageData, isFromNotifications);
    }
    // 延迟执行以确保页面已渲染
    setTimeout(() => {
      const isFanGroup = messageData.type === 'fangroup';
      adjustFanGroupDetailPage(isFanGroup);
    }, 100);
  }; // ============================================
  // 私信多选删除功能
  // ============================================
  // 切换消息选择状态
  function toggleMessageSelection(messageId) {
    if (selectedMessages.has(messageId)) {
      selectedMessages.delete(messageId);
    } else {
      selectedMessages.add(messageId);
    }
    updateMessageSelectionUI();
    updateMessageDeleteUI();
  }
  // 进入多选模式
  function enterMessageMultiSelectMode() {
    messageMultiSelectMode = true;
    selectedMessages.clear();
    showMessageDeleteToolbar();
    reloadMessageDetailView();
  }
  // 退出多选模式
  window.exitMessageMultiSelectMode = function () {
    messageMultiSelectMode = false;
    selectedMessages.clear();
    hideMessageDeleteToolbar();
    reloadMessageDetailView();
  }; // 重新加载消息详情视图
  async function reloadMessageDetailView() {
    if (!currentMessageConversation) return;
    try {
      const xDb = getXDB(); // 🔧 多账户隔离：包含账户ID
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${currentMessageConversation.id}`;
      const savedConversation = await xDb.xAccountProfiles.get(conversationId);
      if (savedConversation && savedConversation.data && savedConversation.data.messages) {
        const contentContainer = document.getElementById('message-detail-content');
        if (!contentContainer) return; // 清空并重新渲染所有消息
        const dateElements = contentContainer.querySelectorAll('.message-item, div[style*="text-align: center"]');
        dateElements.forEach(el => {
          // 只移除消息项，保留日期分隔符
          if (el.classList.contains('message-item')) {
            el.remove();
          }
        }); // 使用分组渲染消息
        const messages = savedConversation.data.messages;
        const groups = groupMessagesBySender(messages);
        const allMessageElements = [];
        groups.forEach(group => {
          const isOwn = group[0].message.isOwn === true;
          group.forEach((item, indexInGroup) => {
            const isLastInGroup = indexInGroup === group.length - 1;
            const messageEl = renderMessageItem(item.message, isOwn, item.index, isLastInGroup);
            contentContainer.appendChild(messageEl);
            allMessageElements.push(messageEl);
          });
        }); // 立即显示所有消息（不需要动画）
        allMessageElements.forEach(el => {
          el.style.opacity = '1';
          el.style.transform = 'translateY(0)';
        });
      }
    } catch (error) {
      console.error('重新加载消息视图失败:', error);
    }
  }
  // 更新消息选择UI
  function updateMessageSelectionUI() {
    selectedMessages.forEach(messageId => {
      const messageEl = document.querySelector(`[data-message-id="${messageId}"]`);
      if (messageEl) {
        messageEl.style.opacity = selectedMessages.has(messageId) ? '0.7' : '1';
        const indicator = messageEl.querySelector('.message-select-indicator');
        if (indicator) {
          const isSelected = selectedMessages.has(messageId);
          indicator.style.borderColor = isSelected ? 'var(--x-accent)' : 'var(--x-border-color)';
          indicator.style.backgroundColor = isSelected ? 'var(--x-accent)' : 'var(--x-bg-primary)';
          if (isSelected) {
            indicator.innerHTML = `
 <svg viewBox="0 0 24 24" style="width: 14px; height: 14px; fill: #fff;">
 <g><path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"></path></g>
 </svg>
 `;
          } else {
            indicator.innerHTML = '';
          }
        }
      }
    });
  }
  // 显示删除工具栏
  function showMessageDeleteToolbar() {
    // 隐藏底部输入栏
    const inputToolbar = document.getElementById('message-input-toolbar');
    if (inputToolbar) {
      inputToolbar.style.display = 'none';
    }
    // 创建删除工具栏
    let deleteToolbar = document.getElementById('message-delete-toolbar');
    if (!deleteToolbar) {
      deleteToolbar = document.createElement('div');
      deleteToolbar.id = 'message-delete-toolbar';
      deleteToolbar.style.cssText = `
 position: fixed; bottom: 0; left: 0; right: 0; height: 56px; background-color:var(--x-bg-primary); border-top: 1px solid var(--x-border-color); display: flex; align-items: center; justify-content: space-between; padding: 0 16px; z-index: 100; `;
      deleteToolbar.innerHTML = `
 <div style="display: flex; align-items: center; gap: 16px;">
 <button onclick="exitMessageMultiSelectMode()" style="background: none; border: none; color: var(--x-accent); font-size: 15px; font-weight: 600; cursor: pointer; padding: 8px 0; ">取消</button>
 <button onclick="selectAllMessages()" style="background: none; border: none; color: var(--x-accent); font-size: 15px; font-weight: 600; cursor: pointer; padding: 8px 0; ">全选</button>
 </div>
 <div style="color:var(--x-text-secondary); font-size: 14px; ">
 已选择 <span id="message-selected-count">0</span> 条
 </div>
 <button onclick="deleteSelectedMessages()" id="message-delete-btn" style="background-color: #f4212e; border: none; color: #fff; font-size: 15px; font-weight: 600; cursor: pointer; padding: 8px 16px; border-radius: 18px; opacity: 0.5; pointer-events: none; ">删除</button>
 `;
      const detailPage = document.getElementById('x-message-detail-page');
      if (detailPage) {
        detailPage.appendChild(deleteToolbar);
      }
    }
    deleteToolbar.style.display = 'flex';
  }
  // 隐藏删除工具栏
  function hideMessageDeleteToolbar() {
    const deleteToolbar = document.getElementById('message-delete-toolbar');
    if (deleteToolbar) {
      deleteToolbar.remove();
    }
    // 显示输入栏
    const inputToolbar = document.getElementById('message-input-toolbar');
    if (inputToolbar) {
      inputToolbar.style.display = 'flex';
    }
  }
  // 更新删除UI
  function updateMessageDeleteUI() {
    const countEl = document.getElementById('message-selected-count');
    const deleteBtn = document.getElementById('message-delete-btn');
    if (countEl) {
      countEl.textContent = selectedMessages.size;
    }
    if (deleteBtn) {
      if (selectedMessages.size > 0) {
        deleteBtn.style.opacity = '1';
        deleteBtn.style.pointerEvents = 'auto';
      } else {
        deleteBtn.style.opacity = '0.5';
        deleteBtn.style.pointerEvents = 'none';
      }
    }
  }
  // 全选消息
  window.selectAllMessages = function () {
    const messageElements = document.querySelectorAll('.message-item[data-message-id]');
    messageElements.forEach(el => {
      const messageId = el.getAttribute('data-message-id');
      if (messageId) {
        selectedMessages.add(messageId);
      }
    });
    updateMessageSelectionUI();
    updateMessageDeleteUI();
  }; // 删除选中的消息
  window.deleteSelectedMessages = async function () {
    if (selectedMessages.size === 0) {
      showXToast('请先选择要删除的消息', 'error');
      return;
    }
    const isEnglish = currentLanguage === 'en';
    const confirmMessage = isEnglish
      ? `Delete ${selectedMessages.size} message(s)?`
      : `确定删除选中的 ${selectedMessages.size} 条消息吗？`;
    if (!confirm(confirmMessage)) {
      return;
    }
    try {
      const xDb = getXDB(); // 🔧 多账户隔离：包含账户ID
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${currentMessageConversation.id}`;
      const savedConversation = await xDb.xAccountProfiles.get(conversationId);
      if (savedConversation && savedConversation.data && savedConversation.data.messages) {
        // 收集要删除的消息索引
        const indicesToDelete = new Set();
        selectedMessages.forEach(messageId => {
          // 从 messageId 中提取索引（格式：msg_idx_0, msg_idx_1, etc.）
          const match = messageId.match(/^msg_idx_(\d+)$/);
          if (match) {
            indicesToDelete.add(parseInt(match[1], 10));
          }
        }); // 过滤掉选中的消息
        const updatedMessages = savedConversation.data.messages.filter((msg, index) => {
          return !indicesToDelete.has(index);
        });
        console.log(`🗑️ 准备删除索引: ${Array.from(indicesToDelete).join(', ')}`);
        console.log(`📝 删除前消息数: ${savedConversation.data.messages.length}, 删除后: ${updatedMessages.length}`); // 更新数据库
        savedConversation.data.messages = updatedMessages;
        savedConversation.updatedAt = new Date().toISOString();
        await xDb.xAccountProfiles.put(savedConversation);
        console.log(`✅ 已删除 ${indicesToDelete.size} 条消息`); // 退出多选模式
        exitMessageMultiSelectMode(); // 刷新视图
        const contentContainer = document.getElementById('message-detail-content');
        if (contentContainer) {
          // 清空并重新渲染
          contentContainer.innerHTML = ''; // 添加日期分隔符
          const today = new Date();
          const dateStr =
            currentLanguage === 'en'
              ? today.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })
              : `${today.getFullYear()}年${today.getMonth() + 1}月${String(today.getDate()).padStart(2, '0')}日`;
          contentContainer.appendChild(renderDateSeparator(dateStr)); // 使用分组渲染消息
          const groups = groupMessagesBySender(updatedMessages);
          const allMessageElements = [];
          groups.forEach(group => {
            const isOwn = group[0].message.isOwn === true;
            group.forEach((item, indexInGroup) => {
              const isLastInGroup = indexInGroup === group.length - 1;
              const messageEl = renderMessageItem(item.message, isOwn, item.index, isLastInGroup);
              contentContainer.appendChild(messageEl);
              allMessageElements.push(messageEl);
            });
          }); // 立即显示所有消息（不需要动画）
          allMessageElements.forEach(el => {
            el.style.opacity = '1';
            el.style.transform = 'translateY(0)';
          }); // 滚动到底部
          setTimeout(() => {
            const scrollable = document.getElementById('message-detail-scrollable');
            if (scrollable) {
              scrollable.scrollTop = scrollable.scrollHeight;
            }
          }, 100);
        }
        const successMessage = isEnglish
          ? `Deleted ${indicesToDelete.size} message(s)`
          : `已删除 ${indicesToDelete.size} 条消息`;
        showXToast(successMessage, 'success');
      }
    } catch (error) {
      console.error('删除消息失败:', error);
      const errorMessage = isEnglish ? 'Failed to delete messages' : '删除消息失败';
      showXToast(errorMessage, 'error');
    }
  }; // ============================================
  // 拉黑解除检测系统
  // ============================================
  /**
   * 检测用户是否通过@或评论触发拉黑解除
   * @param {string} userHandle - 用户句柄
   * @param {string} targetHandle - 被拉黑对方的句柄
   * @param {string} triggerSource - 触发来源：'mention' | 'comment'
   * @param {string} content - 触发内容（推文内容或评论内容）
   */
  async function checkUnblockTrigger(userHandle, targetHandle, triggerSource, content) {
    try {
      const xDb = getXDB(); // 清理句柄
      const cleanUserHandle = userHandle.replace('@', '').toLowerCase();
      const cleanTargetHandle = targetHandle.replace('@', '').toLowerCase();
      console.log(`🔓 [拉黑解除] 检测触发: 用户=${cleanUserHandle}, 对方=${cleanTargetHandle}, 来源=${triggerSource}`); // 查找对方的资料，确定消息ID
      let messageId = null;
      let messageData = null; // 尝试查找角色
      const allXProfiles = await xDb.xCharacterProfiles.toArray();
      const targetProfile = allXProfiles.find(
        p => p.xHandle && p.xHandle.replace('@', '').toLowerCase() === cleanTargetHandle,
      );
      if (targetProfile) {
        messageId = `msg_${targetProfile.characterId}`;
        const messagesListId = `messagesList_${currentAccountId || 'main'}`;
        const messagesListData = await xDb.xAccountProfiles.get(messagesListId);
        if (messagesListData && messagesListData.data) {
          messageData = messagesListData.data.find(m => m.id === messageId);
        }
      } else {
        // 尝试查找账户
        const accountProfile = await xDb.xAccountProfiles.get(cleanTargetHandle);
        if (accountProfile) {
          messageId = `msg_account_${cleanTargetHandle}`;
          const messagesListId = `messagesList_${currentAccountId || 'main'}`;
          const messagesListData = await xDb.xAccountProfiles.get(messagesListId);
          if (messagesListData && messagesListData.data) {
            messageData = messagesListData.data.find(m => m.id === messageId);
          }
        } else {
          // 陌生人
          const messagesListId = `messagesList_${currentAccountId || 'main'}`;
          const messagesListData = await xDb.xAccountProfiles.get(messagesListId);
          if (messagesListData && messagesListData.data) {
            messageData = messagesListData.data.find(
              m => m.userHandle && m.userHandle.replace('@', '').toLowerCase() === cleanTargetHandle,
            );
            if (messageData) {
              messageId = messageData.id;
            }
          }
        }
      }
      if (!messageId || !messageData) {
        console.log(`⚠️ [拉黑解除] 未找到对应的私信记录`);
        return;
      }
      // 检查是否被拉黑
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${messageId}`;
      const savedConversation = await xDb.xAccountProfiles.get(conversationId);
      if (!savedConversation || !savedConversation.isBlocked) {
        console.log(`ℹ️ [拉黑解除] 对方并未拉黑用户，无需解除`);
        return;
      }
      console.log(`✅ [拉黑解除] 检测到拉黑状态，准备生成AI回复评估是否解除`); // 使用统一AI回复生成器，传入特殊上下文
      const unblockContext = {
        triggerSource: triggerSource, // 'mention' | 'comment'
        triggerContent: content,
        isUnblockTrigger: true, // 标记为拉黑解除触发
      }; // 生成AI回复（带拉黑解除上下文）
      const aiMessages = await generateMessageConversation(messageData, true, {
        isUnblockRequest: true,
        unblockContext: unblockContext,
      }); // 检查是否包含解除拉黑系统提示
      const hasUnblockedMessage =
        aiMessages && aiMessages.some(msg => msg.type === 'system' && msg.systemType === 'unblocked');
      if (hasUnblockedMessage) {
        console.log(`🎉 [拉黑解除] AI决定解除拉黑！`); // 解除拉黑状态
        savedConversation.isBlocked = false;
        delete savedConversation.blockedAt;
        savedConversation.updatedAt = new Date().toISOString(); // 添加AI回复到对话记录
        if (!savedConversation.data) {
          savedConversation.data = { messages: [] };
        }
        if (!savedConversation.data.messages) {
          savedConversation.data.messages = [];
        }
        // 添加上下文系统通知（说明用户通过何种方式触发）
        const contextNotification = {
          type: 'system',
          systemType: 'unblockContext',
          content:
            triggerSource === 'mention'
              ? `用户在推文中@了你: "${content.substring(0, 100)}..."`
              : `用户在评论区提到了你: "${content.substring(0, 100)}..."`,
          timestamp: new Date().toISOString(),
          time: '刚刚',
        };
        savedConversation.data.messages.push(contextNotification); // 添加AI消息
        aiMessages.forEach(msg => {
          if (!msg.timestamp) {
            msg.timestamp = new Date().toISOString();
          }
          if (!msg.time) {
            msg.time = '刚刚';
          }
          savedConversation.data.messages.push(msg);
        }); // 保存到数据库
        await xDb.xAccountProfiles.put(savedConversation); // 🔔 显示手机样式通知
        showPhoneNotification({
          title: messageData.userName || messageData.user?.name || '未知用户',
          message: '已解除拉黑',
          avatar:
            messageData.userAvatar ||
            messageData.user?.avatar ||
            'https://i.postimg.cc/4xmx7V4R/mmexport1759081128356.jpg',
          onClick: () => {
            // 点击通知打开私信详情
            openMessageDetail(messageData);
          },
        }); // 如果当前正在查看该私信详情，刷新界面
        const detailPage = document.getElementById('x-message-detail-page');
        if (detailPage && detailPage.style.display === 'flex') {
          const currentMessageData = window.currentViewingMessage;
          if (currentMessageData && currentMessageData.id === messageId) {
            console.log(`🔄 [拉黑解除] 刷新当前私信详情页`); // 解除输入框禁用
            const messageInput = document.getElementById('message-input');
            const sendBtn = document.getElementById('message-send-btn');
            if (messageInput) {
              messageInput.disabled = false;
              messageInput.placeholder = '发送私信';
            }
            if (sendBtn) {
              sendBtn.disabled = false;
            }
            // 重新加载对话
            loadMessageConversation(messageData, savedConversation.data);
          }
        }
        console.log(`✅ [拉黑解除] 拉黑已解除，AI消息已发送`);
      } else {
        console.log(`❌ [拉黑解除] AI决定不解除拉黑`);
      }
    } catch (error) {
      console.error('❌ [拉黑解除] 检测失败:', error);
    }
  }
  // ============================================
  // 后台自动发消息系统
  // ============================================
  let autoMessageCheckInterval = null;
  const AUTO_MESSAGE_CHECK_FREQUENCY = 5000; // 每5秒检查一次
  const lastAutoMessageTrigger = {}; // 记录每个角色上次触发时间，防止重复触发
  // 暴露到window以便其他函数访问
  window.resetAutoMessageTrigger = function (characterId) {
    if (characterId && lastAutoMessageTrigger[characterId]) {
      delete lastAutoMessageTrigger[characterId];
      console.log(`🔄 已重置角色 ${characterId} 的自动发消息触发记录`);
    }
  }; // 启动后台自动发消息检查
  function startAutoMessageSystem() {
    if (autoMessageCheckInterval) {
      clearInterval(autoMessageCheckInterval);
    }
    console.log('🤖 启动后台自动发消息系统');
    autoMessageCheckInterval = setInterval(async () => {
      await checkAndTriggerAutoMessages();
    }, AUTO_MESSAGE_CHECK_FREQUENCY);
  }
  // 停止后台自动发消息检查
  function stopAutoMessageSystem() {
    if (autoMessageCheckInterval) {
      clearInterval(autoMessageCheckInterval);
      autoMessageCheckInterval = null;
      console.log('🤖 停止后台自动发消息系统');
    }
  }
  // 检查并触发自动发消息
  async function checkAndTriggerAutoMessages() {
    try {
      const db = getDB();
      const xDb = getXDB(); // 获取私信列表数据
      const dataId = `messagesList_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(dataId);
      const messagesList = savedData?.data || [];
      const now = Date.now(); // === 第一部分：检查绑定角色 ===
      const settingsId = `xSettings_${currentAccountId || 'main'}`;
      const xSettings = await xDb.xSettings.get(settingsId);
      const boundCharacters = xSettings?.boundCharacters || []; // 获取所有角色的X资料
      const characterProfiles = await Promise.all(boundCharacters.map(id => xDb.xCharacterProfiles.get(id))); // 遍历每个启用了自动发消息的角色
      for (const profile of characterProfiles) {
        if (!profile || !profile.autoMessageEnabled) {
          continue;
        }
        // 检查该角色是否在私信列表中
        const characterId = profile.characterId;
        const messageId = `msg_${characterId}`;
        const messageItem = messagesList.find(msg => msg.id === messageId);
        if (!messageItem) {
          continue; // 角色不在私信列表，跳过
        }
        // 检查最后一次互动时间
        // 🔧 多账户隔离：包含账户ID
        const conversationId = `messageConversation_${currentAccountId || 'main'}_${messageId}`;
        const savedConversation = await xDb.xAccountProfiles.get(conversationId);
        if (!savedConversation || !savedConversation.data || !savedConversation.data.messages) {
          continue;
        }
        const messages = savedConversation.data.messages;
        const intervalSeconds = profile.autoMessageInterval || 60; // 检查是否最近已经触发过（防止重复触发）
        const lastTriggerTime = lastAutoMessageTrigger[characterId] || 0;
        const timeSinceLastTrigger = (now - lastTriggerTime) / 1000; // 情况1：没有任何聊天记录，触发初次主动消息
        if (messages.length === 0) {
          // 检查距离上次触发的时间，防止频繁触发
          if (timeSinceLastTrigger >= intervalSeconds) {
            console.log(`🤖 触发自动发消息（无聊天记录）: ${profile.xName}`); // 记录触发时间
            lastAutoMessageTrigger[characterId] = now; // 触发自动发消息
            await triggerAutoMessage(messageItem, profile, 0);
          }
          continue;
        }
        // 获取最后一条消息
        const lastMessage = messages[messages.length - 1];
        const lastMessageTime = lastMessage.timestamp ? new Date(lastMessage.timestamp).getTime() : 0;
        const timeSinceLastMessage = (now - lastMessageTime) / 1000; // 转换为秒
        // 情况2：最后一条消息是角色发送的（用户没有回复），且超过设定时间
        // 如果最后一条消息不是用户发的（!isOwn），说明是角色发的，用户还没回复
        if (
          timeSinceLastMessage >= intervalSeconds &&
          !lastMessage.isOwn &&
          timeSinceLastTrigger >= intervalSeconds / 2
        ) {
          console.log(
            `🤖 触发自动发消息（用户未回复）: ${profile.xName}, 距离上次互动 ${Math.floor(timeSinceLastMessage)}秒`,
          ); // 记录触发时间
          lastAutoMessageTrigger[characterId] = now; // 触发自动发消息
          await triggerAutoMessage(messageItem, profile, timeSinceLastMessage);
        }
        // 🎲 随机触发自动发推（20%概率）
        if (messages.length > 0 && Math.random() < 0.2) {
          const lastMessageTime = lastMessage.timestamp ? new Date(lastMessage.timestamp).getTime() : 0;
          const timeSinceLastMsg = (now - lastMessageTime) / 1000; // 只有在有聊天记录且距离上次聊天超过间隔时间才触发
          if (timeSinceLastMsg >= intervalSeconds) {
            console.log(`🎲 [角色自动发推] 触发: ${profile.xName}, 距离上次聊天 ${Math.floor(timeSinceLastMsg)}秒`);
            await triggerAutoTweet(messageItem, profile, timeSinceLastMsg, 'character');
          }
        }
      }
      // === 第二部分：检查账户/NPC/陌生人 ===
      for (const messageItem of messagesList) {
        // 🔧 只跳过绑定角色（msg_xxx格式但不是 msg_account_/msg_npc_/msg_relationship_ 等）
        // 绑定角色的ID格式：msg_chatId（纯数字或字母组合，不带下划线前缀）
        const isCharacterMessage =
          messageItem.id.startsWith('msg_') &&
          messageItem.id !== 'msg_001' &&
          !messageItem.id.startsWith('msg_account_') &&
          !messageItem.id.startsWith('msg_npc_') &&
          !messageItem.id.startsWith('msg_relationship_');
        if (isCharacterMessage) {
          continue; // 跳过绑定角色（它们在第一部分已经处理了）
        }
        // 检查该账户/NPC/陌生人是否启用了自动发消息
        const strangerSettingsId = `strangerSettings_${currentAccountId || 'main'}_${messageItem.id}`;
        const strangerSettings = await xDb.xAccountProfiles.get(strangerSettingsId);
        if (!strangerSettings || !strangerSettings.autoMessageEnabled) {
          continue;
        }
        // 获取自定义的时间间隔（默认60秒）
        const intervalSeconds = strangerSettings.autoMessageInterval || 60; // 确定账户类型用于日志
        const accountType =
          messageItem._accountType ||
          (messageItem.id.startsWith('msg_account_')
            ? '账户'
            : messageItem.id.startsWith('msg_npc_')
            ? 'NPC'
            : messageItem.id.startsWith('msg_relationship_')
            ? '关系NPC'
            : '陌生人');
        console.log(
          `⏰ [${accountType}自动发消息] ${messageItem.userName || messageItem.user?.name} 间隔: ${intervalSeconds}秒`,
        ); // 检查最后一次互动时间
        const conversationId = `messageConversation_${currentAccountId || 'main'}_${messageItem.id}`;
        const savedConversation = await xDb.xAccountProfiles.get(conversationId);
        if (!savedConversation || !savedConversation.data || !savedConversation.data.messages) {
          continue;
        }
        const messages = savedConversation.data.messages; // 检查是否最近已经触发过
        const lastTriggerTime = lastAutoMessageTrigger[messageItem.id] || 0;
        const timeSinceLastTrigger = (now - lastTriggerTime) / 1000; // 情况1：没有任何聊天记录，触发初次主动消息
        if (messages.length === 0) {
          if (timeSinceLastTrigger >= intervalSeconds) {
            console.log(
              `🤖 触发${accountType}自动发消息（无聊天记录）: ${messageItem.userName || messageItem.user?.name}`,
            );
            lastAutoMessageTrigger[messageItem.id] = now;
            await triggerStrangerAutoMessage(messageItem, strangerSettings, 0);
          }
          continue;
        }
        // 获取最后一条消息
        const lastMessage = messages[messages.length - 1];
        const lastMessageTime = lastMessage.timestamp ? new Date(lastMessage.timestamp).getTime() : 0;
        const timeSinceLastMessage = (now - lastMessageTime) / 1000; // 情况2：最后一条消息是对方发送的，且超过设定时间
        if (
          timeSinceLastMessage >= intervalSeconds &&
          !lastMessage.isOwn &&
          timeSinceLastTrigger >= intervalSeconds / 2
        ) {
          console.log(
            `🤖 触发${accountType}自动发消息（用户未回复）: ${
              messageItem.userName || messageItem.user?.name
            }, 距离上次互动 ${Math.floor(timeSinceLastMessage)}秒`,
          );
          lastAutoMessageTrigger[messageItem.id] = now;
          await triggerStrangerAutoMessage(messageItem, strangerSettings, timeSinceLastMessage);
        }
        // 🎲 随机触发自动发推（10%概率）
        if (messages.length > 0 && Math.random() < 0.1) {
          const lastMessageTime = lastMessage.timestamp ? new Date(lastMessage.timestamp).getTime() : 0;
          const timeSinceLastMsg = (now - lastMessageTime) / 1000; // 只有在有聊天记录且距离上次聊天超过间隔时间才触发
          if (timeSinceLastMsg >= intervalSeconds) {
            console.log(
              `🎲 [${accountType}自动发推] 触发: ${
                messageItem.userName || messageItem.user?.name
              }, 距离上次聊天 ${Math.floor(timeSinceLastMsg)}秒`,
            );
            await triggerAutoTweet(messageItem, strangerSettings, timeSinceLastMsg, 'stranger');
          }
        }
      }
      // === 第三部分：检查粉丝群 ===
      for (const messageItem of messagesList) {
        // 检查是否为粉丝群
        if (messageItem.type !== 'fangroup') {
          continue;
        }
        // 检查该粉丝群是否启用了自动发消息
        const fanGroupSettingsId = `fanGroupSettings_${currentAccountId || 'main'}_${messageItem.id}`;
        const fanGroupSettings = await xDb.xAccountProfiles.get(fanGroupSettingsId);
        if (!fanGroupSettings || !fanGroupSettings.data || !fanGroupSettings.data.autoMessageEnabled) {
          continue;
        }
        // 获取自定义的时间间隔（默认120秒）
        const intervalSeconds = fanGroupSettings.data.autoMessageInterval || 120;
        console.log(
          `⏰ [粉丝群自动发消息] ${messageItem.userName || messageItem.groupName} 间隔: ${intervalSeconds}秒`,
        );
        // 检查最后一次互动时间
        const conversationId = `messageConversation_${currentAccountId || 'main'}_${messageItem.id}`;
        const savedConversation = await xDb.xAccountProfiles.get(conversationId);
        if (!savedConversation || !savedConversation.data || !savedConversation.data.messages) {
          // 如果没有对话记录，初始化一个
          await xDb.xAccountProfiles.put({
            handle: conversationId,
            name: 'conversation',
            data: {
              messages: [],
            },
            updatedAt: new Date().toISOString(),
          });
          continue;
        }
        const messages = savedConversation.data.messages;
        // 检查是否最近已经触发过
        const lastTriggerTime = lastAutoMessageTrigger[messageItem.id] || 0;
        const timeSinceLastTrigger = (now - lastTriggerTime) / 1000;
        // 获取最后一条非系统消息
        const lastNonSystemMessage = messages
          .slice()
          .reverse()
          .find(msg => msg.type !== 'system');
        if (!lastNonSystemMessage) {
          // 如果没有非系统消息，触发初次群聊
          if (timeSinceLastTrigger >= intervalSeconds) {
            console.log(`🤖 触发粉丝群自动交流（无聊天记录）: ${messageItem.userName || messageItem.groupName}`);
            lastAutoMessageTrigger[messageItem.id] = now;
            await triggerFanGroupAutoReaction(messageItem);
          }
          continue;
        }
        const lastMessageTime = lastNonSystemMessage.timestamp ? new Date(lastNonSystemMessage.timestamp).getTime() : 0;
        const timeSinceLastMessage = (now - lastMessageTime) / 1000;
        // 触发条件：距离上次非系统消息超过设定时间
        if (timeSinceLastMessage >= intervalSeconds && timeSinceLastTrigger >= intervalSeconds / 2) {
          console.log(
            `🤖 触发粉丝群自动交流: ${messageItem.userName || messageItem.groupName}, 距离上次互动 ${Math.floor(
              timeSinceLastMessage,
            )}秒`,
          );
          lastAutoMessageTrigger[messageItem.id] = now;
          await triggerFanGroupAutoReaction(messageItem);
        }
      }
    } catch (error) {
      console.error('❌ 检查自动发消息失败:', error);
    }
  }
  // 触发粉丝群自动交流（调用第11情景的自反应模式）
  async function triggerFanGroupAutoReaction(fanGroupData) {
    try {
      console.log('🎭 [粉丝群自反应] 后台自动触发');
      // 调用第11个情景生成器（自反应模式）
      const aiMessages = await generateFanGroupConversation(fanGroupData, true, {
        isAutoReaction: true, // 自反应模式标记
      });
      if (!aiMessages || aiMessages.length === 0) {
        console.log('📭 [粉丝群自反应] AI未生成任何消息');
        return;
      }
      // 读取现有对话数据
      const xDb = getXDB();
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${fanGroupData.id}`;
      const savedConversation = await xDb.xAccountProfiles.get(conversationId);
      let allMessages = [];
      if (savedConversation && savedConversation.data && savedConversation.data.messages) {
        allMessages = savedConversation.data.messages;
      }
      // 追加AI生成的消息
      allMessages.push(...aiMessages);
      // 保存到数据库
      await xDb.xAccountProfiles.put({
        handle: conversationId,
        name: 'conversation',
        data: {
          messages: allMessages,
        },
        updatedAt: new Date().toISOString(),
      });
      console.log(`✅ [粉丝群自反应] 后台生成了${aiMessages.length}条群聊消息`);
      // 更新私信列表的预览
      const dataId = `messagesList_${currentAccountId || 'main'}`;
      const messagesList = await xDb.xAccountProfiles.get(dataId);
      if (messagesList && messagesList.data) {
        const groupIndex = messagesList.data.findIndex(msg => msg.id === fanGroupData.id);
        if (groupIndex !== -1) {
          const lastMsg = aiMessages[aiMessages.length - 1];
          const lastMsgContent = lastMsg.content || lastMsg.voiceText || lastMsg.imageDescription || '[消息]';
          messagesList.data[groupIndex].lastMessage = `${lastMsg.senderName}: ${lastMsgContent}`;
          messagesList.data[groupIndex].timestamp = new Date().toISOString();
          messagesList.data[groupIndex].unread = true; // 标记为未读
          await xDb.xAccountProfiles.put(messagesList);
          // 更新全局数据
          sampleMessagesData = messagesList.data;
        }
      }
      // 如果用户正在私信页面，刷新列表
      if (document.getElementById('x-messages-page')?.style.display === 'block') {
        await loadMessagesList();
      }
    } catch (error) {
      console.error('❌ [粉丝群自反应] 后台触发失败:', error);
    }
  }
  // 触发自动发推（角色/账户/NPC/关系NPC/陌生人）
  async function triggerAutoTweet(messageData, settings, timeSinceLastMessage, type = 'character') {
    try {
      // 确定账户类型和名称
      let accountType, accountName, accountHandle, accountAvatar;
      if (type === 'character') {
        accountType = '角色';
        accountName = settings.xName;
        accountHandle = settings.xHandle;
        accountAvatar = settings.xAvatar;
      } else {
        // 非角色：账户/NPC/关系NPC/陌生人
        accountType =
          messageData._accountType ||
          (messageData.id.startsWith('msg_account_')
            ? '账户'
            : messageData.id.startsWith('msg_npc_')
            ? 'NPC'
            : messageData.id.startsWith('msg_relationship_')
            ? '关系NPC'
            : '陌生人');
        accountName = messageData.userName || messageData.user?.name || messageData.name;
        accountHandle = messageData.userHandle || messageData.user?.handle || messageData.handle;
        accountAvatar = messageData.userAvatar || messageData.user?.avatar || messageData.avatar;
      }
      console.log(`📨 ${accountType} ${accountName} 正在自动发推...`); // 获取聊天记录
      const xDb = getXDB();
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${messageData.id}`;
      const savedConversation = await xDb.xAccountProfiles.get(conversationId);
      if (!savedConversation || !savedConversation.data || !savedConversation.data.messages) {
        console.warn('自动发推失败，无聊天记录');
        return;
      }
      const messages = savedConversation.data.messages;
      const contextMessages = messages.slice(-20); // 最近20条消息
      // 调用新推生成器，传入时间信息
      const tweetData = await generateTweetFromConversation(messageData, contextMessages, {
        isAutoTweet: true,
        timeSinceLastMessage: Math.floor(timeSinceLastMessage),
        type: type,
      });
      if (!tweetData) {
        console.warn('自动发推生成失败，无推文内容');
        return;
      }
      // 创建 New Tweet 通知
      const timestamp = Date.now();
      const newTweetNotification = {
        id: `mention_newtweet_auto_${timestamp}`,
        type: 'newTweet',
        user: {
          name: accountName,
          handle: accountHandle,
          avatar: accountAvatar,
        },
        content: `New Tweet from ${accountName}`,
        time: '刚刚',
        timestamp: timestamp,
        tweet: tweetData,
      }; // 保存到 Mentions 数据库
      const mentionsDataId = `mentions_${currentAccountId || 'main'}`;
      let savedMentions = await xDb.xAccountProfiles.get(mentionsDataId);
      if (!savedMentions) {
        savedMentions = {
          handle: mentionsDataId,
          id: mentionsDataId,
          data: [],
        };
      }
      savedMentions.data.unshift(newTweetNotification);
      await xDb.xAccountProfiles.put(savedMentions);
      console.log(`✅ ${accountType}自动发推成功: ${accountName}`); // 将推文添加到发推者的账户主页
      await addTweetToAccountProfile(accountHandle, tweetData); // 显示手机样式通知
      const isEnglish = currentLanguage === 'en';
      showPhoneNotification({
        title: 'X',
        message: isEnglish ? `${accountName} posted a new tweet!` : `${accountName} 发布了新推文！`,
        avatar: accountAvatar,
        leftIcon: 'x',
      }); // 如果当前在 Mentions 页面，刷新显示
      const mentionsPage = document.getElementById('x-notifications-page');
      if (mentionsPage && mentionsPage.style.display === 'flex') {
        await loadNotifications();
      } else {
        showNavNotificationDot('notifications');
      }
    } catch (error) {
      console.error('❌ 触发自动发推失败:', error);
    }
  }
  // 触发非角色账户自动发消息（账户/NPC/关系NPC/陌生人）
  async function triggerStrangerAutoMessage(messageData, strangerSettings, timeSinceLastMessage) {
    try {
      // 确定账户类型用于日志
      const accountType =
        messageData._accountType ||
        (messageData.id.startsWith('msg_account_')
          ? '账户'
          : messageData.id.startsWith('msg_npc_')
          ? 'NPC'
          : messageData.id.startsWith('msg_relationship_')
          ? '关系NPC'
          : '陌生人');
      const accountName = messageData.userName || messageData.user?.name || messageData.name;
      console.log(`📨 ${accountType} ${accountName} 正在自动发消息...`); // 调用生成器，使用自动模式
      const newMessages = await generateMessageConversation(messageData, true, {
        isAutoMessage: true,
        timeSinceLastMessage: Math.floor(timeSinceLastMessage),
      });
      if (!newMessages || newMessages.length === 0) {
        console.warn(`${accountType}自动发消息生成失败，无新消息`);
        return;
      }
      // 保存自动发送的消息到数据库
      const xDb = getXDB();
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${messageData.id}`;
      const savedConversation = await xDb.xAccountProfiles.get(conversationId);
      if (savedConversation && savedConversation.data) {
        // 添加自动消息（添加时间戳）
        newMessages.forEach(msg => {
          if (!msg.timestamp) {
            msg.timestamp = new Date().toISOString();
          }
        });
        savedConversation.data.messages.push(...newMessages);
        savedConversation.updatedAt = new Date().toISOString();
        await xDb.xAccountProfiles.put(savedConversation);
        console.log(`✅ ${accountType}自动消息已保存: ${newMessages.length}条`); // 显示顶部提醒
        const isEnglish = currentLanguage === 'en';
        const toastMessage = isEnglish
          ? `${accountName} sent you ${newMessages.length} message(s)`
          : `${accountName} 向你发送了 ${newMessages.length} 条私信`;
        showXToast(toastMessage, 'info'); // 如果当前正在查看该私信详情，刷新显示
        if (currentMessageConversation && currentMessageConversation.id === messageData.id) {
          const contentContainer = document.getElementById('message-detail-content');
          if (contentContainer) {
            let currentMessageCount = contentContainer.querySelectorAll('.message-item').length;
            newMessages.forEach(msg => {
              const msgElement = renderMessageItem(msg, false, currentMessageCount);
              contentContainer.appendChild(msgElement);
              currentMessageCount++;
            });
          }
        }
        // 更新私信列表中该陌生人的未读状态
        try {
          const dataId = `messagesList_${currentAccountId || 'main'}`;
          const savedData = await xDb.xAccountProfiles.get(dataId);
          if (savedData && savedData.data) {
            const messagesList = savedData.data;
            const messageIndex = messagesList.findIndex(msg => msg.id === messageData.id);
            if (messageIndex !== -1) {
              messagesList[messageIndex].unread = true;
              messagesList[messageIndex].unreadCount =
                (messagesList[messageIndex].unreadCount || 0) + newMessages.length;
              await xDb.xAccountProfiles.put({
                handle: dataId,
                name: 'messagesList',
                data: messagesList,
                updatedAt: new Date().toISOString(),
              });
              sampleMessagesData = messagesList;
              console.log(`✅ 已标记${accountType}私信为未读`);
            }
          }
        } catch (error) {
          console.error('更新未读状态失败:', error);
        }
        // 更新私信列表
        const messagesPage = document.getElementById('x-messages-page');
        if (messagesPage && messagesPage.style.display !== 'none') {
          await loadMessagesList();
        } else {
          showNavNotificationDot('messages');
        }
      }
    } catch (error) {
      console.error('❌ 触发陌生人自动发消息失败:', error);
    }
  }
  // 触发自动发消息
  async function triggerAutoMessage(messageData, characterProfile, timeSinceLastMessage) {
    try {
      console.log(`📨 角色 ${characterProfile.xName} 正在自动发消息...`); // 调用生成器，使用自动模式
      const newMessages = await generateMessageConversation(messageData, true, {
        isAutoMessage: true,
        timeSinceLastMessage: Math.floor(timeSinceLastMessage),
      });
      if (!newMessages || newMessages.length === 0) {
        console.warn('自动发消息生成失败，无新消息');
        return;
      }
      // 保存自动发送的消息到数据库
      const xDb = getXDB(); // 🔧 多账户隔离：包含账户ID
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${messageData.id}`;
      const savedConversation = await xDb.xAccountProfiles.get(conversationId);
      if (savedConversation && savedConversation.data) {
        // 添加自动消息（添加时间戳）
        newMessages.forEach(msg => {
          if (!msg.timestamp) {
            msg.timestamp = new Date().toISOString();
          }
        });
        savedConversation.data.messages.push(...newMessages);
        savedConversation.updatedAt = new Date().toISOString();
        await xDb.xAccountProfiles.put(savedConversation);
        console.log(`✅ 自动消息已保存: ${newMessages.length}条`); // 智能检测是否需要生成 New Tweet 通知
        try {
          await detectAndGenerateNewTweetNotification(messageData, savedConversation.data.messages);
        } catch (error) {
          console.error('New Tweet 检测失败:', error);
        }
        // 显示顶部提醒
        const isEnglish = currentLanguage === 'en';
        const toastMessage = isEnglish
          ? `${characterProfile.xName} sent you ${newMessages.length} message(s)`
          : `${characterProfile.xName} 向你发送了 ${newMessages.length} 条私信`;
        showXToast(toastMessage, 'info'); // 如果当前正在查看该私信详情，刷新显示
        if (currentMessageConversation && currentMessageConversation.id === messageData.id) {
          const contentContainer = document.getElementById('message-detail-content');
          if (contentContainer) {
            // 获取当前消息总数
            let currentMessageCount = contentContainer.querySelectorAll('.message-item').length;
            newMessages.forEach(msg => {
              const msgElement = renderMessageItem(msg, false, currentMessageCount);
              contentContainer.appendChild(msgElement);
              currentMessageCount++;
            });
          }
        }
        // 更新私信列表中该角色的未读状态
        try {
          const xDb = getXDB();
          const dataId = `messagesList_${currentAccountId || 'main'}`;
          const savedData = await xDb.xAccountProfiles.get(dataId);
          if (savedData && savedData.data) {
            const messagesList = savedData.data;
            const messageIndex = messagesList.findIndex(msg => msg.id === messageData.id);
            if (messageIndex !== -1) {
              // 标记为未读
              messagesList[messageIndex].unread = true;
              messagesList[messageIndex].unreadCount =
                (messagesList[messageIndex].unreadCount || 0) + newMessages.length; // 保存回数据库
              await xDb.xAccountProfiles.put({
                handle: dataId,
                name: 'messagesList',
                data: messagesList,
                updatedAt: new Date().toISOString(),
              }); // 同步更新全局数据
              sampleMessagesData = messagesList;
              console.log('✅ 已标记私信为未读');
            }
          }
        } catch (error) {
          console.error('更新未读状态失败:', error);
        }
        // 更新私信列表的最后一条消息预览（如果在私信列表页面）
        const messagesPage = document.getElementById('x-messages-page');
        if (messagesPage && messagesPage.style.display !== 'none') {
          // 重新加载私信列表以显示最新消息
          await loadMessagesList();
        } else {
          // 如果不在私信页面，显示提醒点
          showNavNotificationDot('messages');
        }
      }
    } catch (error) {
      console.error('❌ 触发自动发消息失败:', error);
    }
  }
  // 暴露私信相关函数到全局
  window.loadMessagesList = loadMessagesList;
  window.openNewMessageModal = openNewMessageModal;
  window.startAutoMessageSystem = startAutoMessageSystem;
  window.stopAutoMessageSystem = stopAutoMessageSystem;
  window.closeNewMessageModal = closeNewMessageModal;
  window.selectCharacterForMessage = selectCharacterForMessage;
  console.log('✅ 全局接口已暴露'); // ============================================
  // 文章查看页面功能
  // ============================================
  // 封面图链接数组
  const articleCoverImages = [
    'https://i.postimg.cc/CLJM9Wgg/4af1071dfec6baab460e61e9eeb280f2.jpg',
    'https://i.postimg.cc/fyNThsyJ/ff606a3597bbf3eaab3f0dbc4366cfac.jpg',
    'https://i.postimg.cc/C5LX8r6c/90502cdcef619816182a5e03e7de5592.jpg',
    'https://i.postimg.cc/QxCvxPTn/53551999bb82fecf909ea84947dd008c.jpg',
    'https://i.postimg.cc/y8S50Znm/f26c037c7785d0cdd3e371ebdce85df7.jpg',
    'https://i.postimg.cc/sDKfbtrD/4e7fc081056f2f475ed481e27ddfcd4a.jpg',
    'https://i.postimg.cc/65z6FDX6/27fce0a614e984e577264e58b25b0da5.jpg',
    'https://i.postimg.cc/65z6FDXp/931f9cc4c1bf7a0f1ee7b4fdfa334c5d.jpg',
    'https://i.postimg.cc/hPM4NHBS/5747a13122e4366828c95e673bcefba6.jpg',
    'https://i.postimg.cc/yYn62wHN/8700fba519fec2eccbeaa00e3b8996a9.jpg',
  ]; // 打开文章查看页面
  window.openArticlePage = function (articleData) {
    console.log('📰 [文章查看] 打开文章页面', articleData); // 保存当前文章数据供转发使用
    currentArticleData = articleData; // 设置封面图（随机选择）
    const randomCover = articleCoverImages[Math.floor(Math.random() * articleCoverImages.length)];
    document.getElementById('article-cover').style.backgroundImage = `url('${randomCover}')`; // 设置标题
    const titleEl = document.getElementById('article-title');
    titleEl.textContent = articleData.title || '无标题'; // 检测标题是否包含英文（简单判断：是否有英文字母）
    const hasEnglish = /[a-zA-Z]/.test(articleData.title);
    if (hasEnglish) {
      titleEl.classList.add('article-title-en');
    } else {
      titleEl.classList.remove('article-title-en');
    }
    // 设置作者
    document.getElementById('article-author').textContent = articleData.author || '佚名'; // 设置来源
    document.getElementById('article-source').textContent = articleData.source || '未知来源'; // 设置正文（处理强调和下划线）
    const bodyEl = document.getElementById('article-body');
    let bodyHtml = articleData.body || articleData.description || ''; // 将**text**转换为<strong>
    bodyHtml = bodyHtml.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    // 将__text__转换为<em>（下划线重点）
    bodyHtml = bodyHtml.replace(/__(.*?)__/g, '<em>$1</em>');
    bodyEl.innerHTML = bodyHtml; // 显示文章页面
    document.getElementById('x-article-page').style.display = 'flex';
    console.log('✅ [文章查看] 文章页面已打开');
  }; // 关闭文章查看页面
  window.closeArticlePage = function () {
    document.getElementById('x-article-page').style.display = 'none';
    console.log('✅ [文章查看] 文章页面已关闭');
  }; // 当前正在查看的文章数据
  let currentArticleData = null; // 转发文章
  window.shareArticle = function () {
    console.log('📤 [文章转发] 打开转发弹窗');
    if (!currentArticleData) {
      showXToast('无法获取文章信息', 'error');
      return;
    }
    showShareArticleModal();
  }; // 显示转发文章弹窗
  async function showShareArticleModal() {
    try {
      // 获取私信列表
      const xDb = getXDB();
      const dataId = `messagesList_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(dataId);
      const messagesList = savedData?.data || [];
      if (messagesList.length === 0) {
        showXToast('暂无私信联系人', 'info');
        return;
      }
      // 创建弹窗
      const modal = document.createElement('div');
      modal.id = 'share-article-modal';
      modal.style.cssText = `
 display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: var(--x-modal-overlay); z-index: 22; align-items: center; justify-content: center; backdrop-filter: blur(4px); `;
      modal.innerHTML = `
 <div class="modal-content" onclick="event.stopPropagation()" style="background-color:var(--x-bg-primary); border-radius: 16px; width: 90%; max-width: 500px; max-height: 80vh; overflow: hidden; border: 1px solid var(--x-border-color); display: flex; flex-direction: column; ">

 <div class="modal-header" style="display: flex; align-items: center; justify-content: space-between; padding: 16px 20px; border-bottom: 1px solid var(--x-border-color); background-color:var(--x-bg-primary); ">
 <div style="display: flex; align-items: center; gap: 20px;">

 <div class="modal-close-btn" onclick="closeShareArticleModal()" style="cursor: pointer; padding: 8px; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-text-primary);">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </div>

 <h2 style="color:var(--x-text-primary); font-size: 20px; font-weight: 700; margin: 0; ">转发文章</h2>
 </div>
 </div>

 <div class="modal-body" style="padding: 16px 20px; overflow-y: auto; flex: 1; ">

 <div style="padding: 12px; background-color:var(--x-bg-secondary); border-radius: 12px; margin-bottom: 16px; border: 1px solid var(--x-border-color); ">
 <div style="font-size: 15px; font-weight: 600; color:var(--x-text-primary); margin-bottom: 4px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; ">${
   currentArticleData?.title || '无标题'
 }</div>
 <div style="font-size: 13px; color:var(--x-text-secondary); overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; ">${
   currentArticleData?.description || ''
 }</div>
 </div>

 <div style="margin-bottom: 16px;">
 <label style="display: block; color:var(--x-text-secondary); font-size: 13px; margin-bottom: 8px; ">附加文字（可选）</label>
 <textarea id="share-article-message" placeholder="添加一些说明..." style="width: 100%; min-height: 80px; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 12px; color:var(--x-text-primary); padding: 12px; font-size: 15px; resize: vertical; outline: none; box-sizing: border-box; font-family: inherit; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='var(--x-border-color)'"></textarea>
 </div>

 <div style="color:var(--x-text-secondary); font-size: 13px; margin-bottom: 12px; ">选择要转发到的联系人</div>

 <div id="share-article-contacts-list" style="display: flex; flex-direction: column; gap: 0; ">
 ${messagesList
   .map(
     contact => `
 <div class="contact-select-item" data-contact-id="${contact.id}" onclick="selectContactForShare('${contact.id}')" style="display: flex; align-items: center; gap: 12px; padding: 12px; border-radius: 8px; cursor: pointer; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">

 <img src="${contact.userAvatar}"
 alt="${contact.userName}"
 style="width: 40px; height: 40px; border-radius: 50%; flex-shrink: 0; object-fit: cover; ">

 <div style="flex: 1; min-width: 0;">
 <div style="font-size: 15px; font-weight: 700; color:var(--x-text-primary); overflow: hidden; text-overflow: ellipsis; white-space: nowrap; ">${contact.userName}</div>
 <div style="font-size: 13px; color:var(--x-text-secondary); overflow: hidden; text-overflow: ellipsis; white-space: nowrap; ">@${contact.userHandle}</div>
 </div>
 </div>
 `,
   )
   .join('')}
 </div>
 </div>
 </div>
 `; // 将弹窗添加到X应用容器内
      const xSocialScreen = document.getElementById('x-social-screen');
      if (xSocialScreen) {
        xSocialScreen.appendChild(modal);
      } else {
        document.body.appendChild(modal);
      }
      // 点击背景关闭弹窗
      modal.addEventListener('click', e => {
        if (e.target === modal) {
          closeShareArticleModal();
        }
      });
    } catch (error) {
      console.error('显示转发弹窗失败:', error);
      showXToast('打开转发失败', 'error');
    }
  }
  // 关闭转发文章弹窗
  window.closeShareArticleModal = function () {
    const modal = document.getElementById('share-article-modal');
    if (modal) {
      modal.remove();
    }
  }; // 选择联系人转发文章
  window.selectContactForShare = async function (contactId) {
    console.log('📤 [文章转发] 转发到联系人:', contactId);
    try {
      const xDb = getXDB(); // 获取附加文字
      const messageInput = document.getElementById('share-article-message');
      const additionalMessage = messageInput ? messageInput.value.trim() : ''; // 获取当前时间
      const now = new Date();
      const hours = now.getHours();
      const minutes = String(now.getMinutes()).padStart(2, '0');
      const period = hours >= 12 ? '下午' : '上午';
      const timeStr = `${hours > 12 ? hours - 12 : hours}:${minutes} ${period}`; // 创建文章链接消息
      const articleMessage = {
        type: 'link',
        url: currentArticleData.source || '',
        title: currentArticleData.title,
        description: currentArticleData.description || '',
        author: currentArticleData.author,
        source: currentArticleData.source,
        body: currentArticleData.body,
        time: timeStr,
        timestamp: now.toISOString(),
        isOwn: true,
      }; // 读取现有对话数据
      // 🔧 多账户隔离：包含账户ID
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${contactId}`;
      let savedConversation = await xDb.xAccountProfiles.get(conversationId);
      if (!savedConversation) {
        // 创建新的对话记录
        savedConversation = {
          handle: conversationId,
          name: 'messageConversation',
          data: {
            messages: [],
          },
          messageId: contactId,
          accountId: currentAccountId || 'main', // 添加账户ID
          updatedAt: new Date().toISOString(),
        };
      }
      // 确保messages数组存在
      if (!savedConversation.data.messages) {
        savedConversation.data.messages = [];
      }
      // 添加文章消息
      savedConversation.data.messages.push(articleMessage); // 如果有附加文字，也添加文字消息
      if (additionalMessage) {
        const textMessage = {
          type: 'text',
          content: additionalMessage,
          time: timeStr,
          timestamp: now.toISOString(),
          isOwn: true,
        };
        savedConversation.data.messages.push(textMessage);
      }
      // 标记最后一条消息为等待AI回复
      const lastMessageIndex = savedConversation.data.messages.length - 1;
      if (lastMessageIndex >= 0) {
        savedConversation.data.messages[lastMessageIndex].waitingForAIResponse = true;
      }
      // 保存到数据库
      savedConversation.updatedAt = new Date().toISOString();
      await xDb.xAccountProfiles.put(savedConversation); // 更新私信列表的最后消息和时间
      const dataId = `messagesList_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(dataId);
      if (savedData && savedData.data) {
        const messagesList = savedData.data;
        const contactIndex = messagesList.findIndex(msg => msg.id === contactId);
        if (contactIndex !== -1) {
          messagesList[contactIndex].lastMessage = additionalMessage || '[链接]';
          messagesList[contactIndex].timestamp = now.toISOString(); // 将该联系人移到列表顶部
          const contact = messagesList.splice(contactIndex, 1)[0];
          messagesList.unshift(contact); // 保存更新后的列表
          await xDb.xAccountProfiles.put({
            handle: dataId,
            name: 'messagesList',
            data: messagesList,
            updatedAt: new Date().toISOString(),
          }); // 更新全局变量
          sampleMessagesData = messagesList;
        }
      }
      // 关闭弹窗
      closeShareArticleModal(); // 关闭文章查看页面
      closeArticlePage(); // 如果用户当前正在查看这个聊天详情页，重新加载页面
      const detailPage = document.getElementById('x-message-detail-page');
      if (detailPage && detailPage.style.display !== 'none') {
        // 检查当前打开的是否是这个联系人的聊天
        const currentConversationId = detailPage.dataset.conversationId;
        if (currentConversationId === contactId) {
          // 重新加载聊天详情页
          const dataId = `messagesList_${currentAccountId || 'main'}`;
          const messageData = await xDb.xAccountProfiles.get(dataId);
          if (messageData && messageData.data) {
            const contact = messageData.data.find(msg => msg.id === contactId);
            if (contact) {
              await loadMessageDetail({
                id: contact.id,
                user: {
                  name: contact.userName,
                  handle: contact.userHandle,
                  avatar: contact.userAvatar,
                },
              });
            }
          }
        }
      }
      // 显示成功提示
      showXToast('文章已转发', 'success');
      console.log('✅ [文章转发] 转发成功');
    } catch (error) {
      console.error('转发文章失败:', error);
      showXToast('转发失败', 'error');
    }
  }; // ============================================
  // 推文/评论转发功能
  // ============================================
  // 当前要转发的内容数据
  let currentShareContentData = null; // 显示转发推文/评论弹窗
  window.showShareContentModal = async function (contentData, contentType) {
    console.log('📤 [内容转发] 准备转发:', contentType, contentData);
    currentShareContentData = { ...contentData, contentType };
    try {
      // 获取私信列表
      const xDb = getXDB();
      const dataId = `messagesList_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(dataId);
      const messagesList = savedData?.data || [];
      if (messagesList.length === 0) {
        showXToast('暂无私信联系人', 'info');
        return;
      }
      // 创建弹窗
      const modal = document.createElement('div');
      modal.id = 'share-content-modal';
      modal.style.cssText = `
 display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: var(--x-modal-overlay); z-index: 22; align-items: center; justify-content: center; backdrop-filter: blur(4px); `; // 根据内容类型生成预览内容
      let previewHTML = '';
      if (contentType === 'tweet') {
        previewHTML = `
 <div style="padding: 12px; background-color:var(--x-bg-secondary); border-radius: 12px; margin-bottom: 16px; border: 1px solid var(--x-border-color); ">
 <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 8px;">
 <img src="${contentData.user.avatar}" style="width: 32px; height: 32px; border-radius: 50%;" alt="${
          contentData.user.name
        }">
 <div>
 <div style="font-size: 14px; font-weight: 600; color:var(--x-text-primary);">${contentData.user.name}</div>
 <div style="font-size: 12px; color:var(--x-text-secondary);">${contentData.user.handle}</div>
 </div>
 </div>
 <div style="font-size: 14px; color:var(--x-text-primary); overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 3; -webkit-box-orient: vertical; line-height: 1.4; ">${
   contentData.content || '无内容'
 }</div>
 </div>
 `;
      } else if (contentType === 'comment') {
        previewHTML = `
 <div style="padding: 12px; background-color:var(--x-bg-secondary); border-radius: 12px; margin-bottom: 16px; border: 1px solid var(--x-border-color); ">
 <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 8px;">
 <img src="${contentData.user.avatar}" style="width: 32px; height: 32px; border-radius: 50%;" alt="${
          contentData.user.name
        }">
 <div>
 <div style="font-size: 14px; font-weight: 600; color:var(--x-text-primary);">${contentData.user.name}</div>
 <div style="font-size: 12px; color:var(--x-text-secondary);">${contentData.user.handle}</div>
 </div>
 </div>
 <div style="font-size: 14px; color:var(--x-text-primary); overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 3; -webkit-box-orient: vertical; line-height: 1.4; ">${
   contentData.content || '无内容'
 }</div>
 </div>
 `;
      }
      modal.innerHTML = `
 <div class="modal-content" onclick="event.stopPropagation()" style="background-color:var(--x-bg-primary); border-radius: 16px; width: 90%; max-width: 500px; max-height: 80vh; overflow: hidden; border: 1px solid var(--x-border-color); display: flex; flex-direction: column; ">

 <div class="modal-header" style="display: flex; align-items: center; justify-content: space-between; padding: 16px 20px; border-bottom: 1px solid var(--x-border-color); background-color:var(--x-bg-primary); ">
 <div style="display: flex; align-items: center; gap: 20px;">

 <div class="modal-close-btn" onclick="closeShareContentModal()" style="cursor: pointer; padding: 8px; border-radius: 50%; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">
 <svg viewBox="0 0 24 24" style="width: 20px; height: 20px; fill: var(--x-text-primary);">
 <g><path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path></g>
 </svg>
 </div>

 <h2 style="color:var(--x-text-primary); font-size: 20px; font-weight: 700; margin: 0; ">转发${
   contentType === 'tweet' ? '推文' : '评论'
 }</h2>
 </div>
 </div>

 <div class="modal-body" style="padding: 16px 20px; overflow-y: auto; flex: 1; ">

 ${previewHTML}

 <div style="margin-bottom: 16px;">
 <label style="display: block; color:var(--x-text-secondary); font-size: 13px; margin-bottom: 8px; ">附加文字（可选）</label>
 <textarea id="share-content-message" placeholder="添加一些说明..." style="width: 100%; min-height: 80px; background-color:var(--x-bg-secondary); border: 1px solid var(--x-border-color); border-radius: 12px; color:var(--x-text-primary); padding: 12px; font-size: 15px; resize: vertical; outline: none; box-sizing: border-box; font-family: inherit; " onfocus="this.style.borderColor='var(--x-accent)'" onblur="this.style.borderColor='var(--x-border-color)'"></textarea>
 </div>

 <div style="color:var(--x-text-secondary); font-size: 13px; margin-bottom: 12px; ">选择要转发到的联系人</div>

 <div id="share-content-contacts-list" style="display: flex; flex-direction: column; gap: 0; ">
 ${messagesList
   .map(
     contact => `
 <div class="contact-select-item" data-contact-id="${contact.id}" onclick="selectContactForContentShare('${contact.id}')" style="display: flex; align-items: center; gap: 12px; padding: 12px; border-radius: 8px; cursor: pointer; transition: background-color 0.2s; " onmouseover="this.style.backgroundColor='var(--x-bg-hover)'"
 onmouseout="this.style.backgroundColor='transparent'">

 <img src="${contact.userAvatar}"
 alt="${contact.userName}"
 style="width: 40px; height: 40px; border-radius: 50%; flex-shrink: 0; object-fit: cover; ">

 <div style="flex: 1; min-width: 0;">
 <div style="font-size: 15px; font-weight: 700; color:var(--x-text-primary); overflow: hidden; text-overflow: ellipsis; white-space: nowrap; ">${contact.userName}</div>
 <div style="font-size: 13px; color:var(--x-text-secondary); overflow: hidden; text-overflow: ellipsis; white-space: nowrap; ">@${contact.userHandle}</div>
 </div>
 </div>
 `,
   )
   .join('')}
 </div>
 </div>
 </div>
 `; // 将弹窗添加到X应用容器内
      const xSocialScreen = document.getElementById('x-social-screen');
      if (xSocialScreen) {
        xSocialScreen.appendChild(modal);
      } else {
        document.body.appendChild(modal);
      }
      // 点击背景关闭弹窗
      modal.addEventListener('click', e => {
        if (e.target === modal) {
          closeShareContentModal();
        }
      });
    } catch (error) {
      console.error('显示转发弹窗失败:', error);
      showXToast('打开转发失败', 'error');
    }
  }; // 关闭转发推文/评论弹窗
  window.closeShareContentModal = function () {
    const modal = document.getElementById('share-content-modal');
    if (modal) {
      modal.remove();
    }
    currentShareContentData = null;
  }; // 选择联系人转发推文/评论
  window.selectContactForContentShare = async function (contactId) {
    if (!currentShareContentData) {
      showXToast('转发数据丢失', 'error');
      return;
    }
    console.log('📤 [内容转发] 转发到联系人:', contactId); // 保存数据的本地副本，因为后续会关闭弹窗并清空 currentShareContentData
    const contentData = { ...currentShareContentData };
    try {
      const xDb = getXDB(); // 获取附加文字
      const messageInput = document.getElementById('share-content-message');
      const additionalMessage = messageInput ? messageInput.value.trim() : ''; // 获取当前时间
      const now = new Date();
      const hours = now.getHours();
      const minutes = String(now.getMinutes()).padStart(2, '0');
      const period = hours >= 12 ? '下午' : '上午';
      const timeStr = `${hours > 12 ? hours - 12 : hours}:${minutes} ${period}`; // 创建转发消息对象
      const forwardMessage = {
        type: 'forward',
        forwardType: contentData.contentType, // 'tweet' 或 'comment'
        forwardContent: {
          user: contentData.user,
          content: contentData.content,
          time: contentData.time,
          image: contentData.image || null,
        },
        // 包含完整上下文信息
        fullContext: {},
        time: timeStr,
        timestamp: now.toISOString(),
        isOwn: true,
      }; // 根据类型添加完整上下文
      if (contentData.contentType === 'tweet') {
        // 转发推文：包含完整推文和所有评论
        forwardMessage.fullContext = {
          tweet: contentData.fullTweet || {
            user: contentData.user,
            content: contentData.content,
            time: contentData.time,
            image: contentData.image,
          },
          comments: contentData.comments || [],
        };
      } else if (contentData.contentType === 'comment') {
        // 转发评论：包含评论和所属推文
        forwardMessage.fullContext = {
          comment: {
            user: contentData.user,
            content: contentData.content,
            time: contentData.time,
            image: contentData.image,
          },
          parentTweet: contentData.parentTweet || null,
        };
      }
      // 读取现有对话数据
      // 🔧 多账户隔离：包含账户ID
      const conversationId = `messageConversation_${currentAccountId || 'main'}_${contactId}`;
      let savedConversation = await xDb.xAccountProfiles.get(conversationId);
      if (!savedConversation) {
        // 创建新的对话记录
        savedConversation = {
          handle: conversationId,
          name: 'messageConversation',
          data: {
            messages: [],
          },
          messageId: contactId,
          accountId: currentAccountId || 'main', // 添加账户ID
          updatedAt: new Date().toISOString(),
        };
      }
      // 确保messages数组存在
      if (!savedConversation.data.messages) {
        savedConversation.data.messages = [];
      }
      // 添加转发消息
      savedConversation.data.messages.push(forwardMessage); // 如果有附加文字，也添加文字消息
      if (additionalMessage) {
        const textMessage = {
          type: 'text',
          content: additionalMessage,
          time: timeStr,
          timestamp: now.toISOString(),
          isOwn: true,
        };
        savedConversation.data.messages.push(textMessage);
      }
      // 标记最后一条消息为等待AI回复
      const lastMessageIndex = savedConversation.data.messages.length - 1;
      if (lastMessageIndex >= 0) {
        savedConversation.data.messages[lastMessageIndex].waitingForAIResponse = true;
      }
      // 保存到数据库
      savedConversation.updatedAt = new Date().toISOString();
      await xDb.xAccountProfiles.put(savedConversation); // 更新私信列表的最后消息和时间
      const dataId = `messagesList_${currentAccountId || 'main'}`;
      const savedData = await xDb.xAccountProfiles.get(dataId);
      if (savedData && savedData.data) {
        const messagesList = savedData.data;
        const contactIndex = messagesList.findIndex(msg => msg.id === contactId);
        if (contactIndex !== -1) {
          messagesList[contactIndex].lastMessage =
            additionalMessage || `[转发了${contentData.contentType === 'tweet' ? '推文' : '评论'}]`;
          messagesList[contactIndex].timestamp = now.toISOString(); // 将该联系人移到列表顶部
          const contact = messagesList.splice(contactIndex, 1)[0];
          messagesList.unshift(contact); // 保存更新后的列表
          await xDb.xAccountProfiles.put({
            handle: dataId,
            name: 'messagesList',
            data: messagesList,
            updatedAt: new Date().toISOString(),
          }); // 更新全局变量
          sampleMessagesData = messagesList;
        }
      }
      // 关闭弹窗
      closeShareContentModal(); // 如果用户当前正在查看这个聊天详情页，重新加载页面
      const detailPage = document.getElementById('x-message-detail-page');
      if (detailPage && detailPage.style.display !== 'none') {
        // 检查当前打开的是否是这个联系人的聊天
        const currentConversationId = detailPage.dataset.conversationId;
        if (currentConversationId === contactId) {
          // 重新加载聊天详情页
          const dataId = `messagesList_${currentAccountId || 'main'}`;
          const messageData = await xDb.xAccountProfiles.get(dataId);
          if (messageData && messageData.data) {
            const contact = messageData.data.find(msg => msg.id === contactId);
            if (contact) {
              await loadMessageDetail({
                id: contact.id,
                user: {
                  name: contact.userName,
                  handle: contact.userHandle,
                  avatar: contact.userAvatar,
                },
              });
            }
          }
        }
      }
      // 显示成功提示
      showXToast(`${contentData.contentType === 'tweet' ? '推文' : '评论'}已转发`, 'success');
      console.log('✅ [内容转发] 转发成功');
    } catch (error) {
      console.error('转发失败:', error);
      showXToast('转发失败', 'error');
    }
  }; // ============================================

  // 第五部分: 暴露全局接口
  // ============================================
  // 将必要的函数暴露到全局作用域
  window.renderXSocialScreenProxy = renderXSocialScreen;
  window.switchXPage = switchXPage;
  window.switchHomeTab = switchHomeTab;
  window.refreshXTweets = refreshXTweets;
  window.showTweetComments = showTweetComments;
  window.submitComment = submitComment;
  window.handleCommentInput = handleCommentInput;
  window.autoResize = autoResize;
  window.showReplyInput = showReplyInput;
  window.cancelReply = cancelReply;
  window.submitReply = submitReply;
  window.handleReplyInput = handleReplyInput;
  window.autoResizeReply = autoResizeReply;
  window.toggleLike = toggleLike;
  window.toggleCommentLike = toggleCommentLike;
  window.deleteUserComment = deleteUserComment;
  window.showSensitiveContent = showSensitiveContent;
  window.handleQuotedTweetClick = handleQuotedTweetClick;
  window.handleQuoteRetweetFromData = handleQuoteRetweetFromData;
  window.openComposeTweetModal = openComposeTweetModal;
  window.closeComposeTweetModal = closeComposeTweetModal;
  window.publishTweet = publishTweet;
  window.handleComposeInput = handleComposeInput;
  window.processHashtagsAndMentions = processHashtagsAndMentions;
  window.toggleImageSection = toggleImageSection;
  window.selectImageMethod = selectImageMethod;
  window.triggerImageUpload = triggerImageUpload;
  window.handleImageUpload = handleImageUpload;
  window.saveImageData = saveImageData;
  window.removeImage = removeImage;
  window.toggleLocationSection = toggleLocationSection;
  window.saveLocationData = saveLocationData;
  window.removeLocation = removeLocation;
  window.toggleLinkSection = toggleLinkSection;
  window.saveLinkData = saveLinkData;
  window.removeLink = removeLink;
  window.triggerLinkImageUpload = triggerLinkImageUpload;
  window.handleLinkImageUpload = handleLinkImageUpload;
  window.removeQuoteContent = removeQuoteContent;
  window.togglePrivacySettings = togglePrivacySettings;
  window.editProfile = editProfile;
  window.openEditProfileModal = openEditProfileModal;
  window.closeEditProfileModal = closeEditProfileModal;
  window.saveProfileChanges = saveProfileChanges;
  window.switchProfileTab = switchProfileTab;
  window.toggleProfileMenu = toggleProfileMenu;
  window.openAccountManager = openAccountManager;
  window.openAccountWallet = openAccountWallet;
  window.closeWalletModal = closeWalletModal;
  window.activateWallet = activateWallet;
  window.addFunds = addFunds;
  window.sendMoney = sendMoney;
  window.shareWallet = shareWallet;
  window.exportWallet = exportWallet;
  window.copyWalletInfo = copyWalletInfo;
  window.updateCharacterCounts = updateCharacterCounts;
  window.toggleRealNameInput = toggleRealNameInput;
  window.updateTag1ColorFromText = updateTag1ColorFromText;
  window.updateTag1ColorFromPicker = updateTag1ColorFromPicker;
  window.updateTag2ColorFromText = updateTag2ColorFromText;
  window.updateTag2ColorFromPicker = updateTag2ColorFromPicker;
  window.editCoverImage = editCoverImage;
  window.removeCoverImage = removeCoverImage;
  window.editAvatarImage = editAvatarImage;
  window.updateVerificationTypeUI = updateVerificationTypeUI;
  window.toggleCharacterBinding = toggleCharacterBinding;
  window.toggleCharacterSelection = toggleCharacterSelection;
  window.openCharacterXProfile = openCharacterXProfile;
  window.closeCharacterXProfileModal = closeCharacterXProfileModal;
  window.saveCharacterXProfile = saveCharacterXProfile;
  window.updateCharacterXAvatar = updateCharacterXAvatar;
  window.updateCharacterBioCount = updateCharacterBioCount;
  window.toggleCharacterRealNameInput = toggleCharacterRealNameInput;
  window.openAddRelationshipModal = openAddRelationshipModal;
  window.editRelationship = editRelationship;
  window.deleteRelationship = deleteRelationship;
  window.closeRelationshipModal = closeRelationshipModal;
  window.updateRelationshipDescCount = updateRelationshipDescCount;
  window.saveRelationshipForm = saveRelationshipForm;
  window.saveXSettings = saveXSettings;
  window.saveXPreset = saveXPreset;
  window.loadXPreset = loadXPreset;
  window.deleteXPreset = deleteXPreset;
  window.exportXData = exportXData;
  window.importXData = importXData;
  window.toggleXTheme = toggleXTheme;
  window.showTweetDetail = showTweetDetail;
  window.handleDetailCommentInput = handleDetailCommentInput;
  window.autoResizeDetail = autoResizeDetail;
  window.submitDetailComment = submitDetailComment;
  window.toggleDetailLike = toggleDetailLike;
  window.rerollAIReplies = rerollAIReplies;
  window.toggleTweetSelection = toggleTweetSelection;
  window.enterMultiSelectMode = enterMultiSelectMode;
  window.exitMultiSelectMode = exitMultiSelectMode;
  window.selectAllTweets = selectAllTweets;
  window.deleteSelectedTweets = deleteSelectedTweets;
  window.showXToast = showXToast;
  window.toggleIdentityCharacter = toggleIdentityCharacter;
  window.closeAccountManager = closeAccountManager;
  window.switchAccount = switchAccount;
  window.createNewAccount = createNewAccount;
  window.deleteAccount = deleteAccount;
  window.triggerCommentImageUpload = triggerCommentImageUpload;
  window.handleCommentImageUpload = handleCommentImageUpload;
  window.removeCommentImage = removeCommentImage;
  window.triggerDetailCommentImageUpload = triggerDetailCommentImageUpload;
  window.handleDetailCommentImageUpload = handleDetailCommentImageUpload;
  window.removeDetailCommentImage = removeDetailCommentImage;
  window.openCommentStickers = openCommentStickers; // 角色关系册相关函数
  window.toggleCharacterRelationship = toggleCharacterRelationship;
  window.openCharacterRelationshipGraph = openCharacterRelationshipGraph;
  window.closeCharacterRelationshipGraph = closeCharacterRelationshipGraph;
  window.addRelationshipLink = addRelationshipLink;
  window.openEditRelationshipDetailModal = openEditRelationshipDetailModal;
  window.closeEditRelationshipDetail = closeEditRelationshipDetail;
  window.saveRelationshipDetail = saveRelationshipDetail;
  window.deleteRelationshipLink = deleteRelationshipLink;
  window.clearAllRelationships = clearAllRelationships;
  window.saveRelationshipGraph = saveRelationshipGraph;
  window.characterRelationshipData = characterRelationshipData; // NPC绑定相关函数
  window.toggleNPCBinding = toggleNPCBinding;
  window.openCreateNPCModal = openCreateNPCModal;
  window.editNPC = editNPC;
  window.saveNPC = saveNPC;
  window.deleteNPC = deleteNPC;
  window.closeNPCEditModal = closeNPCEditModal; // 提问箱相关函数
  window.loadAskboxData = loadAskboxData;
  window.changeAskboxAvatar = changeAskboxAvatar;
  window.saveAskboxNickname = saveAskboxNickname;
  window.saveAskboxPrompt = saveAskboxPrompt;
  window.openAskboxSettings = openAskboxSettings;
  window.getNewQuestion = getNewQuestion;
  window.saveQuestionAnswer = saveQuestionAnswer; // 提问箱多选删除相关函数
  window.startQuestionLongPress = startQuestionLongPress;
  window.endQuestionLongPress = endQuestionLongPress;
  window.toggleQuestionSelection = toggleQuestionSelection;
  window.enterAskboxMultiSelectMode = enterAskboxMultiSelectMode;
  window.exitAskboxMultiSelectMode = exitAskboxMultiSelectMode;
  window.selectAllQuestions = selectAllQuestions;
  window.deleteSelectedQuestions = deleteSelectedQuestions; // 搜索页面相关函数
  window.switchSearchTab = switchSearchTab;
  window.handleTrendingClick = handleTrendingClick;
  window.handleTrendingMore = handleTrendingMore;
  window.openAddCategoryModal = openAddCategoryModal;
  window.closeCategoryModal = closeCategoryModal;
  window.addNewCategory = addNewCategory;
  window.deleteCategory = deleteCategory;
  window.toggleCategory = toggleCategory;
  window.updateCategoryName = updateCategoryName;
  window.updateCategoryDescription = updateCategoryDescription;
  window.saveCustomCategories = saveCustomCategories;
  window.refreshTrends = refreshTrends;
  window.toggleSearchButton = toggleSearchButton;
  window.performSearch = performSearch;
  window.switchSearchResultTab = switchSearchResultTab;
  window.backToTrending = backToTrending; // 账户主页相关函数
  window.openAccountProfile = openAccountProfile;
  window.closeAccountProfile = closeAccountProfile;
  window.showAccountTweetDetail = showAccountTweetDetail;
  window.toggleAccountFollow = toggleAccountFollow;
  window.toggleAccountNotifications = toggleAccountNotifications;
  window.sendMessageToAccount = sendMessageToAccount;
  window.switchAccountTab = switchAccountTab;
  window.refreshAccountProfile = refreshAccountProfile;
  window.toggleProgressMode = toggleProgressMode;
  window.handleRefreshButtonMouseDown = handleRefreshButtonMouseDown;
  window.handleRefreshButtonMouseUp = handleRefreshButtonMouseUp;
  window.goBackFromTweetDetail = goBackFromTweetDetail; // 主题切换相关函数
  window.toggleXTheme = toggleXTheme; // 语言切换相关函数
  window.toggleXLanguage = toggleXLanguage;
  // 直播相关函数
  window.switchLiveTab = switchLiveTab;
  window.joinLiveStream = joinLiveStream;
  window.initLivePage = initLivePage;
  window.renderLiveStreams = renderLiveStreams;
  // 直播自定义分类函数
  window.openLiveCategoryModal = openLiveCategoryModal;
  window.closeLiveCategoryModal = closeLiveCategoryModal;
  window.addNewLiveCategory = addNewLiveCategory;
  window.deleteLiveCategory = deleteLiveCategory;
  window.toggleLiveCategory = toggleLiveCategory;
  window.updateLiveCategoryName = updateLiveCategoryName;
  window.updateLiveCategoryDescription = updateLiveCategoryDescription;
  window.saveLiveCustomCategories = saveLiveCustomCategories;
  window.syncLivePageAvatar = syncLivePageAvatar;
  // 直播收纳按钮功能函数
  window.toggleLiveActionButtons = toggleLiveActionButtons;
  window.refreshLiveStreams = refreshLiveStreams;
  window.startLiveStream = startLiveStream;
  window.syncLiveCharacterAvatars = syncLiveCharacterAvatars;
  window.handleLiveCharacterClick = handleLiveCharacterClick;
  window.loadSavedLiveData = loadSavedLiveData;
  window.loadLiveCharacterStatus = loadLiveCharacterStatus;
  window.saveLiveCharacterStatus = saveLiveCharacterStatus;
  // 直播按钮事件处理函数
  window.handleLiveMainBtnMouseOver = handleLiveMainBtnMouseOver;
  window.handleLiveMainBtnMouseOut = handleLiveMainBtnMouseOut;
  window.handleLiveMainBtnTouchStart = handleLiveMainBtnTouchStart;
  window.handleLiveMainBtnTouchEnd = handleLiveMainBtnTouchEnd;
  window.handleLiveSubBtnMouseOver = handleLiveSubBtnMouseOver;
  window.handleLiveSubBtnMouseOut = handleLiveSubBtnMouseOut;
  window.handleLiveSubBtnTouchStart = handleLiveSubBtnTouchStart;
  window.handleLiveSubBtnTouchEnd = handleLiveSubBtnTouchEnd;
  // 直播按钮状态变量
  if (typeof window.liveBtnExpanded === 'undefined') {
    window.liveBtnExpanded = false;
  }
  // 创建 XSocialApp 对象以兼容HTML检查
  window.XSocialApp = {
    init: initXSocialApp,
    render: renderXSocialScreen,
    version: '1.0',
    isLoaded: true,
  }; // 自动初始化（如果DOM已加载）
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initXSocialApp);
  } else {
    // 延迟初始化，确保其他脚本先加载
    setTimeout(initXSocialApp, 100);
  }
  console.log('📦 X Social App 模块已加载，版本: 1.0');
  // 清空当前账户的钱包数据（调试用）
  window.clearCurrentWalletData = async function () {
    try {
      const db = getXDB();
      const accountId = currentAccountId || 'main';
      const walletId = `wallet_${accountId}`; // 删除钱包数据
      await db.xAccountProfiles.delete(walletId); // 重新加载空的钱包数据
      await loadWalletData();
      console.log('✅ 已清空账户钱包数据:', accountId);
      showXToast('钱包数据已清空', 'success');
    } catch (error) {
      console.error('❌ 清空钱包数据失败:', error);
      showXToast('清空失败: ' + error.message, 'error');
    }
  };
})(window); // ==========================================
// 使用说明:

// 1. 在HTML中引入此文件:
// <script src="x-social-app.js" defer></script>

// 2. 系统会自动初始化,创建X社交页面HTML结构

// 3. 通过以下方式调用:
// - 显示X社交页面: showScreen('x-social-screen')
// - 渲染代理: window.renderXSocialScreenProxy()

// 4. 需要的依赖:
// - Dexie.js (数据库)
// - 确保有 showScreen() 全局函数
